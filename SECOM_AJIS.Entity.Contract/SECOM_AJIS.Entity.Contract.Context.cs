//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Contract
{
    public partial class CTDataEntities : ObjectContext
    {
        public const string ConnectionString = "name=CTDataEntities";
        public const string ContainerName = "CTDataEntities";
    
        #region Constructors
    
        public CTDataEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public CTDataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public CTDataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<tbt_RentalBEDetails> tbt_RentalBEDetails
        {
            get { return _tbt_RentalBEDetails  ?? (_tbt_RentalBEDetails = CreateObjectSet<tbt_RentalBEDetails>("tbt_RentalBEDetails")); }
        }
        private ObjectSet<tbt_RentalBEDetails> _tbt_RentalBEDetails;
    
        public ObjectSet<tbt_RentalInstrumentDetails> tbt_RentalInstrumentDetails
        {
            get { return _tbt_RentalInstrumentDetails  ?? (_tbt_RentalInstrumentDetails = CreateObjectSet<tbt_RentalInstrumentDetails>("tbt_RentalInstrumentDetails")); }
        }
        private ObjectSet<tbt_RentalInstrumentDetails> _tbt_RentalInstrumentDetails;
    
        public ObjectSet<tbt_RentalMaintenanceDetails> tbt_RentalMaintenanceDetails
        {
            get { return _tbt_RentalMaintenanceDetails  ?? (_tbt_RentalMaintenanceDetails = CreateObjectSet<tbt_RentalMaintenanceDetails>("tbt_RentalMaintenanceDetails")); }
        }
        private ObjectSet<tbt_RentalMaintenanceDetails> _tbt_RentalMaintenanceDetails;
    
        public ObjectSet<tbt_RentalOperationType> tbt_RentalOperationType
        {
            get { return _tbt_RentalOperationType  ?? (_tbt_RentalOperationType = CreateObjectSet<tbt_RentalOperationType>("tbt_RentalOperationType")); }
        }
        private ObjectSet<tbt_RentalOperationType> _tbt_RentalOperationType;
    
        public ObjectSet<tbt_RentalSecurityBasic> tbt_RentalSecurityBasic
        {
            get { return _tbt_RentalSecurityBasic  ?? (_tbt_RentalSecurityBasic = CreateObjectSet<tbt_RentalSecurityBasic>("tbt_RentalSecurityBasic")); }
        }
        private ObjectSet<tbt_RentalSecurityBasic> _tbt_RentalSecurityBasic;
    
        public ObjectSet<tbt_RentalSentryGuard> tbt_RentalSentryGuard
        {
            get { return _tbt_RentalSentryGuard  ?? (_tbt_RentalSentryGuard = CreateObjectSet<tbt_RentalSentryGuard>("tbt_RentalSentryGuard")); }
        }
        private ObjectSet<tbt_RentalSentryGuard> _tbt_RentalSentryGuard;
    
        public ObjectSet<tbt_RentalSentryGuardDetails> tbt_RentalSentryGuardDetails
        {
            get { return _tbt_RentalSentryGuardDetails  ?? (_tbt_RentalSentryGuardDetails = CreateObjectSet<tbt_RentalSentryGuardDetails>("tbt_RentalSentryGuardDetails")); }
        }
        private ObjectSet<tbt_RentalSentryGuardDetails> _tbt_RentalSentryGuardDetails;
    
        public ObjectSet<tbt_CancelContractMemoDetail> tbt_CancelContractMemoDetail
        {
            get { return _tbt_CancelContractMemoDetail  ?? (_tbt_CancelContractMemoDetail = CreateObjectSet<tbt_CancelContractMemoDetail>("tbt_CancelContractMemoDetail")); }
        }
        private ObjectSet<tbt_CancelContractMemoDetail> _tbt_CancelContractMemoDetail;
    
        public ObjectSet<tbt_RentalInstSubcontractor> tbt_RentalInstSubcontractor
        {
            get { return _tbt_RentalInstSubcontractor  ?? (_tbt_RentalInstSubcontractor = CreateObjectSet<tbt_RentalInstSubcontractor>("tbt_RentalInstSubcontractor")); }
        }
        private ObjectSet<tbt_RentalInstSubcontractor> _tbt_RentalInstSubcontractor;
    
        public ObjectSet<tbt_CancelContractMemo> tbt_CancelContractMemo
        {
            get { return _tbt_CancelContractMemo  ?? (_tbt_CancelContractMemo = CreateObjectSet<tbt_CancelContractMemo>("tbt_CancelContractMemo")); }
        }
        private ObjectSet<tbt_CancelContractMemo> _tbt_CancelContractMemo;
    
        public ObjectSet<tbt_RelationType> tbt_RelationType
        {
            get { return _tbt_RelationType  ?? (_tbt_RelationType = CreateObjectSet<tbt_RelationType>("tbt_RelationType")); }
        }
        private ObjectSet<tbt_RelationType> _tbt_RelationType;
    
        public ObjectSet<tbt_BillingTemp> tbt_BillingTemp
        {
            get { return _tbt_BillingTemp  ?? (_tbt_BillingTemp = CreateObjectSet<tbt_BillingTemp>("tbt_BillingTemp")); }
        }
        private ObjectSet<tbt_BillingTemp> _tbt_BillingTemp;
    
        public ObjectSet<tbt_Project> tbt_Project
        {
            get { return _tbt_Project  ?? (_tbt_Project = CreateObjectSet<tbt_Project>("tbt_Project")); }
        }
        private ObjectSet<tbt_Project> _tbt_Project;
    
        public ObjectSet<tbt_RentalContractBasic> tbt_RentalContractBasic
        {
            get { return _tbt_RentalContractBasic  ?? (_tbt_RentalContractBasic = CreateObjectSet<tbt_RentalContractBasic>("tbt_RentalContractBasic")); }
        }
        private ObjectSet<tbt_RentalContractBasic> _tbt_RentalContractBasic;
    
        public ObjectSet<tbt_SaleBasic> tbt_SaleBasic
        {
            get { return _tbt_SaleBasic  ?? (_tbt_SaleBasic = CreateObjectSet<tbt_SaleBasic>("tbt_SaleBasic")); }
        }
        private ObjectSet<tbt_SaleBasic> _tbt_SaleBasic;
    
        public ObjectSet<tbt_SaleInstrumentDetails> tbt_SaleInstrumentDetails
        {
            get { return _tbt_SaleInstrumentDetails  ?? (_tbt_SaleInstrumentDetails = CreateObjectSet<tbt_SaleInstrumentDetails>("tbt_SaleInstrumentDetails")); }
        }
        private ObjectSet<tbt_SaleInstrumentDetails> _tbt_SaleInstrumentDetails;
    
        public ObjectSet<tbt_SaleInstSubcontractor> tbt_SaleInstSubcontractor
        {
            get { return _tbt_SaleInstSubcontractor  ?? (_tbt_SaleInstSubcontractor = CreateObjectSet<tbt_SaleInstSubcontractor>("tbt_SaleInstSubcontractor")); }
        }
        private ObjectSet<tbt_SaleInstSubcontractor> _tbt_SaleInstSubcontractor;
    
        public ObjectSet<tbt_ContractEmail> tbt_ContractEmail
        {
            get { return _tbt_ContractEmail  ?? (_tbt_ContractEmail = CreateObjectSet<tbt_ContractEmail>("tbt_ContractEmail")); }
        }
        private ObjectSet<tbt_ContractEmail> _tbt_ContractEmail;
    
        public ObjectSet<tbt_MaintenanceCheckup> tbt_MaintenanceCheckup
        {
            get { return _tbt_MaintenanceCheckup  ?? (_tbt_MaintenanceCheckup = CreateObjectSet<tbt_MaintenanceCheckup>("tbt_MaintenanceCheckup")); }
        }
        private ObjectSet<tbt_MaintenanceCheckup> _tbt_MaintenanceCheckup;
    
        public ObjectSet<tbt_MaintenanceCheckupDetails> tbt_MaintenanceCheckupDetails
        {
            get { return _tbt_MaintenanceCheckupDetails  ?? (_tbt_MaintenanceCheckupDetails = CreateObjectSet<tbt_MaintenanceCheckupDetails>("tbt_MaintenanceCheckupDetails")); }
        }
        private ObjectSet<tbt_MaintenanceCheckupDetails> _tbt_MaintenanceCheckupDetails;
    
        public ObjectSet<tbm_SubContractor> tbm_SubContractor
        {
            get { return _tbm_SubContractor  ?? (_tbm_SubContractor = CreateObjectSet<tbm_SubContractor>("tbm_SubContractor")); }
        }
        private ObjectSet<tbm_SubContractor> _tbm_SubContractor;
    
        public ObjectSet<tbt_DraftRentalBillingTarget> tbt_DraftRentalBillingTarget
        {
            get { return _tbt_DraftRentalBillingTarget  ?? (_tbt_DraftRentalBillingTarget = CreateObjectSet<tbt_DraftRentalBillingTarget>("tbt_DraftRentalBillingTarget")); }
        }
        private ObjectSet<tbt_DraftRentalBillingTarget> _tbt_DraftRentalBillingTarget;
    
        public ObjectSet<tbt_DraftRentalContract> tbt_DraftRentalContract
        {
            get { return _tbt_DraftRentalContract  ?? (_tbt_DraftRentalContract = CreateObjectSet<tbt_DraftRentalContract>("tbt_DraftRentalContract")); }
        }
        private ObjectSet<tbt_DraftRentalContract> _tbt_DraftRentalContract;
    
        public ObjectSet<tbt_DraftRentalEmail> tbt_DraftRentalEmail
        {
            get { return _tbt_DraftRentalEmail  ?? (_tbt_DraftRentalEmail = CreateObjectSet<tbt_DraftRentalEmail>("tbt_DraftRentalEmail")); }
        }
        private ObjectSet<tbt_DraftRentalEmail> _tbt_DraftRentalEmail;
    
        public ObjectSet<tbt_DraftRentalInstrument> tbt_DraftRentalInstrument
        {
            get { return _tbt_DraftRentalInstrument  ?? (_tbt_DraftRentalInstrument = CreateObjectSet<tbt_DraftRentalInstrument>("tbt_DraftRentalInstrument")); }
        }
        private ObjectSet<tbt_DraftRentalInstrument> _tbt_DraftRentalInstrument;
    
        public ObjectSet<tbt_DraftRentalMaintenanceDetails> tbt_DraftRentalMaintenanceDetails
        {
            get { return _tbt_DraftRentalMaintenanceDetails  ?? (_tbt_DraftRentalMaintenanceDetails = CreateObjectSet<tbt_DraftRentalMaintenanceDetails>("tbt_DraftRentalMaintenanceDetails")); }
        }
        private ObjectSet<tbt_DraftRentalMaintenanceDetails> _tbt_DraftRentalMaintenanceDetails;
    
        public ObjectSet<tbt_DraftRentalOperationType> tbt_DraftRentalOperationType
        {
            get { return _tbt_DraftRentalOperationType  ?? (_tbt_DraftRentalOperationType = CreateObjectSet<tbt_DraftRentalOperationType>("tbt_DraftRentalOperationType")); }
        }
        private ObjectSet<tbt_DraftRentalOperationType> _tbt_DraftRentalOperationType;
    
        public ObjectSet<tbt_DraftSaleContract> tbt_DraftSaleContract
        {
            get { return _tbt_DraftSaleContract  ?? (_tbt_DraftSaleContract = CreateObjectSet<tbt_DraftSaleContract>("tbt_DraftSaleContract")); }
        }
        private ObjectSet<tbt_DraftSaleContract> _tbt_DraftSaleContract;
    
        public ObjectSet<tbs_ARPermissionConfiguration> tbs_ARPermissionConfiguration
        {
            get { return _tbs_ARPermissionConfiguration  ?? (_tbs_ARPermissionConfiguration = CreateObjectSet<tbs_ARPermissionConfiguration>("tbs_ARPermissionConfiguration")); }
        }
        private ObjectSet<tbs_ARPermissionConfiguration> _tbs_ARPermissionConfiguration;
    
        public ObjectSet<tbt_IncidentRole> tbt_IncidentRole
        {
            get { return _tbt_IncidentRole  ?? (_tbt_IncidentRole = CreateObjectSet<tbt_IncidentRole>("tbt_IncidentRole")); }
        }
        private ObjectSet<tbt_IncidentRole> _tbt_IncidentRole;
    
        public ObjectSet<tbs_IncidentPermissionConfiguration> tbs_IncidentPermissionConfiguration
        {
            get { return _tbs_IncidentPermissionConfiguration  ?? (_tbs_IncidentPermissionConfiguration = CreateObjectSet<tbs_IncidentPermissionConfiguration>("tbs_IncidentPermissionConfiguration")); }
        }
        private ObjectSet<tbs_IncidentPermissionConfiguration> _tbs_IncidentPermissionConfiguration;
    
        public ObjectSet<tbt_DraftRentalBEDetails> tbt_DraftRentalBEDetails
        {
            get { return _tbt_DraftRentalBEDetails  ?? (_tbt_DraftRentalBEDetails = CreateObjectSet<tbt_DraftRentalBEDetails>("tbt_DraftRentalBEDetails")); }
        }
        private ObjectSet<tbt_DraftRentalBEDetails> _tbt_DraftRentalBEDetails;
    
        public ObjectSet<tbt_DraftRentalSentryGuard> tbt_DraftRentalSentryGuard
        {
            get { return _tbt_DraftRentalSentryGuard  ?? (_tbt_DraftRentalSentryGuard = CreateObjectSet<tbt_DraftRentalSentryGuard>("tbt_DraftRentalSentryGuard")); }
        }
        private ObjectSet<tbt_DraftRentalSentryGuard> _tbt_DraftRentalSentryGuard;
    
        public ObjectSet<tbt_DraftRentalSentryGuardDetails> tbt_DraftRentalSentryGuardDetails
        {
            get { return _tbt_DraftRentalSentryGuardDetails  ?? (_tbt_DraftRentalSentryGuardDetails = CreateObjectSet<tbt_DraftRentalSentryGuardDetails>("tbt_DraftRentalSentryGuardDetails")); }
        }
        private ObjectSet<tbt_DraftRentalSentryGuardDetails> _tbt_DraftRentalSentryGuardDetails;
    
        public ObjectSet<tbt_ProjectExpectedInstrumentDetails> tbt_ProjectExpectedInstrumentDetails
        {
            get { return _tbt_ProjectExpectedInstrumentDetails  ?? (_tbt_ProjectExpectedInstrumentDetails = CreateObjectSet<tbt_ProjectExpectedInstrumentDetails>("tbt_ProjectExpectedInstrumentDetails")); }
        }
        private ObjectSet<tbt_ProjectExpectedInstrumentDetails> _tbt_ProjectExpectedInstrumentDetails;
    
        public ObjectSet<tbt_ProjectOtherRalatedCompany> tbt_ProjectOtherRalatedCompany
        {
            get { return _tbt_ProjectOtherRalatedCompany  ?? (_tbt_ProjectOtherRalatedCompany = CreateObjectSet<tbt_ProjectOtherRalatedCompany>("tbt_ProjectOtherRalatedCompany")); }
        }
        private ObjectSet<tbt_ProjectOtherRalatedCompany> _tbt_ProjectOtherRalatedCompany;
    
        public ObjectSet<tbt_ProjectPurchaserCustomer> tbt_ProjectPurchaserCustomer
        {
            get { return _tbt_ProjectPurchaserCustomer  ?? (_tbt_ProjectPurchaserCustomer = CreateObjectSet<tbt_ProjectPurchaserCustomer>("tbt_ProjectPurchaserCustomer")); }
        }
        private ObjectSet<tbt_ProjectPurchaserCustomer> _tbt_ProjectPurchaserCustomer;
    
        public ObjectSet<tbt_ProjectSupportStaffDetails> tbt_ProjectSupportStaffDetails
        {
            get { return _tbt_ProjectSupportStaffDetails  ?? (_tbt_ProjectSupportStaffDetails = CreateObjectSet<tbt_ProjectSupportStaffDetails>("tbt_ProjectSupportStaffDetails")); }
        }
        private ObjectSet<tbt_ProjectSupportStaffDetails> _tbt_ProjectSupportStaffDetails;
    
        public ObjectSet<tbt_ProjectSystemDetails> tbt_ProjectSystemDetails
        {
            get { return _tbt_ProjectSystemDetails  ?? (_tbt_ProjectSystemDetails = CreateObjectSet<tbt_ProjectSystemDetails>("tbt_ProjectSystemDetails")); }
        }
        private ObjectSet<tbt_ProjectSystemDetails> _tbt_ProjectSystemDetails;
    
        public ObjectSet<tbs_ContractDocTemplate> tbs_ContractDocTemplate
        {
            get { return _tbs_ContractDocTemplate  ?? (_tbs_ContractDocTemplate = CreateObjectSet<tbs_ContractDocTemplate>("tbs_ContractDocTemplate")); }
        }
        private ObjectSet<tbs_ContractDocTemplate> _tbs_ContractDocTemplate;
    
        public ObjectSet<tbt_DocCancelContractMemo> tbt_DocCancelContractMemo
        {
            get { return _tbt_DocCancelContractMemo  ?? (_tbt_DocCancelContractMemo = CreateObjectSet<tbt_DocCancelContractMemo>("tbt_DocCancelContractMemo")); }
        }
        private ObjectSet<tbt_DocCancelContractMemo> _tbt_DocCancelContractMemo;
    
        public ObjectSet<tbt_DocCancelContractMemoDetail> tbt_DocCancelContractMemoDetail
        {
            get { return _tbt_DocCancelContractMemoDetail  ?? (_tbt_DocCancelContractMemoDetail = CreateObjectSet<tbt_DocCancelContractMemoDetail>("tbt_DocCancelContractMemoDetail")); }
        }
        private ObjectSet<tbt_DocCancelContractMemoDetail> _tbt_DocCancelContractMemoDetail;
    
        public ObjectSet<tbt_ContractDocument> tbt_ContractDocument
        {
            get { return _tbt_ContractDocument  ?? (_tbt_ContractDocument = CreateObjectSet<tbt_ContractDocument>("tbt_ContractDocument")); }
        }
        private ObjectSet<tbt_ContractDocument> _tbt_ContractDocument;
    
        public ObjectSet<tbt_DocChangeFeeMemo> tbt_DocChangeFeeMemo
        {
            get { return _tbt_DocChangeFeeMemo  ?? (_tbt_DocChangeFeeMemo = CreateObjectSet<tbt_DocChangeFeeMemo>("tbt_DocChangeFeeMemo")); }
        }
        private ObjectSet<tbt_DocChangeFeeMemo> _tbt_DocChangeFeeMemo;
    
        public ObjectSet<tbt_DocChangeMemo> tbt_DocChangeMemo
        {
            get { return _tbt_DocChangeMemo  ?? (_tbt_DocChangeMemo = CreateObjectSet<tbt_DocChangeMemo>("tbt_DocChangeMemo")); }
        }
        private ObjectSet<tbt_DocChangeMemo> _tbt_DocChangeMemo;
    
        public ObjectSet<tbt_DocChangeNotice> tbt_DocChangeNotice
        {
            get { return _tbt_DocChangeNotice  ?? (_tbt_DocChangeNotice = CreateObjectSet<tbt_DocChangeNotice>("tbt_DocChangeNotice")); }
        }
        private ObjectSet<tbt_DocChangeNotice> _tbt_DocChangeNotice;
    
        public ObjectSet<tbt_DocConfirmCurrentInstrumentMemo> tbt_DocConfirmCurrentInstrumentMemo
        {
            get { return _tbt_DocConfirmCurrentInstrumentMemo  ?? (_tbt_DocConfirmCurrentInstrumentMemo = CreateObjectSet<tbt_DocConfirmCurrentInstrumentMemo>("tbt_DocConfirmCurrentInstrumentMemo")); }
        }
        private ObjectSet<tbt_DocConfirmCurrentInstrumentMemo> _tbt_DocConfirmCurrentInstrumentMemo;
    
        public ObjectSet<tbt_DocContractReport> tbt_DocContractReport
        {
            get { return _tbt_DocContractReport  ?? (_tbt_DocContractReport = CreateObjectSet<tbt_DocContractReport>("tbt_DocContractReport")); }
        }
        private ObjectSet<tbt_DocContractReport> _tbt_DocContractReport;
    
        public ObjectSet<tbt_DocInstrumentDetails> tbt_DocInstrumentDetails
        {
            get { return _tbt_DocInstrumentDetails  ?? (_tbt_DocInstrumentDetails = CreateObjectSet<tbt_DocInstrumentDetails>("tbt_DocInstrumentDetails")); }
        }
        private ObjectSet<tbt_DocInstrumentDetails> _tbt_DocInstrumentDetails;
    
        public ObjectSet<tbt_DraftSaleBillingTarget> tbt_DraftSaleBillingTarget
        {
            get { return _tbt_DraftSaleBillingTarget  ?? (_tbt_DraftSaleBillingTarget = CreateObjectSet<tbt_DraftSaleBillingTarget>("tbt_DraftSaleBillingTarget")); }
        }
        private ObjectSet<tbt_DraftSaleBillingTarget> _tbt_DraftSaleBillingTarget;
    
        public ObjectSet<tbt_DraftSaleEmail> tbt_DraftSaleEmail
        {
            get { return _tbt_DraftSaleEmail  ?? (_tbt_DraftSaleEmail = CreateObjectSet<tbt_DraftSaleEmail>("tbt_DraftSaleEmail")); }
        }
        private ObjectSet<tbt_DraftSaleEmail> _tbt_DraftSaleEmail;
    
        public ObjectSet<tbt_DraftSaleInstrument> tbt_DraftSaleInstrument
        {
            get { return _tbt_DraftSaleInstrument  ?? (_tbt_DraftSaleInstrument = CreateObjectSet<tbt_DraftSaleInstrument>("tbt_DraftSaleInstrument")); }
        }
        private ObjectSet<tbt_DraftSaleInstrument> _tbt_DraftSaleInstrument;
    
        public ObjectSet<tbt_ProjectStockoutBranchIntrumentDetails> tbt_ProjectStockoutBranchIntrumentDetails
        {
            get { return _tbt_ProjectStockoutBranchIntrumentDetails  ?? (_tbt_ProjectStockoutBranchIntrumentDetails = CreateObjectSet<tbt_ProjectStockoutBranchIntrumentDetails>("tbt_ProjectStockoutBranchIntrumentDetails")); }
        }
        private ObjectSet<tbt_ProjectStockoutBranchIntrumentDetails> _tbt_ProjectStockoutBranchIntrumentDetails;
    
        public ObjectSet<tbt_ProjectStockoutInstrument1> tbt_ProjectStockoutInstrument1
        {
            get { return _tbt_ProjectStockoutInstrument1  ?? (_tbt_ProjectStockoutInstrument1 = CreateObjectSet<tbt_ProjectStockoutInstrument1>("tbt_ProjectStockoutInstrument1")); }
        }
        private ObjectSet<tbt_ProjectStockoutInstrument1> _tbt_ProjectStockoutInstrument1;
    
        public ObjectSet<tbt_Incident> tbt_Incident
        {
            get { return _tbt_Incident  ?? (_tbt_Incident = CreateObjectSet<tbt_Incident>("tbt_Incident")); }
        }
        private ObjectSet<tbt_Incident> _tbt_Incident;
    
        public ObjectSet<tbt_IncidentHistory> tbt_IncidentHistory
        {
            get { return _tbt_IncidentHistory  ?? (_tbt_IncidentHistory = CreateObjectSet<tbt_IncidentHistory>("tbt_IncidentHistory")); }
        }
        private ObjectSet<tbt_IncidentHistory> _tbt_IncidentHistory;
    
        public ObjectSet<tbt_IncidentHistoryDetail> tbt_IncidentHistoryDetail
        {
            get { return _tbt_IncidentHistoryDetail  ?? (_tbt_IncidentHistoryDetail = CreateObjectSet<tbt_IncidentHistoryDetail>("tbt_IncidentHistoryDetail")); }
        }
        private ObjectSet<tbt_IncidentHistoryDetail> _tbt_IncidentHistoryDetail;
    
        public ObjectSet<tbs_ARTypeTitle> tbs_ARTypeTitle
        {
            get { return _tbs_ARTypeTitle  ?? (_tbs_ARTypeTitle = CreateObjectSet<tbs_ARTypeTitle>("tbs_ARTypeTitle")); }
        }
        private ObjectSet<tbs_ARTypeTitle> _tbs_ARTypeTitle;
    
        public ObjectSet<tbs_ARTypePattern> tbs_ARTypePattern
        {
            get { return _tbs_ARTypePattern  ?? (_tbs_ARTypePattern = CreateObjectSet<tbs_ARTypePattern>("tbs_ARTypePattern")); }
        }
        private ObjectSet<tbs_ARTypePattern> _tbs_ARTypePattern;
    
        public ObjectSet<tbt_AR> tbt_AR
        {
            get { return _tbt_AR  ?? (_tbt_AR = CreateObjectSet<tbt_AR>("tbt_AR")); }
        }
        private ObjectSet<tbt_AR> _tbt_AR;
    
        public ObjectSet<tbt_ARFeeAdjustment> tbt_ARFeeAdjustment
        {
            get { return _tbt_ARFeeAdjustment  ?? (_tbt_ARFeeAdjustment = CreateObjectSet<tbt_ARFeeAdjustment>("tbt_ARFeeAdjustment")); }
        }
        private ObjectSet<tbt_ARFeeAdjustment> _tbt_ARFeeAdjustment;
    
        public ObjectSet<tbt_ARRole> tbt_ARRole
        {
            get { return _tbt_ARRole  ?? (_tbt_ARRole = CreateObjectSet<tbt_ARRole>("tbt_ARRole")); }
        }
        private ObjectSet<tbt_ARRole> _tbt_ARRole;
    
        public ObjectSet<tbt_ARHistory> tbt_ARHistory
        {
            get { return _tbt_ARHistory  ?? (_tbt_ARHistory = CreateObjectSet<tbt_ARHistory>("tbt_ARHistory")); }
        }
        private ObjectSet<tbt_ARHistory> _tbt_ARHistory;
    
        public ObjectSet<tbt_ARHistoryDetail> tbt_ARHistoryDetail
        {
            get { return _tbt_ARHistoryDetail  ?? (_tbt_ARHistoryDetail = CreateObjectSet<tbt_ARHistoryDetail>("tbt_ARHistoryDetail")); }
        }
        private ObjectSet<tbt_ARHistoryDetail> _tbt_ARHistoryDetail;
    
        public ObjectSet<tbs_IncidentReasonType> tbs_IncidentReasonType
        {
            get { return _tbs_IncidentReasonType  ?? (_tbs_IncidentReasonType = CreateObjectSet<tbs_IncidentReasonType>("tbs_IncidentReasonType")); }
        }
        private ObjectSet<tbs_IncidentReasonType> _tbs_IncidentReasonType;
    
        public ObjectSet<tbt_ContractCustomerHistory> tbt_ContractCustomerHistory
        {
            get { return _tbt_ContractCustomerHistory  ?? (_tbt_ContractCustomerHistory = CreateObjectSet<tbt_ContractCustomerHistory>("tbt_ContractCustomerHistory")); }
        }
        private ObjectSet<tbt_ContractCustomerHistory> _tbt_ContractCustomerHistory;
    
        public ObjectSet<tbt_ProjectStockOutMemo> tbt_ProjectStockOutMemo
        {
            get { return _tbt_ProjectStockOutMemo  ?? (_tbt_ProjectStockOutMemo = CreateObjectSet<tbt_ProjectStockOutMemo>("tbt_ProjectStockOutMemo")); }
        }
        private ObjectSet<tbt_ProjectStockOutMemo> _tbt_ProjectStockOutMemo;
    
        public ObjectSet<tbs_ARApproveNoRunningNo> tbs_ARApproveNoRunningNo
        {
            get { return _tbs_ARApproveNoRunningNo  ?? (_tbs_ARApproveNoRunningNo = CreateObjectSet<tbs_ARApproveNoRunningNo>("tbs_ARApproveNoRunningNo")); }
        }
        private ObjectSet<tbs_ARApproveNoRunningNo> _tbs_ARApproveNoRunningNo;
    
        public ObjectSet<tbs_ARRunningNo> tbs_ARRunningNo
        {
            get { return _tbs_ARRunningNo  ?? (_tbs_ARRunningNo = CreateObjectSet<tbs_ARRunningNo>("tbs_ARRunningNo")); }
        }
        private ObjectSet<tbs_ARRunningNo> _tbs_ARRunningNo;
    
        public ObjectSet<tbs_IncidentRunningNo> tbs_IncidentRunningNo
        {
            get { return _tbs_IncidentRunningNo  ?? (_tbs_IncidentRunningNo = CreateObjectSet<tbs_IncidentRunningNo>("tbs_IncidentRunningNo")); }
        }
        private ObjectSet<tbs_IncidentRunningNo> _tbs_IncidentRunningNo;
    
        public ObjectSet<tbt_DocStartMemo> tbt_DocStartMemo
        {
            get { return _tbt_DocStartMemo  ?? (_tbt_DocStartMemo = CreateObjectSet<tbt_DocStartMemo>("tbt_DocStartMemo")); }
        }
        private ObjectSet<tbt_DocStartMemo> _tbt_DocStartMemo;

        #endregion

        #region Function Imports
        public ObjectResult<dtContractData> GetContractDataForSearch(string pchrCustomerCode, string pchvnCustomerName, string pchvBranchName, string pchvnAddress, string pchvnAlley, string pchvnRoad, string pchvnSubDistrict, string pchrProvinceCode, string pchrDistrictCode, string pchrZipCode, string pchvSALE_CHANGE_TYPE_NEW_SALE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter pchrCustomerCodeParameter;
    
            if (pchrCustomerCode != null)
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", pchrCustomerCode);
            }
            else
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", typeof(string));
            }
    
            ObjectParameter pchvnCustomerNameParameter;
    
            if (pchvnCustomerName != null)
            {
                pchvnCustomerNameParameter = new ObjectParameter("pchvnCustomerName", pchvnCustomerName);
            }
            else
            {
                pchvnCustomerNameParameter = new ObjectParameter("pchvnCustomerName", typeof(string));
            }
    
            ObjectParameter pchvBranchNameParameter;
    
            if (pchvBranchName != null)
            {
                pchvBranchNameParameter = new ObjectParameter("pchvBranchName", pchvBranchName);
            }
            else
            {
                pchvBranchNameParameter = new ObjectParameter("pchvBranchName", typeof(string));
            }
    
            ObjectParameter pchvnAddressParameter;
    
            if (pchvnAddress != null)
            {
                pchvnAddressParameter = new ObjectParameter("pchvnAddress", pchvnAddress);
            }
            else
            {
                pchvnAddressParameter = new ObjectParameter("pchvnAddress", typeof(string));
            }
    
            ObjectParameter pchvnAlleyParameter;
    
            if (pchvnAlley != null)
            {
                pchvnAlleyParameter = new ObjectParameter("pchvnAlley", pchvnAlley);
            }
            else
            {
                pchvnAlleyParameter = new ObjectParameter("pchvnAlley", typeof(string));
            }
    
            ObjectParameter pchvnRoadParameter;
    
            if (pchvnRoad != null)
            {
                pchvnRoadParameter = new ObjectParameter("pchvnRoad", pchvnRoad);
            }
            else
            {
                pchvnRoadParameter = new ObjectParameter("pchvnRoad", typeof(string));
            }
    
            ObjectParameter pchvnSubDistrictParameter;
    
            if (pchvnSubDistrict != null)
            {
                pchvnSubDistrictParameter = new ObjectParameter("pchvnSubDistrict", pchvnSubDistrict);
            }
            else
            {
                pchvnSubDistrictParameter = new ObjectParameter("pchvnSubDistrict", typeof(string));
            }
    
            ObjectParameter pchrProvinceCodeParameter;
    
            if (pchrProvinceCode != null)
            {
                pchrProvinceCodeParameter = new ObjectParameter("pchrProvinceCode", pchrProvinceCode);
            }
            else
            {
                pchrProvinceCodeParameter = new ObjectParameter("pchrProvinceCode", typeof(string));
            }
    
            ObjectParameter pchrDistrictCodeParameter;
    
            if (pchrDistrictCode != null)
            {
                pchrDistrictCodeParameter = new ObjectParameter("pchrDistrictCode", pchrDistrictCode);
            }
            else
            {
                pchrDistrictCodeParameter = new ObjectParameter("pchrDistrictCode", typeof(string));
            }
    
            ObjectParameter pchrZipCodeParameter;
    
            if (pchrZipCode != null)
            {
                pchrZipCodeParameter = new ObjectParameter("pchrZipCode", pchrZipCode);
            }
            else
            {
                pchrZipCodeParameter = new ObjectParameter("pchrZipCode", typeof(string));
            }
    
            ObjectParameter pchvSALE_CHANGE_TYPE_NEW_SALEParameter;
    
            if (pchvSALE_CHANGE_TYPE_NEW_SALE != null)
            {
                pchvSALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("pchvSALE_CHANGE_TYPE_NEW_SALE", pchvSALE_CHANGE_TYPE_NEW_SALE);
            }
            else
            {
                pchvSALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("pchvSALE_CHANGE_TYPE_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtContractData>("GetContractDataForSearch", pchrCustomerCodeParameter, pchvnCustomerNameParameter, pchvBranchNameParameter, pchvnAddressParameter, pchvnAlleyParameter, pchvnRoadParameter, pchvnSubDistrictParameter, pchrProvinceCodeParameter, pchrDistrictCodeParameter, pchrZipCodeParameter, pchvSALE_CHANGE_TYPE_NEW_SALEParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtContractBranchName> GetContractBranchName(string pchvLiveSearch)
        {
    
            ObjectParameter pchvLiveSearchParameter;
    
            if (pchvLiveSearch != null)
            {
                pchvLiveSearchParameter = new ObjectParameter("pchvLiveSearch", pchvLiveSearch);
            }
            else
            {
                pchvLiveSearchParameter = new ObjectParameter("pchvLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<dtContractBranchName>("GetContractBranchName", pchvLiveSearchParameter);
        }
        public ObjectResult<tbt_RentalContractBasic> GetTbt_RentalContractBasic(string pContractCode, string pUserCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pUserCodeParameter;
    
            if (pUserCode != null)
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", pUserCode);
            }
            else
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalContractBasic>("GetTbt_RentalContractBasic", pContractCodeParameter, pUserCodeParameter);
        }
        public ObjectResult<dtRelatedContract> GetRelatedContractList(string pchrRelationType, string pchvstrContractCode, string pchrOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter pchrRelationTypeParameter;
    
            if (pchrRelationType != null)
            {
                pchrRelationTypeParameter = new ObjectParameter("pchrRelationType", pchrRelationType);
            }
            else
            {
                pchrRelationTypeParameter = new ObjectParameter("pchrRelationType", typeof(string));
            }
    
            ObjectParameter pchvstrContractCodeParameter;
    
            if (pchvstrContractCode != null)
            {
                pchvstrContractCodeParameter = new ObjectParameter("pchvstrContractCode", pchvstrContractCode);
            }
            else
            {
                pchvstrContractCodeParameter = new ObjectParameter("pchvstrContractCode", typeof(string));
            }
    
            ObjectParameter pchrOCCParameter;
    
            if (pchrOCC != null)
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", pchrOCC);
            }
            else
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtRelatedContract>("GetRelatedContractList", pchrRelationTypeParameter, pchvstrContractCodeParameter, pchrOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtTbt_RentalContractBasicForView> GetTbt_RentalContractBasicForView(string pchvContractCode)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalContractBasicForView>("GetTbt_RentalContractBasicForView", pchvContractCodeParameter);
        }
        public ObjectResult<dtTbt_RentalSecurityBasicForView> GetTbt_RentalSecurityBasicForView(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalSecurityBasicForView>("GetTbt_RentalSecurityBasicForView", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dtTbt_RentalMaintenanceDetailsForView> GetTbt_RentalMaintenanceDetailsForView(string contractCode, string oCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalMaintenanceDetailsForView>("GetTbt_RentalMaintenanceDetailsForView", contractCodeParameter, oCCParameter);
        }
        public ObjectResult<dtTbt_CancelContractMemoDetailForView> GetTbt_CancelContractMemoDetailForView(string contractCode, string oCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_CancelContractMemoDetailForView>("GetTbt_CancelContractMemoDetailForView", contractCodeParameter, oCCParameter);
        }
        public ObjectResult<dtTbt_RentalOperationTypeListForView> GetTbt_RentalOperationTypeListForView(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalOperationTypeListForView>("GetTbt_RentalOperationTypeListForView", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dtContractsSameSite> GetContractsSameSiteList(string pSiteCode, string pC_RENTAL_CHANGE_TYPE, string pC_SALE_CHANGE_TYPE, string pC_SERVICE_TYPE_RENTAL, string pContractCode)
        {
    
            ObjectParameter pSiteCodeParameter;
    
            if (pSiteCode != null)
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", pSiteCode);
            }
            else
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", typeof(string));
            }
    
            ObjectParameter pC_RENTAL_CHANGE_TYPEParameter;
    
            if (pC_RENTAL_CHANGE_TYPE != null)
            {
                pC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pC_RENTAL_CHANGE_TYPE", pC_RENTAL_CHANGE_TYPE);
            }
            else
            {
                pC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pC_RENTAL_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SALE_CHANGE_TYPEParameter;
    
            if (pC_SALE_CHANGE_TYPE != null)
            {
                pC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE", pC_SALE_CHANGE_TYPE);
            }
            else
            {
                pC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SERVICE_TYPE_RENTALParameter;
    
            if (pC_SERVICE_TYPE_RENTAL != null)
            {
                pC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pC_SERVICE_TYPE_RENTAL", pC_SERVICE_TYPE_RENTAL);
            }
            else
            {
                pC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pC_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<dtContractsSameSite>("GetContractsSameSiteList", pSiteCodeParameter, pC_RENTAL_CHANGE_TYPEParameter, pC_SALE_CHANGE_TYPEParameter, pC_SERVICE_TYPE_RENTALParameter, pContractCodeParameter);
        }
        public ObjectResult<dtTbt_RentalInstSubContractorListForView> GetTbt_RentalInstSubContractorListForView(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalInstSubContractorListForView>("GetTbt_RentalInstSubContractorListForView", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dtContractDocument> GetContractDocDataListForView(string pContractCode, string pOCC, string pContractOfficeCode_List, string pOperationOfficeCode_List)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pContractOfficeCode_ListParameter;
    
            if (pContractOfficeCode_List != null)
            {
                pContractOfficeCode_ListParameter = new ObjectParameter("pContractOfficeCode_List", pContractOfficeCode_List);
            }
            else
            {
                pContractOfficeCode_ListParameter = new ObjectParameter("pContractOfficeCode_List", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCode_ListParameter;
    
            if (pOperationOfficeCode_List != null)
            {
                pOperationOfficeCode_ListParameter = new ObjectParameter("pOperationOfficeCode_List", pOperationOfficeCode_List);
            }
            else
            {
                pOperationOfficeCode_ListParameter = new ObjectParameter("pOperationOfficeCode_List", typeof(string));
            }
            return base.ExecuteFunction<dtContractDocument>("GetContractDocDataListForView", pContractCodeParameter, pOCCParameter, pContractOfficeCode_ListParameter, pOperationOfficeCode_ListParameter);
        }
        public ObjectResult<doContractHeader> GetContractHeaderData(string xml0)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
            return base.ExecuteFunction<doContractHeader>("GetContractHeaderData", xml0Parameter);
        }
        public ObjectResult<dtTbt_SaleBasicForView> GetTbt_SaleBasicForView(string pchvContractCode, string pchrOCC, Nullable<bool> pLatestOCCFlag)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter pchrOCCParameter;
    
            if (pchrOCC != null)
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", pchrOCC);
            }
            else
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", typeof(string));
            }
    
            ObjectParameter pLatestOCCFlagParameter;
    
            if (pLatestOCCFlag.HasValue)
            {
                pLatestOCCFlagParameter = new ObjectParameter("pLatestOCCFlag", pLatestOCCFlag);
            }
            else
            {
                pLatestOCCFlagParameter = new ObjectParameter("pLatestOCCFlag", typeof(bool));
            }
            return base.ExecuteFunction<dtTbt_SaleBasicForView>("GetTbt_SaleBasicForView", pchvContractCodeParameter, pchrOCCParameter, pLatestOCCFlagParameter);
        }
        public ObjectResult<dtSaleHistoryDigest> GetSaleHistoryDigestList(string pchvContractCode, string xml_SelChangeType, string xml_selIncidentARtype, string pC_SALE_CHANGE_TYPE, string pC_INCIDENT_TYPE, string pC_AR_TYPE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter xml_SelChangeTypeParameter;
    
            if (xml_SelChangeType != null)
            {
                xml_SelChangeTypeParameter = new ObjectParameter("xml_SelChangeType", xml_SelChangeType);
            }
            else
            {
                xml_SelChangeTypeParameter = new ObjectParameter("xml_SelChangeType", typeof(string));
            }
    
            ObjectParameter xml_selIncidentARtypeParameter;
    
            if (xml_selIncidentARtype != null)
            {
                xml_selIncidentARtypeParameter = new ObjectParameter("xml_selIncidentARtype", xml_selIncidentARtype);
            }
            else
            {
                xml_selIncidentARtypeParameter = new ObjectParameter("xml_selIncidentARtype", typeof(string));
            }
    
            ObjectParameter pC_SALE_CHANGE_TYPEParameter;
    
            if (pC_SALE_CHANGE_TYPE != null)
            {
                pC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE", pC_SALE_CHANGE_TYPE);
            }
            else
            {
                pC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pC_INCIDENT_TYPEParameter;
    
            if (pC_INCIDENT_TYPE != null)
            {
                pC_INCIDENT_TYPEParameter = new ObjectParameter("pC_INCIDENT_TYPE", pC_INCIDENT_TYPE);
            }
            else
            {
                pC_INCIDENT_TYPEParameter = new ObjectParameter("pC_INCIDENT_TYPE", typeof(string));
            }
    
            ObjectParameter pC_AR_TYPEParameter;
    
            if (pC_AR_TYPE != null)
            {
                pC_AR_TYPEParameter = new ObjectParameter("pC_AR_TYPE", pC_AR_TYPE);
            }
            else
            {
                pC_AR_TYPEParameter = new ObjectParameter("pC_AR_TYPE", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtSaleHistoryDigest>("GetSaleHistoryDigestList", pchvContractCodeParameter, xml_SelChangeTypeParameter, xml_selIncidentARtypeParameter, pC_SALE_CHANGE_TYPEParameter, pC_INCIDENT_TYPEParameter, pC_AR_TYPEParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtRentalHistoryDigest> GetRentalHistoryDigestList(string pchvContractCode, string xml_SelChangeType, string xml_selIncidentARtype, string pC_RENTAL_CHANGE_TYPE, string pC_INCIDENT_TYPE, string pC_AR_TYPE, string pC_DOC_AUDIT_RESULT, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter xml_SelChangeTypeParameter;
    
            if (xml_SelChangeType != null)
            {
                xml_SelChangeTypeParameter = new ObjectParameter("xml_SelChangeType", xml_SelChangeType);
            }
            else
            {
                xml_SelChangeTypeParameter = new ObjectParameter("xml_SelChangeType", typeof(string));
            }
    
            ObjectParameter xml_selIncidentARtypeParameter;
    
            if (xml_selIncidentARtype != null)
            {
                xml_selIncidentARtypeParameter = new ObjectParameter("xml_selIncidentARtype", xml_selIncidentARtype);
            }
            else
            {
                xml_selIncidentARtypeParameter = new ObjectParameter("xml_selIncidentARtype", typeof(string));
            }
    
            ObjectParameter pC_RENTAL_CHANGE_TYPEParameter;
    
            if (pC_RENTAL_CHANGE_TYPE != null)
            {
                pC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pC_RENTAL_CHANGE_TYPE", pC_RENTAL_CHANGE_TYPE);
            }
            else
            {
                pC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pC_RENTAL_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pC_INCIDENT_TYPEParameter;
    
            if (pC_INCIDENT_TYPE != null)
            {
                pC_INCIDENT_TYPEParameter = new ObjectParameter("pC_INCIDENT_TYPE", pC_INCIDENT_TYPE);
            }
            else
            {
                pC_INCIDENT_TYPEParameter = new ObjectParameter("pC_INCIDENT_TYPE", typeof(string));
            }
    
            ObjectParameter pC_AR_TYPEParameter;
    
            if (pC_AR_TYPE != null)
            {
                pC_AR_TYPEParameter = new ObjectParameter("pC_AR_TYPE", pC_AR_TYPE);
            }
            else
            {
                pC_AR_TYPEParameter = new ObjectParameter("pC_AR_TYPE", typeof(string));
            }
    
            ObjectParameter pC_DOC_AUDIT_RESULTParameter;
    
            if (pC_DOC_AUDIT_RESULT != null)
            {
                pC_DOC_AUDIT_RESULTParameter = new ObjectParameter("pC_DOC_AUDIT_RESULT", pC_DOC_AUDIT_RESULT);
            }
            else
            {
                pC_DOC_AUDIT_RESULTParameter = new ObjectParameter("pC_DOC_AUDIT_RESULT", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtRentalHistoryDigest>("GetRentalHistoryDigestList", pchvContractCodeParameter, xml_SelChangeTypeParameter, xml_selIncidentARtypeParameter, pC_RENTAL_CHANGE_TYPEParameter, pC_INCIDENT_TYPEParameter, pC_AR_TYPEParameter, pC_DOC_AUDIT_RESULTParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtSearchDraftContractResult> SearchDraftContractList(string pchvQuotationTargetCode, string pchrAlphabet, Nullable<System.DateTime> pdtmRegistrationDateFrom, Nullable<System.DateTime> pdtmRegistrationDateTo, string pchvSalesman1Code, string pchvnSaleman1Name, string pchvnContractTargetName, string pchrnSiteName, string pchvnContractOfficeCode, string pchvnOperationOfficeCode, string pchrApproveContractStatus, Nullable<System.DateTime> pdtmApproveDateFrom, Nullable<System.DateTime> pdtmApproveDateTo)
        {
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pdtmRegistrationDateFromParameter;
    
            if (pdtmRegistrationDateFrom.HasValue)
            {
                pdtmRegistrationDateFromParameter = new ObjectParameter("pdtmRegistrationDateFrom", pdtmRegistrationDateFrom);
            }
            else
            {
                pdtmRegistrationDateFromParameter = new ObjectParameter("pdtmRegistrationDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pdtmRegistrationDateToParameter;
    
            if (pdtmRegistrationDateTo.HasValue)
            {
                pdtmRegistrationDateToParameter = new ObjectParameter("pdtmRegistrationDateTo", pdtmRegistrationDateTo);
            }
            else
            {
                pdtmRegistrationDateToParameter = new ObjectParameter("pdtmRegistrationDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pchvSalesman1CodeParameter;
    
            if (pchvSalesman1Code != null)
            {
                pchvSalesman1CodeParameter = new ObjectParameter("pchvSalesman1Code", pchvSalesman1Code);
            }
            else
            {
                pchvSalesman1CodeParameter = new ObjectParameter("pchvSalesman1Code", typeof(string));
            }
    
            ObjectParameter pchvnSaleman1NameParameter;
    
            if (pchvnSaleman1Name != null)
            {
                pchvnSaleman1NameParameter = new ObjectParameter("pchvnSaleman1Name", pchvnSaleman1Name);
            }
            else
            {
                pchvnSaleman1NameParameter = new ObjectParameter("pchvnSaleman1Name", typeof(string));
            }
    
            ObjectParameter pchvnContractTargetNameParameter;
    
            if (pchvnContractTargetName != null)
            {
                pchvnContractTargetNameParameter = new ObjectParameter("pchvnContractTargetName", pchvnContractTargetName);
            }
            else
            {
                pchvnContractTargetNameParameter = new ObjectParameter("pchvnContractTargetName", typeof(string));
            }
    
            ObjectParameter pchrnSiteNameParameter;
    
            if (pchrnSiteName != null)
            {
                pchrnSiteNameParameter = new ObjectParameter("pchrnSiteName", pchrnSiteName);
            }
            else
            {
                pchrnSiteNameParameter = new ObjectParameter("pchrnSiteName", typeof(string));
            }
    
            ObjectParameter pchvnContractOfficeCodeParameter;
    
            if (pchvnContractOfficeCode != null)
            {
                pchvnContractOfficeCodeParameter = new ObjectParameter("pchvnContractOfficeCode", pchvnContractOfficeCode);
            }
            else
            {
                pchvnContractOfficeCodeParameter = new ObjectParameter("pchvnContractOfficeCode", typeof(string));
            }
    
            ObjectParameter pchvnOperationOfficeCodeParameter;
    
            if (pchvnOperationOfficeCode != null)
            {
                pchvnOperationOfficeCodeParameter = new ObjectParameter("pchvnOperationOfficeCode", pchvnOperationOfficeCode);
            }
            else
            {
                pchvnOperationOfficeCodeParameter = new ObjectParameter("pchvnOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrApproveContractStatusParameter;
    
            if (pchrApproveContractStatus != null)
            {
                pchrApproveContractStatusParameter = new ObjectParameter("pchrApproveContractStatus", pchrApproveContractStatus);
            }
            else
            {
                pchrApproveContractStatusParameter = new ObjectParameter("pchrApproveContractStatus", typeof(string));
            }
    
            ObjectParameter pdtmApproveDateFromParameter;
    
            if (pdtmApproveDateFrom.HasValue)
            {
                pdtmApproveDateFromParameter = new ObjectParameter("pdtmApproveDateFrom", pdtmApproveDateFrom);
            }
            else
            {
                pdtmApproveDateFromParameter = new ObjectParameter("pdtmApproveDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pdtmApproveDateToParameter;
    
            if (pdtmApproveDateTo.HasValue)
            {
                pdtmApproveDateToParameter = new ObjectParameter("pdtmApproveDateTo", pdtmApproveDateTo);
            }
            else
            {
                pdtmApproveDateToParameter = new ObjectParameter("pdtmApproveDateTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtSearchDraftContractResult>("SearchDraftContractList", pchvQuotationTargetCodeParameter, pchrAlphabetParameter, pdtmRegistrationDateFromParameter, pdtmRegistrationDateToParameter, pchvSalesman1CodeParameter, pchvnSaleman1NameParameter, pchvnContractTargetNameParameter, pchrnSiteNameParameter, pchvnContractOfficeCodeParameter, pchvnOperationOfficeCodeParameter, pchrApproveContractStatusParameter, pdtmApproveDateFromParameter, pdtmApproveDateToParameter);
        }
        public ObjectResult<dtContractTargetInfoByRelated> GetContractTargetInfoByRelated(string pRelatedContractCode, string pRelationType, string pRelatedOCC, string pC_PROD_TYPE_SALE, string pC_PROD_TYPE_AL, string pC_PROD_TYPE_ONLINE, string pC_PROD_TYPE_RENTAL_SALE, string pRelatedProductTypeCode, string pC_RELATION_TYPE_MA, string pC_RELATION_TYPE_SALE)
        {
    
            ObjectParameter pRelatedContractCodeParameter;
    
            if (pRelatedContractCode != null)
            {
                pRelatedContractCodeParameter = new ObjectParameter("pRelatedContractCode", pRelatedContractCode);
            }
            else
            {
                pRelatedContractCodeParameter = new ObjectParameter("pRelatedContractCode", typeof(string));
            }
    
            ObjectParameter pRelationTypeParameter;
    
            if (pRelationType != null)
            {
                pRelationTypeParameter = new ObjectParameter("pRelationType", pRelationType);
            }
            else
            {
                pRelationTypeParameter = new ObjectParameter("pRelationType", typeof(string));
            }
    
            ObjectParameter pRelatedOCCParameter;
    
            if (pRelatedOCC != null)
            {
                pRelatedOCCParameter = new ObjectParameter("pRelatedOCC", pRelatedOCC);
            }
            else
            {
                pRelatedOCCParameter = new ObjectParameter("pRelatedOCC", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_SALEParameter;
    
            if (pC_PROD_TYPE_SALE != null)
            {
                pC_PROD_TYPE_SALEParameter = new ObjectParameter("pC_PROD_TYPE_SALE", pC_PROD_TYPE_SALE);
            }
            else
            {
                pC_PROD_TYPE_SALEParameter = new ObjectParameter("pC_PROD_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_ALParameter;
    
            if (pC_PROD_TYPE_AL != null)
            {
                pC_PROD_TYPE_ALParameter = new ObjectParameter("pC_PROD_TYPE_AL", pC_PROD_TYPE_AL);
            }
            else
            {
                pC_PROD_TYPE_ALParameter = new ObjectParameter("pC_PROD_TYPE_AL", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_ONLINEParameter;
    
            if (pC_PROD_TYPE_ONLINE != null)
            {
                pC_PROD_TYPE_ONLINEParameter = new ObjectParameter("pC_PROD_TYPE_ONLINE", pC_PROD_TYPE_ONLINE);
            }
            else
            {
                pC_PROD_TYPE_ONLINEParameter = new ObjectParameter("pC_PROD_TYPE_ONLINE", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_RENTAL_SALEParameter;
    
            if (pC_PROD_TYPE_RENTAL_SALE != null)
            {
                pC_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("pC_PROD_TYPE_RENTAL_SALE", pC_PROD_TYPE_RENTAL_SALE);
            }
            else
            {
                pC_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("pC_PROD_TYPE_RENTAL_SALE", typeof(string));
            }
    
            ObjectParameter pRelatedProductTypeCodeParameter;
    
            if (pRelatedProductTypeCode != null)
            {
                pRelatedProductTypeCodeParameter = new ObjectParameter("pRelatedProductTypeCode", pRelatedProductTypeCode);
            }
            else
            {
                pRelatedProductTypeCodeParameter = new ObjectParameter("pRelatedProductTypeCode", typeof(string));
            }
    
            ObjectParameter pC_RELATION_TYPE_MAParameter;
    
            if (pC_RELATION_TYPE_MA != null)
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", pC_RELATION_TYPE_MA);
            }
            else
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", typeof(string));
            }
    
            ObjectParameter pC_RELATION_TYPE_SALEParameter;
    
            if (pC_RELATION_TYPE_SALE != null)
            {
                pC_RELATION_TYPE_SALEParameter = new ObjectParameter("pC_RELATION_TYPE_SALE", pC_RELATION_TYPE_SALE);
            }
            else
            {
                pC_RELATION_TYPE_SALEParameter = new ObjectParameter("pC_RELATION_TYPE_SALE", typeof(string));
            }
            return base.ExecuteFunction<dtContractTargetInfoByRelated>("GetContractTargetInfoByRelated", pRelatedContractCodeParameter, pRelationTypeParameter, pRelatedOCCParameter, pC_PROD_TYPE_SALEParameter, pC_PROD_TYPE_ALParameter, pC_PROD_TYPE_ONLINEParameter, pC_PROD_TYPE_RENTAL_SALEParameter, pRelatedProductTypeCodeParameter, pC_RELATION_TYPE_MAParameter, pC_RELATION_TYPE_SALEParameter);
        }
        public ObjectResult<dtMaintContractTargetInfoByRelated> GetMaintContractTargetInfoByRelated(string pRelatedContractCode, string pC_MA_TARGET_PROD_TYPE, string pC_MA_TYPE, string pC_MA_FEE_TYPE, string pC_RELATION_TYPE_MA, string pRelatedOCC, string pC_PROD_TYPE_SALE, string pC_PROD_TYPE_AL, string pC_PROD_TYPE_ONLINE, string pC_PROD_TYPE_RENTAL_SALE, string pRelatedProductTypeCode)
        {
    
            ObjectParameter pRelatedContractCodeParameter;
    
            if (pRelatedContractCode != null)
            {
                pRelatedContractCodeParameter = new ObjectParameter("pRelatedContractCode", pRelatedContractCode);
            }
            else
            {
                pRelatedContractCodeParameter = new ObjectParameter("pRelatedContractCode", typeof(string));
            }
    
            ObjectParameter pC_MA_TARGET_PROD_TYPEParameter;
    
            if (pC_MA_TARGET_PROD_TYPE != null)
            {
                pC_MA_TARGET_PROD_TYPEParameter = new ObjectParameter("pC_MA_TARGET_PROD_TYPE", pC_MA_TARGET_PROD_TYPE);
            }
            else
            {
                pC_MA_TARGET_PROD_TYPEParameter = new ObjectParameter("pC_MA_TARGET_PROD_TYPE", typeof(string));
            }
    
            ObjectParameter pC_MA_TYPEParameter;
    
            if (pC_MA_TYPE != null)
            {
                pC_MA_TYPEParameter = new ObjectParameter("pC_MA_TYPE", pC_MA_TYPE);
            }
            else
            {
                pC_MA_TYPEParameter = new ObjectParameter("pC_MA_TYPE", typeof(string));
            }
    
            ObjectParameter pC_MA_FEE_TYPEParameter;
    
            if (pC_MA_FEE_TYPE != null)
            {
                pC_MA_FEE_TYPEParameter = new ObjectParameter("pC_MA_FEE_TYPE", pC_MA_FEE_TYPE);
            }
            else
            {
                pC_MA_FEE_TYPEParameter = new ObjectParameter("pC_MA_FEE_TYPE", typeof(string));
            }
    
            ObjectParameter pC_RELATION_TYPE_MAParameter;
    
            if (pC_RELATION_TYPE_MA != null)
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", pC_RELATION_TYPE_MA);
            }
            else
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", typeof(string));
            }
    
            ObjectParameter pRelatedOCCParameter;
    
            if (pRelatedOCC != null)
            {
                pRelatedOCCParameter = new ObjectParameter("pRelatedOCC", pRelatedOCC);
            }
            else
            {
                pRelatedOCCParameter = new ObjectParameter("pRelatedOCC", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_SALEParameter;
    
            if (pC_PROD_TYPE_SALE != null)
            {
                pC_PROD_TYPE_SALEParameter = new ObjectParameter("pC_PROD_TYPE_SALE", pC_PROD_TYPE_SALE);
            }
            else
            {
                pC_PROD_TYPE_SALEParameter = new ObjectParameter("pC_PROD_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_ALParameter;
    
            if (pC_PROD_TYPE_AL != null)
            {
                pC_PROD_TYPE_ALParameter = new ObjectParameter("pC_PROD_TYPE_AL", pC_PROD_TYPE_AL);
            }
            else
            {
                pC_PROD_TYPE_ALParameter = new ObjectParameter("pC_PROD_TYPE_AL", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_ONLINEParameter;
    
            if (pC_PROD_TYPE_ONLINE != null)
            {
                pC_PROD_TYPE_ONLINEParameter = new ObjectParameter("pC_PROD_TYPE_ONLINE", pC_PROD_TYPE_ONLINE);
            }
            else
            {
                pC_PROD_TYPE_ONLINEParameter = new ObjectParameter("pC_PROD_TYPE_ONLINE", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_RENTAL_SALEParameter;
    
            if (pC_PROD_TYPE_RENTAL_SALE != null)
            {
                pC_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("pC_PROD_TYPE_RENTAL_SALE", pC_PROD_TYPE_RENTAL_SALE);
            }
            else
            {
                pC_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("pC_PROD_TYPE_RENTAL_SALE", typeof(string));
            }
    
            ObjectParameter pRelatedProductTypeCodeParameter;
    
            if (pRelatedProductTypeCode != null)
            {
                pRelatedProductTypeCodeParameter = new ObjectParameter("pRelatedProductTypeCode", pRelatedProductTypeCode);
            }
            else
            {
                pRelatedProductTypeCodeParameter = new ObjectParameter("pRelatedProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtMaintContractTargetInfoByRelated>("GetMaintContractTargetInfoByRelated", pRelatedContractCodeParameter, pC_MA_TARGET_PROD_TYPEParameter, pC_MA_TYPEParameter, pC_MA_FEE_TYPEParameter, pC_RELATION_TYPE_MAParameter, pRelatedOCCParameter, pC_PROD_TYPE_SALEParameter, pC_PROD_TYPE_ALParameter, pC_PROD_TYPE_ONLINEParameter, pC_PROD_TYPE_RENTAL_SALEParameter, pRelatedProductTypeCodeParameter);
        }
        public ObjectResult<dtSaleInstruDetailListForView> GetSaleInstruDetailListForView(string pContractCode, string pOCC, string pInstrumentTypeCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pInstrumentTypeCodeParameter;
    
            if (pInstrumentTypeCode != null)
            {
                pInstrumentTypeCodeParameter = new ObjectParameter("pInstrumentTypeCode", pInstrumentTypeCode);
            }
            else
            {
                pInstrumentTypeCodeParameter = new ObjectParameter("pInstrumentTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtSaleInstruDetailListForView>("GetSaleInstruDetailListForView", pContractCodeParameter, pOCCParameter, pInstrumentTypeCodeParameter);
        }
        public ObjectResult<dtTbt_RentalBEDetailsForView> GetTbt_RentalBEDetailsForView(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalBEDetailsForView>("GetTbt_RentalBEDetailsForView", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dtTbt_RentalInstrumentDetailsListForView> GetTbt_RentalInstrumentDetailsListForView(string pContractCode, string pOCC, string pInstrumentCode, string pInstrumentTypeCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
    
            ObjectParameter pInstrumentTypeCodeParameter;
    
            if (pInstrumentTypeCode != null)
            {
                pInstrumentTypeCodeParameter = new ObjectParameter("pInstrumentTypeCode", pInstrumentTypeCode);
            }
            else
            {
                pInstrumentTypeCodeParameter = new ObjectParameter("pInstrumentTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalInstrumentDetailsListForView>("GetTbt_RentalInstrumentDetailsListForView", pContractCodeParameter, pOCCParameter, pInstrumentCodeParameter, pInstrumentTypeCodeParameter);
        }
        public ObjectResult<dtTbt_RentalSentryGuardDetailsListForView> GetTbt_RentalSentryGuardDetailsListForView(string pContractCode, string pOCC, Nullable<int> pSequenceNo)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pSequenceNoParameter;
    
            if (pSequenceNo.HasValue)
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", pSequenceNo);
            }
            else
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", typeof(int));
            }
            return base.ExecuteFunction<dtTbt_RentalSentryGuardDetailsListForView>("GetTbt_RentalSentryGuardDetailsListForView", pContractCodeParameter, pOCCParameter, pSequenceNoParameter);
        }
        public ObjectResult<dtTbt_RentalSentryGuardForView> GetTbt_RentalSentryGuardForView(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_RentalSentryGuardForView>("GetTbt_RentalSentryGuardForView", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dtTbt_SaleInstSubcontractorListForView> GetTbt_SaleInstSubcontractorListForView(string pContractCode, string pOCC, string pSubcontractorCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pSubcontractorCodeParameter;
    
            if (pSubcontractorCode != null)
            {
                pSubcontractorCodeParameter = new ObjectParameter("pSubcontractorCode", pSubcontractorCode);
            }
            else
            {
                pSubcontractorCodeParameter = new ObjectParameter("pSubcontractorCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_SaleInstSubcontractorListForView>("GetTbt_SaleInstSubcontractorListForView", pContractCodeParameter, pOCCParameter, pSubcontractorCodeParameter);
        }
        public ObjectResult<string> GetSaleLastOCC(string pContractCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetSaleLastOCC", pContractCodeParameter);
        }
        public ObjectResult<dtTbt_BillingTempListForView> GetTbt_BillingTempListForView(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_BillingTempListForView>("GetTbt_BillingTempListForView", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dtGroupSummary> GetGroupSummaryForViewCustGrp(string strGroupCode, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtGroupSummary>("GetGroupSummaryForViewCustGrp", strGroupCodeParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtCustomerListGrp> GetCustomerListForViewCustGrp(string strGroupCode, string strCustRoleType, string strProductTypeCode)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCustRoleTypeParameter;
    
            if (strCustRoleType != null)
            {
                strCustRoleTypeParameter = new ObjectParameter("strCustRoleType", strCustRoleType);
            }
            else
            {
                strCustRoleTypeParameter = new ObjectParameter("strCustRoleType", typeof(string));
            }
    
            ObjectParameter strProductTypeCodeParameter;
    
            if (strProductTypeCode != null)
            {
                strProductTypeCodeParameter = new ObjectParameter("strProductTypeCode", strProductTypeCode);
            }
            else
            {
                strProductTypeCodeParameter = new ObjectParameter("strProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerListGrp>("GetCustomerListForViewCustGrp", strGroupCodeParameter, strCustRoleTypeParameter, strProductTypeCodeParameter);
        }
        public ObjectResult<dtsiteListGrp> GetSiteListForViewCustGrp(string strGroupCode, string strCustRoleType, string strProductTypeCode)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCustRoleTypeParameter;
    
            if (strCustRoleType != null)
            {
                strCustRoleTypeParameter = new ObjectParameter("strCustRoleType", strCustRoleType);
            }
            else
            {
                strCustRoleTypeParameter = new ObjectParameter("strCustRoleType", typeof(string));
            }
    
            ObjectParameter strProductTypeCodeParameter;
    
            if (strProductTypeCode != null)
            {
                strProductTypeCodeParameter = new ObjectParameter("strProductTypeCode", strProductTypeCode);
            }
            else
            {
                strProductTypeCodeParameter = new ObjectParameter("strProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtsiteListGrp>("GetSiteListForViewCustGrp", strGroupCodeParameter, strCustRoleTypeParameter, strProductTypeCodeParameter);
        }
        public ObjectResult<dtContractListGrp> GetContractListForViewCustGrp(string strGroupCode, string strCustRoleType, string strProductTypeCode)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCustRoleTypeParameter;
    
            if (strCustRoleType != null)
            {
                strCustRoleTypeParameter = new ObjectParameter("strCustRoleType", strCustRoleType);
            }
            else
            {
                strCustRoleTypeParameter = new ObjectParameter("strCustRoleType", typeof(string));
            }
    
            ObjectParameter strProductTypeCodeParameter;
    
            if (strProductTypeCode != null)
            {
                strProductTypeCodeParameter = new ObjectParameter("strProductTypeCode", strProductTypeCode);
            }
            else
            {
                strProductTypeCodeParameter = new ObjectParameter("strProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtContractListGrp>("GetContractListForViewCustGrp", strGroupCodeParameter, strCustRoleTypeParameter, strProductTypeCodeParameter);
        }
        public ObjectResult<dtTbs_ARApproveNoRunningNo> GetTbs_ARApproveNoRunningNo(string pYear, string pPrefix)
        {
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
            return base.ExecuteFunction<dtTbs_ARApproveNoRunningNo>("GetTbs_ARApproveNoRunningNo", pYearParameter, pPrefixParameter);
        }
        public ObjectResult<tbs_ARApproveNoRunningNo> UpdateTbs_ARApproveNoRunningNo(string pYear, string pPrefix, Nullable<int> pRunningNo, string pUpdateBy)
        {
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
    
            ObjectParameter pRunningNoParameter;
    
            if (pRunningNo.HasValue)
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", pRunningNo);
            }
            else
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", typeof(int));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbs_ARApproveNoRunningNo>("UpdateTbs_ARApproveNoRunningNo", pYearParameter, pPrefixParameter, pRunningNoParameter, pUpdateByParameter);
        }
        public ObjectResult<tbs_ARApproveNoRunningNo> InsertTbs_ARApproveNoRunningNo(string pYear, string pPrefix, Nullable<int> pRunningNo, string pUser)
        {
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
    
            ObjectParameter pRunningNoParameter;
    
            if (pRunningNo.HasValue)
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", pRunningNo);
            }
            else
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", typeof(int));
            }
    
            ObjectParameter pUserParameter;
    
            if (pUser != null)
            {
                pUserParameter = new ObjectParameter("pUser", pUser);
            }
            else
            {
                pUserParameter = new ObjectParameter("pUser", typeof(string));
            }
            return base.ExecuteFunction<tbs_ARApproveNoRunningNo>("InsertTbs_ARApproveNoRunningNo", pYearParameter, pPrefixParameter, pRunningNoParameter, pUserParameter);
        }
        public ObjectResult<dtGroupList> GetGroupListForSearchCustGrp(string pchvGroupCode, string pchrnGroupName, string pchvOfficeCode, string pchvEmpNo, Nullable<int> pintNumOfCustFrom, Nullable<int> pintNumOfCustTo, Nullable<int> pintNumOfSiteFrom, Nullable<int> pintNumOfSiteTo, string c_CONTRACT_STATUS_BEF_START, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_AFTER_START, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter pchvGroupCodeParameter;
    
            if (pchvGroupCode != null)
            {
                pchvGroupCodeParameter = new ObjectParameter("pchvGroupCode", pchvGroupCode);
            }
            else
            {
                pchvGroupCodeParameter = new ObjectParameter("pchvGroupCode", typeof(string));
            }
    
            ObjectParameter pchrnGroupNameParameter;
    
            if (pchrnGroupName != null)
            {
                pchrnGroupNameParameter = new ObjectParameter("pchrnGroupName", pchrnGroupName);
            }
            else
            {
                pchrnGroupNameParameter = new ObjectParameter("pchrnGroupName", typeof(string));
            }
    
            ObjectParameter pchvOfficeCodeParameter;
    
            if (pchvOfficeCode != null)
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", pchvOfficeCode);
            }
            else
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", typeof(string));
            }
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
    
            ObjectParameter pintNumOfCustFromParameter;
    
            if (pintNumOfCustFrom.HasValue)
            {
                pintNumOfCustFromParameter = new ObjectParameter("pintNumOfCustFrom", pintNumOfCustFrom);
            }
            else
            {
                pintNumOfCustFromParameter = new ObjectParameter("pintNumOfCustFrom", typeof(int));
            }
    
            ObjectParameter pintNumOfCustToParameter;
    
            if (pintNumOfCustTo.HasValue)
            {
                pintNumOfCustToParameter = new ObjectParameter("pintNumOfCustTo", pintNumOfCustTo);
            }
            else
            {
                pintNumOfCustToParameter = new ObjectParameter("pintNumOfCustTo", typeof(int));
            }
    
            ObjectParameter pintNumOfSiteFromParameter;
    
            if (pintNumOfSiteFrom.HasValue)
            {
                pintNumOfSiteFromParameter = new ObjectParameter("pintNumOfSiteFrom", pintNumOfSiteFrom);
            }
            else
            {
                pintNumOfSiteFromParameter = new ObjectParameter("pintNumOfSiteFrom", typeof(int));
            }
    
            ObjectParameter pintNumOfSiteToParameter;
    
            if (pintNumOfSiteTo.HasValue)
            {
                pintNumOfSiteToParameter = new ObjectParameter("pintNumOfSiteTo", pintNumOfSiteTo);
            }
            else
            {
                pintNumOfSiteToParameter = new ObjectParameter("pintNumOfSiteTo", typeof(int));
            }
    
            ObjectParameter c_CONTRACT_STATUS_BEF_STARTParameter;
    
            if (c_CONTRACT_STATUS_BEF_START != null)
            {
                c_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("C_CONTRACT_STATUS_BEF_START", c_CONTRACT_STATUS_BEF_START);
            }
            else
            {
                c_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("C_CONTRACT_STATUS_BEF_START", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_AFTER_STARTParameter;
    
            if (c_CONTRACT_STATUS_AFTER_START != null)
            {
                c_CONTRACT_STATUS_AFTER_STARTParameter = new ObjectParameter("C_CONTRACT_STATUS_AFTER_START", c_CONTRACT_STATUS_AFTER_START);
            }
            else
            {
                c_CONTRACT_STATUS_AFTER_STARTParameter = new ObjectParameter("C_CONTRACT_STATUS_AFTER_START", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtGroupList>("GetGroupListForSearchCustGrp", pchvGroupCodeParameter, pchrnGroupNameParameter, pchvOfficeCodeParameter, pchvEmpNoParameter, pintNumOfCustFromParameter, pintNumOfCustToParameter, pintNumOfSiteFromParameter, pintNumOfSiteToParameter, c_CONTRACT_STATUS_BEF_STARTParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_AFTER_STARTParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<tbt_SaleBasic> GetTbt_SaleBasic(string pchvContractCode, string pchrOCC, Nullable<bool> pbLastOCCFlag)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter pchrOCCParameter;
    
            if (pchrOCC != null)
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", pchrOCC);
            }
            else
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", typeof(string));
            }
    
            ObjectParameter pbLastOCCFlagParameter;
    
            if (pbLastOCCFlag.HasValue)
            {
                pbLastOCCFlagParameter = new ObjectParameter("pbLastOCCFlag", pbLastOCCFlag);
            }
            else
            {
                pbLastOCCFlagParameter = new ObjectParameter("pbLastOCCFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbt_SaleBasic>("GetTbt_SaleBasic", pchvContractCodeParameter, pchrOCCParameter, pbLastOCCFlagParameter);
        }
        public ObjectResult<dtTbs_ARRunningNo> GetTbs_ARRunningNo(string pOffice, string pYear, string pPrefix)
        {
    
            ObjectParameter pOfficeParameter;
    
            if (pOffice != null)
            {
                pOfficeParameter = new ObjectParameter("pOffice", pOffice);
            }
            else
            {
                pOfficeParameter = new ObjectParameter("pOffice", typeof(string));
            }
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
            return base.ExecuteFunction<dtTbs_ARRunningNo>("GetTbs_ARRunningNo", pOfficeParameter, pYearParameter, pPrefixParameter);
        }
        public ObjectResult<tbs_ARRunningNo> UpdateTbs_ARRunningNo(string pOfficeNo, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUpdateBy)
        {
    
            ObjectParameter pOfficeNoParameter;
    
            if (pOfficeNo != null)
            {
                pOfficeNoParameter = new ObjectParameter("pOfficeNo", pOfficeNo);
            }
            else
            {
                pOfficeNoParameter = new ObjectParameter("pOfficeNo", typeof(string));
            }
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
    
            ObjectParameter pRunningNoParameter;
    
            if (pRunningNo.HasValue)
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", pRunningNo);
            }
            else
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", typeof(int));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbs_ARRunningNo>("UpdateTbs_ARRunningNo", pOfficeNoParameter, pYearParameter, pPrefixParameter, pRunningNoParameter, pUpdateByParameter);
        }
        public ObjectResult<tbs_ARRunningNo> InsertTbs_ARRunningNo(string pOffice, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUser)
        {
    
            ObjectParameter pOfficeParameter;
    
            if (pOffice != null)
            {
                pOfficeParameter = new ObjectParameter("pOffice", pOffice);
            }
            else
            {
                pOfficeParameter = new ObjectParameter("pOffice", typeof(string));
            }
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
    
            ObjectParameter pRunningNoParameter;
    
            if (pRunningNo.HasValue)
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", pRunningNo);
            }
            else
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", typeof(int));
            }
    
            ObjectParameter pUserParameter;
    
            if (pUser != null)
            {
                pUserParameter = new ObjectParameter("pUser", pUser);
            }
            else
            {
                pUserParameter = new ObjectParameter("pUser", typeof(string));
            }
            return base.ExecuteFunction<tbs_ARRunningNo>("InsertTbs_ARRunningNo", pOfficeParameter, pYearParameter, pPrefixParameter, pRunningNoParameter, pUserParameter);
        }
        public ObjectResult<dtTbs_IncidentRunningNo> GetTbs_IncidentRunningNo(string pOffice, string pYear, string pPrefix)
        {
    
            ObjectParameter pOfficeParameter;
    
            if (pOffice != null)
            {
                pOfficeParameter = new ObjectParameter("pOffice", pOffice);
            }
            else
            {
                pOfficeParameter = new ObjectParameter("pOffice", typeof(string));
            }
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
            return base.ExecuteFunction<dtTbs_IncidentRunningNo>("GetTbs_IncidentRunningNo", pOfficeParameter, pYearParameter, pPrefixParameter);
        }
        public ObjectResult<tbs_IncidentRunningNo> InsertTbs_IncidentRunningNo(string pOffice, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUser)
        {
    
            ObjectParameter pOfficeParameter;
    
            if (pOffice != null)
            {
                pOfficeParameter = new ObjectParameter("pOffice", pOffice);
            }
            else
            {
                pOfficeParameter = new ObjectParameter("pOffice", typeof(string));
            }
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
    
            ObjectParameter pRunningNoParameter;
    
            if (pRunningNo.HasValue)
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", pRunningNo);
            }
            else
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", typeof(int));
            }
    
            ObjectParameter pUserParameter;
    
            if (pUser != null)
            {
                pUserParameter = new ObjectParameter("pUser", pUser);
            }
            else
            {
                pUserParameter = new ObjectParameter("pUser", typeof(string));
            }
            return base.ExecuteFunction<tbs_IncidentRunningNo>("InsertTbs_IncidentRunningNo", pOfficeParameter, pYearParameter, pPrefixParameter, pRunningNoParameter, pUserParameter);
        }
        public ObjectResult<tbs_IncidentRunningNo> UpdateTbs_IncidentRunningNo(string pOfficeNo, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUpdateBy)
        {
    
            ObjectParameter pOfficeNoParameter;
    
            if (pOfficeNo != null)
            {
                pOfficeNoParameter = new ObjectParameter("pOfficeNo", pOfficeNo);
            }
            else
            {
                pOfficeNoParameter = new ObjectParameter("pOfficeNo", typeof(string));
            }
    
            ObjectParameter pYearParameter;
    
            if (pYear != null)
            {
                pYearParameter = new ObjectParameter("pYear", pYear);
            }
            else
            {
                pYearParameter = new ObjectParameter("pYear", typeof(string));
            }
    
            ObjectParameter pPrefixParameter;
    
            if (pPrefix != null)
            {
                pPrefixParameter = new ObjectParameter("pPrefix", pPrefix);
            }
            else
            {
                pPrefixParameter = new ObjectParameter("pPrefix", typeof(string));
            }
    
            ObjectParameter pRunningNoParameter;
    
            if (pRunningNo.HasValue)
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", pRunningNo);
            }
            else
            {
                pRunningNoParameter = new ObjectParameter("pRunningNo", typeof(int));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbs_IncidentRunningNo>("UpdateTbs_IncidentRunningNo", pOfficeNoParameter, pYearParameter, pPrefixParameter, pRunningNoParameter, pUpdateByParameter);
        }
        public ObjectResult<tbt_RentalSecurityBasic> GetTbt_RentalSecurityBasic(string pchvContractCode, string pchrOCC)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter pchrOCCParameter;
    
            if (pchrOCC != null)
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", pchrOCC);
            }
            else
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSecurityBasic>("GetTbt_RentalSecurityBasic", pchvContractCodeParameter, pchrOCCParameter);
        }
        public ObjectResult<dtChangedCustHistDetail> GetChangedCustHistDetail(string pchvContractCode, Nullable<int> pintSequenceNo, string pchvC_CONTRACT_SIGNER_TYPE, string pchvC_CUST_STATUS, string pchvC_CUST_TYPE, string pchvC_FINANCIAL_MARKET_TYPE, string pchvC_CHANGE_NAME_REASON_TYPE)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter pintSequenceNoParameter;
    
            if (pintSequenceNo.HasValue)
            {
                pintSequenceNoParameter = new ObjectParameter("pintSequenceNo", pintSequenceNo);
            }
            else
            {
                pintSequenceNoParameter = new ObjectParameter("pintSequenceNo", typeof(int));
            }
    
            ObjectParameter pchvC_CONTRACT_SIGNER_TYPEParameter;
    
            if (pchvC_CONTRACT_SIGNER_TYPE != null)
            {
                pchvC_CONTRACT_SIGNER_TYPEParameter = new ObjectParameter("pchvC_CONTRACT_SIGNER_TYPE", pchvC_CONTRACT_SIGNER_TYPE);
            }
            else
            {
                pchvC_CONTRACT_SIGNER_TYPEParameter = new ObjectParameter("pchvC_CONTRACT_SIGNER_TYPE", typeof(string));
            }
    
            ObjectParameter pchvC_CUST_STATUSParameter;
    
            if (pchvC_CUST_STATUS != null)
            {
                pchvC_CUST_STATUSParameter = new ObjectParameter("pchvC_CUST_STATUS", pchvC_CUST_STATUS);
            }
            else
            {
                pchvC_CUST_STATUSParameter = new ObjectParameter("pchvC_CUST_STATUS", typeof(string));
            }
    
            ObjectParameter pchvC_CUST_TYPEParameter;
    
            if (pchvC_CUST_TYPE != null)
            {
                pchvC_CUST_TYPEParameter = new ObjectParameter("pchvC_CUST_TYPE", pchvC_CUST_TYPE);
            }
            else
            {
                pchvC_CUST_TYPEParameter = new ObjectParameter("pchvC_CUST_TYPE", typeof(string));
            }
    
            ObjectParameter pchvC_FINANCIAL_MARKET_TYPEParameter;
    
            if (pchvC_FINANCIAL_MARKET_TYPE != null)
            {
                pchvC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pchvC_FINANCIAL_MARKET_TYPE", pchvC_FINANCIAL_MARKET_TYPE);
            }
            else
            {
                pchvC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pchvC_FINANCIAL_MARKET_TYPE", typeof(string));
            }
    
            ObjectParameter pchvC_CHANGE_NAME_REASON_TYPEParameter;
    
            if (pchvC_CHANGE_NAME_REASON_TYPE != null)
            {
                pchvC_CHANGE_NAME_REASON_TYPEParameter = new ObjectParameter("pchvC_CHANGE_NAME_REASON_TYPE", pchvC_CHANGE_NAME_REASON_TYPE);
            }
            else
            {
                pchvC_CHANGE_NAME_REASON_TYPEParameter = new ObjectParameter("pchvC_CHANGE_NAME_REASON_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtChangedCustHistDetail>("GetChangedCustHistDetail", pchvContractCodeParameter, pintSequenceNoParameter, pchvC_CONTRACT_SIGNER_TYPEParameter, pchvC_CUST_STATUSParameter, pchvC_CUST_TYPEParameter, pchvC_FINANCIAL_MARKET_TYPEParameter, pchvC_CHANGE_NAME_REASON_TYPEParameter);
        }
        public ObjectResult<dtChangedCustHistList2> GetChangedCustHistList2(string pContractCode, string pOCC, string pCSCustCode, string pRCCustCode, string pSiteCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pCSCustCodeParameter;
    
            if (pCSCustCode != null)
            {
                pCSCustCodeParameter = new ObjectParameter("pCSCustCode", pCSCustCode);
            }
            else
            {
                pCSCustCodeParameter = new ObjectParameter("pCSCustCode", typeof(string));
            }
    
            ObjectParameter pRCCustCodeParameter;
    
            if (pRCCustCode != null)
            {
                pRCCustCodeParameter = new ObjectParameter("pRCCustCode", pRCCustCode);
            }
            else
            {
                pRCCustCodeParameter = new ObjectParameter("pRCCustCode", typeof(string));
            }
    
            ObjectParameter pSiteCodeParameter;
    
            if (pSiteCode != null)
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", pSiteCode);
            }
            else
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", typeof(string));
            }
            return base.ExecuteFunction<dtChangedCustHistList2>("GetChangedCustHistList2", pContractCodeParameter, pOCCParameter, pCSCustCodeParameter, pRCCustCodeParameter, pSiteCodeParameter);
        }
        public ObjectResult<dtMaintCheckUpResultList> GetMaintCheckUpResultList(string pContractCode, string pMATargetContractCode, string pProductCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pMATargetContractCodeParameter;
    
            if (pMATargetContractCode != null)
            {
                pMATargetContractCodeParameter = new ObjectParameter("pMATargetContractCode", pMATargetContractCode);
            }
            else
            {
                pMATargetContractCodeParameter = new ObjectParameter("pMATargetContractCode", typeof(string));
            }
    
            ObjectParameter pProductCodeParameter;
    
            if (pProductCode != null)
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", pProductCode);
            }
            else
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", typeof(string));
            }
            return base.ExecuteFunction<dtMaintCheckUpResultList>("GetMaintCheckUpResultList", pContractCodeParameter, pMATargetContractCodeParameter, pProductCodeParameter);
        }
        public ObjectResult<tbt_RentalInstrumentDetails> GetTbt_RentalInstrumentDetails(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalInstrumentDetails>("GetTbt_RentalInstrumentDetails", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalInstSubcontractor> GetTbt_RentalInstSubContractor(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalInstSubcontractor>("GetTbt_RentalInstSubContractor", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalMaintenanceDetails> GetTbt_RentalMaintenanceDetails(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalMaintenanceDetails>("GetTbt_RentalMaintenanceDetails", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalOperationType> GetTbt_RentalOperationType(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalOperationType>("GetTbt_RentalOperationType", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalSentryGuard> GetTbt_RentalSentryGuard(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSentryGuard>("GetTbt_RentalSentryGuard", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalSentryGuardDetails> GetTbt_RentalSentryGuardDetails(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSentryGuardDetails>("GetTbt_RentalSentryGuardDetails", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_CancelContractMemo> GetTbt_CancelContractMemo(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_CancelContractMemo>("GetTbt_CancelContractMemo", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_CancelContractMemoDetail> GetTbt_CancelContractMemoDetail(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_CancelContractMemoDetail>("GetTbt_CancelContractMemoDetail", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalBEDetails> GetTbt_RentalBEDetails(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalBEDetails>("GetTbt_RentalBEDetails", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dsSaleInstrumentDetails> GetSaleInstrumentDetails(string pchrContractCode, string pchrOCC, string c_INST_TYPE_GENERAL, string c_SALE_CHANGE_TYPE_CANCEL)
        {
    
            ObjectParameter pchrContractCodeParameter;
    
            if (pchrContractCode != null)
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", pchrContractCode);
            }
            else
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", typeof(string));
            }
    
            ObjectParameter pchrOCCParameter;
    
            if (pchrOCC != null)
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", pchrOCC);
            }
            else
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", typeof(string));
            }
    
            ObjectParameter c_INST_TYPE_GENERALParameter;
    
            if (c_INST_TYPE_GENERAL != null)
            {
                c_INST_TYPE_GENERALParameter = new ObjectParameter("C_INST_TYPE_GENERAL", c_INST_TYPE_GENERAL);
            }
            else
            {
                c_INST_TYPE_GENERALParameter = new ObjectParameter("C_INST_TYPE_GENERAL", typeof(string));
            }
    
            ObjectParameter c_SALE_CHANGE_TYPE_CANCELParameter;
    
            if (c_SALE_CHANGE_TYPE_CANCEL != null)
            {
                c_SALE_CHANGE_TYPE_CANCELParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_CANCEL", c_SALE_CHANGE_TYPE_CANCEL);
            }
            else
            {
                c_SALE_CHANGE_TYPE_CANCELParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dsSaleInstrumentDetails>("GetSaleInstrumentDetails", pchrContractCodeParameter, pchrOCCParameter, c_INST_TYPE_GENERALParameter, c_SALE_CHANGE_TYPE_CANCELParameter);
        }
        public ObjectResult<dsGetSiteContractList> GetSiteContractList(string pContractCode, Nullable<bool> pLastestOCCFlag)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pLastestOCCFlagParameter;
    
            if (pLastestOCCFlag.HasValue)
            {
                pLastestOCCFlagParameter = new ObjectParameter("pLastestOCCFlag", pLastestOCCFlag);
            }
            else
            {
                pLastestOCCFlagParameter = new ObjectParameter("pLastestOCCFlag", typeof(bool));
            }
            return base.ExecuteFunction<dsGetSiteContractList>("GetSiteContractList", pContractCodeParameter, pLastestOCCFlagParameter);
        }
        public ObjectResult<dtGetMaintenanceTargetContract> GetMaintenanceTargetContract(string pContractCode, Nullable<bool> pLastestOCCFlag)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pLastestOCCFlagParameter;
    
            if (pLastestOCCFlag.HasValue)
            {
                pLastestOCCFlagParameter = new ObjectParameter("pLastestOCCFlag", pLastestOCCFlag);
            }
            else
            {
                pLastestOCCFlagParameter = new ObjectParameter("pLastestOCCFlag", typeof(bool));
            }
            return base.ExecuteFunction<dtGetMaintenanceTargetContract>("GetMaintenanceTargetContract", pContractCodeParameter, pLastestOCCFlagParameter);
        }
        public ObjectResult<dtProjectData> GetProjectDataForSearch(string pchrProjectCode, string pchvContractCode, string pchnvProductCode, string pchnvProjectName, string pchnvProjectAddress, string pchnvPJPurchaseName, string pchnvOwner1Name, string pchnvCompanyName, string pchnvOtherProjectRelatedPersonName, string pchnvHeadSalesmanEmpName, string pchnvProjectManagerEmpName)
        {
    
            ObjectParameter pchrProjectCodeParameter;
    
            if (pchrProjectCode != null)
            {
                pchrProjectCodeParameter = new ObjectParameter("pchrProjectCode", pchrProjectCode);
            }
            else
            {
                pchrProjectCodeParameter = new ObjectParameter("pchrProjectCode", typeof(string));
            }
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter pchnvProductCodeParameter;
    
            if (pchnvProductCode != null)
            {
                pchnvProductCodeParameter = new ObjectParameter("pchnvProductCode", pchnvProductCode);
            }
            else
            {
                pchnvProductCodeParameter = new ObjectParameter("pchnvProductCode", typeof(string));
            }
    
            ObjectParameter pchnvProjectNameParameter;
    
            if (pchnvProjectName != null)
            {
                pchnvProjectNameParameter = new ObjectParameter("pchnvProjectName", pchnvProjectName);
            }
            else
            {
                pchnvProjectNameParameter = new ObjectParameter("pchnvProjectName", typeof(string));
            }
    
            ObjectParameter pchnvProjectAddressParameter;
    
            if (pchnvProjectAddress != null)
            {
                pchnvProjectAddressParameter = new ObjectParameter("pchnvProjectAddress", pchnvProjectAddress);
            }
            else
            {
                pchnvProjectAddressParameter = new ObjectParameter("pchnvProjectAddress", typeof(string));
            }
    
            ObjectParameter pchnvPJPurchaseNameParameter;
    
            if (pchnvPJPurchaseName != null)
            {
                pchnvPJPurchaseNameParameter = new ObjectParameter("pchnvPJPurchaseName", pchnvPJPurchaseName);
            }
            else
            {
                pchnvPJPurchaseNameParameter = new ObjectParameter("pchnvPJPurchaseName", typeof(string));
            }
    
            ObjectParameter pchnvOwner1NameParameter;
    
            if (pchnvOwner1Name != null)
            {
                pchnvOwner1NameParameter = new ObjectParameter("pchnvOwner1Name", pchnvOwner1Name);
            }
            else
            {
                pchnvOwner1NameParameter = new ObjectParameter("pchnvOwner1Name", typeof(string));
            }
    
            ObjectParameter pchnvCompanyNameParameter;
    
            if (pchnvCompanyName != null)
            {
                pchnvCompanyNameParameter = new ObjectParameter("pchnvCompanyName", pchnvCompanyName);
            }
            else
            {
                pchnvCompanyNameParameter = new ObjectParameter("pchnvCompanyName", typeof(string));
            }
    
            ObjectParameter pchnvOtherProjectRelatedPersonNameParameter;
    
            if (pchnvOtherProjectRelatedPersonName != null)
            {
                pchnvOtherProjectRelatedPersonNameParameter = new ObjectParameter("pchnvOtherProjectRelatedPersonName", pchnvOtherProjectRelatedPersonName);
            }
            else
            {
                pchnvOtherProjectRelatedPersonNameParameter = new ObjectParameter("pchnvOtherProjectRelatedPersonName", typeof(string));
            }
    
            ObjectParameter pchnvHeadSalesmanEmpNameParameter;
    
            if (pchnvHeadSalesmanEmpName != null)
            {
                pchnvHeadSalesmanEmpNameParameter = new ObjectParameter("pchnvHeadSalesmanEmpName", pchnvHeadSalesmanEmpName);
            }
            else
            {
                pchnvHeadSalesmanEmpNameParameter = new ObjectParameter("pchnvHeadSalesmanEmpName", typeof(string));
            }
    
            ObjectParameter pchnvProjectManagerEmpNameParameter;
    
            if (pchnvProjectManagerEmpName != null)
            {
                pchnvProjectManagerEmpNameParameter = new ObjectParameter("pchnvProjectManagerEmpName", pchnvProjectManagerEmpName);
            }
            else
            {
                pchnvProjectManagerEmpNameParameter = new ObjectParameter("pchnvProjectManagerEmpName", typeof(string));
            }
            return base.ExecuteFunction<dtProjectData>("GetProjectDataForSearch", pchrProjectCodeParameter, pchvContractCodeParameter, pchnvProductCodeParameter, pchnvProjectNameParameter, pchnvProjectAddressParameter, pchnvPJPurchaseNameParameter, pchnvOwner1NameParameter, pchnvCompanyNameParameter, pchnvOtherProjectRelatedPersonNameParameter, pchnvHeadSalesmanEmpNameParameter, pchnvProjectManagerEmpNameParameter);
        }
        public ObjectResult<dtCustomerList> GetCustomerListForSearchInfo(string pchrCustomerCode, string pchrRoleTypeContractTarget, string pchrRoleTypePurchaser, string pchrRoleTypeRealCustomer, string pchrGroupCode, string pchrnCustomerName, string pchrnGroupName, string pchrCustomerStatus, string pchrCustomerTypeCode, string pchrCompanyTypeCode, string pchrnIDNo, string pchrRegionCode, string pchrBusinessTypeCode, string pchrnCust_Address, string pchrnCust_Alley, string pchrnCust_Road, string pchrnCust_SubDistrict, string pchrCust_ProvinceCode, string pchrCust_DistrictCode, string pchrCust_ZipCode, string pchrnCust_PhoneNo, string pchrnCust_FaxNo, string pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, string pchrC_CUST_ROLE_TYPE_REAL_CUST, string pchrC_CUST_ROLE_TYPE_PURCHASER, Nullable<bool> pbitC_FLAG_ON, string pchrC_SERVICE_TYPE_RENTAL, string pchrC_SERVICE_TYPE_SALE, string pchrC_CONTRACT_STATUS_BEF_START, string c_CUST_TYPE_JURISTIC)
        {
    
            ObjectParameter pchrCustomerCodeParameter;
    
            if (pchrCustomerCode != null)
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", pchrCustomerCode);
            }
            else
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", typeof(string));
            }
    
            ObjectParameter pchrRoleTypeContractTargetParameter;
    
            if (pchrRoleTypeContractTarget != null)
            {
                pchrRoleTypeContractTargetParameter = new ObjectParameter("pchrRoleTypeContractTarget", pchrRoleTypeContractTarget);
            }
            else
            {
                pchrRoleTypeContractTargetParameter = new ObjectParameter("pchrRoleTypeContractTarget", typeof(string));
            }
    
            ObjectParameter pchrRoleTypePurchaserParameter;
    
            if (pchrRoleTypePurchaser != null)
            {
                pchrRoleTypePurchaserParameter = new ObjectParameter("pchrRoleTypePurchaser", pchrRoleTypePurchaser);
            }
            else
            {
                pchrRoleTypePurchaserParameter = new ObjectParameter("pchrRoleTypePurchaser", typeof(string));
            }
    
            ObjectParameter pchrRoleTypeRealCustomerParameter;
    
            if (pchrRoleTypeRealCustomer != null)
            {
                pchrRoleTypeRealCustomerParameter = new ObjectParameter("pchrRoleTypeRealCustomer", pchrRoleTypeRealCustomer);
            }
            else
            {
                pchrRoleTypeRealCustomerParameter = new ObjectParameter("pchrRoleTypeRealCustomer", typeof(string));
            }
    
            ObjectParameter pchrGroupCodeParameter;
    
            if (pchrGroupCode != null)
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", pchrGroupCode);
            }
            else
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", typeof(string));
            }
    
            ObjectParameter pchrnCustomerNameParameter;
    
            if (pchrnCustomerName != null)
            {
                pchrnCustomerNameParameter = new ObjectParameter("pchrnCustomerName", pchrnCustomerName);
            }
            else
            {
                pchrnCustomerNameParameter = new ObjectParameter("pchrnCustomerName", typeof(string));
            }
    
            ObjectParameter pchrnGroupNameParameter;
    
            if (pchrnGroupName != null)
            {
                pchrnGroupNameParameter = new ObjectParameter("pchrnGroupName", pchrnGroupName);
            }
            else
            {
                pchrnGroupNameParameter = new ObjectParameter("pchrnGroupName", typeof(string));
            }
    
            ObjectParameter pchrCustomerStatusParameter;
    
            if (pchrCustomerStatus != null)
            {
                pchrCustomerStatusParameter = new ObjectParameter("pchrCustomerStatus", pchrCustomerStatus);
            }
            else
            {
                pchrCustomerStatusParameter = new ObjectParameter("pchrCustomerStatus", typeof(string));
            }
    
            ObjectParameter pchrCustomerTypeCodeParameter;
    
            if (pchrCustomerTypeCode != null)
            {
                pchrCustomerTypeCodeParameter = new ObjectParameter("pchrCustomerTypeCode", pchrCustomerTypeCode);
            }
            else
            {
                pchrCustomerTypeCodeParameter = new ObjectParameter("pchrCustomerTypeCode", typeof(string));
            }
    
            ObjectParameter pchrCompanyTypeCodeParameter;
    
            if (pchrCompanyTypeCode != null)
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", pchrCompanyTypeCode);
            }
            else
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", typeof(string));
            }
    
            ObjectParameter pchrnIDNoParameter;
    
            if (pchrnIDNo != null)
            {
                pchrnIDNoParameter = new ObjectParameter("pchrnIDNo", pchrnIDNo);
            }
            else
            {
                pchrnIDNoParameter = new ObjectParameter("pchrnIDNo", typeof(string));
            }
    
            ObjectParameter pchrRegionCodeParameter;
    
            if (pchrRegionCode != null)
            {
                pchrRegionCodeParameter = new ObjectParameter("pchrRegionCode", pchrRegionCode);
            }
            else
            {
                pchrRegionCodeParameter = new ObjectParameter("pchrRegionCode", typeof(string));
            }
    
            ObjectParameter pchrBusinessTypeCodeParameter;
    
            if (pchrBusinessTypeCode != null)
            {
                pchrBusinessTypeCodeParameter = new ObjectParameter("pchrBusinessTypeCode", pchrBusinessTypeCode);
            }
            else
            {
                pchrBusinessTypeCodeParameter = new ObjectParameter("pchrBusinessTypeCode", typeof(string));
            }
    
            ObjectParameter pchrnCust_AddressParameter;
    
            if (pchrnCust_Address != null)
            {
                pchrnCust_AddressParameter = new ObjectParameter("pchrnCust_Address", pchrnCust_Address);
            }
            else
            {
                pchrnCust_AddressParameter = new ObjectParameter("pchrnCust_Address", typeof(string));
            }
    
            ObjectParameter pchrnCust_AlleyParameter;
    
            if (pchrnCust_Alley != null)
            {
                pchrnCust_AlleyParameter = new ObjectParameter("pchrnCust_Alley", pchrnCust_Alley);
            }
            else
            {
                pchrnCust_AlleyParameter = new ObjectParameter("pchrnCust_Alley", typeof(string));
            }
    
            ObjectParameter pchrnCust_RoadParameter;
    
            if (pchrnCust_Road != null)
            {
                pchrnCust_RoadParameter = new ObjectParameter("pchrnCust_Road", pchrnCust_Road);
            }
            else
            {
                pchrnCust_RoadParameter = new ObjectParameter("pchrnCust_Road", typeof(string));
            }
    
            ObjectParameter pchrnCust_SubDistrictParameter;
    
            if (pchrnCust_SubDistrict != null)
            {
                pchrnCust_SubDistrictParameter = new ObjectParameter("pchrnCust_SubDistrict", pchrnCust_SubDistrict);
            }
            else
            {
                pchrnCust_SubDistrictParameter = new ObjectParameter("pchrnCust_SubDistrict", typeof(string));
            }
    
            ObjectParameter pchrCust_ProvinceCodeParameter;
    
            if (pchrCust_ProvinceCode != null)
            {
                pchrCust_ProvinceCodeParameter = new ObjectParameter("pchrCust_ProvinceCode", pchrCust_ProvinceCode);
            }
            else
            {
                pchrCust_ProvinceCodeParameter = new ObjectParameter("pchrCust_ProvinceCode", typeof(string));
            }
    
            ObjectParameter pchrCust_DistrictCodeParameter;
    
            if (pchrCust_DistrictCode != null)
            {
                pchrCust_DistrictCodeParameter = new ObjectParameter("pchrCust_DistrictCode", pchrCust_DistrictCode);
            }
            else
            {
                pchrCust_DistrictCodeParameter = new ObjectParameter("pchrCust_DistrictCode", typeof(string));
            }
    
            ObjectParameter pchrCust_ZipCodeParameter;
    
            if (pchrCust_ZipCode != null)
            {
                pchrCust_ZipCodeParameter = new ObjectParameter("pchrCust_ZipCode", pchrCust_ZipCode);
            }
            else
            {
                pchrCust_ZipCodeParameter = new ObjectParameter("pchrCust_ZipCode", typeof(string));
            }
    
            ObjectParameter pchrnCust_PhoneNoParameter;
    
            if (pchrnCust_PhoneNo != null)
            {
                pchrnCust_PhoneNoParameter = new ObjectParameter("pchrnCust_PhoneNo", pchrnCust_PhoneNo);
            }
            else
            {
                pchrnCust_PhoneNoParameter = new ObjectParameter("pchrnCust_PhoneNo", typeof(string));
            }
    
            ObjectParameter pchrnCust_FaxNoParameter;
    
            if (pchrnCust_FaxNo != null)
            {
                pchrnCust_FaxNoParameter = new ObjectParameter("pchrnCust_FaxNo", pchrnCust_FaxNo);
            }
            else
            {
                pchrnCust_FaxNoParameter = new ObjectParameter("pchrnCust_FaxNo", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter;
    
            if (pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET != null)
            {
                pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET", pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter;
    
            if (pchrC_CUST_ROLE_TYPE_REAL_CUST != null)
            {
                pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_REAL_CUST", pchrC_CUST_ROLE_TYPE_REAL_CUST);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_REAL_CUST", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_PURCHASERParameter;
    
            if (pchrC_CUST_ROLE_TYPE_PURCHASER != null)
            {
                pchrC_CUST_ROLE_TYPE_PURCHASERParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_PURCHASER", pchrC_CUST_ROLE_TYPE_PURCHASER);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_PURCHASERParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_PURCHASER", typeof(string));
            }
    
            ObjectParameter pbitC_FLAG_ONParameter;
    
            if (pbitC_FLAG_ON.HasValue)
            {
                pbitC_FLAG_ONParameter = new ObjectParameter("pbitC_FLAG_ON", pbitC_FLAG_ON);
            }
            else
            {
                pbitC_FLAG_ONParameter = new ObjectParameter("pbitC_FLAG_ON", typeof(bool));
            }
    
            ObjectParameter pchrC_SERVICE_TYPE_RENTALParameter;
    
            if (pchrC_SERVICE_TYPE_RENTAL != null)
            {
                pchrC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pchrC_SERVICE_TYPE_RENTAL", pchrC_SERVICE_TYPE_RENTAL);
            }
            else
            {
                pchrC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pchrC_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter pchrC_SERVICE_TYPE_SALEParameter;
    
            if (pchrC_SERVICE_TYPE_SALE != null)
            {
                pchrC_SERVICE_TYPE_SALEParameter = new ObjectParameter("pchrC_SERVICE_TYPE_SALE", pchrC_SERVICE_TYPE_SALE);
            }
            else
            {
                pchrC_SERVICE_TYPE_SALEParameter = new ObjectParameter("pchrC_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter pchrC_CONTRACT_STATUS_BEF_STARTParameter;
    
            if (pchrC_CONTRACT_STATUS_BEF_START != null)
            {
                pchrC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_BEF_START", pchrC_CONTRACT_STATUS_BEF_START);
            }
            else
            {
                pchrC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_BEF_START", typeof(string));
            }
    
            ObjectParameter c_CUST_TYPE_JURISTICParameter;
    
            if (c_CUST_TYPE_JURISTIC != null)
            {
                c_CUST_TYPE_JURISTICParameter = new ObjectParameter("C_CUST_TYPE_JURISTIC", c_CUST_TYPE_JURISTIC);
            }
            else
            {
                c_CUST_TYPE_JURISTICParameter = new ObjectParameter("C_CUST_TYPE_JURISTIC", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerList>("GetCustomerListForSearchInfo", pchrCustomerCodeParameter, pchrRoleTypeContractTargetParameter, pchrRoleTypePurchaserParameter, pchrRoleTypeRealCustomerParameter, pchrGroupCodeParameter, pchrnCustomerNameParameter, pchrnGroupNameParameter, pchrCustomerStatusParameter, pchrCustomerTypeCodeParameter, pchrCompanyTypeCodeParameter, pchrnIDNoParameter, pchrRegionCodeParameter, pchrBusinessTypeCodeParameter, pchrnCust_AddressParameter, pchrnCust_AlleyParameter, pchrnCust_RoadParameter, pchrnCust_SubDistrictParameter, pchrCust_ProvinceCodeParameter, pchrCust_DistrictCodeParameter, pchrCust_ZipCodeParameter, pchrnCust_PhoneNoParameter, pchrnCust_FaxNoParameter, pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter, pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter, pchrC_CUST_ROLE_TYPE_PURCHASERParameter, pbitC_FLAG_ONParameter, pchrC_SERVICE_TYPE_RENTALParameter, pchrC_SERVICE_TYPE_SALEParameter, pchrC_CONTRACT_STATUS_BEF_STARTParameter, c_CUST_TYPE_JURISTICParameter);
        }
        public ObjectResult<dtContractsSameSite> GetContractsListForViewSite(string pSiteCode, string pC_RENTAL_CHANGE_TYPE, string pC_SALE_CHANGE_TYPE, string pC_SERVICE_TYPE_RENTAL, string pC_SALE_CHANGE_TYPE_NEW_SALE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter pSiteCodeParameter;
    
            if (pSiteCode != null)
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", pSiteCode);
            }
            else
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", typeof(string));
            }
    
            ObjectParameter pC_RENTAL_CHANGE_TYPEParameter;
    
            if (pC_RENTAL_CHANGE_TYPE != null)
            {
                pC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pC_RENTAL_CHANGE_TYPE", pC_RENTAL_CHANGE_TYPE);
            }
            else
            {
                pC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pC_RENTAL_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SALE_CHANGE_TYPEParameter;
    
            if (pC_SALE_CHANGE_TYPE != null)
            {
                pC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE", pC_SALE_CHANGE_TYPE);
            }
            else
            {
                pC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SERVICE_TYPE_RENTALParameter;
    
            if (pC_SERVICE_TYPE_RENTAL != null)
            {
                pC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pC_SERVICE_TYPE_RENTAL", pC_SERVICE_TYPE_RENTAL);
            }
            else
            {
                pC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pC_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter pC_SALE_CHANGE_TYPE_NEW_SALEParameter;
    
            if (pC_SALE_CHANGE_TYPE_NEW_SALE != null)
            {
                pC_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE_NEW_SALE", pC_SALE_CHANGE_TYPE_NEW_SALE);
            }
            else
            {
                pC_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtContractsSameSite>("GetContractsListForViewSite", pSiteCodeParameter, pC_RENTAL_CHANGE_TYPEParameter, pC_SALE_CHANGE_TYPEParameter, pC_SERVICE_TYPE_RENTALParameter, pC_SALE_CHANGE_TYPE_NEW_SALEParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtSiteList> GetSiteListForCustInfo(string pchvCustomerCode, string pchrCustomerRole, string pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, string pchrC_CUST_ROLE_TYPE_REAL_CUST, string pchrC_CUST_ROLE_TYPE_PURCHASER, Nullable<bool> pbitC_FLAG_ON, string pchrC_SERVICE_TYPE_RENTAL, string pchrC_RENTAL_CHANGE_TYPE_END_CONTRACT, string pchrC_RENTAL_CHANGE_TYPE_CANCEL, string pchrC_SERVICE_TYPE_SALE, string pchrC_CONTRACT_STATUS_CANCEL, string pchrC_CONTRACT_STATUS_END, string pchrC_CONTRACT_STATUS_BEF_START, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter pchvCustomerCodeParameter;
    
            if (pchvCustomerCode != null)
            {
                pchvCustomerCodeParameter = new ObjectParameter("pchvCustomerCode", pchvCustomerCode);
            }
            else
            {
                pchvCustomerCodeParameter = new ObjectParameter("pchvCustomerCode", typeof(string));
            }
    
            ObjectParameter pchrCustomerRoleParameter;
    
            if (pchrCustomerRole != null)
            {
                pchrCustomerRoleParameter = new ObjectParameter("pchrCustomerRole", pchrCustomerRole);
            }
            else
            {
                pchrCustomerRoleParameter = new ObjectParameter("pchrCustomerRole", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter;
    
            if (pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET != null)
            {
                pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET", pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter;
    
            if (pchrC_CUST_ROLE_TYPE_REAL_CUST != null)
            {
                pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_REAL_CUST", pchrC_CUST_ROLE_TYPE_REAL_CUST);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_REAL_CUST", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_PURCHASERParameter;
    
            if (pchrC_CUST_ROLE_TYPE_PURCHASER != null)
            {
                pchrC_CUST_ROLE_TYPE_PURCHASERParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_PURCHASER", pchrC_CUST_ROLE_TYPE_PURCHASER);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_PURCHASERParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_PURCHASER", typeof(string));
            }
    
            ObjectParameter pbitC_FLAG_ONParameter;
    
            if (pbitC_FLAG_ON.HasValue)
            {
                pbitC_FLAG_ONParameter = new ObjectParameter("pbitC_FLAG_ON", pbitC_FLAG_ON);
            }
            else
            {
                pbitC_FLAG_ONParameter = new ObjectParameter("pbitC_FLAG_ON", typeof(bool));
            }
    
            ObjectParameter pchrC_SERVICE_TYPE_RENTALParameter;
    
            if (pchrC_SERVICE_TYPE_RENTAL != null)
            {
                pchrC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pchrC_SERVICE_TYPE_RENTAL", pchrC_SERVICE_TYPE_RENTAL);
            }
            else
            {
                pchrC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pchrC_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter pchrC_RENTAL_CHANGE_TYPE_END_CONTRACTParameter;
    
            if (pchrC_RENTAL_CHANGE_TYPE_END_CONTRACT != null)
            {
                pchrC_RENTAL_CHANGE_TYPE_END_CONTRACTParameter = new ObjectParameter("pchrC_RENTAL_CHANGE_TYPE_END_CONTRACT", pchrC_RENTAL_CHANGE_TYPE_END_CONTRACT);
            }
            else
            {
                pchrC_RENTAL_CHANGE_TYPE_END_CONTRACTParameter = new ObjectParameter("pchrC_RENTAL_CHANGE_TYPE_END_CONTRACT", typeof(string));
            }
    
            ObjectParameter pchrC_RENTAL_CHANGE_TYPE_CANCELParameter;
    
            if (pchrC_RENTAL_CHANGE_TYPE_CANCEL != null)
            {
                pchrC_RENTAL_CHANGE_TYPE_CANCELParameter = new ObjectParameter("pchrC_RENTAL_CHANGE_TYPE_CANCEL", pchrC_RENTAL_CHANGE_TYPE_CANCEL);
            }
            else
            {
                pchrC_RENTAL_CHANGE_TYPE_CANCELParameter = new ObjectParameter("pchrC_RENTAL_CHANGE_TYPE_CANCEL", typeof(string));
            }
    
            ObjectParameter pchrC_SERVICE_TYPE_SALEParameter;
    
            if (pchrC_SERVICE_TYPE_SALE != null)
            {
                pchrC_SERVICE_TYPE_SALEParameter = new ObjectParameter("pchrC_SERVICE_TYPE_SALE", pchrC_SERVICE_TYPE_SALE);
            }
            else
            {
                pchrC_SERVICE_TYPE_SALEParameter = new ObjectParameter("pchrC_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter pchrC_CONTRACT_STATUS_CANCELParameter;
    
            if (pchrC_CONTRACT_STATUS_CANCEL != null)
            {
                pchrC_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_CANCEL", pchrC_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                pchrC_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter pchrC_CONTRACT_STATUS_ENDParameter;
    
            if (pchrC_CONTRACT_STATUS_END != null)
            {
                pchrC_CONTRACT_STATUS_ENDParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_END", pchrC_CONTRACT_STATUS_END);
            }
            else
            {
                pchrC_CONTRACT_STATUS_ENDParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter pchrC_CONTRACT_STATUS_BEF_STARTParameter;
    
            if (pchrC_CONTRACT_STATUS_BEF_START != null)
            {
                pchrC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_BEF_START", pchrC_CONTRACT_STATUS_BEF_START);
            }
            else
            {
                pchrC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_BEF_START", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtSiteList>("GetSiteListForCustInfo", pchvCustomerCodeParameter, pchrCustomerRoleParameter, pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter, pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter, pchrC_CUST_ROLE_TYPE_PURCHASERParameter, pbitC_FLAG_ONParameter, pchrC_SERVICE_TYPE_RENTALParameter, pchrC_RENTAL_CHANGE_TYPE_END_CONTRACTParameter, pchrC_RENTAL_CHANGE_TYPE_CANCELParameter, pchrC_SERVICE_TYPE_SALEParameter, pchrC_CONTRACT_STATUS_CANCELParameter, pchrC_CONTRACT_STATUS_ENDParameter, pchrC_CONTRACT_STATUS_BEF_STARTParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<doBillingTempBasic> GetBillingBasicData(string pContractCode, string pOCC, string pBillingType, string pBillingTiming, string pC_BILLING_TYPE_SALE_PRICE, string pC_BILLINGTEMP_FLAG_KEEP, string pC_CURRENCY_LOCAL)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pBillingTypeParameter;
    
            if (pBillingType != null)
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", pBillingType);
            }
            else
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", typeof(string));
            }
    
            ObjectParameter pBillingTimingParameter;
    
            if (pBillingTiming != null)
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", pBillingTiming);
            }
            else
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", typeof(string));
            }
    
            ObjectParameter pC_BILLING_TYPE_SALE_PRICEParameter;
    
            if (pC_BILLING_TYPE_SALE_PRICE != null)
            {
                pC_BILLING_TYPE_SALE_PRICEParameter = new ObjectParameter("pC_BILLING_TYPE_SALE_PRICE", pC_BILLING_TYPE_SALE_PRICE);
            }
            else
            {
                pC_BILLING_TYPE_SALE_PRICEParameter = new ObjectParameter("pC_BILLING_TYPE_SALE_PRICE", typeof(string));
            }
    
            ObjectParameter pC_BILLINGTEMP_FLAG_KEEPParameter;
    
            if (pC_BILLINGTEMP_FLAG_KEEP != null)
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", pC_BILLINGTEMP_FLAG_KEEP);
            }
            else
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", typeof(string));
            }
    
            ObjectParameter pC_CURRENCY_LOCALParameter;
    
            if (pC_CURRENCY_LOCAL != null)
            {
                pC_CURRENCY_LOCALParameter = new ObjectParameter("pC_CURRENCY_LOCAL", pC_CURRENCY_LOCAL);
            }
            else
            {
                pC_CURRENCY_LOCALParameter = new ObjectParameter("pC_CURRENCY_LOCAL", typeof(string));
            }
            return base.ExecuteFunction<doBillingTempBasic>("GetBillingBasicData", pContractCodeParameter, pOCCParameter, pBillingTypeParameter, pBillingTimingParameter, pC_BILLING_TYPE_SALE_PRICEParameter, pC_BILLINGTEMP_FLAG_KEEPParameter, pC_CURRENCY_LOCALParameter);
        }
        public ObjectResult<doBillingTempDetail> GetBillingDetailData(string pContractCode, string pOCC, string pBillingType, string pBillingTiming, string pC_BILLINGTEMP_FLAG_KEEP)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pBillingTypeParameter;
    
            if (pBillingType != null)
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", pBillingType);
            }
            else
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", typeof(string));
            }
    
            ObjectParameter pBillingTimingParameter;
    
            if (pBillingTiming != null)
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", pBillingTiming);
            }
            else
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", typeof(string));
            }
    
            ObjectParameter pC_BILLINGTEMP_FLAG_KEEPParameter;
    
            if (pC_BILLINGTEMP_FLAG_KEEP != null)
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", pC_BILLINGTEMP_FLAG_KEEP);
            }
            else
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", typeof(string));
            }
            return base.ExecuteFunction<doBillingTempDetail>("GetBillingDetailData", pContractCodeParameter, pOCCParameter, pBillingTypeParameter, pBillingTimingParameter, pC_BILLINGTEMP_FLAG_KEEPParameter);
        }
        public ObjectResult<tbt_BillingTemp> InsertTbt_BillingTemp(string pContractCode, string pOCC, string pBillingOCC, string pBillingTargetRunningNo, string pBillingClientCode, string pBillingTargetCode, string pBillingOfficeCode, string pBillingType, Nullable<int> pCreditTerm, string pBillingTiming, Nullable<decimal> pBillingAmt, string pPayMethod, Nullable<int> pBillingCycle, string pCalDailyFeeStatus, string pSendFlag, Nullable<System.DateTime> pProcessDateTime, string pEmpNo, string pDocLanguage, Nullable<decimal> pBillingAmtUsd, string pBillingAmtCurrencyType)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pBillingOCCParameter;
    
            if (pBillingOCC != null)
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", pBillingOCC);
            }
            else
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", typeof(string));
            }
    
            ObjectParameter pBillingTargetRunningNoParameter;
    
            if (pBillingTargetRunningNo != null)
            {
                pBillingTargetRunningNoParameter = new ObjectParameter("pBillingTargetRunningNo", pBillingTargetRunningNo);
            }
            else
            {
                pBillingTargetRunningNoParameter = new ObjectParameter("pBillingTargetRunningNo", typeof(string));
            }
    
            ObjectParameter pBillingClientCodeParameter;
    
            if (pBillingClientCode != null)
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", pBillingClientCode);
            }
            else
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", typeof(string));
            }
    
            ObjectParameter pBillingTargetCodeParameter;
    
            if (pBillingTargetCode != null)
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", pBillingTargetCode);
            }
            else
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", typeof(string));
            }
    
            ObjectParameter pBillingOfficeCodeParameter;
    
            if (pBillingOfficeCode != null)
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", pBillingOfficeCode);
            }
            else
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", typeof(string));
            }
    
            ObjectParameter pBillingTypeParameter;
    
            if (pBillingType != null)
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", pBillingType);
            }
            else
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", typeof(string));
            }
    
            ObjectParameter pCreditTermParameter;
    
            if (pCreditTerm.HasValue)
            {
                pCreditTermParameter = new ObjectParameter("pCreditTerm", pCreditTerm);
            }
            else
            {
                pCreditTermParameter = new ObjectParameter("pCreditTerm", typeof(int));
            }
    
            ObjectParameter pBillingTimingParameter;
    
            if (pBillingTiming != null)
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", pBillingTiming);
            }
            else
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", typeof(string));
            }
    
            ObjectParameter pBillingAmtParameter;
    
            if (pBillingAmt.HasValue)
            {
                pBillingAmtParameter = new ObjectParameter("pBillingAmt", pBillingAmt);
            }
            else
            {
                pBillingAmtParameter = new ObjectParameter("pBillingAmt", typeof(decimal));
            }
    
            ObjectParameter pPayMethodParameter;
    
            if (pPayMethod != null)
            {
                pPayMethodParameter = new ObjectParameter("pPayMethod", pPayMethod);
            }
            else
            {
                pPayMethodParameter = new ObjectParameter("pPayMethod", typeof(string));
            }
    
            ObjectParameter pBillingCycleParameter;
    
            if (pBillingCycle.HasValue)
            {
                pBillingCycleParameter = new ObjectParameter("pBillingCycle", pBillingCycle);
            }
            else
            {
                pBillingCycleParameter = new ObjectParameter("pBillingCycle", typeof(int));
            }
    
            ObjectParameter pCalDailyFeeStatusParameter;
    
            if (pCalDailyFeeStatus != null)
            {
                pCalDailyFeeStatusParameter = new ObjectParameter("pCalDailyFeeStatus", pCalDailyFeeStatus);
            }
            else
            {
                pCalDailyFeeStatusParameter = new ObjectParameter("pCalDailyFeeStatus", typeof(string));
            }
    
            ObjectParameter pSendFlagParameter;
    
            if (pSendFlag != null)
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", pSendFlag);
            }
            else
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", typeof(string));
            }
    
            ObjectParameter pProcessDateTimeParameter;
    
            if (pProcessDateTime.HasValue)
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", pProcessDateTime);
            }
            else
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter pDocLanguageParameter;
    
            if (pDocLanguage != null)
            {
                pDocLanguageParameter = new ObjectParameter("pDocLanguage", pDocLanguage);
            }
            else
            {
                pDocLanguageParameter = new ObjectParameter("pDocLanguage", typeof(string));
            }
    
            ObjectParameter pBillingAmtUsdParameter;
    
            if (pBillingAmtUsd.HasValue)
            {
                pBillingAmtUsdParameter = new ObjectParameter("pBillingAmtUsd", pBillingAmtUsd);
            }
            else
            {
                pBillingAmtUsdParameter = new ObjectParameter("pBillingAmtUsd", typeof(decimal));
            }
    
            ObjectParameter pBillingAmtCurrencyTypeParameter;
    
            if (pBillingAmtCurrencyType != null)
            {
                pBillingAmtCurrencyTypeParameter = new ObjectParameter("pBillingAmtCurrencyType", pBillingAmtCurrencyType);
            }
            else
            {
                pBillingAmtCurrencyTypeParameter = new ObjectParameter("pBillingAmtCurrencyType", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("InsertTbt_BillingTemp", pContractCodeParameter, pOCCParameter, pBillingOCCParameter, pBillingTargetRunningNoParameter, pBillingClientCodeParameter, pBillingTargetCodeParameter, pBillingOfficeCodeParameter, pBillingTypeParameter, pCreditTermParameter, pBillingTimingParameter, pBillingAmtParameter, pPayMethodParameter, pBillingCycleParameter, pCalDailyFeeStatusParameter, pSendFlagParameter, pProcessDateTimeParameter, pEmpNoParameter, pDocLanguageParameter, pBillingAmtUsdParameter, pBillingAmtCurrencyTypeParameter);
        }
        public ObjectResult<tbt_BillingTemp> DeleteTbt_BillingTemp_ByContractCode(string pContractCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("DeleteTbt_BillingTemp_ByContractCode", pContractCodeParameter);
        }
        public ObjectResult<tbt_BillingTemp> DeleteTbt_BillingTemp_ByContractCodeOCC(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("DeleteTbt_BillingTemp_ByContractCodeOCC", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_BillingTemp> DeleteTbt_BillingTemp_ByKey(string pContractCode, string pOCC, Nullable<int> pSequenceNo)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pSequenceNoParameter;
    
            if (pSequenceNo.HasValue)
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", pSequenceNo);
            }
            else
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", typeof(int));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("DeleteTbt_BillingTemp_ByKey", pContractCodeParameter, pOCCParameter, pSequenceNoParameter);
        }
        public ObjectResult<tbt_BillingTemp> UpdateTbt_BillingTemp_ByBillingClientAndOffice(string pBillingOCC, string pBillingTargetCode, string pContractCode, string pBillingClientCode, string pBillingOfficeCode, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo)
        {
    
            ObjectParameter pBillingOCCParameter;
    
            if (pBillingOCC != null)
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", pBillingOCC);
            }
            else
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", typeof(string));
            }
    
            ObjectParameter pBillingTargetCodeParameter;
    
            if (pBillingTargetCode != null)
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", pBillingTargetCode);
            }
            else
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pBillingClientCodeParameter;
    
            if (pBillingClientCode != null)
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", pBillingClientCode);
            }
            else
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", typeof(string));
            }
    
            ObjectParameter pBillingOfficeCodeParameter;
    
            if (pBillingOfficeCode != null)
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", pBillingOfficeCode);
            }
            else
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", typeof(string));
            }
    
            ObjectParameter pProcessingDateTimeParameter;
    
            if (pProcessingDateTime.HasValue)
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", pProcessingDateTime);
            }
            else
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("UpdateTbt_BillingTemp_ByBillingClientAndOffice", pBillingOCCParameter, pBillingTargetCodeParameter, pContractCodeParameter, pBillingClientCodeParameter, pBillingOfficeCodeParameter, pProcessingDateTimeParameter, pEmpNoParameter);
        }
        public ObjectResult<tbt_BillingTemp> UpdateTbt_BillingTemp_ByBillingTarget(string pNewBillingClientCode, string pNewBillingOfficeCode, string pNewBillingTargetCode, string pOldBillingClientCode, string pOldBillingOfficeCode, string pOldBillingTargetCode, string pContractCode, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo, string pC_BILLINGTEMP_FLAG_KEEP)
        {
    
            ObjectParameter pNewBillingClientCodeParameter;
    
            if (pNewBillingClientCode != null)
            {
                pNewBillingClientCodeParameter = new ObjectParameter("pNewBillingClientCode", pNewBillingClientCode);
            }
            else
            {
                pNewBillingClientCodeParameter = new ObjectParameter("pNewBillingClientCode", typeof(string));
            }
    
            ObjectParameter pNewBillingOfficeCodeParameter;
    
            if (pNewBillingOfficeCode != null)
            {
                pNewBillingOfficeCodeParameter = new ObjectParameter("pNewBillingOfficeCode", pNewBillingOfficeCode);
            }
            else
            {
                pNewBillingOfficeCodeParameter = new ObjectParameter("pNewBillingOfficeCode", typeof(string));
            }
    
            ObjectParameter pNewBillingTargetCodeParameter;
    
            if (pNewBillingTargetCode != null)
            {
                pNewBillingTargetCodeParameter = new ObjectParameter("pNewBillingTargetCode", pNewBillingTargetCode);
            }
            else
            {
                pNewBillingTargetCodeParameter = new ObjectParameter("pNewBillingTargetCode", typeof(string));
            }
    
            ObjectParameter pOldBillingClientCodeParameter;
    
            if (pOldBillingClientCode != null)
            {
                pOldBillingClientCodeParameter = new ObjectParameter("pOldBillingClientCode", pOldBillingClientCode);
            }
            else
            {
                pOldBillingClientCodeParameter = new ObjectParameter("pOldBillingClientCode", typeof(string));
            }
    
            ObjectParameter pOldBillingOfficeCodeParameter;
    
            if (pOldBillingOfficeCode != null)
            {
                pOldBillingOfficeCodeParameter = new ObjectParameter("pOldBillingOfficeCode", pOldBillingOfficeCode);
            }
            else
            {
                pOldBillingOfficeCodeParameter = new ObjectParameter("pOldBillingOfficeCode", typeof(string));
            }
    
            ObjectParameter pOldBillingTargetCodeParameter;
    
            if (pOldBillingTargetCode != null)
            {
                pOldBillingTargetCodeParameter = new ObjectParameter("pOldBillingTargetCode", pOldBillingTargetCode);
            }
            else
            {
                pOldBillingTargetCodeParameter = new ObjectParameter("pOldBillingTargetCode", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pProcessingDateTimeParameter;
    
            if (pProcessingDateTime.HasValue)
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", pProcessingDateTime);
            }
            else
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter pC_BILLINGTEMP_FLAG_KEEPParameter;
    
            if (pC_BILLINGTEMP_FLAG_KEEP != null)
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", pC_BILLINGTEMP_FLAG_KEEP);
            }
            else
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("UpdateTbt_BillingTemp_ByBillingTarget", pNewBillingClientCodeParameter, pNewBillingOfficeCodeParameter, pNewBillingTargetCodeParameter, pOldBillingClientCodeParameter, pOldBillingOfficeCodeParameter, pOldBillingTargetCodeParameter, pContractCodeParameter, pProcessingDateTimeParameter, pEmpNoParameter, pC_BILLINGTEMP_FLAG_KEEPParameter);
        }
        public ObjectResult<tbt_BillingTemp> UpdateTbt_BillingTemp_ByKey(string pBillingOCC, string pBillingTargetRunningNo, string pBillingClientCode, string pBillingTargetCode, string pBillingOfficeCode, string pBillingType, Nullable<int> pCreditTerm, string pBillingTiming, Nullable<decimal> pBillingAmt, string pPayMethod, Nullable<int> pBillingCycle, string pCalDailyFeeStatus, string pSendFlag, string pContractCode, string pOCC, Nullable<int> pSequenceNo, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo, string pBillingAmtCurrencyType, Nullable<decimal> pBillingAmtUsd)
        {
    
            ObjectParameter pBillingOCCParameter;
    
            if (pBillingOCC != null)
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", pBillingOCC);
            }
            else
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", typeof(string));
            }
    
            ObjectParameter pBillingTargetRunningNoParameter;
    
            if (pBillingTargetRunningNo != null)
            {
                pBillingTargetRunningNoParameter = new ObjectParameter("pBillingTargetRunningNo", pBillingTargetRunningNo);
            }
            else
            {
                pBillingTargetRunningNoParameter = new ObjectParameter("pBillingTargetRunningNo", typeof(string));
            }
    
            ObjectParameter pBillingClientCodeParameter;
    
            if (pBillingClientCode != null)
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", pBillingClientCode);
            }
            else
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", typeof(string));
            }
    
            ObjectParameter pBillingTargetCodeParameter;
    
            if (pBillingTargetCode != null)
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", pBillingTargetCode);
            }
            else
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", typeof(string));
            }
    
            ObjectParameter pBillingOfficeCodeParameter;
    
            if (pBillingOfficeCode != null)
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", pBillingOfficeCode);
            }
            else
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", typeof(string));
            }
    
            ObjectParameter pBillingTypeParameter;
    
            if (pBillingType != null)
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", pBillingType);
            }
            else
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", typeof(string));
            }
    
            ObjectParameter pCreditTermParameter;
    
            if (pCreditTerm.HasValue)
            {
                pCreditTermParameter = new ObjectParameter("pCreditTerm", pCreditTerm);
            }
            else
            {
                pCreditTermParameter = new ObjectParameter("pCreditTerm", typeof(int));
            }
    
            ObjectParameter pBillingTimingParameter;
    
            if (pBillingTiming != null)
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", pBillingTiming);
            }
            else
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", typeof(string));
            }
    
            ObjectParameter pBillingAmtParameter;
    
            if (pBillingAmt.HasValue)
            {
                pBillingAmtParameter = new ObjectParameter("pBillingAmt", pBillingAmt);
            }
            else
            {
                pBillingAmtParameter = new ObjectParameter("pBillingAmt", typeof(decimal));
            }
    
            ObjectParameter pPayMethodParameter;
    
            if (pPayMethod != null)
            {
                pPayMethodParameter = new ObjectParameter("pPayMethod", pPayMethod);
            }
            else
            {
                pPayMethodParameter = new ObjectParameter("pPayMethod", typeof(string));
            }
    
            ObjectParameter pBillingCycleParameter;
    
            if (pBillingCycle.HasValue)
            {
                pBillingCycleParameter = new ObjectParameter("pBillingCycle", pBillingCycle);
            }
            else
            {
                pBillingCycleParameter = new ObjectParameter("pBillingCycle", typeof(int));
            }
    
            ObjectParameter pCalDailyFeeStatusParameter;
    
            if (pCalDailyFeeStatus != null)
            {
                pCalDailyFeeStatusParameter = new ObjectParameter("pCalDailyFeeStatus", pCalDailyFeeStatus);
            }
            else
            {
                pCalDailyFeeStatusParameter = new ObjectParameter("pCalDailyFeeStatus", typeof(string));
            }
    
            ObjectParameter pSendFlagParameter;
    
            if (pSendFlag != null)
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", pSendFlag);
            }
            else
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pSequenceNoParameter;
    
            if (pSequenceNo.HasValue)
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", pSequenceNo);
            }
            else
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", typeof(int));
            }
    
            ObjectParameter pProcessingDateTimeParameter;
    
            if (pProcessingDateTime.HasValue)
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", pProcessingDateTime);
            }
            else
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter pBillingAmtCurrencyTypeParameter;
    
            if (pBillingAmtCurrencyType != null)
            {
                pBillingAmtCurrencyTypeParameter = new ObjectParameter("pBillingAmtCurrencyType", pBillingAmtCurrencyType);
            }
            else
            {
                pBillingAmtCurrencyTypeParameter = new ObjectParameter("pBillingAmtCurrencyType", typeof(string));
            }
    
            ObjectParameter pBillingAmtUsdParameter;
    
            if (pBillingAmtUsd.HasValue)
            {
                pBillingAmtUsdParameter = new ObjectParameter("pBillingAmtUsd", pBillingAmtUsd);
            }
            else
            {
                pBillingAmtUsdParameter = new ObjectParameter("pBillingAmtUsd", typeof(decimal));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("UpdateTbt_BillingTemp_ByKey", pBillingOCCParameter, pBillingTargetRunningNoParameter, pBillingClientCodeParameter, pBillingTargetCodeParameter, pBillingOfficeCodeParameter, pBillingTypeParameter, pCreditTermParameter, pBillingTimingParameter, pBillingAmtParameter, pPayMethodParameter, pBillingCycleParameter, pCalDailyFeeStatusParameter, pSendFlagParameter, pContractCodeParameter, pOCCParameter, pSequenceNoParameter, pProcessingDateTimeParameter, pEmpNoParameter, pBillingAmtCurrencyTypeParameter, pBillingAmtUsdParameter);
        }
        public ObjectResult<tbt_BillingTemp> UpdateSendFlag(string pContractCode, Nullable<int> pSequenceNo, string pOCC, string pC_BILLINGTEMP_FLAG_SENT, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pSequenceNoParameter;
    
            if (pSequenceNo.HasValue)
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", pSequenceNo);
            }
            else
            {
                pSequenceNoParameter = new ObjectParameter("pSequenceNo", typeof(int));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pC_BILLINGTEMP_FLAG_SENTParameter;
    
            if (pC_BILLINGTEMP_FLAG_SENT != null)
            {
                pC_BILLINGTEMP_FLAG_SENTParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_SENT", pC_BILLINGTEMP_FLAG_SENT);
            }
            else
            {
                pC_BILLINGTEMP_FLAG_SENTParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_SENT", typeof(string));
            }
    
            ObjectParameter pProcessingDateTimeParameter;
    
            if (pProcessingDateTime.HasValue)
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", pProcessingDateTime);
            }
            else
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("UpdateSendFlag", pContractCodeParameter, pSequenceNoParameter, pOCCParameter, pC_BILLINGTEMP_FLAG_SENTParameter, pProcessingDateTimeParameter, pEmpNoParameter);
        }
        public ObjectResult<doRentalContractBasicInformation> GetRentalContractBasicInformation(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<doRentalContractBasicInformation>("GetRentalContractBasicInformation", strContractCodeParameter);
        }
        public ObjectResult<Nullable<int>> GetContractCounterNo(string strContractCode, string strLastOCC)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strLastOCCParameter;
    
            if (strLastOCC != null)
            {
                strLastOCCParameter = new ObjectParameter("strLastOCC", strLastOCC);
            }
            else
            {
                strLastOCCParameter = new ObjectParameter("strLastOCC", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("GetContractCounterNo", strContractCodeParameter, strLastOCCParameter);
        }
        public ObjectResult<string> GetLastImplementedOCCs(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetLastImplementedOCCs", strContractCodeParameter);
        }
        public ObjectResult<string> GetLastUnimplementedOCCs(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetLastUnimplementedOCCs", strContractCodeParameter);
        }
        public ObjectResult<string> GetContractDocOCC(string strCode, string strOCC)
        {
    
            ObjectParameter strCodeParameter;
    
            if (strCode != null)
            {
                strCodeParameter = new ObjectParameter("strCode", strCode);
            }
            else
            {
                strCodeParameter = new ObjectParameter("strCode", typeof(string));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
            return base.ExecuteFunction<string>("GetContractDocOCC", strCodeParameter, strOCCParameter);
        }
        public ObjectResult<string> GetLastOCCs(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetLastOCCs", strContractCodeParameter);
        }
        public ObjectResult<Nullable<int>> GetLastContractCounterNo(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("GetLastContractCounterNo", strContractCodeParameter);
        }
        public ObjectResult<dtContractListGrp> GetContractListForViewCustGrp_CT_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtContractListGrp>("GetContractListForViewCustGrp_CT_Rental", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtContractListGrp> GetContractListForViewCustGrp_CT_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtContractListGrp>("GetContractListForViewCustGrp_CT_Sale", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtContractListGrp> GetContractListForViewCustGrp_R_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtContractListGrp>("GetContractListForViewCustGrp_R_Rental", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtContractListGrp> GetContractListForViewCustGrp_R_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtContractListGrp>("GetContractListForViewCustGrp_R_Sale", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtCustomerListGrp> GetCustomerListForViewCustGrp_CT_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerListGrp>("GetCustomerListForViewCustGrp_CT_Rental", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtCustomerListGrp> GetCustomerListForViewCustGrp_CT_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerListGrp>("GetCustomerListForViewCustGrp_CT_Sale", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtCustomerListGrp> GetCustomerListForViewCustGrp_R_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerListGrp>("GetCustomerListForViewCustGrp_R_Rental", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtCustomerListGrp> GetCustomerListForViewCustGrp_R_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerListGrp>("GetCustomerListForViewCustGrp_R_Sale", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<tbt_SaleBasic> UpdateTbt_SaleBasic(string xml_doTbtSaleBasic)
        {
    
            ObjectParameter xml_doTbtSaleBasicParameter;
    
            if (xml_doTbtSaleBasic != null)
            {
                xml_doTbtSaleBasicParameter = new ObjectParameter("xml_doTbtSaleBasic", xml_doTbtSaleBasic);
            }
            else
            {
                xml_doTbtSaleBasicParameter = new ObjectParameter("xml_doTbtSaleBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleBasic>("UpdateTbt_SaleBasic", xml_doTbtSaleBasicParameter);
        }
        public ObjectResult<tbt_RentalSecurityBasic> UpdateTbt_RentalSecurityBasic(string xml_doTbtRentalSecurityBasic)
        {
    
            ObjectParameter xml_doTbtRentalSecurityBasicParameter;
    
            if (xml_doTbtRentalSecurityBasic != null)
            {
                xml_doTbtRentalSecurityBasicParameter = new ObjectParameter("xml_doTbtRentalSecurityBasic", xml_doTbtRentalSecurityBasic);
            }
            else
            {
                xml_doTbtRentalSecurityBasicParameter = new ObjectParameter("xml_doTbtRentalSecurityBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSecurityBasic>("UpdateTbt_RentalSecurityBasic", xml_doTbtRentalSecurityBasicParameter);
        }
        public ObjectResult<doContractAutoRenew> GetContractExpireNextMonth(string pC_CONTRACT_STATUS_AFTER_START, Nullable<System.DateTime> batchDate)
        {
    
            ObjectParameter pC_CONTRACT_STATUS_AFTER_STARTParameter;
    
            if (pC_CONTRACT_STATUS_AFTER_START != null)
            {
                pC_CONTRACT_STATUS_AFTER_STARTParameter = new ObjectParameter("pC_CONTRACT_STATUS_AFTER_START", pC_CONTRACT_STATUS_AFTER_START);
            }
            else
            {
                pC_CONTRACT_STATUS_AFTER_STARTParameter = new ObjectParameter("pC_CONTRACT_STATUS_AFTER_START", typeof(string));
            }
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doContractAutoRenew>("GetContractExpireNextMonth", pC_CONTRACT_STATUS_AFTER_STARTParameter, batchDateParameter);
        }
        public ObjectResult<doRentalSecurityBasicInformation> GetRentalSecurityBasicInformation(string strContractCode, string occ)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter occParameter;
    
            if (occ != null)
            {
                occParameter = new ObjectParameter("occ", occ);
            }
            else
            {
                occParameter = new ObjectParameter("occ", typeof(string));
            }
            return base.ExecuteFunction<doRentalSecurityBasicInformation>("GetRentalSecurityBasicInformation", strContractCodeParameter, occParameter);
        }
        public ObjectResult<tbt_Project> GetTbt_Project(string pProjectCode)
        {
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_Project>("GetTbt_Project", pProjectCodeParameter);
        }
        public ObjectResult<tbt_ProjectStockoutInstrument> GetTbt_ProjectStockoutInstrument(string pProjectCode, string pInstrumentCode)
        {
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockoutInstrument>("GetTbt_ProjectStockoutInstrument", pProjectCodeParameter, pInstrumentCodeParameter);
        }
        public ObjectResult<tbt_ProjectStockoutInstrument> InsertTbt_ProjectStockoutInstrument(string xml_doTbtProjectStockoutInstrument)
        {
    
            ObjectParameter xml_doTbtProjectStockoutInstrumentParameter;
    
            if (xml_doTbtProjectStockoutInstrument != null)
            {
                xml_doTbtProjectStockoutInstrumentParameter = new ObjectParameter("xml_doTbtProjectStockoutInstrument", xml_doTbtProjectStockoutInstrument);
            }
            else
            {
                xml_doTbtProjectStockoutInstrumentParameter = new ObjectParameter("xml_doTbtProjectStockoutInstrument", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockoutInstrument>("InsertTbt_ProjectStockoutInstrument", xml_doTbtProjectStockoutInstrumentParameter);
        }
        public ObjectResult<tbt_ProjectStockoutInstrument> UpdateTbt_ProjectStockoutInstrument(string xml_doTbtProjectStockoutInstrument)
        {
    
            ObjectParameter xml_doTbtProjectStockoutInstrumentParameter;
    
            if (xml_doTbtProjectStockoutInstrument != null)
            {
                xml_doTbtProjectStockoutInstrumentParameter = new ObjectParameter("xml_doTbtProjectStockoutInstrument", xml_doTbtProjectStockoutInstrument);
            }
            else
            {
                xml_doTbtProjectStockoutInstrumentParameter = new ObjectParameter("xml_doTbtProjectStockoutInstrument", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockoutInstrument>("UpdateTbt_ProjectStockoutInstrument", xml_doTbtProjectStockoutInstrumentParameter);
        }
        public ObjectResult<tbt_RelationType> GetTbt_RelationType(string pContractCode, string pOCC, string pRelatedContractCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pRelatedContractCodeParameter;
    
            if (pRelatedContractCode != null)
            {
                pRelatedContractCodeParameter = new ObjectParameter("pRelatedContractCode", pRelatedContractCode);
            }
            else
            {
                pRelatedContractCodeParameter = new ObjectParameter("pRelatedContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_RelationType>("GetTbt_RelationType", pContractCodeParameter, pOCCParameter, pRelatedContractCodeParameter);
        }
        public ObjectResult<tbt_RelationType> CheckRelationType(string pContractCode, string pC_CONTRACT_STATUS_END, string pC_CONTRACT_STATUS_CANCEL, string pC_CONTRACT_STATUS_FIXED_CANCEL, string pQuotationTargetCode, string pRelationType)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pC_CONTRACT_STATUS_ENDParameter;
    
            if (pC_CONTRACT_STATUS_END != null)
            {
                pC_CONTRACT_STATUS_ENDParameter = new ObjectParameter("pC_CONTRACT_STATUS_END", pC_CONTRACT_STATUS_END);
            }
            else
            {
                pC_CONTRACT_STATUS_ENDParameter = new ObjectParameter("pC_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter pC_CONTRACT_STATUS_CANCELParameter;
    
            if (pC_CONTRACT_STATUS_CANCEL != null)
            {
                pC_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("pC_CONTRACT_STATUS_CANCEL", pC_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                pC_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("pC_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter pC_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (pC_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                pC_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("pC_CONTRACT_STATUS_FIXED_CANCEL", pC_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                pC_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("pC_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
    
            ObjectParameter pQuotationTargetCodeParameter;
    
            if (pQuotationTargetCode != null)
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", pQuotationTargetCode);
            }
            else
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pRelationTypeParameter;
    
            if (pRelationType != null)
            {
                pRelationTypeParameter = new ObjectParameter("pRelationType", pRelationType);
            }
            else
            {
                pRelationTypeParameter = new ObjectParameter("pRelationType", typeof(string));
            }
            return base.ExecuteFunction<tbt_RelationType>("CheckRelationType", pContractCodeParameter, pC_CONTRACT_STATUS_ENDParameter, pC_CONTRACT_STATUS_CANCELParameter, pC_CONTRACT_STATUS_FIXED_CANCELParameter, pQuotationTargetCodeParameter, pRelationTypeParameter);
        }
        public ObjectResult<Nullable<int>> CancelUnoperationedContract(string strContractCode, string strOCC)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CancelUnoperationedContract", strContractCodeParameter, strOCCParameter);
        }
        public ObjectResult<tbt_CancelContractMemo> DeleteTbt_CancelContractMemo_ByKey(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_CancelContractMemo>("DeleteTbt_CancelContractMemo_ByKey", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalBEDetails> DeleteTbt_RentalBEDetails_ByKey(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalBEDetails>("DeleteTbt_RentalBEDetails_ByKey", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalOperationType> DeleteTbt_RentalOperationType_ByKey(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalOperationType>("DeleteTbt_RentalOperationType_ByKey", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalSentryGuard> DeleteTbt_RentalSentryGuard_ByKey(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSentryGuard>("DeleteTbt_RentalSentryGuard_ByKey", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<dtsiteListGrp> GetSiteListForViewCustGrp_CT_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtsiteListGrp>("GetSiteListForViewCustGrp_CT_Rental", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtsiteListGrp> GetSiteListForViewCustGrp_CT_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtsiteListGrp>("GetSiteListForViewCustGrp_CT_Sale", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtsiteListGrp> GetSiteListForViewCustGrp_R_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtsiteListGrp>("GetSiteListForViewCustGrp_R_Rental", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtsiteListGrp> GetSiteListForViewCustGrp_R_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strGroupCodeParameter;
    
            if (strGroupCode != null)
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", strGroupCode);
            }
            else
            {
                strGroupCodeParameter = new ObjectParameter("strGroupCode", typeof(string));
            }
    
            ObjectParameter strCONTRACT_PREFIXParameter;
    
            if (strCONTRACT_PREFIX != null)
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", strCONTRACT_PREFIX);
            }
            else
            {
                strCONTRACT_PREFIXParameter = new ObjectParameter("strCONTRACT_PREFIX", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtsiteListGrp>("GetSiteListForViewCustGrp_R_Sale", strGroupCodeParameter, strCONTRACT_PREFIXParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<tbt_CancelContractMemoDetail> DeleteTbt_CancelContractMemoDetail_ByContractCodeOCC(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_CancelContractMemoDetail>("DeleteTbt_CancelContractMemoDetail_ByContractCodeOCC", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalInstrumentDetails> DeleteTbt_RentalInstrumentDetails_ByContractCodeOCC(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalInstrumentDetails>("DeleteTbt_RentalInstrumentDetails_ByContractCodeOCC", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalInstSubcontractor> DeleteTbt_RentalInstSubContractor_ByContractCodeOCC(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalInstSubcontractor>("DeleteTbt_RentalInstSubContractor_ByContractCodeOCC", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalSentryGuardDetails> DeleteTbt_RentalSentryguardDetails_ByContractCodeOCC(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSentryGuardDetails>("DeleteTbt_RentalSentryguardDetails_ByContractCodeOCC", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalSecurityBasic> DeleteTbt_RentalSecurityBasic_ByKey(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSecurityBasic>("DeleteTbt_RentalSecurityBasic_ByKey", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_RentalMaintenanceDetails> DeleteTbt_RentalMaintenanceDetails_ByKey(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalMaintenanceDetails>("DeleteTbt_RentalMaintenanceDetails_ByKey", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_SaleInstrumentDetails> GetTbt_SaleInstrumentDetails(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleInstrumentDetails>("GetTbt_SaleInstrumentDetails", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_SaleBasic> InsertTbt_SaleBasic(string xml_SaleBasic)
        {
    
            ObjectParameter xml_SaleBasicParameter;
    
            if (xml_SaleBasic != null)
            {
                xml_SaleBasicParameter = new ObjectParameter("xml_SaleBasic", xml_SaleBasic);
            }
            else
            {
                xml_SaleBasicParameter = new ObjectParameter("xml_SaleBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleBasic>("InsertTbt_SaleBasic", xml_SaleBasicParameter);
        }
        public ObjectResult<tbt_SaleInstrumentDetails> InsertTbt_SaleInstrumentDetails(string xml_SaleInstrumentDetails)
        {
    
            ObjectParameter xml_SaleInstrumentDetailsParameter;
    
            if (xml_SaleInstrumentDetails != null)
            {
                xml_SaleInstrumentDetailsParameter = new ObjectParameter("xml_SaleInstrumentDetails", xml_SaleInstrumentDetails);
            }
            else
            {
                xml_SaleInstrumentDetailsParameter = new ObjectParameter("xml_SaleInstrumentDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleInstrumentDetails>("InsertTbt_SaleInstrumentDetails", xml_SaleInstrumentDetailsParameter);
        }
        public ObjectResult<tbt_SaleInstSubcontractor> InsertTbt_SaleInstSubcontractor(string pContractCode, string pOCC, string pSubcontractorCode, Nullable<System.DateTime> pDate, string pUser)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pSubcontractorCodeParameter;
    
            if (pSubcontractorCode != null)
            {
                pSubcontractorCodeParameter = new ObjectParameter("pSubcontractorCode", pSubcontractorCode);
            }
            else
            {
                pSubcontractorCodeParameter = new ObjectParameter("pSubcontractorCode", typeof(string));
            }
    
            ObjectParameter pDateParameter;
    
            if (pDate.HasValue)
            {
                pDateParameter = new ObjectParameter("pDate", pDate);
            }
            else
            {
                pDateParameter = new ObjectParameter("pDate", typeof(System.DateTime));
            }
    
            ObjectParameter pUserParameter;
    
            if (pUser != null)
            {
                pUserParameter = new ObjectParameter("pUser", pUser);
            }
            else
            {
                pUserParameter = new ObjectParameter("pUser", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleInstSubcontractor>("InsertTbt_SaleInstSubcontractor", pContractCodeParameter, pOCCParameter, pSubcontractorCodeParameter, pDateParameter, pUserParameter);
        }
        public ObjectResult<tbt_RentalContractBasic> UpdateSummaryFields(string strContractCode, string strLastChangeType, Nullable<System.DateTime> dateLastChangeImplementDate)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strLastChangeTypeParameter;
    
            if (strLastChangeType != null)
            {
                strLastChangeTypeParameter = new ObjectParameter("strLastChangeType", strLastChangeType);
            }
            else
            {
                strLastChangeTypeParameter = new ObjectParameter("strLastChangeType", typeof(string));
            }
    
            ObjectParameter dateLastChangeImplementDateParameter;
    
            if (dateLastChangeImplementDate.HasValue)
            {
                dateLastChangeImplementDateParameter = new ObjectParameter("dateLastChangeImplementDate", dateLastChangeImplementDate);
            }
            else
            {
                dateLastChangeImplementDateParameter = new ObjectParameter("dateLastChangeImplementDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_RentalContractBasic>("UpdateSummaryFields", strContractCodeParameter, strLastChangeTypeParameter, dateLastChangeImplementDateParameter);
        }
        public ObjectResult<tbt_RentalContractBasic> UpdateTbt_RentalContractBasic(string xml_doTbtRentalContractBasic)
        {
    
            ObjectParameter xml_doTbtRentalContractBasicParameter;
    
            if (xml_doTbtRentalContractBasic != null)
            {
                xml_doTbtRentalContractBasicParameter = new ObjectParameter("xml_doTbtRentalContractBasic", xml_doTbtRentalContractBasic);
            }
            else
            {
                xml_doTbtRentalContractBasicParameter = new ObjectParameter("xml_doTbtRentalContractBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalContractBasic>("UpdateTbt_RentalContractBasic", xml_doTbtRentalContractBasicParameter);
        }
        public ObjectResult<tbt_RentalContractBasic> InsertTbt_RentalContractBasic(string xml_RentalContractBasic)
        {
    
            ObjectParameter xml_RentalContractBasicParameter;
    
            if (xml_RentalContractBasic != null)
            {
                xml_RentalContractBasicParameter = new ObjectParameter("xml_RentalContractBasic", xml_RentalContractBasic);
            }
            else
            {
                xml_RentalContractBasicParameter = new ObjectParameter("xml_RentalContractBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalContractBasic>("InsertTbt_RentalContractBasic", xml_RentalContractBasicParameter);
        }
        public ObjectResult<tbt_RentalSecurityBasic> InsertTbt_RentalSecurityBasic(string xml_RentalSecurityBasic)
        {
    
            ObjectParameter xml_RentalSecurityBasicParameter;
    
            if (xml_RentalSecurityBasic != null)
            {
                xml_RentalSecurityBasicParameter = new ObjectParameter("xml_RentalSecurityBasic", xml_RentalSecurityBasic);
            }
            else
            {
                xml_RentalSecurityBasicParameter = new ObjectParameter("xml_RentalSecurityBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSecurityBasic>("InsertTbt_RentalSecurityBasic", xml_RentalSecurityBasicParameter);
        }
        public ObjectResult<tbt_RentalBEDetails> InsertTbt_RentalBEDetails(string xml_RentalBEDetails)
        {
    
            ObjectParameter xml_RentalBEDetailsParameter;
    
            if (xml_RentalBEDetails != null)
            {
                xml_RentalBEDetailsParameter = new ObjectParameter("xml_RentalBEDetails", xml_RentalBEDetails);
            }
            else
            {
                xml_RentalBEDetailsParameter = new ObjectParameter("xml_RentalBEDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalBEDetails>("InsertTbt_RentalBEDetails", xml_RentalBEDetailsParameter);
        }
        public ObjectResult<tbt_RentalInstrumentDetails> InsertTbt_RentalInstrumentDetails(string xml_RentalInstrumentDetails)
        {
    
            ObjectParameter xml_RentalInstrumentDetailsParameter;
    
            if (xml_RentalInstrumentDetails != null)
            {
                xml_RentalInstrumentDetailsParameter = new ObjectParameter("xml_RentalInstrumentDetails", xml_RentalInstrumentDetails);
            }
            else
            {
                xml_RentalInstrumentDetailsParameter = new ObjectParameter("xml_RentalInstrumentDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalInstrumentDetails>("InsertTbt_RentalInstrumentDetails", xml_RentalInstrumentDetailsParameter);
        }
        public ObjectResult<tbt_RentalSentryGuard> InsertTbt_RentalSentryGuard(string xml_RentalSentryGuard)
        {
    
            ObjectParameter xml_RentalSentryGuardParameter;
    
            if (xml_RentalSentryGuard != null)
            {
                xml_RentalSentryGuardParameter = new ObjectParameter("xml_RentalSentryGuard", xml_RentalSentryGuard);
            }
            else
            {
                xml_RentalSentryGuardParameter = new ObjectParameter("xml_RentalSentryGuard", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSentryGuard>("InsertTbt_RentalSentryGuard", xml_RentalSentryGuardParameter);
        }
        public ObjectResult<tbt_RentalSentryGuardDetails> InsertTbt_RentalSentryGuardDetails(string xml_RentalSentryGuardDetails)
        {
    
            ObjectParameter xml_RentalSentryGuardDetailsParameter;
    
            if (xml_RentalSentryGuardDetails != null)
            {
                xml_RentalSentryGuardDetailsParameter = new ObjectParameter("xml_RentalSentryGuardDetails", xml_RentalSentryGuardDetails);
            }
            else
            {
                xml_RentalSentryGuardDetailsParameter = new ObjectParameter("xml_RentalSentryGuardDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSentryGuardDetails>("InsertTbt_RentalSentryGuardDetails", xml_RentalSentryGuardDetailsParameter);
        }
        public ObjectResult<tbt_CancelContractMemoDetail> InsertTbt_CancelContractMemoDetail(string xml_CancelContractMemoDetail)
        {
    
            ObjectParameter xml_CancelContractMemoDetailParameter;
    
            if (xml_CancelContractMemoDetail != null)
            {
                xml_CancelContractMemoDetailParameter = new ObjectParameter("xml_CancelContractMemoDetail", xml_CancelContractMemoDetail);
            }
            else
            {
                xml_CancelContractMemoDetailParameter = new ObjectParameter("xml_CancelContractMemoDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_CancelContractMemoDetail>("InsertTbt_CancelContractMemoDetail", xml_CancelContractMemoDetailParameter);
        }
        public ObjectResult<tbt_RentalMaintenanceDetails> InsertTbt_RentalMaintenanceDetails(string xml_RentalMaintenanceDetails)
        {
    
            ObjectParameter xml_RentalMaintenanceDetailsParameter;
    
            if (xml_RentalMaintenanceDetails != null)
            {
                xml_RentalMaintenanceDetailsParameter = new ObjectParameter("xml_RentalMaintenanceDetails", xml_RentalMaintenanceDetails);
            }
            else
            {
                xml_RentalMaintenanceDetailsParameter = new ObjectParameter("xml_RentalMaintenanceDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalMaintenanceDetails>("InsertTbt_RentalMaintenanceDetails", xml_RentalMaintenanceDetailsParameter);
        }
        public ObjectResult<tbt_RentalOperationType> InsertTbt_RentalOperationType(string pContractCode, string pOCC, string pOperationTypeCode, Nullable<System.DateTime> pProcessDateTime, string pEmpNo)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pOperationTypeCodeParameter;
    
            if (pOperationTypeCode != null)
            {
                pOperationTypeCodeParameter = new ObjectParameter("pOperationTypeCode", pOperationTypeCode);
            }
            else
            {
                pOperationTypeCodeParameter = new ObjectParameter("pOperationTypeCode", typeof(string));
            }
    
            ObjectParameter pProcessDateTimeParameter;
    
            if (pProcessDateTime.HasValue)
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", pProcessDateTime);
            }
            else
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalOperationType>("InsertTbt_RentalOperationType", pContractCodeParameter, pOCCParameter, pOperationTypeCodeParameter, pProcessDateTimeParameter, pEmpNoParameter);
        }
        public ObjectResult<tbt_RentalInstSubcontractor> InsertTbt_RentalInstSubContractor(string pContractCode, string pOCC, string pSubcontractorCode, Nullable<System.DateTime> pProcessDateTime, string pUser)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pSubcontractorCodeParameter;
    
            if (pSubcontractorCode != null)
            {
                pSubcontractorCodeParameter = new ObjectParameter("pSubcontractorCode", pSubcontractorCode);
            }
            else
            {
                pSubcontractorCodeParameter = new ObjectParameter("pSubcontractorCode", typeof(string));
            }
    
            ObjectParameter pProcessDateTimeParameter;
    
            if (pProcessDateTime.HasValue)
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", pProcessDateTime);
            }
            else
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pUserParameter;
    
            if (pUser != null)
            {
                pUserParameter = new ObjectParameter("pUser", pUser);
            }
            else
            {
                pUserParameter = new ObjectParameter("pUser", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalInstSubcontractor>("InsertTbt_RentalInstSubContractor", pContractCodeParameter, pOCCParameter, pSubcontractorCodeParameter, pProcessDateTimeParameter, pUserParameter);
        }
        public ObjectResult<tbt_ContractEmail> GetUnsentNotifyEmail(string pEmailType, Nullable<bool> pSendFlag)
        {
    
            ObjectParameter pEmailTypeParameter;
    
            if (pEmailType != null)
            {
                pEmailTypeParameter = new ObjectParameter("pEmailType", pEmailType);
            }
            else
            {
                pEmailTypeParameter = new ObjectParameter("pEmailType", typeof(string));
            }
    
            ObjectParameter pSendFlagParameter;
    
            if (pSendFlag.HasValue)
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", pSendFlag);
            }
            else
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("GetUnsentNotifyEmail", pEmailTypeParameter, pSendFlagParameter);
        }
        public ObjectResult<tbt_ContractEmail> UpdateTbt_ContractEmail(string xml_doTbtContractEmail)
        {
    
            ObjectParameter xml_doTbtContractEmailParameter;
    
            if (xml_doTbtContractEmail != null)
            {
                xml_doTbtContractEmailParameter = new ObjectParameter("xml_doTbtContractEmail", xml_doTbtContractEmail);
            }
            else
            {
                xml_doTbtContractEmailParameter = new ObjectParameter("xml_doTbtContractEmail", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("UpdateTbt_ContractEmail", xml_doTbtContractEmailParameter);
        }
        public ObjectResult<tbt_ContractEmail> DeleteTbt_ContractEmail(Nullable<int> pContractEmailID)
        {
    
            ObjectParameter pContractEmailIDParameter;
    
            if (pContractEmailID.HasValue)
            {
                pContractEmailIDParameter = new ObjectParameter("pContractEmailID", pContractEmailID);
            }
            else
            {
                pContractEmailIDParameter = new ObjectParameter("pContractEmailID", typeof(int));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("DeleteTbt_ContractEmail", pContractEmailIDParameter);
        }
        public ObjectResult<tbt_ContractEmail> GetTbt_ContractEmail(Nullable<int> pContractEmailID)
        {
    
            ObjectParameter pContractEmailIDParameter;
    
            if (pContractEmailID.HasValue)
            {
                pContractEmailIDParameter = new ObjectParameter("pContractEmailID", pContractEmailID);
            }
            else
            {
                pContractEmailIDParameter = new ObjectParameter("pContractEmailID", typeof(int));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("GetTbt_ContractEmail", pContractEmailIDParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckup> DeleteMACheckup(string pContractCode, Nullable<System.DateTime> pMaintenanceDate, Nullable<bool> pDeleteFlag)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pMaintenanceDateParameter;
    
            if (pMaintenanceDate.HasValue)
            {
                pMaintenanceDateParameter = new ObjectParameter("pMaintenanceDate", pMaintenanceDate);
            }
            else
            {
                pMaintenanceDateParameter = new ObjectParameter("pMaintenanceDate", typeof(System.DateTime));
            }
    
            ObjectParameter pDeleteFlagParameter;
    
            if (pDeleteFlag.HasValue)
            {
                pDeleteFlagParameter = new ObjectParameter("pDeleteFlag", pDeleteFlag);
            }
            else
            {
                pDeleteFlagParameter = new ObjectParameter("pDeleteFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckup>("DeleteMACheckup", pContractCodeParameter, pMaintenanceDateParameter, pDeleteFlagParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckupDetails> DeleteMACheckupDetail(string pContractCode, Nullable<System.DateTime> pMaintenanceDate, Nullable<bool> pDeleteFlag)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pMaintenanceDateParameter;
    
            if (pMaintenanceDate.HasValue)
            {
                pMaintenanceDateParameter = new ObjectParameter("pMaintenanceDate", pMaintenanceDate);
            }
            else
            {
                pMaintenanceDateParameter = new ObjectParameter("pMaintenanceDate", typeof(System.DateTime));
            }
    
            ObjectParameter pDeleteFlagParameter;
    
            if (pDeleteFlag.HasValue)
            {
                pDeleteFlagParameter = new ObjectParameter("pDeleteFlag", pDeleteFlag);
            }
            else
            {
                pDeleteFlagParameter = new ObjectParameter("pDeleteFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckupDetails>("DeleteMACheckupDetail", pContractCodeParameter, pMaintenanceDateParameter, pDeleteFlagParameter);
        }
        public ObjectResult<doCreateMASchedule> GetMAforCreateScheduleByMA(string pContractCode, string pC_RELATION_TYPE_MA, Nullable<bool> pLatestOCCFlag)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pC_RELATION_TYPE_MAParameter;
    
            if (pC_RELATION_TYPE_MA != null)
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", pC_RELATION_TYPE_MA);
            }
            else
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", typeof(string));
            }
    
            ObjectParameter pLatestOCCFlagParameter;
    
            if (pLatestOCCFlag.HasValue)
            {
                pLatestOCCFlagParameter = new ObjectParameter("pLatestOCCFlag", pLatestOCCFlag);
            }
            else
            {
                pLatestOCCFlagParameter = new ObjectParameter("pLatestOCCFlag", typeof(bool));
            }
            return base.ExecuteFunction<doCreateMASchedule>("GetMAforCreateScheduleByMA", pContractCodeParameter, pC_RELATION_TYPE_MAParameter, pLatestOCCFlagParameter);
        }
        public ObjectResult<doCreateMAScheduleDetail> GetMAforCreateScheduleDetailByMA(string pContractCode, string pC_RELATION_TYPE_MA, Nullable<bool> pLatestOCCFlag)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pC_RELATION_TYPE_MAParameter;
    
            if (pC_RELATION_TYPE_MA != null)
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", pC_RELATION_TYPE_MA);
            }
            else
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", typeof(string));
            }
    
            ObjectParameter pLatestOCCFlagParameter;
    
            if (pLatestOCCFlag.HasValue)
            {
                pLatestOCCFlagParameter = new ObjectParameter("pLatestOCCFlag", pLatestOCCFlag);
            }
            else
            {
                pLatestOCCFlagParameter = new ObjectParameter("pLatestOCCFlag", typeof(bool));
            }
            return base.ExecuteFunction<doCreateMAScheduleDetail>("GetMAforCreateScheduleDetailByMA", pContractCodeParameter, pC_RELATION_TYPE_MAParameter, pLatestOCCFlagParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckup> InsertTbt_MaintenanceCheckup(string xml_MaintenanceCheckup)
        {
    
            ObjectParameter xml_MaintenanceCheckupParameter;
    
            if (xml_MaintenanceCheckup != null)
            {
                xml_MaintenanceCheckupParameter = new ObjectParameter("xml_MaintenanceCheckup", xml_MaintenanceCheckup);
            }
            else
            {
                xml_MaintenanceCheckupParameter = new ObjectParameter("xml_MaintenanceCheckup", typeof(string));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckup>("InsertTbt_MaintenanceCheckup", xml_MaintenanceCheckupParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckupDetails> InsertTbt_MaintenanceCheckupDetails(string xml_MaintenanceCheckupDetails)
        {
    
            ObjectParameter xml_MaintenanceCheckupDetailsParameter;
    
            if (xml_MaintenanceCheckupDetails != null)
            {
                xml_MaintenanceCheckupDetailsParameter = new ObjectParameter("xml_MaintenanceCheckupDetails", xml_MaintenanceCheckupDetails);
            }
            else
            {
                xml_MaintenanceCheckupDetailsParameter = new ObjectParameter("xml_MaintenanceCheckupDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckupDetails>("InsertTbt_MaintenanceCheckupDetails", xml_MaintenanceCheckupDetailsParameter);
        }
        public ObjectResult<doMaintenanceCheckupInformation> GetMaintenanceCheckupInformation(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pProductCodeParameter;
    
            if (pProductCode != null)
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", pProductCode);
            }
            else
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateParameter;
    
            if (pInstructionDate.HasValue)
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", pInstructionDate);
            }
            else
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doMaintenanceCheckupInformation>("GetMaintenanceCheckupInformation", pContractCodeParameter, pProductCodeParameter, pInstructionDateParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckup> GetTbt_MaintenanceCheckup(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pProductCodeParameter;
    
            if (pProductCode != null)
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", pProductCode);
            }
            else
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateParameter;
    
            if (pInstructionDate.HasValue)
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", pInstructionDate);
            }
            else
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckup>("GetTbt_MaintenanceCheckup", pContractCodeParameter, pProductCodeParameter, pInstructionDateParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckupDetails> GetTbt_MaintenanceCheckupDetails(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate, string pMATargetContractCode, string pMATargetOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pProductCodeParameter;
    
            if (pProductCode != null)
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", pProductCode);
            }
            else
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateParameter;
    
            if (pInstructionDate.HasValue)
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", pInstructionDate);
            }
            else
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", typeof(System.DateTime));
            }
    
            ObjectParameter pMATargetContractCodeParameter;
    
            if (pMATargetContractCode != null)
            {
                pMATargetContractCodeParameter = new ObjectParameter("pMATargetContractCode", pMATargetContractCode);
            }
            else
            {
                pMATargetContractCodeParameter = new ObjectParameter("pMATargetContractCode", typeof(string));
            }
    
            ObjectParameter pMATargetOCCParameter;
    
            if (pMATargetOCC != null)
            {
                pMATargetOCCParameter = new ObjectParameter("pMATargetOCC", pMATargetOCC);
            }
            else
            {
                pMATargetOCCParameter = new ObjectParameter("pMATargetOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckupDetails>("GetTbt_MaintenanceCheckupDetails", pContractCodeParameter, pProductCodeParameter, pInstructionDateParameter, pMATargetContractCodeParameter, pMATargetOCCParameter);
        }
        public ObjectResult<Nullable<int>> IsLastResultToRegister(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pProductCodeParameter;
    
            if (pProductCode != null)
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", pProductCode);
            }
            else
            {
                pProductCodeParameter = new ObjectParameter("pProductCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateParameter;
    
            if (pInstructionDate.HasValue)
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", pInstructionDate);
            }
            else
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("IsLastResultToRegister", pContractCodeParameter, pProductCodeParameter, pInstructionDateParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckup> UpdateTbt_MaintenanceCheckup(string xml_doTbtMaintenanceCheckup)
        {
    
            ObjectParameter xml_doTbtMaintenanceCheckupParameter;
    
            if (xml_doTbtMaintenanceCheckup != null)
            {
                xml_doTbtMaintenanceCheckupParameter = new ObjectParameter("xml_doTbtMaintenanceCheckup", xml_doTbtMaintenanceCheckup);
            }
            else
            {
                xml_doTbtMaintenanceCheckupParameter = new ObjectParameter("xml_doTbtMaintenanceCheckup", typeof(string));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckup>("UpdateTbt_MaintenanceCheckup", xml_doTbtMaintenanceCheckupParameter);
        }
        public ObjectResult<tbt_MaintenanceCheckupDetails> UpdateTbt_MaintenanceCheckupDetails(string xml_doTbtMaintenanceCheckupDetails)
        {
    
            ObjectParameter xml_doTbtMaintenanceCheckupDetailsParameter;
    
            if (xml_doTbtMaintenanceCheckupDetails != null)
            {
                xml_doTbtMaintenanceCheckupDetailsParameter = new ObjectParameter("xml_doTbtMaintenanceCheckupDetails", xml_doTbtMaintenanceCheckupDetails);
            }
            else
            {
                xml_doTbtMaintenanceCheckupDetailsParameter = new ObjectParameter("xml_doTbtMaintenanceCheckupDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_MaintenanceCheckupDetails>("UpdateTbt_MaintenanceCheckupDetails", xml_doTbtMaintenanceCheckupDetailsParameter);
        }
        public ObjectResult<doSaleContractBasicInformation> GetSaleContractBasicInformation(string strContractCode, Nullable<bool> isLastOCCFlag, string strOCC)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter isLastOCCFlagParameter;
    
            if (isLastOCCFlag.HasValue)
            {
                isLastOCCFlagParameter = new ObjectParameter("isLastOCCFlag", isLastOCCFlag);
            }
            else
            {
                isLastOCCFlagParameter = new ObjectParameter("isLastOCCFlag", typeof(bool));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
            return base.ExecuteFunction<doSaleContractBasicInformation>("GetSaleContractBasicInformation", strContractCodeParameter, isLastOCCFlagParameter, strOCCParameter);
        }
        public ObjectResult<tbm_SubContractor> GetTbm_SubContractor(string pSubContractorCode)
        {
    
            ObjectParameter pSubContractorCodeParameter;
    
            if (pSubContractorCode != null)
            {
                pSubContractorCodeParameter = new ObjectParameter("pSubContractorCode", pSubContractorCode);
            }
            else
            {
                pSubContractorCodeParameter = new ObjectParameter("pSubContractorCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_SubContractor>("GetTbm_SubContractor", pSubContractorCodeParameter);
        }
        public ObjectResult<Nullable<int>> IsAllResultRegistered(string pContractCode, Nullable<System.DateTime> pInstructionDate)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateParameter;
    
            if (pInstructionDate.HasValue)
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", pInstructionDate);
            }
            else
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("IsAllResultRegistered", pContractCodeParameter, pInstructionDateParameter);
        }
        public ObjectResult<tbt_RentalSentryGuard> UpdateTbt_RentalSentryGuard(string xml_doTbtRentalSentryGuard)
        {
    
            ObjectParameter xml_doTbtRentalSentryGuardParameter;
    
            if (xml_doTbtRentalSentryGuard != null)
            {
                xml_doTbtRentalSentryGuardParameter = new ObjectParameter("xml_doTbtRentalSentryGuard", xml_doTbtRentalSentryGuard);
            }
            else
            {
                xml_doTbtRentalSentryGuardParameter = new ObjectParameter("xml_doTbtRentalSentryGuard", typeof(string));
            }
            return base.ExecuteFunction<tbt_RentalSentryGuard>("UpdateTbt_RentalSentryGuard", xml_doTbtRentalSentryGuardParameter);
        }
        public ObjectResult<tbt_CancelContractMemoDetail> UpdateTbt_CancelContractMemoDetail(string xml_doTbtCancelContractMemoDetail)
        {
    
            ObjectParameter xml_doTbtCancelContractMemoDetailParameter;
    
            if (xml_doTbtCancelContractMemoDetail != null)
            {
                xml_doTbtCancelContractMemoDetailParameter = new ObjectParameter("xml_doTbtCancelContractMemoDetail", xml_doTbtCancelContractMemoDetail);
            }
            else
            {
                xml_doTbtCancelContractMemoDetailParameter = new ObjectParameter("xml_doTbtCancelContractMemoDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_CancelContractMemoDetail>("UpdateTbt_CancelContractMemoDetail", xml_doTbtCancelContractMemoDetailParameter);
        }
        public ObjectResult<dtSearchMACheckupResult> SearchAlarmPeriodMaintenance(string pProductName, string pSiteName, string pEmployeeName, string pC_PROD_TYPE_AL, string pC_PROD_TYPE_RENTAL_SALE, string pOperationOfficeCode, Nullable<System.DateTime> pInstructionDateFrom, Nullable<System.DateTime> pInstructionDateTo, string pUserCode, string pContractCode, string pMACheckupNo, Nullable<bool> pHasCheckupResult, Nullable<bool> pHaveInstrumentMalfunction, Nullable<bool> pNeedToContactSalesman)
        {
    
            ObjectParameter pProductNameParameter;
    
            if (pProductName != null)
            {
                pProductNameParameter = new ObjectParameter("pProductName", pProductName);
            }
            else
            {
                pProductNameParameter = new ObjectParameter("pProductName", typeof(string));
            }
    
            ObjectParameter pSiteNameParameter;
    
            if (pSiteName != null)
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", pSiteName);
            }
            else
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", typeof(string));
            }
    
            ObjectParameter pEmployeeNameParameter;
    
            if (pEmployeeName != null)
            {
                pEmployeeNameParameter = new ObjectParameter("pEmployeeName", pEmployeeName);
            }
            else
            {
                pEmployeeNameParameter = new ObjectParameter("pEmployeeName", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_ALParameter;
    
            if (pC_PROD_TYPE_AL != null)
            {
                pC_PROD_TYPE_ALParameter = new ObjectParameter("pC_PROD_TYPE_AL", pC_PROD_TYPE_AL);
            }
            else
            {
                pC_PROD_TYPE_ALParameter = new ObjectParameter("pC_PROD_TYPE_AL", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_RENTAL_SALEParameter;
    
            if (pC_PROD_TYPE_RENTAL_SALE != null)
            {
                pC_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("pC_PROD_TYPE_RENTAL_SALE", pC_PROD_TYPE_RENTAL_SALE);
            }
            else
            {
                pC_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("pC_PROD_TYPE_RENTAL_SALE", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCodeParameter;
    
            if (pOperationOfficeCode != null)
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode);
            }
            else
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateFromParameter;
    
            if (pInstructionDateFrom.HasValue)
            {
                pInstructionDateFromParameter = new ObjectParameter("pInstructionDateFrom", pInstructionDateFrom);
            }
            else
            {
                pInstructionDateFromParameter = new ObjectParameter("pInstructionDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pInstructionDateToParameter;
    
            if (pInstructionDateTo.HasValue)
            {
                pInstructionDateToParameter = new ObjectParameter("pInstructionDateTo", pInstructionDateTo);
            }
            else
            {
                pInstructionDateToParameter = new ObjectParameter("pInstructionDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pUserCodeParameter;
    
            if (pUserCode != null)
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", pUserCode);
            }
            else
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pMACheckupNoParameter;
    
            if (pMACheckupNo != null)
            {
                pMACheckupNoParameter = new ObjectParameter("pMACheckupNo", pMACheckupNo);
            }
            else
            {
                pMACheckupNoParameter = new ObjectParameter("pMACheckupNo", typeof(string));
            }
    
            ObjectParameter pHasCheckupResultParameter;
    
            if (pHasCheckupResult.HasValue)
            {
                pHasCheckupResultParameter = new ObjectParameter("pHasCheckupResult", pHasCheckupResult);
            }
            else
            {
                pHasCheckupResultParameter = new ObjectParameter("pHasCheckupResult", typeof(bool));
            }
    
            ObjectParameter pHaveInstrumentMalfunctionParameter;
    
            if (pHaveInstrumentMalfunction.HasValue)
            {
                pHaveInstrumentMalfunctionParameter = new ObjectParameter("pHaveInstrumentMalfunction", pHaveInstrumentMalfunction);
            }
            else
            {
                pHaveInstrumentMalfunctionParameter = new ObjectParameter("pHaveInstrumentMalfunction", typeof(bool));
            }
    
            ObjectParameter pNeedToContactSalesmanParameter;
    
            if (pNeedToContactSalesman.HasValue)
            {
                pNeedToContactSalesmanParameter = new ObjectParameter("pNeedToContactSalesman", pNeedToContactSalesman);
            }
            else
            {
                pNeedToContactSalesmanParameter = new ObjectParameter("pNeedToContactSalesman", typeof(bool));
            }
            return base.ExecuteFunction<dtSearchMACheckupResult>("SearchAlarmPeriodMaintenance", pProductNameParameter, pSiteNameParameter, pEmployeeNameParameter, pC_PROD_TYPE_ALParameter, pC_PROD_TYPE_RENTAL_SALEParameter, pOperationOfficeCodeParameter, pInstructionDateFromParameter, pInstructionDateToParameter, pUserCodeParameter, pContractCodeParameter, pMACheckupNoParameter, pHasCheckupResultParameter, pHaveInstrumentMalfunctionParameter, pNeedToContactSalesmanParameter);
        }
        public ObjectResult<dtSearchMACheckupResult> SearchSaleMaintenance(string pProductName, string pSiteName, string pEmployeeName, string pOperationOfficeCode, Nullable<System.DateTime> pInstructionDateFrom, Nullable<System.DateTime> pInstructionDateTo, string pUserCode, string pContractCode, string pMACheckupNo, Nullable<bool> pHasCheckupResult, Nullable<bool> pHaveInstrumentMalfunction, Nullable<bool> pNeedToContactSalesman, Nullable<bool> pFLAG_ON, string pC_PROD_TYPE_MA)
        {
    
            ObjectParameter pProductNameParameter;
    
            if (pProductName != null)
            {
                pProductNameParameter = new ObjectParameter("pProductName", pProductName);
            }
            else
            {
                pProductNameParameter = new ObjectParameter("pProductName", typeof(string));
            }
    
            ObjectParameter pSiteNameParameter;
    
            if (pSiteName != null)
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", pSiteName);
            }
            else
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", typeof(string));
            }
    
            ObjectParameter pEmployeeNameParameter;
    
            if (pEmployeeName != null)
            {
                pEmployeeNameParameter = new ObjectParameter("pEmployeeName", pEmployeeName);
            }
            else
            {
                pEmployeeNameParameter = new ObjectParameter("pEmployeeName", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCodeParameter;
    
            if (pOperationOfficeCode != null)
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode);
            }
            else
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateFromParameter;
    
            if (pInstructionDateFrom.HasValue)
            {
                pInstructionDateFromParameter = new ObjectParameter("pInstructionDateFrom", pInstructionDateFrom);
            }
            else
            {
                pInstructionDateFromParameter = new ObjectParameter("pInstructionDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pInstructionDateToParameter;
    
            if (pInstructionDateTo.HasValue)
            {
                pInstructionDateToParameter = new ObjectParameter("pInstructionDateTo", pInstructionDateTo);
            }
            else
            {
                pInstructionDateToParameter = new ObjectParameter("pInstructionDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pUserCodeParameter;
    
            if (pUserCode != null)
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", pUserCode);
            }
            else
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pMACheckupNoParameter;
    
            if (pMACheckupNo != null)
            {
                pMACheckupNoParameter = new ObjectParameter("pMACheckupNo", pMACheckupNo);
            }
            else
            {
                pMACheckupNoParameter = new ObjectParameter("pMACheckupNo", typeof(string));
            }
    
            ObjectParameter pHasCheckupResultParameter;
    
            if (pHasCheckupResult.HasValue)
            {
                pHasCheckupResultParameter = new ObjectParameter("pHasCheckupResult", pHasCheckupResult);
            }
            else
            {
                pHasCheckupResultParameter = new ObjectParameter("pHasCheckupResult", typeof(bool));
            }
    
            ObjectParameter pHaveInstrumentMalfunctionParameter;
    
            if (pHaveInstrumentMalfunction.HasValue)
            {
                pHaveInstrumentMalfunctionParameter = new ObjectParameter("pHaveInstrumentMalfunction", pHaveInstrumentMalfunction);
            }
            else
            {
                pHaveInstrumentMalfunctionParameter = new ObjectParameter("pHaveInstrumentMalfunction", typeof(bool));
            }
    
            ObjectParameter pNeedToContactSalesmanParameter;
    
            if (pNeedToContactSalesman.HasValue)
            {
                pNeedToContactSalesmanParameter = new ObjectParameter("pNeedToContactSalesman", pNeedToContactSalesman);
            }
            else
            {
                pNeedToContactSalesmanParameter = new ObjectParameter("pNeedToContactSalesman", typeof(bool));
            }
    
            ObjectParameter pFLAG_ONParameter;
    
            if (pFLAG_ON.HasValue)
            {
                pFLAG_ONParameter = new ObjectParameter("pFLAG_ON", pFLAG_ON);
            }
            else
            {
                pFLAG_ONParameter = new ObjectParameter("pFLAG_ON", typeof(bool));
            }
    
            ObjectParameter pC_PROD_TYPE_MAParameter;
    
            if (pC_PROD_TYPE_MA != null)
            {
                pC_PROD_TYPE_MAParameter = new ObjectParameter("pC_PROD_TYPE_MA", pC_PROD_TYPE_MA);
            }
            else
            {
                pC_PROD_TYPE_MAParameter = new ObjectParameter("pC_PROD_TYPE_MA", typeof(string));
            }
            return base.ExecuteFunction<dtSearchMACheckupResult>("SearchSaleMaintenance", pProductNameParameter, pSiteNameParameter, pEmployeeNameParameter, pOperationOfficeCodeParameter, pInstructionDateFromParameter, pInstructionDateToParameter, pUserCodeParameter, pContractCodeParameter, pMACheckupNoParameter, pHasCheckupResultParameter, pHaveInstrumentMalfunctionParameter, pNeedToContactSalesmanParameter, pFLAG_ONParameter, pC_PROD_TYPE_MAParameter);
        }
        public ObjectResult<tbt_BillingTemp> DeleteTbt_BillingTemp_ByContractCodeOCCBillingClientCodeBillingOfficeCode(string contractCode, string oCC, string billingClientCode, string billingOfficeCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter billingOfficeCodeParameter;
    
            if (billingOfficeCode != null)
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", billingOfficeCode);
            }
            else
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("DeleteTbt_BillingTemp_ByContractCodeOCCBillingClientCodeBillingOfficeCode", contractCodeParameter, oCCParameter, billingClientCodeParameter, billingOfficeCodeParameter);
        }
        public ObjectResult<tbt_BillingTemp> UpdateTbt_BillingTempByKeyXML(string xml_doTbtUpdateTbtBillingTemp)
        {
    
            ObjectParameter xml_doTbtUpdateTbtBillingTempParameter;
    
            if (xml_doTbtUpdateTbtBillingTemp != null)
            {
                xml_doTbtUpdateTbtBillingTempParameter = new ObjectParameter("xml_doTbtUpdateTbtBillingTemp", xml_doTbtUpdateTbtBillingTemp);
            }
            else
            {
                xml_doTbtUpdateTbtBillingTempParameter = new ObjectParameter("xml_doTbtUpdateTbtBillingTemp", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("UpdateTbt_BillingTempByKeyXML", xml_doTbtUpdateTbtBillingTempParameter);
        }
        public ObjectResult<string> GetLastMACheckupNo()
        {
            return base.ExecuteFunction<string>("GetLastMACheckupNo");
        }
        public ObjectResult<tbt_RelationType> InsertTbt_RelationType(string xml_RelationType)
        {
    
            ObjectParameter xml_RelationTypeParameter;
    
            if (xml_RelationType != null)
            {
                xml_RelationTypeParameter = new ObjectParameter("xml_RelationType", xml_RelationType);
            }
            else
            {
                xml_RelationTypeParameter = new ObjectParameter("xml_RelationType", typeof(string));
            }
            return base.ExecuteFunction<tbt_RelationType>("InsertTbt_RelationType", xml_RelationTypeParameter);
        }
        public ObjectResult<doProjectContractDetail> GetContractDetailList(string pProjectCode, string pC_DOC_AUDIT_RESULT)
        {
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
    
            ObjectParameter pC_DOC_AUDIT_RESULTParameter;
    
            if (pC_DOC_AUDIT_RESULT != null)
            {
                pC_DOC_AUDIT_RESULTParameter = new ObjectParameter("pC_DOC_AUDIT_RESULT", pC_DOC_AUDIT_RESULT);
            }
            else
            {
                pC_DOC_AUDIT_RESULTParameter = new ObjectParameter("pC_DOC_AUDIT_RESULT", typeof(string));
            }
            return base.ExecuteFunction<doProjectContractDetail>("GetContractDetailList", pProjectCodeParameter, pC_DOC_AUDIT_RESULTParameter);
        }
        public ObjectResult<Nullable<int>> IsSomeResultRegistered(string pContractCode, Nullable<System.DateTime> pInstructionDate)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateParameter;
    
            if (pInstructionDate.HasValue)
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", pInstructionDate);
            }
            else
            {
                pInstructionDateParameter = new ObjectParameter("pInstructionDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("IsSomeResultRegistered", pContractCodeParameter, pInstructionDateParameter);
        }
        public ObjectResult<tbt_DraftRentalBillingTarget> GetTbt_DraftRentalBillingTarget(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalBillingTarget>("GetTbt_DraftRentalBillingTarget", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalContract> GetTbt_DraftRentalContract(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalContract>("GetTbt_DraftRentalContract", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalEmail> GetTbt_DraftRentalEmail(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalEmail>("GetTbt_DraftRentalEmail", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalInstrument> GetTbt_DraftRentalInstrument(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalInstrument>("GetTbt_DraftRentalInstrument", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalMaintenanceDetails> GetTbt_DraftRentalMaintenanceDetails(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalMaintenanceDetails>("GetTbt_DraftRentalMaintenanceDetails", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalOperationType> GetTbt_DraftRentalOperationType(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalOperationType>("GetTbt_DraftRentalOperationType", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftSaleContract> GetTbt_DraftSaleContract(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleContract>("GetTbt_DraftSaleContract", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_CancelContractMemo> GetLastCancelContractMemo(string strContractCode, Nullable<bool> isQuotation)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter isQuotationParameter;
    
            if (isQuotation.HasValue)
            {
                isQuotationParameter = new ObjectParameter("isQuotation", isQuotation);
            }
            else
            {
                isQuotationParameter = new ObjectParameter("isQuotation", typeof(bool));
            }
            return base.ExecuteFunction<tbt_CancelContractMemo>("GetLastCancelContractMemo", strContractCodeParameter, isQuotationParameter);
        }
        public ObjectResult<string> GetPreviousImplementedOCC(string paramContractCode, string paramOCC, Nullable<bool> paramFLAGON)
        {
    
            ObjectParameter paramContractCodeParameter;
    
            if (paramContractCode != null)
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", paramContractCode);
            }
            else
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", typeof(string));
            }
    
            ObjectParameter paramOCCParameter;
    
            if (paramOCC != null)
            {
                paramOCCParameter = new ObjectParameter("paramOCC", paramOCC);
            }
            else
            {
                paramOCCParameter = new ObjectParameter("paramOCC", typeof(string));
            }
    
            ObjectParameter paramFLAGONParameter;
    
            if (paramFLAGON.HasValue)
            {
                paramFLAGONParameter = new ObjectParameter("paramFLAGON", paramFLAGON);
            }
            else
            {
                paramFLAGONParameter = new ObjectParameter("paramFLAGON", typeof(bool));
            }
            return base.ExecuteFunction<string>("GetPreviousImplementedOCC", paramContractCodeParameter, paramOCCParameter, paramFLAGONParameter);
        }
        public ObjectResult<tbt_IncidentRole> GetTbt_IncidentRole(Nullable<int> incidentID, string empNo)
        {
    
            ObjectParameter incidentIDParameter;
    
            if (incidentID.HasValue)
            {
                incidentIDParameter = new ObjectParameter("incidentID", incidentID);
            }
            else
            {
                incidentIDParameter = new ObjectParameter("incidentID", typeof(int));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("empNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("empNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_IncidentRole>("GetTbt_IncidentRole", incidentIDParameter, empNoParameter);
        }
        public ObjectResult<dtIncident> GetIncidentData(Nullable<int> incidentID, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_INCIDENT_RELEVANT_TYPE_CUSTOMER, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_RELEVANT_TYPE_PROJECT, string c_INCIDENT_TYPE, string c_REASON_TYPE)
        {
    
            ObjectParameter incidentIDParameter;
    
            if (incidentID.HasValue)
            {
                incidentIDParameter = new ObjectParameter("incidentID", incidentID);
            }
            else
            {
                incidentIDParameter = new ObjectParameter("incidentID", typeof(int));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CONTRACT != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", c_INCIDENT_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CUSTOMER != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CUSTOMER", c_INCIDENT_RELEVANT_TYPE_CUSTOMER);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_SITEParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_SITE != null)
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", c_INCIDENT_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_PROJECTParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_PROJECT != null)
            {
                c_INCIDENT_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_PROJECT", c_INCIDENT_RELEVANT_TYPE_PROJECT);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_TYPEParameter;
    
            if (c_INCIDENT_TYPE != null)
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", c_INCIDENT_TYPE);
            }
            else
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", typeof(string));
            }
    
            ObjectParameter c_REASON_TYPEParameter;
    
            if (c_REASON_TYPE != null)
            {
                c_REASON_TYPEParameter = new ObjectParameter("C_REASON_TYPE", c_REASON_TYPE);
            }
            else
            {
                c_REASON_TYPEParameter = new ObjectParameter("C_REASON_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtIncident>("GetIncidentData", incidentIDParameter, c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter, c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter, c_INCIDENT_RELEVANT_TYPE_SITEParameter, c_INCIDENT_RELEVANT_TYPE_PROJECTParameter, c_INCIDENT_TYPEParameter, c_REASON_TYPEParameter);
        }
        public ObjectResult<string> GetIncidentOfficeChief(Nullable<int> incidentID, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter incidentIDParameter;
    
            if (incidentID.HasValue)
            {
                incidentIDParameter = new ObjectParameter("incidentID", incidentID);
            }
            else
            {
                incidentIDParameter = new ObjectParameter("incidentID", typeof(int));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<string>("GetIncidentOfficeChief", incidentIDParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<string> GetIncidentDepartmentChief(Nullable<int> incidentID, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter incidentIDParameter;
    
            if (incidentID.HasValue)
            {
                incidentIDParameter = new ObjectParameter("IncidentID", incidentID);
            }
            else
            {
                incidentIDParameter = new ObjectParameter("IncidentID", typeof(int));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<string>("GetIncidentDepartmentChief", incidentIDParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<tbs_ARPermissionConfiguration> GetTbs_ARPermissionConfiguration(string strPermissionType)
        {
    
            ObjectParameter strPermissionTypeParameter;
    
            if (strPermissionType != null)
            {
                strPermissionTypeParameter = new ObjectParameter("strPermissionType", strPermissionType);
            }
            else
            {
                strPermissionTypeParameter = new ObjectParameter("strPermissionType", typeof(string));
            }
            return base.ExecuteFunction<tbs_ARPermissionConfiguration>("GetTbs_ARPermissionConfiguration", strPermissionTypeParameter);
        }
        public ObjectResult<tbs_IncidentPermissionConfiguration> GetTbs_IncidentPermissionConfiguration(string incidentRole)
        {
    
            ObjectParameter incidentRoleParameter;
    
            if (incidentRole != null)
            {
                incidentRoleParameter = new ObjectParameter("incidentRole", incidentRole);
            }
            else
            {
                incidentRoleParameter = new ObjectParameter("incidentRole", typeof(string));
            }
            return base.ExecuteFunction<tbs_IncidentPermissionConfiguration>("GetTbs_IncidentPermissionConfiguration", incidentRoleParameter);
        }
        public ObjectResult<tbt_BillingTemp> DeleteAllOneTimeFee(string contractCode, string oCC, string c_BILLING_TYPE_INSTALLATION_FEE, string c_BILLING_TYPE_DEPOSIT_FEE, string pContractCode, string pOCC, string pBillingOCC, string pBillingTargetRunningNo, string pBillingClientCode, string pBillingTargetCode, string pBillingOfficeCode, string pBillingType, string pBillingTiming, Nullable<decimal> pBillingAmt, string pPayMethod, Nullable<int> pBillingCycle, string pCalDailyFeeStatus, string pSendFlag, Nullable<System.DateTime> pProcessDateTime, string pEmpNo, Nullable<decimal> pBillingAmtUsd, string pBillingAmtCurrencyType)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_INSTALLATION_FEEParameter;
    
            if (c_BILLING_TYPE_INSTALLATION_FEE != null)
            {
                c_BILLING_TYPE_INSTALLATION_FEEParameter = new ObjectParameter("C_BILLING_TYPE_INSTALLATION_FEE", c_BILLING_TYPE_INSTALLATION_FEE);
            }
            else
            {
                c_BILLING_TYPE_INSTALLATION_FEEParameter = new ObjectParameter("C_BILLING_TYPE_INSTALLATION_FEE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_DEPOSIT_FEEParameter;
    
            if (c_BILLING_TYPE_DEPOSIT_FEE != null)
            {
                c_BILLING_TYPE_DEPOSIT_FEEParameter = new ObjectParameter("C_BILLING_TYPE_DEPOSIT_FEE", c_BILLING_TYPE_DEPOSIT_FEE);
            }
            else
            {
                c_BILLING_TYPE_DEPOSIT_FEEParameter = new ObjectParameter("C_BILLING_TYPE_DEPOSIT_FEE", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pBillingOCCParameter;
    
            if (pBillingOCC != null)
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", pBillingOCC);
            }
            else
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", typeof(string));
            }
    
            ObjectParameter pBillingTargetRunningNoParameter;
    
            if (pBillingTargetRunningNo != null)
            {
                pBillingTargetRunningNoParameter = new ObjectParameter("pBillingTargetRunningNo", pBillingTargetRunningNo);
            }
            else
            {
                pBillingTargetRunningNoParameter = new ObjectParameter("pBillingTargetRunningNo", typeof(string));
            }
    
            ObjectParameter pBillingClientCodeParameter;
    
            if (pBillingClientCode != null)
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", pBillingClientCode);
            }
            else
            {
                pBillingClientCodeParameter = new ObjectParameter("pBillingClientCode", typeof(string));
            }
    
            ObjectParameter pBillingTargetCodeParameter;
    
            if (pBillingTargetCode != null)
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", pBillingTargetCode);
            }
            else
            {
                pBillingTargetCodeParameter = new ObjectParameter("pBillingTargetCode", typeof(string));
            }
    
            ObjectParameter pBillingOfficeCodeParameter;
    
            if (pBillingOfficeCode != null)
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", pBillingOfficeCode);
            }
            else
            {
                pBillingOfficeCodeParameter = new ObjectParameter("pBillingOfficeCode", typeof(string));
            }
    
            ObjectParameter pBillingTypeParameter;
    
            if (pBillingType != null)
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", pBillingType);
            }
            else
            {
                pBillingTypeParameter = new ObjectParameter("pBillingType", typeof(string));
            }
    
            ObjectParameter pBillingTimingParameter;
    
            if (pBillingTiming != null)
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", pBillingTiming);
            }
            else
            {
                pBillingTimingParameter = new ObjectParameter("pBillingTiming", typeof(string));
            }
    
            ObjectParameter pBillingAmtParameter;
    
            if (pBillingAmt.HasValue)
            {
                pBillingAmtParameter = new ObjectParameter("pBillingAmt", pBillingAmt);
            }
            else
            {
                pBillingAmtParameter = new ObjectParameter("pBillingAmt", typeof(decimal));
            }
    
            ObjectParameter pPayMethodParameter;
    
            if (pPayMethod != null)
            {
                pPayMethodParameter = new ObjectParameter("pPayMethod", pPayMethod);
            }
            else
            {
                pPayMethodParameter = new ObjectParameter("pPayMethod", typeof(string));
            }
    
            ObjectParameter pBillingCycleParameter;
    
            if (pBillingCycle.HasValue)
            {
                pBillingCycleParameter = new ObjectParameter("pBillingCycle", pBillingCycle);
            }
            else
            {
                pBillingCycleParameter = new ObjectParameter("pBillingCycle", typeof(int));
            }
    
            ObjectParameter pCalDailyFeeStatusParameter;
    
            if (pCalDailyFeeStatus != null)
            {
                pCalDailyFeeStatusParameter = new ObjectParameter("pCalDailyFeeStatus", pCalDailyFeeStatus);
            }
            else
            {
                pCalDailyFeeStatusParameter = new ObjectParameter("pCalDailyFeeStatus", typeof(string));
            }
    
            ObjectParameter pSendFlagParameter;
    
            if (pSendFlag != null)
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", pSendFlag);
            }
            else
            {
                pSendFlagParameter = new ObjectParameter("pSendFlag", typeof(string));
            }
    
            ObjectParameter pProcessDateTimeParameter;
    
            if (pProcessDateTime.HasValue)
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", pProcessDateTime);
            }
            else
            {
                pProcessDateTimeParameter = new ObjectParameter("pProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter pBillingAmtUsdParameter;
    
            if (pBillingAmtUsd.HasValue)
            {
                pBillingAmtUsdParameter = new ObjectParameter("pBillingAmtUsd", pBillingAmtUsd);
            }
            else
            {
                pBillingAmtUsdParameter = new ObjectParameter("pBillingAmtUsd", typeof(decimal));
            }
    
            ObjectParameter pBillingAmtCurrencyTypeParameter;
    
            if (pBillingAmtCurrencyType != null)
            {
                pBillingAmtCurrencyTypeParameter = new ObjectParameter("pBillingAmtCurrencyType", pBillingAmtCurrencyType);
            }
            else
            {
                pBillingAmtCurrencyTypeParameter = new ObjectParameter("pBillingAmtCurrencyType", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("DeleteAllOneTimeFee", contractCodeParameter, oCCParameter, c_BILLING_TYPE_INSTALLATION_FEEParameter, c_BILLING_TYPE_DEPOSIT_FEEParameter, pContractCodeParameter, pOCCParameter, pBillingOCCParameter, pBillingTargetRunningNoParameter, pBillingClientCodeParameter, pBillingTargetCodeParameter, pBillingOfficeCodeParameter, pBillingTypeParameter, pBillingTimingParameter, pBillingAmtParameter, pPayMethodParameter, pBillingCycleParameter, pCalDailyFeeStatusParameter, pSendFlagParameter, pProcessDateTimeParameter, pEmpNoParameter, pBillingAmtUsdParameter, pBillingAmtCurrencyTypeParameter);
        }
        public ObjectResult<tbt_ContractEmail> DeleteTbt_ContractEmail_UnsentContractEmail(string paramContractCode, string paramEmailType, Nullable<bool> paramFlag)
        {
    
            ObjectParameter paramContractCodeParameter;
    
            if (paramContractCode != null)
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", paramContractCode);
            }
            else
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", typeof(string));
            }
    
            ObjectParameter paramEmailTypeParameter;
    
            if (paramEmailType != null)
            {
                paramEmailTypeParameter = new ObjectParameter("paramEmailType", paramEmailType);
            }
            else
            {
                paramEmailTypeParameter = new ObjectParameter("paramEmailType", typeof(string));
            }
    
            ObjectParameter paramFlagParameter;
    
            if (paramFlag.HasValue)
            {
                paramFlagParameter = new ObjectParameter("paramFlag", paramFlag);
            }
            else
            {
                paramFlagParameter = new ObjectParameter("paramFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("DeleteTbt_ContractEmail_UnsentContractEmail", paramContractCodeParameter, paramEmailTypeParameter, paramFlagParameter);
        }
        public ObjectResult<tbt_BillingTemp> GetBillingTargetForEditing(string strContractCode, string strOCC, string c_BILLING_TYPE_CONTRACT_FEE, string c_BILLING_TYPE_INSTALLATION_FEE, string c_BILLING_TYPE_MAINTENANCE_FEE, string c_BILLING_TYPE_STOP_FEE, string c_BILLING_TYPE_SALE_PRICE)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_CONTRACT_FEEParameter;
    
            if (c_BILLING_TYPE_CONTRACT_FEE != null)
            {
                c_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_BILLING_TYPE_CONTRACT_FEE", c_BILLING_TYPE_CONTRACT_FEE);
            }
            else
            {
                c_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_BILLING_TYPE_CONTRACT_FEE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_INSTALLATION_FEEParameter;
    
            if (c_BILLING_TYPE_INSTALLATION_FEE != null)
            {
                c_BILLING_TYPE_INSTALLATION_FEEParameter = new ObjectParameter("C_BILLING_TYPE_INSTALLATION_FEE", c_BILLING_TYPE_INSTALLATION_FEE);
            }
            else
            {
                c_BILLING_TYPE_INSTALLATION_FEEParameter = new ObjectParameter("C_BILLING_TYPE_INSTALLATION_FEE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_MAINTENANCE_FEEParameter;
    
            if (c_BILLING_TYPE_MAINTENANCE_FEE != null)
            {
                c_BILLING_TYPE_MAINTENANCE_FEEParameter = new ObjectParameter("C_BILLING_TYPE_MAINTENANCE_FEE", c_BILLING_TYPE_MAINTENANCE_FEE);
            }
            else
            {
                c_BILLING_TYPE_MAINTENANCE_FEEParameter = new ObjectParameter("C_BILLING_TYPE_MAINTENANCE_FEE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_STOP_FEEParameter;
    
            if (c_BILLING_TYPE_STOP_FEE != null)
            {
                c_BILLING_TYPE_STOP_FEEParameter = new ObjectParameter("C_BILLING_TYPE_STOP_FEE", c_BILLING_TYPE_STOP_FEE);
            }
            else
            {
                c_BILLING_TYPE_STOP_FEEParameter = new ObjectParameter("C_BILLING_TYPE_STOP_FEE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_SALE_PRICEParameter;
    
            if (c_BILLING_TYPE_SALE_PRICE != null)
            {
                c_BILLING_TYPE_SALE_PRICEParameter = new ObjectParameter("C_BILLING_TYPE_SALE_PRICE", c_BILLING_TYPE_SALE_PRICE);
            }
            else
            {
                c_BILLING_TYPE_SALE_PRICEParameter = new ObjectParameter("C_BILLING_TYPE_SALE_PRICE", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("GetBillingTargetForEditing", strContractCodeParameter, strOCCParameter, c_BILLING_TYPE_CONTRACT_FEEParameter, c_BILLING_TYPE_INSTALLATION_FEEParameter, c_BILLING_TYPE_MAINTENANCE_FEEParameter, c_BILLING_TYPE_STOP_FEEParameter, c_BILLING_TYPE_SALE_PRICEParameter);
        }
        public ObjectResult<tbt_SaleInstrumentDetails> UpdateTbt_SaleInstrumentDetails(string xml_doTbt_SaleInstrumentDetails)
        {
    
            ObjectParameter xml_doTbt_SaleInstrumentDetailsParameter;
    
            if (xml_doTbt_SaleInstrumentDetails != null)
            {
                xml_doTbt_SaleInstrumentDetailsParameter = new ObjectParameter("xml_doTbt_SaleInstrumentDetails", xml_doTbt_SaleInstrumentDetails);
            }
            else
            {
                xml_doTbt_SaleInstrumentDetailsParameter = new ObjectParameter("xml_doTbt_SaleInstrumentDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleInstrumentDetails>("UpdateTbt_SaleInstrumentDetails", xml_doTbt_SaleInstrumentDetailsParameter);
        }
        public ObjectResult<dtSummaryIncident> SummaryIncident(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> currentdate, string c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTION, string c_INCIDENT_STATUS_COMPLETE, string c_INCIDENT_TYPE_CANCEL, string c_INCIDENT_TYPE_COMPLAIN)
        {
    
            ObjectParameter dateFromParameter;
    
            if (dateFrom.HasValue)
            {
                dateFromParameter = new ObjectParameter("dateFrom", dateFrom);
            }
            else
            {
                dateFromParameter = new ObjectParameter("dateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter dateToParameter;
    
            if (dateTo.HasValue)
            {
                dateToParameter = new ObjectParameter("dateTo", dateTo);
            }
            else
            {
                dateToParameter = new ObjectParameter("dateTo", typeof(System.DateTime));
            }
    
            ObjectParameter currentdateParameter;
    
            if (currentdate.HasValue)
            {
                currentdateParameter = new ObjectParameter("currentdate", currentdate);
            }
            else
            {
                currentdateParameter = new ObjectParameter("currentdate", typeof(System.DateTime));
            }
    
            ObjectParameter c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTIONParameter;
    
            if (c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTION != null)
            {
                c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTIONParameter = new ObjectParameter("C_INCIDENT_STATUS_WAIT_FOR_INSTRUCTION", c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTION);
            }
            else
            {
                c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTIONParameter = new ObjectParameter("C_INCIDENT_STATUS_WAIT_FOR_INSTRUCTION", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_STATUS_COMPLETEParameter;
    
            if (c_INCIDENT_STATUS_COMPLETE != null)
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", c_INCIDENT_STATUS_COMPLETE);
            }
            else
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_TYPE_CANCELParameter;
    
            if (c_INCIDENT_TYPE_CANCEL != null)
            {
                c_INCIDENT_TYPE_CANCELParameter = new ObjectParameter("C_INCIDENT_TYPE_CANCEL", c_INCIDENT_TYPE_CANCEL);
            }
            else
            {
                c_INCIDENT_TYPE_CANCELParameter = new ObjectParameter("C_INCIDENT_TYPE_CANCEL", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_TYPE_COMPLAINParameter;
    
            if (c_INCIDENT_TYPE_COMPLAIN != null)
            {
                c_INCIDENT_TYPE_COMPLAINParameter = new ObjectParameter("C_INCIDENT_TYPE_COMPLAIN", c_INCIDENT_TYPE_COMPLAIN);
            }
            else
            {
                c_INCIDENT_TYPE_COMPLAINParameter = new ObjectParameter("C_INCIDENT_TYPE_COMPLAIN", typeof(string));
            }
            return base.ExecuteFunction<dtSummaryIncident>("SummaryIncident", dateFromParameter, dateToParameter, currentdateParameter, c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTIONParameter, c_INCIDENT_STATUS_COMPLETEParameter, c_INCIDENT_TYPE_CANCELParameter, c_INCIDENT_TYPE_COMPLAINParameter);
        }
        public ObjectResult<doMaintenanceRelationType> GenerateMaintenanceRelationType(string xml0, Nullable<bool> pBeforeStartFlag)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
    
            ObjectParameter pBeforeStartFlagParameter;
    
            if (pBeforeStartFlag.HasValue)
            {
                pBeforeStartFlagParameter = new ObjectParameter("pBeforeStartFlag", pBeforeStartFlag);
            }
            else
            {
                pBeforeStartFlagParameter = new ObjectParameter("pBeforeStartFlag", typeof(bool));
            }
            return base.ExecuteFunction<doMaintenanceRelationType>("GenerateMaintenanceRelationType", xml0Parameter, pBeforeStartFlagParameter);
        }
        public ObjectResult<tbt_DraftRentalBEDetails> InsertTbt_DraftRentalBEDetails(string xml_DraftRentalBEDetails)
        {
    
            ObjectParameter xml_DraftRentalBEDetailsParameter;
    
            if (xml_DraftRentalBEDetails != null)
            {
                xml_DraftRentalBEDetailsParameter = new ObjectParameter("xml_DraftRentalBEDetails", xml_DraftRentalBEDetails);
            }
            else
            {
                xml_DraftRentalBEDetailsParameter = new ObjectParameter("xml_DraftRentalBEDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalBEDetails>("InsertTbt_DraftRentalBEDetails", xml_DraftRentalBEDetailsParameter);
        }
        public ObjectResult<tbt_DraftRentalBillingTarget> InsertTbt_DraftRentalBillingTarget(string xml_DraftRentalBillingTarget)
        {
    
            ObjectParameter xml_DraftRentalBillingTargetParameter;
    
            if (xml_DraftRentalBillingTarget != null)
            {
                xml_DraftRentalBillingTargetParameter = new ObjectParameter("xml_DraftRentalBillingTarget", xml_DraftRentalBillingTarget);
            }
            else
            {
                xml_DraftRentalBillingTargetParameter = new ObjectParameter("xml_DraftRentalBillingTarget", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalBillingTarget>("InsertTbt_DraftRentalBillingTarget", xml_DraftRentalBillingTargetParameter);
        }
        public ObjectResult<tbt_DraftRentalContract> InsertTbt_DraftRentalContract(string xml_DraftRentalContract)
        {
    
            ObjectParameter xml_DraftRentalContractParameter;
    
            if (xml_DraftRentalContract != null)
            {
                xml_DraftRentalContractParameter = new ObjectParameter("xml_DraftRentalContract", xml_DraftRentalContract);
            }
            else
            {
                xml_DraftRentalContractParameter = new ObjectParameter("xml_DraftRentalContract", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalContract>("InsertTbt_DraftRentalContract", xml_DraftRentalContractParameter);
        }
        public ObjectResult<tbt_DraftRentalEmail> InsertTbt_DraftRentalEmail(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalEmail>("InsertTbt_DraftRentalEmail", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalInstrument> InsertTbt_DraftRentalInstrument(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalInstrument>("InsertTbt_DraftRentalInstrument", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalMaintenanceDetails> InsertTbt_DraftRentalMaintenanceDetails(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalMaintenanceDetails>("InsertTbt_DraftRentalMaintenanceDetails", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalOperationType> InsertTbt_DraftRentalOperationType(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalOperationType>("InsertTbt_DraftRentalOperationType", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalSentryGuard> InsertTbt_DraftRentalSentryGuard(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalSentryGuard>("InsertTbt_DraftRentalSentryGuard", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalSentryGuardDetails> InsertTbt_DraftRentalSentryGuardDetails(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalSentryGuardDetails>("InsertTbt_DraftRentalSentryGuardDetails", xmlParameter);
        }
        public ObjectResult<tbt_ContractEmail> InsertTbt_ContractEmail(string xml_ContractEmail)
        {
    
            ObjectParameter xml_ContractEmailParameter;
    
            if (xml_ContractEmail != null)
            {
                xml_ContractEmailParameter = new ObjectParameter("xml_ContractEmail", xml_ContractEmail);
            }
            else
            {
                xml_ContractEmailParameter = new ObjectParameter("xml_ContractEmail", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("InsertTbt_ContractEmail", xml_ContractEmailParameter);
        }
        public ObjectResult<dtContractSignerType> GetContractSignerType(string c_CONTRACT_SIGNER_TYPE, string contractCode, string oCC)
        {
    
            ObjectParameter c_CONTRACT_SIGNER_TYPEParameter;
    
            if (c_CONTRACT_SIGNER_TYPE != null)
            {
                c_CONTRACT_SIGNER_TYPEParameter = new ObjectParameter("C_CONTRACT_SIGNER_TYPE", c_CONTRACT_SIGNER_TYPE);
            }
            else
            {
                c_CONTRACT_SIGNER_TYPEParameter = new ObjectParameter("C_CONTRACT_SIGNER_TYPE", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
            return base.ExecuteFunction<dtContractSignerType>("GetContractSignerType", c_CONTRACT_SIGNER_TYPEParameter, contractCodeParameter, oCCParameter);
        }
        public ObjectResult<tbt_DraftRentalBillingTarget> DeleteTbt_DraftRentalBillingTarget(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalBillingTarget>("DeleteTbt_DraftRentalBillingTarget", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalEmail> DeleteTbt_DraftRentalEmail(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalEmail>("DeleteTbt_DraftRentalEmail", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalInstrument> DeleteTbt_DraftRentalInstrument(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalInstrument>("DeleteTbt_DraftRentalInstrument", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalOperationType> DeleteTbt_DraftRentalOperationType(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalOperationType>("DeleteTbt_DraftRentalOperationType", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalSentryGuardDetails> DeleteTbt_DraftRentalSentryGuardDetails(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalSentryGuardDetails>("DeleteTbt_DraftRentalSentryGuardDetails", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalBEDetails> UpdateTbt_DraftRentalBEDetails(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalBEDetails>("UpdateTbt_DraftRentalBEDetails", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalContract> UpdateTbt_DraftRentalContract(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalContract>("UpdateTbt_DraftRentalContract", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalMaintenanceDetails> UpdateTbt_DraftRentalMaintenanceDetails(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalMaintenanceDetails>("UpdateTbt_DraftRentalMaintenanceDetails", xmlParameter);
        }
        public ObjectResult<tbt_DraftRentalSentryGuard> UpdateTbt_DraftRentalSentryGuard(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalSentryGuard>("UpdateTbt_DraftRentalSentryGuard", xmlParameter);
        }
        public ObjectResult<tbt_RelationType> DeleteTbt_RelationType(string pchrContractCode)
        {
    
            ObjectParameter pchrContractCodeParameter;
    
            if (pchrContractCode != null)
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", pchrContractCode);
            }
            else
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_RelationType>("DeleteTbt_RelationType", pchrContractCodeParameter);
        }
        public ObjectResult<dtContractList> GetContractListForSearchInfo(string pchrRoleTypeContractTarget, string pchrRoleTypePurchaser, string pchrRoleTypeRealCustomer, string pchrServiceTypeCode, string pchrCustomerCode, string pchrGroupCode, string pchrSiteCode, string pchvContractCode, string pchvUserCode, string pchvPlanCode, string pchvProjectCode, string pchrnCustomerName, string pchrnBranchName, string pchrnGroupName, string pchrCustomerStatus, string pchrCustomerTypeCode, string pchrCompanyTypeCode, string pchrnIDNo, string pchrRegionCode, string pchrBusinessTypeCode, string pchrnCust_Address, string pchrnCust_Alley, string pchrnCust_Road, string pchrnCust_SubDistrict, string pchrCust_ProvinceCode, string pchrCust_DistrictCode, string pchrCust_ZipCode, string pchrnCust_PhoneNo, string pchrnCust_FaxNo, string pchrnSiteName, string pchrnSite_Address, string pchrnSite_Alley, string pchrnSite_Road, string pchrnSite_SubDistrict, string pchrSite_ProvinceCode, string pchrSite_DistrictCode, string pchrSite_ZipCode, string pchrnSite_PhoneNo, Nullable<System.DateTime> pdtmOperationDate_From, Nullable<System.DateTime> pdtmOperationDate_To, Nullable<System.DateTime> pdtmCustAcceptDate_From, Nullable<System.DateTime> pdtmCustAcceptDate_To, Nullable<System.DateTime> pdtmInstallationCompleteDate_From, Nullable<System.DateTime> pdtmInstallationCompleteDate_To, string pchvContractOfficeCode, string pchvdsTransDataOfficeCode, string pchvOperationOfficeCode, string pchvSalesmanEmpNo1, string pchvSalesmanEmpName1, string pchrProductCode, string pchrChangeTypeCode, string pchrProcessManageStatusCode, string pchrStartTypeCode, string pchvC_RENTAL_CHANGE_TYPE, string pchvC_SALE_CHANGE_TYPE, string pchvC_SALE_PROC_MANAGE_STATUS, string pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, string pchrC_CUST_ROLE_TYPE_REAL_CUST, string pchrC_CUST_ROLE_TYPE_PURCHASER, Nullable<bool> pbitC_FLAG_ON, string pchrC_SERVICE_TYPE_RENTAL, string pchrC_SERVICE_TYPE_SALE, string pchrC_CONTRACT_STATUS_BEF_START, string pchrC_CONTRACT_STATUS_CANCEL, string pchrC_CONTRACT_STATUS_END, string c_SALE_CHANGE_TYPE_NEW_SALE, string c_CUST_TYPE_JURISTIC, Nullable<System.DateTime> stopDateFrom, Nullable<System.DateTime> stopDateTo, Nullable<System.DateTime> cancelDateFrom, Nullable<System.DateTime> cancelDateTo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter pchrRoleTypeContractTargetParameter;
    
            if (pchrRoleTypeContractTarget != null)
            {
                pchrRoleTypeContractTargetParameter = new ObjectParameter("pchrRoleTypeContractTarget", pchrRoleTypeContractTarget);
            }
            else
            {
                pchrRoleTypeContractTargetParameter = new ObjectParameter("pchrRoleTypeContractTarget", typeof(string));
            }
    
            ObjectParameter pchrRoleTypePurchaserParameter;
    
            if (pchrRoleTypePurchaser != null)
            {
                pchrRoleTypePurchaserParameter = new ObjectParameter("pchrRoleTypePurchaser", pchrRoleTypePurchaser);
            }
            else
            {
                pchrRoleTypePurchaserParameter = new ObjectParameter("pchrRoleTypePurchaser", typeof(string));
            }
    
            ObjectParameter pchrRoleTypeRealCustomerParameter;
    
            if (pchrRoleTypeRealCustomer != null)
            {
                pchrRoleTypeRealCustomerParameter = new ObjectParameter("pchrRoleTypeRealCustomer", pchrRoleTypeRealCustomer);
            }
            else
            {
                pchrRoleTypeRealCustomerParameter = new ObjectParameter("pchrRoleTypeRealCustomer", typeof(string));
            }
    
            ObjectParameter pchrServiceTypeCodeParameter;
    
            if (pchrServiceTypeCode != null)
            {
                pchrServiceTypeCodeParameter = new ObjectParameter("pchrServiceTypeCode", pchrServiceTypeCode);
            }
            else
            {
                pchrServiceTypeCodeParameter = new ObjectParameter("pchrServiceTypeCode", typeof(string));
            }
    
            ObjectParameter pchrCustomerCodeParameter;
    
            if (pchrCustomerCode != null)
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", pchrCustomerCode);
            }
            else
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", typeof(string));
            }
    
            ObjectParameter pchrGroupCodeParameter;
    
            if (pchrGroupCode != null)
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", pchrGroupCode);
            }
            else
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", typeof(string));
            }
    
            ObjectParameter pchrSiteCodeParameter;
    
            if (pchrSiteCode != null)
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", pchrSiteCode);
            }
            else
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", typeof(string));
            }
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter pchvUserCodeParameter;
    
            if (pchvUserCode != null)
            {
                pchvUserCodeParameter = new ObjectParameter("pchvUserCode", pchvUserCode);
            }
            else
            {
                pchvUserCodeParameter = new ObjectParameter("pchvUserCode", typeof(string));
            }
    
            ObjectParameter pchvPlanCodeParameter;
    
            if (pchvPlanCode != null)
            {
                pchvPlanCodeParameter = new ObjectParameter("pchvPlanCode", pchvPlanCode);
            }
            else
            {
                pchvPlanCodeParameter = new ObjectParameter("pchvPlanCode", typeof(string));
            }
    
            ObjectParameter pchvProjectCodeParameter;
    
            if (pchvProjectCode != null)
            {
                pchvProjectCodeParameter = new ObjectParameter("pchvProjectCode", pchvProjectCode);
            }
            else
            {
                pchvProjectCodeParameter = new ObjectParameter("pchvProjectCode", typeof(string));
            }
    
            ObjectParameter pchrnCustomerNameParameter;
    
            if (pchrnCustomerName != null)
            {
                pchrnCustomerNameParameter = new ObjectParameter("pchrnCustomerName", pchrnCustomerName);
            }
            else
            {
                pchrnCustomerNameParameter = new ObjectParameter("pchrnCustomerName", typeof(string));
            }
    
            ObjectParameter pchrnBranchNameParameter;
    
            if (pchrnBranchName != null)
            {
                pchrnBranchNameParameter = new ObjectParameter("pchrnBranchName", pchrnBranchName);
            }
            else
            {
                pchrnBranchNameParameter = new ObjectParameter("pchrnBranchName", typeof(string));
            }
    
            ObjectParameter pchrnGroupNameParameter;
    
            if (pchrnGroupName != null)
            {
                pchrnGroupNameParameter = new ObjectParameter("pchrnGroupName", pchrnGroupName);
            }
            else
            {
                pchrnGroupNameParameter = new ObjectParameter("pchrnGroupName", typeof(string));
            }
    
            ObjectParameter pchrCustomerStatusParameter;
    
            if (pchrCustomerStatus != null)
            {
                pchrCustomerStatusParameter = new ObjectParameter("pchrCustomerStatus", pchrCustomerStatus);
            }
            else
            {
                pchrCustomerStatusParameter = new ObjectParameter("pchrCustomerStatus", typeof(string));
            }
    
            ObjectParameter pchrCustomerTypeCodeParameter;
    
            if (pchrCustomerTypeCode != null)
            {
                pchrCustomerTypeCodeParameter = new ObjectParameter("pchrCustomerTypeCode", pchrCustomerTypeCode);
            }
            else
            {
                pchrCustomerTypeCodeParameter = new ObjectParameter("pchrCustomerTypeCode", typeof(string));
            }
    
            ObjectParameter pchrCompanyTypeCodeParameter;
    
            if (pchrCompanyTypeCode != null)
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", pchrCompanyTypeCode);
            }
            else
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", typeof(string));
            }
    
            ObjectParameter pchrnIDNoParameter;
    
            if (pchrnIDNo != null)
            {
                pchrnIDNoParameter = new ObjectParameter("pchrnIDNo", pchrnIDNo);
            }
            else
            {
                pchrnIDNoParameter = new ObjectParameter("pchrnIDNo", typeof(string));
            }
    
            ObjectParameter pchrRegionCodeParameter;
    
            if (pchrRegionCode != null)
            {
                pchrRegionCodeParameter = new ObjectParameter("pchrRegionCode", pchrRegionCode);
            }
            else
            {
                pchrRegionCodeParameter = new ObjectParameter("pchrRegionCode", typeof(string));
            }
    
            ObjectParameter pchrBusinessTypeCodeParameter;
    
            if (pchrBusinessTypeCode != null)
            {
                pchrBusinessTypeCodeParameter = new ObjectParameter("pchrBusinessTypeCode", pchrBusinessTypeCode);
            }
            else
            {
                pchrBusinessTypeCodeParameter = new ObjectParameter("pchrBusinessTypeCode", typeof(string));
            }
    
            ObjectParameter pchrnCust_AddressParameter;
    
            if (pchrnCust_Address != null)
            {
                pchrnCust_AddressParameter = new ObjectParameter("pchrnCust_Address", pchrnCust_Address);
            }
            else
            {
                pchrnCust_AddressParameter = new ObjectParameter("pchrnCust_Address", typeof(string));
            }
    
            ObjectParameter pchrnCust_AlleyParameter;
    
            if (pchrnCust_Alley != null)
            {
                pchrnCust_AlleyParameter = new ObjectParameter("pchrnCust_Alley", pchrnCust_Alley);
            }
            else
            {
                pchrnCust_AlleyParameter = new ObjectParameter("pchrnCust_Alley", typeof(string));
            }
    
            ObjectParameter pchrnCust_RoadParameter;
    
            if (pchrnCust_Road != null)
            {
                pchrnCust_RoadParameter = new ObjectParameter("pchrnCust_Road", pchrnCust_Road);
            }
            else
            {
                pchrnCust_RoadParameter = new ObjectParameter("pchrnCust_Road", typeof(string));
            }
    
            ObjectParameter pchrnCust_SubDistrictParameter;
    
            if (pchrnCust_SubDistrict != null)
            {
                pchrnCust_SubDistrictParameter = new ObjectParameter("pchrnCust_SubDistrict", pchrnCust_SubDistrict);
            }
            else
            {
                pchrnCust_SubDistrictParameter = new ObjectParameter("pchrnCust_SubDistrict", typeof(string));
            }
    
            ObjectParameter pchrCust_ProvinceCodeParameter;
    
            if (pchrCust_ProvinceCode != null)
            {
                pchrCust_ProvinceCodeParameter = new ObjectParameter("pchrCust_ProvinceCode", pchrCust_ProvinceCode);
            }
            else
            {
                pchrCust_ProvinceCodeParameter = new ObjectParameter("pchrCust_ProvinceCode", typeof(string));
            }
    
            ObjectParameter pchrCust_DistrictCodeParameter;
    
            if (pchrCust_DistrictCode != null)
            {
                pchrCust_DistrictCodeParameter = new ObjectParameter("pchrCust_DistrictCode", pchrCust_DistrictCode);
            }
            else
            {
                pchrCust_DistrictCodeParameter = new ObjectParameter("pchrCust_DistrictCode", typeof(string));
            }
    
            ObjectParameter pchrCust_ZipCodeParameter;
    
            if (pchrCust_ZipCode != null)
            {
                pchrCust_ZipCodeParameter = new ObjectParameter("pchrCust_ZipCode", pchrCust_ZipCode);
            }
            else
            {
                pchrCust_ZipCodeParameter = new ObjectParameter("pchrCust_ZipCode", typeof(string));
            }
    
            ObjectParameter pchrnCust_PhoneNoParameter;
    
            if (pchrnCust_PhoneNo != null)
            {
                pchrnCust_PhoneNoParameter = new ObjectParameter("pchrnCust_PhoneNo", pchrnCust_PhoneNo);
            }
            else
            {
                pchrnCust_PhoneNoParameter = new ObjectParameter("pchrnCust_PhoneNo", typeof(string));
            }
    
            ObjectParameter pchrnCust_FaxNoParameter;
    
            if (pchrnCust_FaxNo != null)
            {
                pchrnCust_FaxNoParameter = new ObjectParameter("pchrnCust_FaxNo", pchrnCust_FaxNo);
            }
            else
            {
                pchrnCust_FaxNoParameter = new ObjectParameter("pchrnCust_FaxNo", typeof(string));
            }
    
            ObjectParameter pchrnSiteNameParameter;
    
            if (pchrnSiteName != null)
            {
                pchrnSiteNameParameter = new ObjectParameter("pchrnSiteName", pchrnSiteName);
            }
            else
            {
                pchrnSiteNameParameter = new ObjectParameter("pchrnSiteName", typeof(string));
            }
    
            ObjectParameter pchrnSite_AddressParameter;
    
            if (pchrnSite_Address != null)
            {
                pchrnSite_AddressParameter = new ObjectParameter("pchrnSite_Address", pchrnSite_Address);
            }
            else
            {
                pchrnSite_AddressParameter = new ObjectParameter("pchrnSite_Address", typeof(string));
            }
    
            ObjectParameter pchrnSite_AlleyParameter;
    
            if (pchrnSite_Alley != null)
            {
                pchrnSite_AlleyParameter = new ObjectParameter("pchrnSite_Alley", pchrnSite_Alley);
            }
            else
            {
                pchrnSite_AlleyParameter = new ObjectParameter("pchrnSite_Alley", typeof(string));
            }
    
            ObjectParameter pchrnSite_RoadParameter;
    
            if (pchrnSite_Road != null)
            {
                pchrnSite_RoadParameter = new ObjectParameter("pchrnSite_Road", pchrnSite_Road);
            }
            else
            {
                pchrnSite_RoadParameter = new ObjectParameter("pchrnSite_Road", typeof(string));
            }
    
            ObjectParameter pchrnSite_SubDistrictParameter;
    
            if (pchrnSite_SubDistrict != null)
            {
                pchrnSite_SubDistrictParameter = new ObjectParameter("pchrnSite_SubDistrict", pchrnSite_SubDistrict);
            }
            else
            {
                pchrnSite_SubDistrictParameter = new ObjectParameter("pchrnSite_SubDistrict", typeof(string));
            }
    
            ObjectParameter pchrSite_ProvinceCodeParameter;
    
            if (pchrSite_ProvinceCode != null)
            {
                pchrSite_ProvinceCodeParameter = new ObjectParameter("pchrSite_ProvinceCode", pchrSite_ProvinceCode);
            }
            else
            {
                pchrSite_ProvinceCodeParameter = new ObjectParameter("pchrSite_ProvinceCode", typeof(string));
            }
    
            ObjectParameter pchrSite_DistrictCodeParameter;
    
            if (pchrSite_DistrictCode != null)
            {
                pchrSite_DistrictCodeParameter = new ObjectParameter("pchrSite_DistrictCode", pchrSite_DistrictCode);
            }
            else
            {
                pchrSite_DistrictCodeParameter = new ObjectParameter("pchrSite_DistrictCode", typeof(string));
            }
    
            ObjectParameter pchrSite_ZipCodeParameter;
    
            if (pchrSite_ZipCode != null)
            {
                pchrSite_ZipCodeParameter = new ObjectParameter("pchrSite_ZipCode", pchrSite_ZipCode);
            }
            else
            {
                pchrSite_ZipCodeParameter = new ObjectParameter("pchrSite_ZipCode", typeof(string));
            }
    
            ObjectParameter pchrnSite_PhoneNoParameter;
    
            if (pchrnSite_PhoneNo != null)
            {
                pchrnSite_PhoneNoParameter = new ObjectParameter("pchrnSite_PhoneNo", pchrnSite_PhoneNo);
            }
            else
            {
                pchrnSite_PhoneNoParameter = new ObjectParameter("pchrnSite_PhoneNo", typeof(string));
            }
    
            ObjectParameter pdtmOperationDate_FromParameter;
    
            if (pdtmOperationDate_From.HasValue)
            {
                pdtmOperationDate_FromParameter = new ObjectParameter("pdtmOperationDate_From", pdtmOperationDate_From);
            }
            else
            {
                pdtmOperationDate_FromParameter = new ObjectParameter("pdtmOperationDate_From", typeof(System.DateTime));
            }
    
            ObjectParameter pdtmOperationDate_ToParameter;
    
            if (pdtmOperationDate_To.HasValue)
            {
                pdtmOperationDate_ToParameter = new ObjectParameter("pdtmOperationDate_To", pdtmOperationDate_To);
            }
            else
            {
                pdtmOperationDate_ToParameter = new ObjectParameter("pdtmOperationDate_To", typeof(System.DateTime));
            }
    
            ObjectParameter pdtmCustAcceptDate_FromParameter;
    
            if (pdtmCustAcceptDate_From.HasValue)
            {
                pdtmCustAcceptDate_FromParameter = new ObjectParameter("pdtmCustAcceptDate_From", pdtmCustAcceptDate_From);
            }
            else
            {
                pdtmCustAcceptDate_FromParameter = new ObjectParameter("pdtmCustAcceptDate_From", typeof(System.DateTime));
            }
    
            ObjectParameter pdtmCustAcceptDate_ToParameter;
    
            if (pdtmCustAcceptDate_To.HasValue)
            {
                pdtmCustAcceptDate_ToParameter = new ObjectParameter("pdtmCustAcceptDate_To", pdtmCustAcceptDate_To);
            }
            else
            {
                pdtmCustAcceptDate_ToParameter = new ObjectParameter("pdtmCustAcceptDate_To", typeof(System.DateTime));
            }
    
            ObjectParameter pdtmInstallationCompleteDate_FromParameter;
    
            if (pdtmInstallationCompleteDate_From.HasValue)
            {
                pdtmInstallationCompleteDate_FromParameter = new ObjectParameter("pdtmInstallationCompleteDate_From", pdtmInstallationCompleteDate_From);
            }
            else
            {
                pdtmInstallationCompleteDate_FromParameter = new ObjectParameter("pdtmInstallationCompleteDate_From", typeof(System.DateTime));
            }
    
            ObjectParameter pdtmInstallationCompleteDate_ToParameter;
    
            if (pdtmInstallationCompleteDate_To.HasValue)
            {
                pdtmInstallationCompleteDate_ToParameter = new ObjectParameter("pdtmInstallationCompleteDate_To", pdtmInstallationCompleteDate_To);
            }
            else
            {
                pdtmInstallationCompleteDate_ToParameter = new ObjectParameter("pdtmInstallationCompleteDate_To", typeof(System.DateTime));
            }
    
            ObjectParameter pchvContractOfficeCodeParameter;
    
            if (pchvContractOfficeCode != null)
            {
                pchvContractOfficeCodeParameter = new ObjectParameter("pchvContractOfficeCode", pchvContractOfficeCode);
            }
            else
            {
                pchvContractOfficeCodeParameter = new ObjectParameter("pchvContractOfficeCode", typeof(string));
            }
    
            ObjectParameter pchvdsTransDataOfficeCodeParameter;
    
            if (pchvdsTransDataOfficeCode != null)
            {
                pchvdsTransDataOfficeCodeParameter = new ObjectParameter("pchvdsTransDataOfficeCode", pchvdsTransDataOfficeCode);
            }
            else
            {
                pchvdsTransDataOfficeCodeParameter = new ObjectParameter("pchvdsTransDataOfficeCode", typeof(string));
            }
    
            ObjectParameter pchvOperationOfficeCodeParameter;
    
            if (pchvOperationOfficeCode != null)
            {
                pchvOperationOfficeCodeParameter = new ObjectParameter("pchvOperationOfficeCode", pchvOperationOfficeCode);
            }
            else
            {
                pchvOperationOfficeCodeParameter = new ObjectParameter("pchvOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pchvSalesmanEmpNo1Parameter;
    
            if (pchvSalesmanEmpNo1 != null)
            {
                pchvSalesmanEmpNo1Parameter = new ObjectParameter("pchvSalesmanEmpNo1", pchvSalesmanEmpNo1);
            }
            else
            {
                pchvSalesmanEmpNo1Parameter = new ObjectParameter("pchvSalesmanEmpNo1", typeof(string));
            }
    
            ObjectParameter pchvSalesmanEmpName1Parameter;
    
            if (pchvSalesmanEmpName1 != null)
            {
                pchvSalesmanEmpName1Parameter = new ObjectParameter("pchvSalesmanEmpName1", pchvSalesmanEmpName1);
            }
            else
            {
                pchvSalesmanEmpName1Parameter = new ObjectParameter("pchvSalesmanEmpName1", typeof(string));
            }
    
            ObjectParameter pchrProductCodeParameter;
    
            if (pchrProductCode != null)
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", pchrProductCode);
            }
            else
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", typeof(string));
            }
    
            ObjectParameter pchrChangeTypeCodeParameter;
    
            if (pchrChangeTypeCode != null)
            {
                pchrChangeTypeCodeParameter = new ObjectParameter("pchrChangeTypeCode", pchrChangeTypeCode);
            }
            else
            {
                pchrChangeTypeCodeParameter = new ObjectParameter("pchrChangeTypeCode", typeof(string));
            }
    
            ObjectParameter pchrProcessManageStatusCodeParameter;
    
            if (pchrProcessManageStatusCode != null)
            {
                pchrProcessManageStatusCodeParameter = new ObjectParameter("pchrProcessManageStatusCode", pchrProcessManageStatusCode);
            }
            else
            {
                pchrProcessManageStatusCodeParameter = new ObjectParameter("pchrProcessManageStatusCode", typeof(string));
            }
    
            ObjectParameter pchrStartTypeCodeParameter;
    
            if (pchrStartTypeCode != null)
            {
                pchrStartTypeCodeParameter = new ObjectParameter("pchrStartTypeCode", pchrStartTypeCode);
            }
            else
            {
                pchrStartTypeCodeParameter = new ObjectParameter("pchrStartTypeCode", typeof(string));
            }
    
            ObjectParameter pchvC_RENTAL_CHANGE_TYPEParameter;
    
            if (pchvC_RENTAL_CHANGE_TYPE != null)
            {
                pchvC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pchvC_RENTAL_CHANGE_TYPE", pchvC_RENTAL_CHANGE_TYPE);
            }
            else
            {
                pchvC_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("pchvC_RENTAL_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pchvC_SALE_CHANGE_TYPEParameter;
    
            if (pchvC_SALE_CHANGE_TYPE != null)
            {
                pchvC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pchvC_SALE_CHANGE_TYPE", pchvC_SALE_CHANGE_TYPE);
            }
            else
            {
                pchvC_SALE_CHANGE_TYPEParameter = new ObjectParameter("pchvC_SALE_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter pchvC_SALE_PROC_MANAGE_STATUSParameter;
    
            if (pchvC_SALE_PROC_MANAGE_STATUS != null)
            {
                pchvC_SALE_PROC_MANAGE_STATUSParameter = new ObjectParameter("pchvC_SALE_PROC_MANAGE_STATUS", pchvC_SALE_PROC_MANAGE_STATUS);
            }
            else
            {
                pchvC_SALE_PROC_MANAGE_STATUSParameter = new ObjectParameter("pchvC_SALE_PROC_MANAGE_STATUS", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter;
    
            if (pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET != null)
            {
                pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET", pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter;
    
            if (pchrC_CUST_ROLE_TYPE_REAL_CUST != null)
            {
                pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_REAL_CUST", pchrC_CUST_ROLE_TYPE_REAL_CUST);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_REAL_CUST", typeof(string));
            }
    
            ObjectParameter pchrC_CUST_ROLE_TYPE_PURCHASERParameter;
    
            if (pchrC_CUST_ROLE_TYPE_PURCHASER != null)
            {
                pchrC_CUST_ROLE_TYPE_PURCHASERParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_PURCHASER", pchrC_CUST_ROLE_TYPE_PURCHASER);
            }
            else
            {
                pchrC_CUST_ROLE_TYPE_PURCHASERParameter = new ObjectParameter("pchrC_CUST_ROLE_TYPE_PURCHASER", typeof(string));
            }
    
            ObjectParameter pbitC_FLAG_ONParameter;
    
            if (pbitC_FLAG_ON.HasValue)
            {
                pbitC_FLAG_ONParameter = new ObjectParameter("pbitC_FLAG_ON", pbitC_FLAG_ON);
            }
            else
            {
                pbitC_FLAG_ONParameter = new ObjectParameter("pbitC_FLAG_ON", typeof(bool));
            }
    
            ObjectParameter pchrC_SERVICE_TYPE_RENTALParameter;
    
            if (pchrC_SERVICE_TYPE_RENTAL != null)
            {
                pchrC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pchrC_SERVICE_TYPE_RENTAL", pchrC_SERVICE_TYPE_RENTAL);
            }
            else
            {
                pchrC_SERVICE_TYPE_RENTALParameter = new ObjectParameter("pchrC_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter pchrC_SERVICE_TYPE_SALEParameter;
    
            if (pchrC_SERVICE_TYPE_SALE != null)
            {
                pchrC_SERVICE_TYPE_SALEParameter = new ObjectParameter("pchrC_SERVICE_TYPE_SALE", pchrC_SERVICE_TYPE_SALE);
            }
            else
            {
                pchrC_SERVICE_TYPE_SALEParameter = new ObjectParameter("pchrC_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter pchrC_CONTRACT_STATUS_BEF_STARTParameter;
    
            if (pchrC_CONTRACT_STATUS_BEF_START != null)
            {
                pchrC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_BEF_START", pchrC_CONTRACT_STATUS_BEF_START);
            }
            else
            {
                pchrC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_BEF_START", typeof(string));
            }
    
            ObjectParameter pchrC_CONTRACT_STATUS_CANCELParameter;
    
            if (pchrC_CONTRACT_STATUS_CANCEL != null)
            {
                pchrC_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_CANCEL", pchrC_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                pchrC_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter pchrC_CONTRACT_STATUS_ENDParameter;
    
            if (pchrC_CONTRACT_STATUS_END != null)
            {
                pchrC_CONTRACT_STATUS_ENDParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_END", pchrC_CONTRACT_STATUS_END);
            }
            else
            {
                pchrC_CONTRACT_STATUS_ENDParameter = new ObjectParameter("pchrC_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_SALE_CHANGE_TYPE_NEW_SALEParameter;
    
            if (c_SALE_CHANGE_TYPE_NEW_SALE != null)
            {
                c_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", c_SALE_CHANGE_TYPE_NEW_SALE);
            }
            else
            {
                c_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_CUST_TYPE_JURISTICParameter;
    
            if (c_CUST_TYPE_JURISTIC != null)
            {
                c_CUST_TYPE_JURISTICParameter = new ObjectParameter("C_CUST_TYPE_JURISTIC", c_CUST_TYPE_JURISTIC);
            }
            else
            {
                c_CUST_TYPE_JURISTICParameter = new ObjectParameter("C_CUST_TYPE_JURISTIC", typeof(string));
            }
    
            ObjectParameter stopDateFromParameter;
    
            if (stopDateFrom.HasValue)
            {
                stopDateFromParameter = new ObjectParameter("StopDateFrom", stopDateFrom);
            }
            else
            {
                stopDateFromParameter = new ObjectParameter("StopDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter stopDateToParameter;
    
            if (stopDateTo.HasValue)
            {
                stopDateToParameter = new ObjectParameter("StopDateTo", stopDateTo);
            }
            else
            {
                stopDateToParameter = new ObjectParameter("StopDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter cancelDateFromParameter;
    
            if (cancelDateFrom.HasValue)
            {
                cancelDateFromParameter = new ObjectParameter("CancelDateFrom", cancelDateFrom);
            }
            else
            {
                cancelDateFromParameter = new ObjectParameter("CancelDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter cancelDateToParameter;
    
            if (cancelDateTo.HasValue)
            {
                cancelDateToParameter = new ObjectParameter("CancelDateTo", cancelDateTo);
            }
            else
            {
                cancelDateToParameter = new ObjectParameter("CancelDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtContractList>("GetContractListForSearchInfo", pchrRoleTypeContractTargetParameter, pchrRoleTypePurchaserParameter, pchrRoleTypeRealCustomerParameter, pchrServiceTypeCodeParameter, pchrCustomerCodeParameter, pchrGroupCodeParameter, pchrSiteCodeParameter, pchvContractCodeParameter, pchvUserCodeParameter, pchvPlanCodeParameter, pchvProjectCodeParameter, pchrnCustomerNameParameter, pchrnBranchNameParameter, pchrnGroupNameParameter, pchrCustomerStatusParameter, pchrCustomerTypeCodeParameter, pchrCompanyTypeCodeParameter, pchrnIDNoParameter, pchrRegionCodeParameter, pchrBusinessTypeCodeParameter, pchrnCust_AddressParameter, pchrnCust_AlleyParameter, pchrnCust_RoadParameter, pchrnCust_SubDistrictParameter, pchrCust_ProvinceCodeParameter, pchrCust_DistrictCodeParameter, pchrCust_ZipCodeParameter, pchrnCust_PhoneNoParameter, pchrnCust_FaxNoParameter, pchrnSiteNameParameter, pchrnSite_AddressParameter, pchrnSite_AlleyParameter, pchrnSite_RoadParameter, pchrnSite_SubDistrictParameter, pchrSite_ProvinceCodeParameter, pchrSite_DistrictCodeParameter, pchrSite_ZipCodeParameter, pchrnSite_PhoneNoParameter, pdtmOperationDate_FromParameter, pdtmOperationDate_ToParameter, pdtmCustAcceptDate_FromParameter, pdtmCustAcceptDate_ToParameter, pdtmInstallationCompleteDate_FromParameter, pdtmInstallationCompleteDate_ToParameter, pchvContractOfficeCodeParameter, pchvdsTransDataOfficeCodeParameter, pchvOperationOfficeCodeParameter, pchvSalesmanEmpNo1Parameter, pchvSalesmanEmpName1Parameter, pchrProductCodeParameter, pchrChangeTypeCodeParameter, pchrProcessManageStatusCodeParameter, pchrStartTypeCodeParameter, pchvC_RENTAL_CHANGE_TYPEParameter, pchvC_SALE_CHANGE_TYPEParameter, pchvC_SALE_PROC_MANAGE_STATUSParameter, pchrC_CUST_ROLE_TYPE_CONTRACT_TARGETParameter, pchrC_CUST_ROLE_TYPE_REAL_CUSTParameter, pchrC_CUST_ROLE_TYPE_PURCHASERParameter, pbitC_FLAG_ONParameter, pchrC_SERVICE_TYPE_RENTALParameter, pchrC_SERVICE_TYPE_SALEParameter, pchrC_CONTRACT_STATUS_BEF_STARTParameter, pchrC_CONTRACT_STATUS_CANCELParameter, pchrC_CONTRACT_STATUS_ENDParameter, c_SALE_CHANGE_TYPE_NEW_SALEParameter, c_CUST_TYPE_JURISTICParameter, stopDateFromParameter, stopDateToParameter, cancelDateFromParameter, cancelDateToParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbs_ContractDocTemplate> GetTbs_ContractDocTemplate(string pDocumentCode)
        {
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbs_ContractDocTemplate>("GetTbs_ContractDocTemplate", pDocumentCodeParameter);
        }
        public ObjectResult<tbt_DocCancelContractMemo> GetTbt_DocCancelContractMemo(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_DocCancelContractMemo>("GetTbt_DocCancelContractMemo", pDocIDParameter);
        }
        public ObjectResult<tbt_DocCancelContractMemoDetail> GetTbt_DocCancelContractMemoDetail(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_DocCancelContractMemoDetail>("GetTbt_DocCancelContractMemoDetail", pDocIDParameter);
        }
        public ObjectResult<tbt_CancelContractMemo> InsertTbt_CancelContractMemo(string xml_CancelContractMemo)
        {
    
            ObjectParameter xml_CancelContractMemoParameter;
    
            if (xml_CancelContractMemo != null)
            {
                xml_CancelContractMemoParameter = new ObjectParameter("xml_CancelContractMemo", xml_CancelContractMemo);
            }
            else
            {
                xml_CancelContractMemoParameter = new ObjectParameter("xml_CancelContractMemo", typeof(string));
            }
            return base.ExecuteFunction<tbt_CancelContractMemo>("InsertTbt_CancelContractMemo", xml_CancelContractMemoParameter);
        }
        public ObjectResult<tbs_ContractDocTemplate> InsertTbs_ContractDocTemplate(string xml_ContractDocTemplate)
        {
    
            ObjectParameter xml_ContractDocTemplateParameter;
    
            if (xml_ContractDocTemplate != null)
            {
                xml_ContractDocTemplateParameter = new ObjectParameter("xml_ContractDocTemplate", xml_ContractDocTemplate);
            }
            else
            {
                xml_ContractDocTemplateParameter = new ObjectParameter("xml_ContractDocTemplate", typeof(string));
            }
            return base.ExecuteFunction<tbs_ContractDocTemplate>("InsertTbs_ContractDocTemplate", xml_ContractDocTemplateParameter);
        }
        public ObjectResult<tbt_DocCancelContractMemo> InsertTbt_DocCancelContractMemo(string xml_DocCancelContractMemo)
        {
    
            ObjectParameter xml_DocCancelContractMemoParameter;
    
            if (xml_DocCancelContractMemo != null)
            {
                xml_DocCancelContractMemoParameter = new ObjectParameter("xml_DocCancelContractMemo", xml_DocCancelContractMemo);
            }
            else
            {
                xml_DocCancelContractMemoParameter = new ObjectParameter("xml_DocCancelContractMemo", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocCancelContractMemo>("InsertTbt_DocCancelContractMemo", xml_DocCancelContractMemoParameter);
        }
        public ObjectResult<tbt_DocCancelContractMemoDetail> InsertTbt_DocCancelContractMemoDetail(string xml_DocCancelContractMemoDetail)
        {
    
            ObjectParameter xml_DocCancelContractMemoDetailParameter;
    
            if (xml_DocCancelContractMemoDetail != null)
            {
                xml_DocCancelContractMemoDetailParameter = new ObjectParameter("xml_DocCancelContractMemoDetail", xml_DocCancelContractMemoDetail);
            }
            else
            {
                xml_DocCancelContractMemoDetailParameter = new ObjectParameter("xml_DocCancelContractMemoDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocCancelContractMemoDetail>("InsertTbt_DocCancelContractMemoDetail", xml_DocCancelContractMemoDetailParameter);
        }
        public ObjectResult<tbt_ContractDocument> GetTbt_ContractDocument(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_ContractDocument>("GetTbt_ContractDocument", pDocIDParameter);
        }
        public ObjectResult<tbt_ContractDocument> InsertTbt_ContractDocument(string xml_ContractDocument)
        {
    
            ObjectParameter xml_ContractDocumentParameter;
    
            if (xml_ContractDocument != null)
            {
                xml_ContractDocumentParameter = new ObjectParameter("xml_ContractDocument", xml_ContractDocument);
            }
            else
            {
                xml_ContractDocumentParameter = new ObjectParameter("xml_ContractDocument", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractDocument>("InsertTbt_ContractDocument", xml_ContractDocumentParameter);
        }
        public ObjectResult<tbt_DocChangeMemo> InsertTbt_DocChangeMemo(string xml_DocChangeMemo)
        {
    
            ObjectParameter xml_DocChangeMemoParameter;
    
            if (xml_DocChangeMemo != null)
            {
                xml_DocChangeMemoParameter = new ObjectParameter("xml_DocChangeMemo", xml_DocChangeMemo);
            }
            else
            {
                xml_DocChangeMemoParameter = new ObjectParameter("xml_DocChangeMemo", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocChangeMemo>("InsertTbt_DocChangeMemo", xml_DocChangeMemoParameter);
        }
        public ObjectResult<tbt_DocChangeNotice> InsertTbt_DocChangeNotice(string xml_DocChangeNotice)
        {
    
            ObjectParameter xml_DocChangeNoticeParameter;
    
            if (xml_DocChangeNotice != null)
            {
                xml_DocChangeNoticeParameter = new ObjectParameter("xml_DocChangeNotice", xml_DocChangeNotice);
            }
            else
            {
                xml_DocChangeNoticeParameter = new ObjectParameter("xml_DocChangeNotice", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocChangeNotice>("InsertTbt_DocChangeNotice", xml_DocChangeNoticeParameter);
        }
        public ObjectResult<tbt_DocChangeFeeMemo> InsertTbt_DocChangeFeeMemo(string xml_DocChangeFeeMemo)
        {
    
            ObjectParameter xml_DocChangeFeeMemoParameter;
    
            if (xml_DocChangeFeeMemo != null)
            {
                xml_DocChangeFeeMemoParameter = new ObjectParameter("xml_DocChangeFeeMemo", xml_DocChangeFeeMemo);
            }
            else
            {
                xml_DocChangeFeeMemoParameter = new ObjectParameter("xml_DocChangeFeeMemo", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocChangeFeeMemo>("InsertTbt_DocChangeFeeMemo", xml_DocChangeFeeMemoParameter);
        }
        public ObjectResult<tbt_DocContractReport> InsertTbt_DocContractReport(string xml_DocContractReport)
        {
    
            ObjectParameter xml_DocContractReportParameter;
    
            if (xml_DocContractReport != null)
            {
                xml_DocContractReportParameter = new ObjectParameter("xml_DocContractReport", xml_DocContractReport);
            }
            else
            {
                xml_DocContractReportParameter = new ObjectParameter("xml_DocContractReport", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocContractReport>("InsertTbt_DocContractReport", xml_DocContractReportParameter);
        }
        public ObjectResult<tbt_DocConfirmCurrentInstrumentMemo> InsertTbt_DocConfirmCurrentInstrumentMemo(string xml_DocConfirmCurrentInstrumentMemo)
        {
    
            ObjectParameter xml_DocConfirmCurrentInstrumentMemoParameter;
    
            if (xml_DocConfirmCurrentInstrumentMemo != null)
            {
                xml_DocConfirmCurrentInstrumentMemoParameter = new ObjectParameter("xml_DocConfirmCurrentInstrumentMemo", xml_DocConfirmCurrentInstrumentMemo);
            }
            else
            {
                xml_DocConfirmCurrentInstrumentMemoParameter = new ObjectParameter("xml_DocConfirmCurrentInstrumentMemo", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocConfirmCurrentInstrumentMemo>("InsertTbt_DocConfirmCurrentInstrumentMemo", xml_DocConfirmCurrentInstrumentMemoParameter);
        }
        public ObjectResult<tbt_DocInstrumentDetails> InsertTbt_DocInstrumentDetails(string xml_DocInstrumentDetails)
        {
    
            ObjectParameter xml_DocInstrumentDetailsParameter;
    
            if (xml_DocInstrumentDetails != null)
            {
                xml_DocInstrumentDetailsParameter = new ObjectParameter("xml_DocInstrumentDetails", xml_DocInstrumentDetails);
            }
            else
            {
                xml_DocInstrumentDetailsParameter = new ObjectParameter("xml_DocInstrumentDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocInstrumentDetails>("InsertTbt_DocInstrumentDetails", xml_DocInstrumentDetailsParameter);
        }
        public ObjectResult<tbt_ContractDocument> GetContractDocHeaderByQuotationCode(string pchrQuotationTargetCode, string pchrAlphabet, string pchrContractDocOCC)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchrContractDocOCCParameter;
    
            if (pchrContractDocOCC != null)
            {
                pchrContractDocOCCParameter = new ObjectParameter("pchrContractDocOCC", pchrContractDocOCC);
            }
            else
            {
                pchrContractDocOCCParameter = new ObjectParameter("pchrContractDocOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractDocument>("GetContractDocHeaderByQuotationCode", pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pchrContractDocOCCParameter);
        }
        public ObjectResult<tbt_ContractDocument> UpdateTbt_ContractDocument(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractDocument>("UpdateTbt_ContractDocument", xmlParameter);
        }
        public ObjectResult<Nullable<int>> IsUsedCustomer(string pchrCustCode)
        {
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("IsUsedCustomer", pchrCustCodeParameter);
        }
        public ObjectResult<Nullable<int>> IsUsedSite(string pchrSiteCode)
        {
    
            ObjectParameter pchrSiteCodeParameter;
    
            if (pchrSiteCode != null)
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", pchrSiteCode);
            }
            else
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("IsUsedSite", pchrSiteCodeParameter);
        }
        public ObjectResult<dtARList> GetARListByRole(string aRStatus, string specfyPeriod, Nullable<System.DateTime> specifyPeriodFrom, Nullable<System.DateTime> specifyPeriodTo, string empNo, string aRRole, Nullable<System.DateTime> currentdate, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_AR_RELEVANT_TYPE_SITE, string c_CUST_ROLE_TYPE_REAL_CUST, string c_AR_ROLE_APPROVER, string c_AR_ROLE_AUDITOR, string c_AR_ROLE_REQUESTER, string c_AR_TYPE, string c_AR_STATUS, string c_DEADLINE_TIME_TYPE, string c_AR_SEARCH_STATUS_COMPLETE, string c_AR_SEARCH_STATUS_HANDLING, string c_AR_SEARCH_PERIOD_REQUEST_DATE, string c_AR_SEARCH_PERIOD_APPROVE_DATE, string c_AR_SEARCH_PERIOD_DUEDATE, string c_AR_SEARCH_PERIOD_LASTACTION_DATE, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED)
        {
    
            ObjectParameter aRStatusParameter;
    
            if (aRStatus != null)
            {
                aRStatusParameter = new ObjectParameter("ARStatus", aRStatus);
            }
            else
            {
                aRStatusParameter = new ObjectParameter("ARStatus", typeof(string));
            }
    
            ObjectParameter specfyPeriodParameter;
    
            if (specfyPeriod != null)
            {
                specfyPeriodParameter = new ObjectParameter("SpecfyPeriod", specfyPeriod);
            }
            else
            {
                specfyPeriodParameter = new ObjectParameter("SpecfyPeriod", typeof(string));
            }
    
            ObjectParameter specifyPeriodFromParameter;
    
            if (specifyPeriodFrom.HasValue)
            {
                specifyPeriodFromParameter = new ObjectParameter("SpecifyPeriodFrom", specifyPeriodFrom);
            }
            else
            {
                specifyPeriodFromParameter = new ObjectParameter("SpecifyPeriodFrom", typeof(System.DateTime));
            }
    
            ObjectParameter specifyPeriodToParameter;
    
            if (specifyPeriodTo.HasValue)
            {
                specifyPeriodToParameter = new ObjectParameter("SpecifyPeriodTo", specifyPeriodTo);
            }
            else
            {
                specifyPeriodToParameter = new ObjectParameter("SpecifyPeriodTo", typeof(System.DateTime));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
    
            ObjectParameter aRRoleParameter;
    
            if (aRRole != null)
            {
                aRRoleParameter = new ObjectParameter("ARRole", aRRole);
            }
            else
            {
                aRRoleParameter = new ObjectParameter("ARRole", typeof(string));
            }
    
            ObjectParameter currentdateParameter;
    
            if (currentdate.HasValue)
            {
                currentdateParameter = new ObjectParameter("currentdate", currentdate);
            }
            else
            {
                currentdateParameter = new ObjectParameter("currentdate", typeof(System.DateTime));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_AR_RELEVANT_TYPE_CONTRACT != null)
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", c_AR_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_QUOTATIONParameter;
    
            if (c_AR_RELEVANT_TYPE_QUOTATION != null)
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", c_AR_RELEVANT_TYPE_QUOTATION);
            }
            else
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_SITEParameter;
    
            if (c_AR_RELEVANT_TYPE_SITE != null)
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", c_AR_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_CUST_ROLE_TYPE_REAL_CUSTParameter;
    
            if (c_CUST_ROLE_TYPE_REAL_CUST != null)
            {
                c_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("C_CUST_ROLE_TYPE_REAL_CUST", c_CUST_ROLE_TYPE_REAL_CUST);
            }
            else
            {
                c_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("C_CUST_ROLE_TYPE_REAL_CUST", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_APPROVERParameter;
    
            if (c_AR_ROLE_APPROVER != null)
            {
                c_AR_ROLE_APPROVERParameter = new ObjectParameter("C_AR_ROLE_APPROVER", c_AR_ROLE_APPROVER);
            }
            else
            {
                c_AR_ROLE_APPROVERParameter = new ObjectParameter("C_AR_ROLE_APPROVER", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_AUDITORParameter;
    
            if (c_AR_ROLE_AUDITOR != null)
            {
                c_AR_ROLE_AUDITORParameter = new ObjectParameter("C_AR_ROLE_AUDITOR", c_AR_ROLE_AUDITOR);
            }
            else
            {
                c_AR_ROLE_AUDITORParameter = new ObjectParameter("C_AR_ROLE_AUDITOR", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_REQUESTERParameter;
    
            if (c_AR_ROLE_REQUESTER != null)
            {
                c_AR_ROLE_REQUESTERParameter = new ObjectParameter("C_AR_ROLE_REQUESTER", c_AR_ROLE_REQUESTER);
            }
            else
            {
                c_AR_ROLE_REQUESTERParameter = new ObjectParameter("C_AR_ROLE_REQUESTER", typeof(string));
            }
    
            ObjectParameter c_AR_TYPEParameter;
    
            if (c_AR_TYPE != null)
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", c_AR_TYPE);
            }
            else
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", typeof(string));
            }
    
            ObjectParameter c_AR_STATUSParameter;
    
            if (c_AR_STATUS != null)
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", c_AR_STATUS);
            }
            else
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", typeof(string));
            }
    
            ObjectParameter c_DEADLINE_TIME_TYPEParameter;
    
            if (c_DEADLINE_TIME_TYPE != null)
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", c_DEADLINE_TIME_TYPE);
            }
            else
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_STATUS_COMPLETEParameter;
    
            if (c_AR_SEARCH_STATUS_COMPLETE != null)
            {
                c_AR_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_AR_SEARCH_STATUS_COMPLETE", c_AR_SEARCH_STATUS_COMPLETE);
            }
            else
            {
                c_AR_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_AR_SEARCH_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_STATUS_HANDLINGParameter;
    
            if (c_AR_SEARCH_STATUS_HANDLING != null)
            {
                c_AR_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_AR_SEARCH_STATUS_HANDLING", c_AR_SEARCH_STATUS_HANDLING);
            }
            else
            {
                c_AR_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_AR_SEARCH_STATUS_HANDLING", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_REQUEST_DATEParameter;
    
            if (c_AR_SEARCH_PERIOD_REQUEST_DATE != null)
            {
                c_AR_SEARCH_PERIOD_REQUEST_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_REQUEST_DATE", c_AR_SEARCH_PERIOD_REQUEST_DATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_REQUEST_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_REQUEST_DATE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_APPROVE_DATEParameter;
    
            if (c_AR_SEARCH_PERIOD_APPROVE_DATE != null)
            {
                c_AR_SEARCH_PERIOD_APPROVE_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_APPROVE_DATE", c_AR_SEARCH_PERIOD_APPROVE_DATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_APPROVE_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_APPROVE_DATE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_DUEDATEParameter;
    
            if (c_AR_SEARCH_PERIOD_DUEDATE != null)
            {
                c_AR_SEARCH_PERIOD_DUEDATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_DUEDATE", c_AR_SEARCH_PERIOD_DUEDATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_DUEDATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_DUEDATE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter;
    
            if (c_AR_SEARCH_PERIOD_LASTACTION_DATE != null)
            {
                c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_LASTACTION_DATE", c_AR_SEARCH_PERIOD_LASTACTION_DATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_LASTACTION_DATE", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_INSTRUCTEDParameter;
    
            if (c_AR_STATUS_INSTRUCTED != null)
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", c_AR_STATUS_INSTRUCTED);
            }
            else
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_REJECTEDParameter;
    
            if (c_AR_STATUS_REJECTED != null)
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", c_AR_STATUS_REJECTED);
            }
            else
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_APPROVEDParameter;
    
            if (c_AR_STATUS_APPROVED != null)
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", c_AR_STATUS_APPROVED);
            }
            else
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", typeof(string));
            }
            return base.ExecuteFunction<dtARList>("GetARListByRole", aRStatusParameter, specfyPeriodParameter, specifyPeriodFromParameter, specifyPeriodToParameter, empNoParameter, aRRoleParameter, currentdateParameter, c_AR_RELEVANT_TYPE_CONTRACTParameter, c_AR_RELEVANT_TYPE_QUOTATIONParameter, c_AR_RELEVANT_TYPE_SITEParameter, c_CUST_ROLE_TYPE_REAL_CUSTParameter, c_AR_ROLE_APPROVERParameter, c_AR_ROLE_AUDITORParameter, c_AR_ROLE_REQUESTERParameter, c_AR_TYPEParameter, c_AR_STATUSParameter, c_DEADLINE_TIME_TYPEParameter, c_AR_SEARCH_STATUS_COMPLETEParameter, c_AR_SEARCH_STATUS_HANDLINGParameter, c_AR_SEARCH_PERIOD_REQUEST_DATEParameter, c_AR_SEARCH_PERIOD_APPROVE_DATEParameter, c_AR_SEARCH_PERIOD_DUEDATEParameter, c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter, c_AR_STATUS_INSTRUCTEDParameter, c_AR_STATUS_REJECTEDParameter, c_AR_STATUS_APPROVEDParameter);
        }
        public ObjectResult<dtARList> SearchARList(string customerName, string projectName, string requestNo, string approveNo, string aRTitleType, string aRType, string aRStatusHandling, string aRStatusComplete, string aROfficeCode, string specfyPeriod, Nullable<System.DateTime> specifyPeriodFrom, Nullable<System.DateTime> specifyPeriodTo, string requester, string approver, string auditor, string contractTargetPurchaserName, string siteName, string customerGroupName, string contractCode, string userCode, string quotationTargetCode, string contractOfficeCode, string operationOfficeCode, string contractStatus, string contractType, string c_AR_ROLE_APPROVER, string c_AR_ROLE_REQUESTER, string c_AR_ROLE_AUDITOR, string c_AR_TYPE, string c_AR_STATUS, string c_DEADLINE_TIME_TYPE, string c_AR_SEARCH_PERIOD_REQUEST_DATE, string c_AR_SEARCH_PERIOD_APPROVE_DATE, string c_AR_SEARCH_PERIOD_DUEDATE, string c_AR_SEARCH_PERIOD_LASTACTION_DATE, string c_AR_RELEVANT_TYPE_CUSTOMER, string c_AR_RELEVANT_TYPE_SITE, string c_AR_RELEVANT_TYPE_PROJECT, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_CUST_ROLE_TYPE_CONTRACT_TARGET, string c_CUST_ROLE_TYPE_REAL_CUST, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED)
        {
    
            ObjectParameter customerNameParameter;
    
            if (customerName != null)
            {
                customerNameParameter = new ObjectParameter("CustomerName", customerName);
            }
            else
            {
                customerNameParameter = new ObjectParameter("CustomerName", typeof(string));
            }
    
            ObjectParameter projectNameParameter;
    
            if (projectName != null)
            {
                projectNameParameter = new ObjectParameter("ProjectName", projectName);
            }
            else
            {
                projectNameParameter = new ObjectParameter("ProjectName", typeof(string));
            }
    
            ObjectParameter requestNoParameter;
    
            if (requestNo != null)
            {
                requestNoParameter = new ObjectParameter("RequestNo", requestNo);
            }
            else
            {
                requestNoParameter = new ObjectParameter("RequestNo", typeof(string));
            }
    
            ObjectParameter approveNoParameter;
    
            if (approveNo != null)
            {
                approveNoParameter = new ObjectParameter("ApproveNo", approveNo);
            }
            else
            {
                approveNoParameter = new ObjectParameter("ApproveNo", typeof(string));
            }
    
            ObjectParameter aRTitleTypeParameter;
    
            if (aRTitleType != null)
            {
                aRTitleTypeParameter = new ObjectParameter("ARTitleType", aRTitleType);
            }
            else
            {
                aRTitleTypeParameter = new ObjectParameter("ARTitleType", typeof(string));
            }
    
            ObjectParameter aRTypeParameter;
    
            if (aRType != null)
            {
                aRTypeParameter = new ObjectParameter("ARType", aRType);
            }
            else
            {
                aRTypeParameter = new ObjectParameter("ARType", typeof(string));
            }
    
            ObjectParameter aRStatusHandlingParameter;
    
            if (aRStatusHandling != null)
            {
                aRStatusHandlingParameter = new ObjectParameter("ARStatusHandling", aRStatusHandling);
            }
            else
            {
                aRStatusHandlingParameter = new ObjectParameter("ARStatusHandling", typeof(string));
            }
    
            ObjectParameter aRStatusCompleteParameter;
    
            if (aRStatusComplete != null)
            {
                aRStatusCompleteParameter = new ObjectParameter("ARStatusComplete", aRStatusComplete);
            }
            else
            {
                aRStatusCompleteParameter = new ObjectParameter("ARStatusComplete", typeof(string));
            }
    
            ObjectParameter aROfficeCodeParameter;
    
            if (aROfficeCode != null)
            {
                aROfficeCodeParameter = new ObjectParameter("AROfficeCode", aROfficeCode);
            }
            else
            {
                aROfficeCodeParameter = new ObjectParameter("AROfficeCode", typeof(string));
            }
    
            ObjectParameter specfyPeriodParameter;
    
            if (specfyPeriod != null)
            {
                specfyPeriodParameter = new ObjectParameter("SpecfyPeriod", specfyPeriod);
            }
            else
            {
                specfyPeriodParameter = new ObjectParameter("SpecfyPeriod", typeof(string));
            }
    
            ObjectParameter specifyPeriodFromParameter;
    
            if (specifyPeriodFrom.HasValue)
            {
                specifyPeriodFromParameter = new ObjectParameter("SpecifyPeriodFrom", specifyPeriodFrom);
            }
            else
            {
                specifyPeriodFromParameter = new ObjectParameter("SpecifyPeriodFrom", typeof(System.DateTime));
            }
    
            ObjectParameter specifyPeriodToParameter;
    
            if (specifyPeriodTo.HasValue)
            {
                specifyPeriodToParameter = new ObjectParameter("SpecifyPeriodTo", specifyPeriodTo);
            }
            else
            {
                specifyPeriodToParameter = new ObjectParameter("SpecifyPeriodTo", typeof(System.DateTime));
            }
    
            ObjectParameter requesterParameter;
    
            if (requester != null)
            {
                requesterParameter = new ObjectParameter("Requester", requester);
            }
            else
            {
                requesterParameter = new ObjectParameter("Requester", typeof(string));
            }
    
            ObjectParameter approverParameter;
    
            if (approver != null)
            {
                approverParameter = new ObjectParameter("Approver", approver);
            }
            else
            {
                approverParameter = new ObjectParameter("Approver", typeof(string));
            }
    
            ObjectParameter auditorParameter;
    
            if (auditor != null)
            {
                auditorParameter = new ObjectParameter("Auditor", auditor);
            }
            else
            {
                auditorParameter = new ObjectParameter("Auditor", typeof(string));
            }
    
            ObjectParameter contractTargetPurchaserNameParameter;
    
            if (contractTargetPurchaserName != null)
            {
                contractTargetPurchaserNameParameter = new ObjectParameter("ContractTargetPurchaserName", contractTargetPurchaserName);
            }
            else
            {
                contractTargetPurchaserNameParameter = new ObjectParameter("ContractTargetPurchaserName", typeof(string));
            }
    
            ObjectParameter siteNameParameter;
    
            if (siteName != null)
            {
                siteNameParameter = new ObjectParameter("SiteName", siteName);
            }
            else
            {
                siteNameParameter = new ObjectParameter("SiteName", typeof(string));
            }
    
            ObjectParameter customerGroupNameParameter;
    
            if (customerGroupName != null)
            {
                customerGroupNameParameter = new ObjectParameter("CustomerGroupName", customerGroupName);
            }
            else
            {
                customerGroupNameParameter = new ObjectParameter("CustomerGroupName", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter userCodeParameter;
    
            if (userCode != null)
            {
                userCodeParameter = new ObjectParameter("UserCode", userCode);
            }
            else
            {
                userCodeParameter = new ObjectParameter("UserCode", typeof(string));
            }
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter contractOfficeCodeParameter;
    
            if (contractOfficeCode != null)
            {
                contractOfficeCodeParameter = new ObjectParameter("ContractOfficeCode", contractOfficeCode);
            }
            else
            {
                contractOfficeCodeParameter = new ObjectParameter("ContractOfficeCode", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
    
            ObjectParameter contractStatusParameter;
    
            if (contractStatus != null)
            {
                contractStatusParameter = new ObjectParameter("ContractStatus", contractStatus);
            }
            else
            {
                contractStatusParameter = new ObjectParameter("ContractStatus", typeof(string));
            }
    
            ObjectParameter contractTypeParameter;
    
            if (contractType != null)
            {
                contractTypeParameter = new ObjectParameter("ContractType", contractType);
            }
            else
            {
                contractTypeParameter = new ObjectParameter("ContractType", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_APPROVERParameter;
    
            if (c_AR_ROLE_APPROVER != null)
            {
                c_AR_ROLE_APPROVERParameter = new ObjectParameter("C_AR_ROLE_APPROVER", c_AR_ROLE_APPROVER);
            }
            else
            {
                c_AR_ROLE_APPROVERParameter = new ObjectParameter("C_AR_ROLE_APPROVER", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_REQUESTERParameter;
    
            if (c_AR_ROLE_REQUESTER != null)
            {
                c_AR_ROLE_REQUESTERParameter = new ObjectParameter("C_AR_ROLE_REQUESTER", c_AR_ROLE_REQUESTER);
            }
            else
            {
                c_AR_ROLE_REQUESTERParameter = new ObjectParameter("C_AR_ROLE_REQUESTER", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_AUDITORParameter;
    
            if (c_AR_ROLE_AUDITOR != null)
            {
                c_AR_ROLE_AUDITORParameter = new ObjectParameter("C_AR_ROLE_AUDITOR", c_AR_ROLE_AUDITOR);
            }
            else
            {
                c_AR_ROLE_AUDITORParameter = new ObjectParameter("C_AR_ROLE_AUDITOR", typeof(string));
            }
    
            ObjectParameter c_AR_TYPEParameter;
    
            if (c_AR_TYPE != null)
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", c_AR_TYPE);
            }
            else
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", typeof(string));
            }
    
            ObjectParameter c_AR_STATUSParameter;
    
            if (c_AR_STATUS != null)
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", c_AR_STATUS);
            }
            else
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", typeof(string));
            }
    
            ObjectParameter c_DEADLINE_TIME_TYPEParameter;
    
            if (c_DEADLINE_TIME_TYPE != null)
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", c_DEADLINE_TIME_TYPE);
            }
            else
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_REQUEST_DATEParameter;
    
            if (c_AR_SEARCH_PERIOD_REQUEST_DATE != null)
            {
                c_AR_SEARCH_PERIOD_REQUEST_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_REQUEST_DATE", c_AR_SEARCH_PERIOD_REQUEST_DATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_REQUEST_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_REQUEST_DATE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_APPROVE_DATEParameter;
    
            if (c_AR_SEARCH_PERIOD_APPROVE_DATE != null)
            {
                c_AR_SEARCH_PERIOD_APPROVE_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_APPROVE_DATE", c_AR_SEARCH_PERIOD_APPROVE_DATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_APPROVE_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_APPROVE_DATE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_DUEDATEParameter;
    
            if (c_AR_SEARCH_PERIOD_DUEDATE != null)
            {
                c_AR_SEARCH_PERIOD_DUEDATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_DUEDATE", c_AR_SEARCH_PERIOD_DUEDATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_DUEDATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_DUEDATE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter;
    
            if (c_AR_SEARCH_PERIOD_LASTACTION_DATE != null)
            {
                c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_LASTACTION_DATE", c_AR_SEARCH_PERIOD_LASTACTION_DATE);
            }
            else
            {
                c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter = new ObjectParameter("C_AR_SEARCH_PERIOD_LASTACTION_DATE", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CUSTOMERParameter;
    
            if (c_AR_RELEVANT_TYPE_CUSTOMER != null)
            {
                c_AR_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CUSTOMER", c_AR_RELEVANT_TYPE_CUSTOMER);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_SITEParameter;
    
            if (c_AR_RELEVANT_TYPE_SITE != null)
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", c_AR_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_PROJECTParameter;
    
            if (c_AR_RELEVANT_TYPE_PROJECT != null)
            {
                c_AR_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_PROJECT", c_AR_RELEVANT_TYPE_PROJECT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_AR_RELEVANT_TYPE_CONTRACT != null)
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", c_AR_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_QUOTATIONParameter;
    
            if (c_AR_RELEVANT_TYPE_QUOTATION != null)
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", c_AR_RELEVANT_TYPE_QUOTATION);
            }
            else
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", typeof(string));
            }
    
            ObjectParameter c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter;
    
            if (c_CUST_ROLE_TYPE_CONTRACT_TARGET != null)
            {
                c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("C_CUST_ROLE_TYPE_CONTRACT_TARGET", c_CUST_ROLE_TYPE_CONTRACT_TARGET);
            }
            else
            {
                c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("C_CUST_ROLE_TYPE_CONTRACT_TARGET", typeof(string));
            }
    
            ObjectParameter c_CUST_ROLE_TYPE_REAL_CUSTParameter;
    
            if (c_CUST_ROLE_TYPE_REAL_CUST != null)
            {
                c_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("C_CUST_ROLE_TYPE_REAL_CUST", c_CUST_ROLE_TYPE_REAL_CUST);
            }
            else
            {
                c_CUST_ROLE_TYPE_REAL_CUSTParameter = new ObjectParameter("C_CUST_ROLE_TYPE_REAL_CUST", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_INSTRUCTEDParameter;
    
            if (c_AR_STATUS_INSTRUCTED != null)
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", c_AR_STATUS_INSTRUCTED);
            }
            else
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_REJECTEDParameter;
    
            if (c_AR_STATUS_REJECTED != null)
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", c_AR_STATUS_REJECTED);
            }
            else
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_APPROVEDParameter;
    
            if (c_AR_STATUS_APPROVED != null)
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", c_AR_STATUS_APPROVED);
            }
            else
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", typeof(string));
            }
            return base.ExecuteFunction<dtARList>("SearchARList", customerNameParameter, projectNameParameter, requestNoParameter, approveNoParameter, aRTitleTypeParameter, aRTypeParameter, aRStatusHandlingParameter, aRStatusCompleteParameter, aROfficeCodeParameter, specfyPeriodParameter, specifyPeriodFromParameter, specifyPeriodToParameter, requesterParameter, approverParameter, auditorParameter, contractTargetPurchaserNameParameter, siteNameParameter, customerGroupNameParameter, contractCodeParameter, userCodeParameter, quotationTargetCodeParameter, contractOfficeCodeParameter, operationOfficeCodeParameter, contractStatusParameter, contractTypeParameter, c_AR_ROLE_APPROVERParameter, c_AR_ROLE_REQUESTERParameter, c_AR_ROLE_AUDITORParameter, c_AR_TYPEParameter, c_AR_STATUSParameter, c_DEADLINE_TIME_TYPEParameter, c_AR_SEARCH_PERIOD_REQUEST_DATEParameter, c_AR_SEARCH_PERIOD_APPROVE_DATEParameter, c_AR_SEARCH_PERIOD_DUEDATEParameter, c_AR_SEARCH_PERIOD_LASTACTION_DATEParameter, c_AR_RELEVANT_TYPE_CUSTOMERParameter, c_AR_RELEVANT_TYPE_SITEParameter, c_AR_RELEVANT_TYPE_PROJECTParameter, c_AR_RELEVANT_TYPE_CONTRACTParameter, c_AR_RELEVANT_TYPE_QUOTATIONParameter, c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter, c_CUST_ROLE_TYPE_REAL_CUSTParameter, c_AR_STATUS_INSTRUCTEDParameter, c_AR_STATUS_REJECTEDParameter, c_AR_STATUS_APPROVEDParameter);
        }
        public ObjectResult<tbt_ProjectPurchaserCustomer> InsertTbt_ProjectPurchaserCustomer(string xml_Tbt_ProjectPurchaserCustomer)
        {
    
            ObjectParameter xml_Tbt_ProjectPurchaserCustomerParameter;
    
            if (xml_Tbt_ProjectPurchaserCustomer != null)
            {
                xml_Tbt_ProjectPurchaserCustomerParameter = new ObjectParameter("xml_Tbt_ProjectPurchaserCustomer", xml_Tbt_ProjectPurchaserCustomer);
            }
            else
            {
                xml_Tbt_ProjectPurchaserCustomerParameter = new ObjectParameter("xml_Tbt_ProjectPurchaserCustomer", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectPurchaserCustomer>("InsertTbt_ProjectPurchaserCustomer", xml_Tbt_ProjectPurchaserCustomerParameter);
        }
        public ObjectResult<tbt_ProjectExpectedInstrumentDetails> InsertTbt_ProjectExpectedInstrumentDetail(string xml_dotbt_ProjectExpectedInstrumentDetails)
        {
    
            ObjectParameter xml_dotbt_ProjectExpectedInstrumentDetailsParameter;
    
            if (xml_dotbt_ProjectExpectedInstrumentDetails != null)
            {
                xml_dotbt_ProjectExpectedInstrumentDetailsParameter = new ObjectParameter("xml_dotbt_ProjectExpectedInstrumentDetails", xml_dotbt_ProjectExpectedInstrumentDetails);
            }
            else
            {
                xml_dotbt_ProjectExpectedInstrumentDetailsParameter = new ObjectParameter("xml_dotbt_ProjectExpectedInstrumentDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectExpectedInstrumentDetails>("InsertTbt_ProjectExpectedInstrumentDetail", xml_dotbt_ProjectExpectedInstrumentDetailsParameter);
        }
        public ObjectResult<tbt_ProjectOtherRalatedCompany> InsertTbt_ProjectOtherRalatedCompany(string xml_dotbt_ProjectOtherRalatedCompany)
        {
    
            ObjectParameter xml_dotbt_ProjectOtherRalatedCompanyParameter;
    
            if (xml_dotbt_ProjectOtherRalatedCompany != null)
            {
                xml_dotbt_ProjectOtherRalatedCompanyParameter = new ObjectParameter("xml_dotbt_ProjectOtherRalatedCompany", xml_dotbt_ProjectOtherRalatedCompany);
            }
            else
            {
                xml_dotbt_ProjectOtherRalatedCompanyParameter = new ObjectParameter("xml_dotbt_ProjectOtherRalatedCompany", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectOtherRalatedCompany>("InsertTbt_ProjectOtherRalatedCompany", xml_dotbt_ProjectOtherRalatedCompanyParameter);
        }
        public ObjectResult<tbt_ProjectSupportStaffDetails> InsertTbt_ProjectSupportStaffDetail(string xml_Tbt_ProjectSupportStaffDetail)
        {
    
            ObjectParameter xml_Tbt_ProjectSupportStaffDetailParameter;
    
            if (xml_Tbt_ProjectSupportStaffDetail != null)
            {
                xml_Tbt_ProjectSupportStaffDetailParameter = new ObjectParameter("xml_Tbt_ProjectSupportStaffDetail", xml_Tbt_ProjectSupportStaffDetail);
            }
            else
            {
                xml_Tbt_ProjectSupportStaffDetailParameter = new ObjectParameter("xml_Tbt_ProjectSupportStaffDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectSupportStaffDetails>("InsertTbt_ProjectSupportStaffDetail", xml_Tbt_ProjectSupportStaffDetailParameter);
        }
        public ObjectResult<tbt_ProjectSystemDetails> InsertTbt_ProjectSystemDetail(string xml_Tbt_ProjectSystemDetail)
        {
    
            ObjectParameter xml_Tbt_ProjectSystemDetailParameter;
    
            if (xml_Tbt_ProjectSystemDetail != null)
            {
                xml_Tbt_ProjectSystemDetailParameter = new ObjectParameter("xml_Tbt_ProjectSystemDetail", xml_Tbt_ProjectSystemDetail);
            }
            else
            {
                xml_Tbt_ProjectSystemDetailParameter = new ObjectParameter("xml_Tbt_ProjectSystemDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectSystemDetails>("InsertTbt_ProjectSystemDetail", xml_Tbt_ProjectSystemDetailParameter);
        }
        public ObjectResult<tbt_Project> InsertTbt_Project(string xml_doTbt_Project)
        {
    
            ObjectParameter xml_doTbt_ProjectParameter;
    
            if (xml_doTbt_Project != null)
            {
                xml_doTbt_ProjectParameter = new ObjectParameter("xml_doTbt_Project", xml_doTbt_Project);
            }
            else
            {
                xml_doTbt_ProjectParameter = new ObjectParameter("xml_doTbt_Project", typeof(string));
            }
            return base.ExecuteFunction<tbt_Project>("InsertTbt_Project", xml_doTbt_ProjectParameter);
        }
        public ObjectResult<dtSearchSaleWarrantyExpireResult> SearchSaleWarrantyExpireList(Nullable<bool> isMaintenanceContractFlag, Nullable<System.DateTime> dtExpireWarrantyFrom, Nullable<System.DateTime> dtExpireWarrantyTo, string strOperationOfficeCode, string strSaleContractOfficeCode, string pC_CONTRACT_STATUS_BEF_START, string pC_CONTRACT_STATUS_AFTER_START, string pC_RELATION_TYPE_MA, string pC_SALE_CHANGE_TYPE_NEW_SALE, string pC_SALE_CHANGE_TYPE_ADD_SALE)
        {
    
            ObjectParameter isMaintenanceContractFlagParameter;
    
            if (isMaintenanceContractFlag.HasValue)
            {
                isMaintenanceContractFlagParameter = new ObjectParameter("isMaintenanceContractFlag", isMaintenanceContractFlag);
            }
            else
            {
                isMaintenanceContractFlagParameter = new ObjectParameter("isMaintenanceContractFlag", typeof(bool));
            }
    
            ObjectParameter dtExpireWarrantyFromParameter;
    
            if (dtExpireWarrantyFrom.HasValue)
            {
                dtExpireWarrantyFromParameter = new ObjectParameter("dtExpireWarrantyFrom", dtExpireWarrantyFrom);
            }
            else
            {
                dtExpireWarrantyFromParameter = new ObjectParameter("dtExpireWarrantyFrom", typeof(System.DateTime));
            }
    
            ObjectParameter dtExpireWarrantyToParameter;
    
            if (dtExpireWarrantyTo.HasValue)
            {
                dtExpireWarrantyToParameter = new ObjectParameter("dtExpireWarrantyTo", dtExpireWarrantyTo);
            }
            else
            {
                dtExpireWarrantyToParameter = new ObjectParameter("dtExpireWarrantyTo", typeof(System.DateTime));
            }
    
            ObjectParameter strOperationOfficeCodeParameter;
    
            if (strOperationOfficeCode != null)
            {
                strOperationOfficeCodeParameter = new ObjectParameter("strOperationOfficeCode", strOperationOfficeCode);
            }
            else
            {
                strOperationOfficeCodeParameter = new ObjectParameter("strOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter strSaleContractOfficeCodeParameter;
    
            if (strSaleContractOfficeCode != null)
            {
                strSaleContractOfficeCodeParameter = new ObjectParameter("strSaleContractOfficeCode", strSaleContractOfficeCode);
            }
            else
            {
                strSaleContractOfficeCodeParameter = new ObjectParameter("strSaleContractOfficeCode", typeof(string));
            }
    
            ObjectParameter pC_CONTRACT_STATUS_BEF_STARTParameter;
    
            if (pC_CONTRACT_STATUS_BEF_START != null)
            {
                pC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pC_CONTRACT_STATUS_BEF_START", pC_CONTRACT_STATUS_BEF_START);
            }
            else
            {
                pC_CONTRACT_STATUS_BEF_STARTParameter = new ObjectParameter("pC_CONTRACT_STATUS_BEF_START", typeof(string));
            }
    
            ObjectParameter pC_CONTRACT_STATUS_AFTER_STARTParameter;
    
            if (pC_CONTRACT_STATUS_AFTER_START != null)
            {
                pC_CONTRACT_STATUS_AFTER_STARTParameter = new ObjectParameter("pC_CONTRACT_STATUS_AFTER_START", pC_CONTRACT_STATUS_AFTER_START);
            }
            else
            {
                pC_CONTRACT_STATUS_AFTER_STARTParameter = new ObjectParameter("pC_CONTRACT_STATUS_AFTER_START", typeof(string));
            }
    
            ObjectParameter pC_RELATION_TYPE_MAParameter;
    
            if (pC_RELATION_TYPE_MA != null)
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", pC_RELATION_TYPE_MA);
            }
            else
            {
                pC_RELATION_TYPE_MAParameter = new ObjectParameter("pC_RELATION_TYPE_MA", typeof(string));
            }
    
            ObjectParameter pC_SALE_CHANGE_TYPE_NEW_SALEParameter;
    
            if (pC_SALE_CHANGE_TYPE_NEW_SALE != null)
            {
                pC_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE_NEW_SALE", pC_SALE_CHANGE_TYPE_NEW_SALE);
            }
            else
            {
                pC_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE_NEW_SALE", typeof(string));
            }
    
            ObjectParameter pC_SALE_CHANGE_TYPE_ADD_SALEParameter;
    
            if (pC_SALE_CHANGE_TYPE_ADD_SALE != null)
            {
                pC_SALE_CHANGE_TYPE_ADD_SALEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE_ADD_SALE", pC_SALE_CHANGE_TYPE_ADD_SALE);
            }
            else
            {
                pC_SALE_CHANGE_TYPE_ADD_SALEParameter = new ObjectParameter("pC_SALE_CHANGE_TYPE_ADD_SALE", typeof(string));
            }
            return base.ExecuteFunction<dtSearchSaleWarrantyExpireResult>("SearchSaleWarrantyExpireList", isMaintenanceContractFlagParameter, dtExpireWarrantyFromParameter, dtExpireWarrantyToParameter, strOperationOfficeCodeParameter, strSaleContractOfficeCodeParameter, pC_CONTRACT_STATUS_BEF_STARTParameter, pC_CONTRACT_STATUS_AFTER_STARTParameter, pC_RELATION_TYPE_MAParameter, pC_SALE_CHANGE_TYPE_NEW_SALEParameter, pC_SALE_CHANGE_TYPE_ADD_SALEParameter);
        }
        public ObjectResult<dtIncidentListCTS320> GetIncidentList(string incidentRelevantType, string customerCode, string siteCode, string contractCode, string projectCode, string incidentType, Nullable<System.DateTime> duedateDeadline, string incidentStatus, string c_INCIDENT_ROLE_CONTROL_CHIEF, string c_INCIDENT_ROLE_CHIEF, string c_INCIDENT_ROLE_CORRESPONDENT, string c_INCIDENT_ROLE_ASSISTANT, string c_INCIDENT_TYPE, string c_INCIDENT_RELEVANT_TYPE_CUSTOMER, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_STATUS, string c_INCIDENT_STATUS_COMPLETE, string c_INCIDENT_SEARCH_STATUS_COMPLETE, string c_INCIDENT_SEARCH_STATUS_HANDLING, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_DEADLINE_TIME_TYPE, string c_FLAG_ON, Nullable<bool> isSearchByCustomer, Nullable<bool> isSearchBySite, Nullable<bool> isSearchByContract, Nullable<bool> isSearchByProject)
        {
    
            ObjectParameter incidentRelevantTypeParameter;
    
            if (incidentRelevantType != null)
            {
                incidentRelevantTypeParameter = new ObjectParameter("IncidentRelevantType", incidentRelevantType);
            }
            else
            {
                incidentRelevantTypeParameter = new ObjectParameter("IncidentRelevantType", typeof(string));
            }
    
            ObjectParameter customerCodeParameter;
    
            if (customerCode != null)
            {
                customerCodeParameter = new ObjectParameter("CustomerCode", customerCode);
            }
            else
            {
                customerCodeParameter = new ObjectParameter("CustomerCode", typeof(string));
            }
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", typeof(string));
            }
    
            ObjectParameter incidentTypeParameter;
    
            if (incidentType != null)
            {
                incidentTypeParameter = new ObjectParameter("IncidentType", incidentType);
            }
            else
            {
                incidentTypeParameter = new ObjectParameter("IncidentType", typeof(string));
            }
    
            ObjectParameter duedateDeadlineParameter;
    
            if (duedateDeadline.HasValue)
            {
                duedateDeadlineParameter = new ObjectParameter("DuedateDeadline", duedateDeadline);
            }
            else
            {
                duedateDeadlineParameter = new ObjectParameter("DuedateDeadline", typeof(System.DateTime));
            }
    
            ObjectParameter incidentStatusParameter;
    
            if (incidentStatus != null)
            {
                incidentStatusParameter = new ObjectParameter("IncidentStatus", incidentStatus);
            }
            else
            {
                incidentStatusParameter = new ObjectParameter("IncidentStatus", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CONTROL_CHIEFParameter;
    
            if (c_INCIDENT_ROLE_CONTROL_CHIEF != null)
            {
                c_INCIDENT_ROLE_CONTROL_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CONTROL_CHIEF", c_INCIDENT_ROLE_CONTROL_CHIEF);
            }
            else
            {
                c_INCIDENT_ROLE_CONTROL_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CONTROL_CHIEF", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CHIEFParameter;
    
            if (c_INCIDENT_ROLE_CHIEF != null)
            {
                c_INCIDENT_ROLE_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF", c_INCIDENT_ROLE_CHIEF);
            }
            else
            {
                c_INCIDENT_ROLE_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CORRESPONDENTParameter;
    
            if (c_INCIDENT_ROLE_CORRESPONDENT != null)
            {
                c_INCIDENT_ROLE_CORRESPONDENTParameter = new ObjectParameter("C_INCIDENT_ROLE_CORRESPONDENT", c_INCIDENT_ROLE_CORRESPONDENT);
            }
            else
            {
                c_INCIDENT_ROLE_CORRESPONDENTParameter = new ObjectParameter("C_INCIDENT_ROLE_CORRESPONDENT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_ASSISTANTParameter;
    
            if (c_INCIDENT_ROLE_ASSISTANT != null)
            {
                c_INCIDENT_ROLE_ASSISTANTParameter = new ObjectParameter("C_INCIDENT_ROLE_ASSISTANT", c_INCIDENT_ROLE_ASSISTANT);
            }
            else
            {
                c_INCIDENT_ROLE_ASSISTANTParameter = new ObjectParameter("C_INCIDENT_ROLE_ASSISTANT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_TYPEParameter;
    
            if (c_INCIDENT_TYPE != null)
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", c_INCIDENT_TYPE);
            }
            else
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CUSTOMER != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CUSTOMER", c_INCIDENT_RELEVANT_TYPE_CUSTOMER);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_SITEParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_SITE != null)
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", c_INCIDENT_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_STATUSParameter;
    
            if (c_INCIDENT_STATUS != null)
            {
                c_INCIDENT_STATUSParameter = new ObjectParameter("C_INCIDENT_STATUS", c_INCIDENT_STATUS);
            }
            else
            {
                c_INCIDENT_STATUSParameter = new ObjectParameter("C_INCIDENT_STATUS", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_STATUS_COMPLETEParameter;
    
            if (c_INCIDENT_STATUS_COMPLETE != null)
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", c_INCIDENT_STATUS_COMPLETE);
            }
            else
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_SEARCH_STATUS_COMPLETEParameter;
    
            if (c_INCIDENT_SEARCH_STATUS_COMPLETE != null)
            {
                c_INCIDENT_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_COMPLETE", c_INCIDENT_SEARCH_STATUS_COMPLETE);
            }
            else
            {
                c_INCIDENT_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_SEARCH_STATUS_HANDLINGParameter;
    
            if (c_INCIDENT_SEARCH_STATUS_HANDLING != null)
            {
                c_INCIDENT_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_HANDLING", c_INCIDENT_SEARCH_STATUS_HANDLING);
            }
            else
            {
                c_INCIDENT_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_HANDLING", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CONTRACT != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", c_INCIDENT_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_DEADLINE_TIME_TYPEParameter;
    
            if (c_DEADLINE_TIME_TYPE != null)
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", c_DEADLINE_TIME_TYPE);
            }
            else
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON != null)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(string));
            }
    
            ObjectParameter isSearchByCustomerParameter;
    
            if (isSearchByCustomer.HasValue)
            {
                isSearchByCustomerParameter = new ObjectParameter("IsSearchByCustomer", isSearchByCustomer);
            }
            else
            {
                isSearchByCustomerParameter = new ObjectParameter("IsSearchByCustomer", typeof(bool));
            }
    
            ObjectParameter isSearchBySiteParameter;
    
            if (isSearchBySite.HasValue)
            {
                isSearchBySiteParameter = new ObjectParameter("IsSearchBySite", isSearchBySite);
            }
            else
            {
                isSearchBySiteParameter = new ObjectParameter("IsSearchBySite", typeof(bool));
            }
    
            ObjectParameter isSearchByContractParameter;
    
            if (isSearchByContract.HasValue)
            {
                isSearchByContractParameter = new ObjectParameter("IsSearchByContract", isSearchByContract);
            }
            else
            {
                isSearchByContractParameter = new ObjectParameter("IsSearchByContract", typeof(bool));
            }
    
            ObjectParameter isSearchByProjectParameter;
    
            if (isSearchByProject.HasValue)
            {
                isSearchByProjectParameter = new ObjectParameter("IsSearchByProject", isSearchByProject);
            }
            else
            {
                isSearchByProjectParameter = new ObjectParameter("IsSearchByProject", typeof(bool));
            }
            return base.ExecuteFunction<dtIncidentListCTS320>("GetIncidentList", incidentRelevantTypeParameter, customerCodeParameter, siteCodeParameter, contractCodeParameter, projectCodeParameter, incidentTypeParameter, duedateDeadlineParameter, incidentStatusParameter, c_INCIDENT_ROLE_CONTROL_CHIEFParameter, c_INCIDENT_ROLE_CHIEFParameter, c_INCIDENT_ROLE_CORRESPONDENTParameter, c_INCIDENT_ROLE_ASSISTANTParameter, c_INCIDENT_TYPEParameter, c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter, c_INCIDENT_RELEVANT_TYPE_SITEParameter, c_INCIDENT_STATUSParameter, c_INCIDENT_STATUS_COMPLETEParameter, c_INCIDENT_SEARCH_STATUS_COMPLETEParameter, c_INCIDENT_SEARCH_STATUS_HANDLINGParameter, c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter, c_DEADLINE_TIME_TYPEParameter, c_FLAG_ONParameter, isSearchByCustomerParameter, isSearchBySiteParameter, isSearchByContractParameter, isSearchByProjectParameter);
        }
        public ObjectResult<dtContractDocHeader> GetContractDocHeader(string pContractCode, string pQuotationTargetCode, string pOCC_Alphabet, string pContractDocOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pQuotationTargetCodeParameter;
    
            if (pQuotationTargetCode != null)
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", pQuotationTargetCode);
            }
            else
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pOCC_AlphabetParameter;
    
            if (pOCC_Alphabet != null)
            {
                pOCC_AlphabetParameter = new ObjectParameter("pOCC_Alphabet", pOCC_Alphabet);
            }
            else
            {
                pOCC_AlphabetParameter = new ObjectParameter("pOCC_Alphabet", typeof(string));
            }
    
            ObjectParameter pContractDocOCCParameter;
    
            if (pContractDocOCC != null)
            {
                pContractDocOCCParameter = new ObjectParameter("pContractDocOCC", pContractDocOCC);
            }
            else
            {
                pContractDocOCCParameter = new ObjectParameter("pContractDocOCC", typeof(string));
            }
            return base.ExecuteFunction<dtContractDocHeader>("GetContractDocHeader", pContractCodeParameter, pQuotationTargetCodeParameter, pOCC_AlphabetParameter, pContractDocOCCParameter);
        }
        public ObjectResult<tbt_RelationType> GetTbt_GetContractLinkageRelation(string paramContractCode, string paramOCC, string paramRelationType)
        {
    
            ObjectParameter paramContractCodeParameter;
    
            if (paramContractCode != null)
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", paramContractCode);
            }
            else
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", typeof(string));
            }
    
            ObjectParameter paramOCCParameter;
    
            if (paramOCC != null)
            {
                paramOCCParameter = new ObjectParameter("paramOCC", paramOCC);
            }
            else
            {
                paramOCCParameter = new ObjectParameter("paramOCC", typeof(string));
            }
    
            ObjectParameter paramRelationTypeParameter;
    
            if (paramRelationType != null)
            {
                paramRelationTypeParameter = new ObjectParameter("paramRelationType", paramRelationType);
            }
            else
            {
                paramRelationTypeParameter = new ObjectParameter("paramRelationType", typeof(string));
            }
            return base.ExecuteFunction<tbt_RelationType>("GetTbt_GetContractLinkageRelation", paramContractCodeParameter, paramOCCParameter, paramRelationTypeParameter);
        }
        public ObjectResult<tbt_DraftSaleBillingTarget> GetTbt_DraftSaleBillingTarget(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleBillingTarget>("GetTbt_DraftSaleBillingTarget", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftSaleEmail> GetTbt_DraftSaleEmail(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleEmail>("GetTbt_DraftSaleEmail", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftSaleInstrument> GetTbt_DraftSaleInstrument(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleInstrument>("GetTbt_DraftSaleInstrument", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<dtIncidentOccSite> GetIncidentOccurringSite(string strCustCode, string c_INCIDENT_RELEVANT_TYPE_SITE)
        {
    
            ObjectParameter strCustCodeParameter;
    
            if (strCustCode != null)
            {
                strCustCodeParameter = new ObjectParameter("strCustCode", strCustCode);
            }
            else
            {
                strCustCodeParameter = new ObjectParameter("strCustCode", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_SITEParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_SITE != null)
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", c_INCIDENT_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", typeof(string));
            }
            return base.ExecuteFunction<dtIncidentOccSite>("GetIncidentOccurringSite", strCustCodeParameter, c_INCIDENT_RELEVANT_TYPE_SITEParameter);
        }
        public ObjectResult<dtIncidentOccContract> GetIncidentOccurringContract(string strSiteCode, string c_INCIDENT_RELEVANT_TYPE_CONTRACT)
        {
    
            ObjectParameter strSiteCodeParameter;
    
            if (strSiteCode != null)
            {
                strSiteCodeParameter = new ObjectParameter("strSiteCode", strSiteCode);
            }
            else
            {
                strSiteCodeParameter = new ObjectParameter("strSiteCode", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CONTRACT != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", c_INCIDENT_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
            return base.ExecuteFunction<dtIncidentOccContract>("GetIncidentOccurringContract", strSiteCodeParameter, c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter);
        }
        public ObjectResult<dtSummaryAR> SummaryAR(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> currentDate, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED)
        {
    
            ObjectParameter dateFromParameter;
    
            if (dateFrom.HasValue)
            {
                dateFromParameter = new ObjectParameter("DateFrom", dateFrom);
            }
            else
            {
                dateFromParameter = new ObjectParameter("DateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter dateToParameter;
    
            if (dateTo.HasValue)
            {
                dateToParameter = new ObjectParameter("DateTo", dateTo);
            }
            else
            {
                dateToParameter = new ObjectParameter("DateTo", typeof(System.DateTime));
            }
    
            ObjectParameter currentDateParameter;
    
            if (currentDate.HasValue)
            {
                currentDateParameter = new ObjectParameter("currentDate", currentDate);
            }
            else
            {
                currentDateParameter = new ObjectParameter("currentDate", typeof(System.DateTime));
            }
    
            ObjectParameter c_AR_STATUS_INSTRUCTEDParameter;
    
            if (c_AR_STATUS_INSTRUCTED != null)
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", c_AR_STATUS_INSTRUCTED);
            }
            else
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_REJECTEDParameter;
    
            if (c_AR_STATUS_REJECTED != null)
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", c_AR_STATUS_REJECTED);
            }
            else
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_APPROVEDParameter;
    
            if (c_AR_STATUS_APPROVED != null)
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", c_AR_STATUS_APPROVED);
            }
            else
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", typeof(string));
            }
            return base.ExecuteFunction<dtSummaryAR>("SummaryAR", dateFromParameter, dateToParameter, currentDateParameter, c_AR_STATUS_INSTRUCTEDParameter, c_AR_STATUS_REJECTEDParameter, c_AR_STATUS_APPROVEDParameter);
        }
        public ObjectResult<RPTChangeNoticeDo> GetRptChangeNoticeData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<RPTChangeNoticeDo>("GetRptChangeNoticeData", iDocIDParameter, bFlagOnParameter);
        }
        public ObjectResult<doSummaryFee> SumFeeUnimplementData(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<doSummaryFee>("SumFeeUnimplementData", strContractCodeParameter);
        }
        public ObjectResult<tbt_Project> GetTbt_ProjectForViewSQL(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_Project>("GetTbt_ProjectForViewSQL", strProjectCodeParameter);
        }
        public ObjectResult<tbt_DraftSaleContract> InsertTbt_DraftSaleContract(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleContract>("InsertTbt_DraftSaleContract", xmlParameter);
        }
        public ObjectResult<tbt_DraftSaleBillingTarget> InsertTbt_DraftSaleBillingTarget(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleBillingTarget>("InsertTbt_DraftSaleBillingTarget", xmlParameter);
        }
        public ObjectResult<tbt_DraftSaleEmail> InsertTbt_DraftSaleEmail(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleEmail>("InsertTbt_DraftSaleEmail", xmlParameter);
        }
        public ObjectResult<tbt_DraftSaleInstrument> InsertTbt_DraftSaleInstrument(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleInstrument>("InsertTbt_DraftSaleInstrument", xmlParameter);
        }
        public ObjectResult<tbt_DraftSaleContract> UpdateTbt_DraftSaleContract(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleContract>("UpdateTbt_DraftSaleContract", xmlParameter);
        }
        public ObjectResult<tbt_DraftSaleBillingTarget> DeleteTbt_DraftSaleBillingTarget(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleBillingTarget>("DeleteTbt_DraftSaleBillingTarget", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftSaleEmail> DeleteTbt_DraftSaleEmail(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleEmail>("DeleteTbt_DraftSaleEmail", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftSaleInstrument> DeleteTbt_DraftSaleInstrument(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftSaleInstrument>("DeleteTbt_DraftSaleInstrument", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<dtTbt_ProjectSupportStaffDetailForView> GetTbt_ProjectSupportStaffDetailForView(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_ProjectSupportStaffDetailForView>("GetTbt_ProjectSupportStaffDetailForView", strProjectCodeParameter);
        }
        public ObjectResult<dtTbt_ProjectExpectedInstrumentDetailsForView> GetTbt_ProjectExpectedInstrumentDetailsForView(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_ProjectExpectedInstrumentDetailsForView>("GetTbt_ProjectExpectedInstrumentDetailsForView", strProjectCodeParameter);
        }
        public ObjectResult<dtTbt_ProjectSystemDetailForView> GetTbt_ProjectSystemDetailForView(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_ProjectSystemDetailForView>("GetTbt_ProjectSystemDetailForView", strProjectCodeParameter);
        }
        public ObjectResult<dtTbt_ProjectStockoutIntrumentForView> GetTbt_ProjectStockoutIntrumentForView(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_ProjectStockoutIntrumentForView>("GetTbt_ProjectStockoutIntrumentForView", strProjectCodeParameter);
        }
        public ObjectResult<tbt_ProjectOtherRalatedCompany> GetTbt_ProjectOtherRalatedCompanyForView(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectOtherRalatedCompany>("GetTbt_ProjectOtherRalatedCompanyForView", strProjectCodeParameter);
        }
        public ObjectResult<tbt_ContractDocument> GetContractDocHeaderByContractCode(string pContractCode, string pOCC, string pchrContractDocOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pchrContractDocOCCParameter;
    
            if (pchrContractDocOCC != null)
            {
                pchrContractDocOCCParameter = new ObjectParameter("pchrContractDocOCC", pchrContractDocOCC);
            }
            else
            {
                pchrContractDocOCCParameter = new ObjectParameter("pchrContractDocOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractDocument>("GetContractDocHeaderByContractCode", pContractCodeParameter, pOCCParameter, pchrContractDocOCCParameter);
        }
        public ObjectResult<tbt_ProjectStockoutBranchIntrumentDetails> GetTbt_ProjectStockoutBranchIntrumentDetails(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockoutBranchIntrumentDetails>("GetTbt_ProjectStockoutBranchIntrumentDetails", strProjectCodeParameter);
        }
        public ObjectResult<dtTbt_ProjectStockoutBranchIntrumentDetailForView> GetTbt_ProjectStockoutBranchIntrumentDetailForView(string strProjectCode, Nullable<int> iBranchNo)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter iBranchNoParameter;
    
            if (iBranchNo.HasValue)
            {
                iBranchNoParameter = new ObjectParameter("iBranchNo", iBranchNo);
            }
            else
            {
                iBranchNoParameter = new ObjectParameter("iBranchNo", typeof(int));
            }
            return base.ExecuteFunction<dtTbt_ProjectStockoutBranchIntrumentDetailForView>("GetTbt_ProjectStockoutBranchIntrumentDetailForView", strProjectCodeParameter, iBranchNoParameter);
        }
        public ObjectResult<dtTbt_ProjectPurchaserCustomerForView> GetTbt_ProjectPurchaserCustomerForView(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_ProjectPurchaserCustomerForView>("GetTbt_ProjectPurchaserCustomerForView", strProjectCodeParameter);
        }
        public ObjectResult<RPTChangeMemoDo> GetRptChangeMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<RPTChangeMemoDo>("GetRptChangeMemoData", iDocIDParameter, bFlagOnParameter);
        }
        public int SetNotUsedStatus(string pContractDoc, string pOCC, string pC_CONTRACT_DOC_STATUS_NOT_USED, string pC_CONTRACT_DOC_STATUS_COLLECTED, Nullable<bool> pIsRecursive, string pRef)
        {
    
            ObjectParameter pContractDocParameter;
    
            if (pContractDoc != null)
            {
                pContractDocParameter = new ObjectParameter("pContractDoc", pContractDoc);
            }
            else
            {
                pContractDocParameter = new ObjectParameter("pContractDoc", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pC_CONTRACT_DOC_STATUS_NOT_USEDParameter;
    
            if (pC_CONTRACT_DOC_STATUS_NOT_USED != null)
            {
                pC_CONTRACT_DOC_STATUS_NOT_USEDParameter = new ObjectParameter("pC_CONTRACT_DOC_STATUS_NOT_USED", pC_CONTRACT_DOC_STATUS_NOT_USED);
            }
            else
            {
                pC_CONTRACT_DOC_STATUS_NOT_USEDParameter = new ObjectParameter("pC_CONTRACT_DOC_STATUS_NOT_USED", typeof(string));
            }
    
            ObjectParameter pC_CONTRACT_DOC_STATUS_COLLECTEDParameter;
    
            if (pC_CONTRACT_DOC_STATUS_COLLECTED != null)
            {
                pC_CONTRACT_DOC_STATUS_COLLECTEDParameter = new ObjectParameter("pC_CONTRACT_DOC_STATUS_COLLECTED", pC_CONTRACT_DOC_STATUS_COLLECTED);
            }
            else
            {
                pC_CONTRACT_DOC_STATUS_COLLECTEDParameter = new ObjectParameter("pC_CONTRACT_DOC_STATUS_COLLECTED", typeof(string));
            }
    
            ObjectParameter pIsRecursiveParameter;
    
            if (pIsRecursive.HasValue)
            {
                pIsRecursiveParameter = new ObjectParameter("pIsRecursive", pIsRecursive);
            }
            else
            {
                pIsRecursiveParameter = new ObjectParameter("pIsRecursive", typeof(bool));
            }
    
            ObjectParameter pRefParameter;
    
            if (pRef != null)
            {
                pRefParameter = new ObjectParameter("pRef", pRef);
            }
            else
            {
                pRefParameter = new ObjectParameter("pRef", typeof(string));
            }
            return base.ExecuteFunction("SetNotUsedStatus", pContractDocParameter, pOCCParameter, pC_CONTRACT_DOC_STATUS_NOT_USEDParameter, pC_CONTRACT_DOC_STATUS_COLLECTEDParameter, pIsRecursiveParameter, pRefParameter);
        }
        public ObjectResult<dtARListCTS370> GetARList(string aRRelavantType, string custCode, string siteCode, string contractCode, string quotationTargetCode, string projectCode, string aRType, Nullable<System.DateTime> duedateDeadline, string aRStatus, string c_AR_ROLE_APPROVER, string c_AR_ROLE_REQUESTER, string c_AR_ROLE_AUDITOR, string c_AR_TYPE, string c_AR_STATUS, string c_AR_RELEVANT_TYPE_CUSTOMER, string c_AR_RELEVANT_TYPE_SITE, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_PROJECT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_AR_SEARCH_STATUS_COMPLETE, string c_AR_SEARCH_STATUS_HANDLING, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED, string c_DEADLINE_TIME_TYPE, string c_CUST_ROLE_TYPE_CONTRACT_TARGET, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter aRRelavantTypeParameter;
    
            if (aRRelavantType != null)
            {
                aRRelavantTypeParameter = new ObjectParameter("ARRelavantType", aRRelavantType);
            }
            else
            {
                aRRelavantTypeParameter = new ObjectParameter("ARRelavantType", typeof(string));
            }
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", typeof(string));
            }
    
            ObjectParameter aRTypeParameter;
    
            if (aRType != null)
            {
                aRTypeParameter = new ObjectParameter("ARType", aRType);
            }
            else
            {
                aRTypeParameter = new ObjectParameter("ARType", typeof(string));
            }
    
            ObjectParameter duedateDeadlineParameter;
    
            if (duedateDeadline.HasValue)
            {
                duedateDeadlineParameter = new ObjectParameter("DuedateDeadline", duedateDeadline);
            }
            else
            {
                duedateDeadlineParameter = new ObjectParameter("DuedateDeadline", typeof(System.DateTime));
            }
    
            ObjectParameter aRStatusParameter;
    
            if (aRStatus != null)
            {
                aRStatusParameter = new ObjectParameter("ARStatus", aRStatus);
            }
            else
            {
                aRStatusParameter = new ObjectParameter("ARStatus", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_APPROVERParameter;
    
            if (c_AR_ROLE_APPROVER != null)
            {
                c_AR_ROLE_APPROVERParameter = new ObjectParameter("C_AR_ROLE_APPROVER", c_AR_ROLE_APPROVER);
            }
            else
            {
                c_AR_ROLE_APPROVERParameter = new ObjectParameter("C_AR_ROLE_APPROVER", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_REQUESTERParameter;
    
            if (c_AR_ROLE_REQUESTER != null)
            {
                c_AR_ROLE_REQUESTERParameter = new ObjectParameter("C_AR_ROLE_REQUESTER", c_AR_ROLE_REQUESTER);
            }
            else
            {
                c_AR_ROLE_REQUESTERParameter = new ObjectParameter("C_AR_ROLE_REQUESTER", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_AUDITORParameter;
    
            if (c_AR_ROLE_AUDITOR != null)
            {
                c_AR_ROLE_AUDITORParameter = new ObjectParameter("C_AR_ROLE_AUDITOR", c_AR_ROLE_AUDITOR);
            }
            else
            {
                c_AR_ROLE_AUDITORParameter = new ObjectParameter("C_AR_ROLE_AUDITOR", typeof(string));
            }
    
            ObjectParameter c_AR_TYPEParameter;
    
            if (c_AR_TYPE != null)
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", c_AR_TYPE);
            }
            else
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", typeof(string));
            }
    
            ObjectParameter c_AR_STATUSParameter;
    
            if (c_AR_STATUS != null)
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", c_AR_STATUS);
            }
            else
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CUSTOMERParameter;
    
            if (c_AR_RELEVANT_TYPE_CUSTOMER != null)
            {
                c_AR_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CUSTOMER", c_AR_RELEVANT_TYPE_CUSTOMER);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_SITEParameter;
    
            if (c_AR_RELEVANT_TYPE_SITE != null)
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", c_AR_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_AR_RELEVANT_TYPE_CONTRACT != null)
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", c_AR_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_PROJECTParameter;
    
            if (c_AR_RELEVANT_TYPE_PROJECT != null)
            {
                c_AR_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_PROJECT", c_AR_RELEVANT_TYPE_PROJECT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_QUOTATIONParameter;
    
            if (c_AR_RELEVANT_TYPE_QUOTATION != null)
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", c_AR_RELEVANT_TYPE_QUOTATION);
            }
            else
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_STATUS_COMPLETEParameter;
    
            if (c_AR_SEARCH_STATUS_COMPLETE != null)
            {
                c_AR_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_AR_SEARCH_STATUS_COMPLETE", c_AR_SEARCH_STATUS_COMPLETE);
            }
            else
            {
                c_AR_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_AR_SEARCH_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_AR_SEARCH_STATUS_HANDLINGParameter;
    
            if (c_AR_SEARCH_STATUS_HANDLING != null)
            {
                c_AR_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_AR_SEARCH_STATUS_HANDLING", c_AR_SEARCH_STATUS_HANDLING);
            }
            else
            {
                c_AR_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_AR_SEARCH_STATUS_HANDLING", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_INSTRUCTEDParameter;
    
            if (c_AR_STATUS_INSTRUCTED != null)
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", c_AR_STATUS_INSTRUCTED);
            }
            else
            {
                c_AR_STATUS_INSTRUCTEDParameter = new ObjectParameter("C_AR_STATUS_INSTRUCTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_REJECTEDParameter;
    
            if (c_AR_STATUS_REJECTED != null)
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", c_AR_STATUS_REJECTED);
            }
            else
            {
                c_AR_STATUS_REJECTEDParameter = new ObjectParameter("C_AR_STATUS_REJECTED", typeof(string));
            }
    
            ObjectParameter c_AR_STATUS_APPROVEDParameter;
    
            if (c_AR_STATUS_APPROVED != null)
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", c_AR_STATUS_APPROVED);
            }
            else
            {
                c_AR_STATUS_APPROVEDParameter = new ObjectParameter("C_AR_STATUS_APPROVED", typeof(string));
            }
    
            ObjectParameter c_DEADLINE_TIME_TYPEParameter;
    
            if (c_DEADLINE_TIME_TYPE != null)
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", c_DEADLINE_TIME_TYPE);
            }
            else
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", typeof(string));
            }
    
            ObjectParameter c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter;
    
            if (c_CUST_ROLE_TYPE_CONTRACT_TARGET != null)
            {
                c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("C_CUST_ROLE_TYPE_CONTRACT_TARGET", c_CUST_ROLE_TYPE_CONTRACT_TARGET);
            }
            else
            {
                c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("C_CUST_ROLE_TYPE_CONTRACT_TARGET", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtARListCTS370>("GetARList", aRRelavantTypeParameter, custCodeParameter, siteCodeParameter, contractCodeParameter, quotationTargetCodeParameter, projectCodeParameter, aRTypeParameter, duedateDeadlineParameter, aRStatusParameter, c_AR_ROLE_APPROVERParameter, c_AR_ROLE_REQUESTERParameter, c_AR_ROLE_AUDITORParameter, c_AR_TYPEParameter, c_AR_STATUSParameter, c_AR_RELEVANT_TYPE_CUSTOMERParameter, c_AR_RELEVANT_TYPE_SITEParameter, c_AR_RELEVANT_TYPE_CONTRACTParameter, c_AR_RELEVANT_TYPE_PROJECTParameter, c_AR_RELEVANT_TYPE_QUOTATIONParameter, c_AR_SEARCH_STATUS_COMPLETEParameter, c_AR_SEARCH_STATUS_HANDLINGParameter, c_AR_STATUS_INSTRUCTEDParameter, c_AR_STATUS_REJECTEDParameter, c_AR_STATUS_APPROVEDParameter, c_DEADLINE_TIME_TYPEParameter, c_CUST_ROLE_TYPE_CONTRACT_TARGETParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<dtAROccSite> GetAROccurringSite(string strCustCode, string c_AR_RELEVANT_TYPE_SITE)
        {
    
            ObjectParameter strCustCodeParameter;
    
            if (strCustCode != null)
            {
                strCustCodeParameter = new ObjectParameter("strCustCode", strCustCode);
            }
            else
            {
                strCustCodeParameter = new ObjectParameter("strCustCode", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_SITEParameter;
    
            if (c_AR_RELEVANT_TYPE_SITE != null)
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", c_AR_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", typeof(string));
            }
            return base.ExecuteFunction<dtAROccSite>("GetAROccurringSite", strCustCodeParameter, c_AR_RELEVANT_TYPE_SITEParameter);
        }
        public ObjectResult<dtIncidentList> GetIncidentListByRole(string incidentRole, string empNo, Nullable<System.DateTime> dueDate, string incidentStatus, string c_INCIDENT_SEARCH_STATUS_COMPLETE, string c_INCIDENT_SEARCH_STATUS_HANDLING, string c_INCIDENT_ROLE_CONTROL_CHIEF, string c_INCIDENT_ROLE_CHIEF, string c_INCIDENT_ROLE_CORRESPONDENT, string c_INCIDENT_ROLE_ASSISTANT, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_STATUS, string c_INCIDENT_STATUS_COMPLETE, string c_INCIDENT_TYPE, string c_DEADLINE_TIME_TYPE)
        {
    
            ObjectParameter incidentRoleParameter;
    
            if (incidentRole != null)
            {
                incidentRoleParameter = new ObjectParameter("IncidentRole", incidentRole);
            }
            else
            {
                incidentRoleParameter = new ObjectParameter("IncidentRole", typeof(string));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
    
            ObjectParameter dueDateParameter;
    
            if (dueDate.HasValue)
            {
                dueDateParameter = new ObjectParameter("DueDate", dueDate);
            }
            else
            {
                dueDateParameter = new ObjectParameter("DueDate", typeof(System.DateTime));
            }
    
            ObjectParameter incidentStatusParameter;
    
            if (incidentStatus != null)
            {
                incidentStatusParameter = new ObjectParameter("IncidentStatus", incidentStatus);
            }
            else
            {
                incidentStatusParameter = new ObjectParameter("IncidentStatus", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_SEARCH_STATUS_COMPLETEParameter;
    
            if (c_INCIDENT_SEARCH_STATUS_COMPLETE != null)
            {
                c_INCIDENT_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_COMPLETE", c_INCIDENT_SEARCH_STATUS_COMPLETE);
            }
            else
            {
                c_INCIDENT_SEARCH_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_SEARCH_STATUS_HANDLINGParameter;
    
            if (c_INCIDENT_SEARCH_STATUS_HANDLING != null)
            {
                c_INCIDENT_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_HANDLING", c_INCIDENT_SEARCH_STATUS_HANDLING);
            }
            else
            {
                c_INCIDENT_SEARCH_STATUS_HANDLINGParameter = new ObjectParameter("C_INCIDENT_SEARCH_STATUS_HANDLING", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CONTROL_CHIEFParameter;
    
            if (c_INCIDENT_ROLE_CONTROL_CHIEF != null)
            {
                c_INCIDENT_ROLE_CONTROL_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CONTROL_CHIEF", c_INCIDENT_ROLE_CONTROL_CHIEF);
            }
            else
            {
                c_INCIDENT_ROLE_CONTROL_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CONTROL_CHIEF", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CHIEFParameter;
    
            if (c_INCIDENT_ROLE_CHIEF != null)
            {
                c_INCIDENT_ROLE_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF", c_INCIDENT_ROLE_CHIEF);
            }
            else
            {
                c_INCIDENT_ROLE_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CORRESPONDENTParameter;
    
            if (c_INCIDENT_ROLE_CORRESPONDENT != null)
            {
                c_INCIDENT_ROLE_CORRESPONDENTParameter = new ObjectParameter("C_INCIDENT_ROLE_CORRESPONDENT", c_INCIDENT_ROLE_CORRESPONDENT);
            }
            else
            {
                c_INCIDENT_ROLE_CORRESPONDENTParameter = new ObjectParameter("C_INCIDENT_ROLE_CORRESPONDENT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_ASSISTANTParameter;
    
            if (c_INCIDENT_ROLE_ASSISTANT != null)
            {
                c_INCIDENT_ROLE_ASSISTANTParameter = new ObjectParameter("C_INCIDENT_ROLE_ASSISTANT", c_INCIDENT_ROLE_ASSISTANT);
            }
            else
            {
                c_INCIDENT_ROLE_ASSISTANTParameter = new ObjectParameter("C_INCIDENT_ROLE_ASSISTANT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CONTRACT != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", c_INCIDENT_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_SITEParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_SITE != null)
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", c_INCIDENT_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_STATUSParameter;
    
            if (c_INCIDENT_STATUS != null)
            {
                c_INCIDENT_STATUSParameter = new ObjectParameter("C_INCIDENT_STATUS", c_INCIDENT_STATUS);
            }
            else
            {
                c_INCIDENT_STATUSParameter = new ObjectParameter("C_INCIDENT_STATUS", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_STATUS_COMPLETEParameter;
    
            if (c_INCIDENT_STATUS_COMPLETE != null)
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", c_INCIDENT_STATUS_COMPLETE);
            }
            else
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_TYPEParameter;
    
            if (c_INCIDENT_TYPE != null)
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", c_INCIDENT_TYPE);
            }
            else
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", typeof(string));
            }
    
            ObjectParameter c_DEADLINE_TIME_TYPEParameter;
    
            if (c_DEADLINE_TIME_TYPE != null)
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", c_DEADLINE_TIME_TYPE);
            }
            else
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtIncidentList>("GetIncidentListByRole", incidentRoleParameter, empNoParameter, dueDateParameter, incidentStatusParameter, c_INCIDENT_SEARCH_STATUS_COMPLETEParameter, c_INCIDENT_SEARCH_STATUS_HANDLINGParameter, c_INCIDENT_ROLE_CONTROL_CHIEFParameter, c_INCIDENT_ROLE_CHIEFParameter, c_INCIDENT_ROLE_CORRESPONDENTParameter, c_INCIDENT_ROLE_ASSISTANTParameter, c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter, c_INCIDENT_RELEVANT_TYPE_SITEParameter, c_INCIDENT_STATUSParameter, c_INCIDENT_STATUS_COMPLETEParameter, c_INCIDENT_TYPEParameter, c_DEADLINE_TIME_TYPEParameter);
        }
        public ObjectResult<dtIncidentList> SearchIncidentList(string incidentNo, string incidentTitle, string incidentType, string incidentStatusHandling, string incidentStatusComplete, string incidentOfficeCode, string specfyPeriod, Nullable<System.DateTime> specifyPeriodFrom, Nullable<System.DateTime> specifyPeriodTo, string registrant, string controlChief, string correspondent, string chief, string assistant, string contractTargetPurchaserName, string siteName, string customerGroupName, string contractCode, string userCode, string contractOfficeCode, string operationOfficeCode, string contractStatus, string contractType, string customerName, string projectName, string c_INCIDENT_ROLE_CONTROL_CHIEF, string c_INCIDENT_ROLE_CHIEF, string c_INCIDENT_ROLE_CORRESPONDENT, string c_INCIDENT_ROLE_ASSISTANT, string c_INCIDENT_TYPE, string c_INCIDENT_STATUS, string c_DEADLINE_TIME_TYPE, string c_INCIDENT_SEARCH_PERIOD_OCCURRING, string c_INCIDENT_SEARCH_PERIOD_DUEDATE, string c_INCIDENT_SEARCH_PERIOD_COMPLETE, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_INCIDENT_RELEVANT_TYPE_CUSTOMER, string c_INCIDENT_RELEVANT_TYPE_PROJECT, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_STATUS_COMPLETE)
        {
    
            ObjectParameter incidentNoParameter;
    
            if (incidentNo != null)
            {
                incidentNoParameter = new ObjectParameter("IncidentNo", incidentNo);
            }
            else
            {
                incidentNoParameter = new ObjectParameter("IncidentNo", typeof(string));
            }
    
            ObjectParameter incidentTitleParameter;
    
            if (incidentTitle != null)
            {
                incidentTitleParameter = new ObjectParameter("IncidentTitle", incidentTitle);
            }
            else
            {
                incidentTitleParameter = new ObjectParameter("IncidentTitle", typeof(string));
            }
    
            ObjectParameter incidentTypeParameter;
    
            if (incidentType != null)
            {
                incidentTypeParameter = new ObjectParameter("IncidentType", incidentType);
            }
            else
            {
                incidentTypeParameter = new ObjectParameter("IncidentType", typeof(string));
            }
    
            ObjectParameter incidentStatusHandlingParameter;
    
            if (incidentStatusHandling != null)
            {
                incidentStatusHandlingParameter = new ObjectParameter("IncidentStatusHandling", incidentStatusHandling);
            }
            else
            {
                incidentStatusHandlingParameter = new ObjectParameter("IncidentStatusHandling", typeof(string));
            }
    
            ObjectParameter incidentStatusCompleteParameter;
    
            if (incidentStatusComplete != null)
            {
                incidentStatusCompleteParameter = new ObjectParameter("IncidentStatusComplete", incidentStatusComplete);
            }
            else
            {
                incidentStatusCompleteParameter = new ObjectParameter("IncidentStatusComplete", typeof(string));
            }
    
            ObjectParameter incidentOfficeCodeParameter;
    
            if (incidentOfficeCode != null)
            {
                incidentOfficeCodeParameter = new ObjectParameter("IncidentOfficeCode", incidentOfficeCode);
            }
            else
            {
                incidentOfficeCodeParameter = new ObjectParameter("IncidentOfficeCode", typeof(string));
            }
    
            ObjectParameter specfyPeriodParameter;
    
            if (specfyPeriod != null)
            {
                specfyPeriodParameter = new ObjectParameter("SpecfyPeriod", specfyPeriod);
            }
            else
            {
                specfyPeriodParameter = new ObjectParameter("SpecfyPeriod", typeof(string));
            }
    
            ObjectParameter specifyPeriodFromParameter;
    
            if (specifyPeriodFrom.HasValue)
            {
                specifyPeriodFromParameter = new ObjectParameter("SpecifyPeriodFrom", specifyPeriodFrom);
            }
            else
            {
                specifyPeriodFromParameter = new ObjectParameter("SpecifyPeriodFrom", typeof(System.DateTime));
            }
    
            ObjectParameter specifyPeriodToParameter;
    
            if (specifyPeriodTo.HasValue)
            {
                specifyPeriodToParameter = new ObjectParameter("SpecifyPeriodTo", specifyPeriodTo);
            }
            else
            {
                specifyPeriodToParameter = new ObjectParameter("SpecifyPeriodTo", typeof(System.DateTime));
            }
    
            ObjectParameter registrantParameter;
    
            if (registrant != null)
            {
                registrantParameter = new ObjectParameter("Registrant", registrant);
            }
            else
            {
                registrantParameter = new ObjectParameter("Registrant", typeof(string));
            }
    
            ObjectParameter controlChiefParameter;
    
            if (controlChief != null)
            {
                controlChiefParameter = new ObjectParameter("ControlChief", controlChief);
            }
            else
            {
                controlChiefParameter = new ObjectParameter("ControlChief", typeof(string));
            }
    
            ObjectParameter correspondentParameter;
    
            if (correspondent != null)
            {
                correspondentParameter = new ObjectParameter("Correspondent", correspondent);
            }
            else
            {
                correspondentParameter = new ObjectParameter("Correspondent", typeof(string));
            }
    
            ObjectParameter chiefParameter;
    
            if (chief != null)
            {
                chiefParameter = new ObjectParameter("Chief", chief);
            }
            else
            {
                chiefParameter = new ObjectParameter("Chief", typeof(string));
            }
    
            ObjectParameter assistantParameter;
    
            if (assistant != null)
            {
                assistantParameter = new ObjectParameter("Assistant", assistant);
            }
            else
            {
                assistantParameter = new ObjectParameter("Assistant", typeof(string));
            }
    
            ObjectParameter contractTargetPurchaserNameParameter;
    
            if (contractTargetPurchaserName != null)
            {
                contractTargetPurchaserNameParameter = new ObjectParameter("ContractTargetPurchaserName", contractTargetPurchaserName);
            }
            else
            {
                contractTargetPurchaserNameParameter = new ObjectParameter("ContractTargetPurchaserName", typeof(string));
            }
    
            ObjectParameter siteNameParameter;
    
            if (siteName != null)
            {
                siteNameParameter = new ObjectParameter("SiteName", siteName);
            }
            else
            {
                siteNameParameter = new ObjectParameter("SiteName", typeof(string));
            }
    
            ObjectParameter customerGroupNameParameter;
    
            if (customerGroupName != null)
            {
                customerGroupNameParameter = new ObjectParameter("CustomerGroupName", customerGroupName);
            }
            else
            {
                customerGroupNameParameter = new ObjectParameter("CustomerGroupName", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter userCodeParameter;
    
            if (userCode != null)
            {
                userCodeParameter = new ObjectParameter("UserCode", userCode);
            }
            else
            {
                userCodeParameter = new ObjectParameter("UserCode", typeof(string));
            }
    
            ObjectParameter contractOfficeCodeParameter;
    
            if (contractOfficeCode != null)
            {
                contractOfficeCodeParameter = new ObjectParameter("ContractOfficeCode", contractOfficeCode);
            }
            else
            {
                contractOfficeCodeParameter = new ObjectParameter("ContractOfficeCode", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
    
            ObjectParameter contractStatusParameter;
    
            if (contractStatus != null)
            {
                contractStatusParameter = new ObjectParameter("ContractStatus", contractStatus);
            }
            else
            {
                contractStatusParameter = new ObjectParameter("ContractStatus", typeof(string));
            }
    
            ObjectParameter contractTypeParameter;
    
            if (contractType != null)
            {
                contractTypeParameter = new ObjectParameter("ContractType", contractType);
            }
            else
            {
                contractTypeParameter = new ObjectParameter("ContractType", typeof(string));
            }
    
            ObjectParameter customerNameParameter;
    
            if (customerName != null)
            {
                customerNameParameter = new ObjectParameter("CustomerName", customerName);
            }
            else
            {
                customerNameParameter = new ObjectParameter("CustomerName", typeof(string));
            }
    
            ObjectParameter projectNameParameter;
    
            if (projectName != null)
            {
                projectNameParameter = new ObjectParameter("ProjectName", projectName);
            }
            else
            {
                projectNameParameter = new ObjectParameter("ProjectName", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CONTROL_CHIEFParameter;
    
            if (c_INCIDENT_ROLE_CONTROL_CHIEF != null)
            {
                c_INCIDENT_ROLE_CONTROL_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CONTROL_CHIEF", c_INCIDENT_ROLE_CONTROL_CHIEF);
            }
            else
            {
                c_INCIDENT_ROLE_CONTROL_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CONTROL_CHIEF", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CHIEFParameter;
    
            if (c_INCIDENT_ROLE_CHIEF != null)
            {
                c_INCIDENT_ROLE_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF", c_INCIDENT_ROLE_CHIEF);
            }
            else
            {
                c_INCIDENT_ROLE_CHIEFParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CORRESPONDENTParameter;
    
            if (c_INCIDENT_ROLE_CORRESPONDENT != null)
            {
                c_INCIDENT_ROLE_CORRESPONDENTParameter = new ObjectParameter("C_INCIDENT_ROLE_CORRESPONDENT", c_INCIDENT_ROLE_CORRESPONDENT);
            }
            else
            {
                c_INCIDENT_ROLE_CORRESPONDENTParameter = new ObjectParameter("C_INCIDENT_ROLE_CORRESPONDENT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_ASSISTANTParameter;
    
            if (c_INCIDENT_ROLE_ASSISTANT != null)
            {
                c_INCIDENT_ROLE_ASSISTANTParameter = new ObjectParameter("C_INCIDENT_ROLE_ASSISTANT", c_INCIDENT_ROLE_ASSISTANT);
            }
            else
            {
                c_INCIDENT_ROLE_ASSISTANTParameter = new ObjectParameter("C_INCIDENT_ROLE_ASSISTANT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_TYPEParameter;
    
            if (c_INCIDENT_TYPE != null)
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", c_INCIDENT_TYPE);
            }
            else
            {
                c_INCIDENT_TYPEParameter = new ObjectParameter("C_INCIDENT_TYPE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_STATUSParameter;
    
            if (c_INCIDENT_STATUS != null)
            {
                c_INCIDENT_STATUSParameter = new ObjectParameter("C_INCIDENT_STATUS", c_INCIDENT_STATUS);
            }
            else
            {
                c_INCIDENT_STATUSParameter = new ObjectParameter("C_INCIDENT_STATUS", typeof(string));
            }
    
            ObjectParameter c_DEADLINE_TIME_TYPEParameter;
    
            if (c_DEADLINE_TIME_TYPE != null)
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", c_DEADLINE_TIME_TYPE);
            }
            else
            {
                c_DEADLINE_TIME_TYPEParameter = new ObjectParameter("C_DEADLINE_TIME_TYPE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_SEARCH_PERIOD_OCCURRINGParameter;
    
            if (c_INCIDENT_SEARCH_PERIOD_OCCURRING != null)
            {
                c_INCIDENT_SEARCH_PERIOD_OCCURRINGParameter = new ObjectParameter("C_INCIDENT_SEARCH_PERIOD_OCCURRING", c_INCIDENT_SEARCH_PERIOD_OCCURRING);
            }
            else
            {
                c_INCIDENT_SEARCH_PERIOD_OCCURRINGParameter = new ObjectParameter("C_INCIDENT_SEARCH_PERIOD_OCCURRING", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_SEARCH_PERIOD_DUEDATEParameter;
    
            if (c_INCIDENT_SEARCH_PERIOD_DUEDATE != null)
            {
                c_INCIDENT_SEARCH_PERIOD_DUEDATEParameter = new ObjectParameter("C_INCIDENT_SEARCH_PERIOD_DUEDATE", c_INCIDENT_SEARCH_PERIOD_DUEDATE);
            }
            else
            {
                c_INCIDENT_SEARCH_PERIOD_DUEDATEParameter = new ObjectParameter("C_INCIDENT_SEARCH_PERIOD_DUEDATE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_SEARCH_PERIOD_COMPLETEParameter;
    
            if (c_INCIDENT_SEARCH_PERIOD_COMPLETE != null)
            {
                c_INCIDENT_SEARCH_PERIOD_COMPLETEParameter = new ObjectParameter("C_INCIDENT_SEARCH_PERIOD_COMPLETE", c_INCIDENT_SEARCH_PERIOD_COMPLETE);
            }
            else
            {
                c_INCIDENT_SEARCH_PERIOD_COMPLETEParameter = new ObjectParameter("C_INCIDENT_SEARCH_PERIOD_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CONTRACT != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", c_INCIDENT_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_CUSTOMER != null)
            {
                c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CUSTOMER", c_INCIDENT_RELEVANT_TYPE_CUSTOMER);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_PROJECTParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_PROJECT != null)
            {
                c_INCIDENT_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_PROJECT", c_INCIDENT_RELEVANT_TYPE_PROJECT);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_RELEVANT_TYPE_SITEParameter;
    
            if (c_INCIDENT_RELEVANT_TYPE_SITE != null)
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", c_INCIDENT_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_INCIDENT_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_INCIDENT_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_STATUS_COMPLETEParameter;
    
            if (c_INCIDENT_STATUS_COMPLETE != null)
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", c_INCIDENT_STATUS_COMPLETE);
            }
            else
            {
                c_INCIDENT_STATUS_COMPLETEParameter = new ObjectParameter("C_INCIDENT_STATUS_COMPLETE", typeof(string));
            }
            return base.ExecuteFunction<dtIncidentList>("SearchIncidentList", incidentNoParameter, incidentTitleParameter, incidentTypeParameter, incidentStatusHandlingParameter, incidentStatusCompleteParameter, incidentOfficeCodeParameter, specfyPeriodParameter, specifyPeriodFromParameter, specifyPeriodToParameter, registrantParameter, controlChiefParameter, correspondentParameter, chiefParameter, assistantParameter, contractTargetPurchaserNameParameter, siteNameParameter, customerGroupNameParameter, contractCodeParameter, userCodeParameter, contractOfficeCodeParameter, operationOfficeCodeParameter, contractStatusParameter, contractTypeParameter, customerNameParameter, projectNameParameter, c_INCIDENT_ROLE_CONTROL_CHIEFParameter, c_INCIDENT_ROLE_CHIEFParameter, c_INCIDENT_ROLE_CORRESPONDENTParameter, c_INCIDENT_ROLE_ASSISTANTParameter, c_INCIDENT_TYPEParameter, c_INCIDENT_STATUSParameter, c_DEADLINE_TIME_TYPEParameter, c_INCIDENT_SEARCH_PERIOD_OCCURRINGParameter, c_INCIDENT_SEARCH_PERIOD_DUEDATEParameter, c_INCIDENT_SEARCH_PERIOD_COMPLETEParameter, c_INCIDENT_RELEVANT_TYPE_CONTRACTParameter, c_INCIDENT_RELEVANT_TYPE_CUSTOMERParameter, c_INCIDENT_RELEVANT_TYPE_PROJECTParameter, c_INCIDENT_RELEVANT_TYPE_SITEParameter, c_INCIDENT_STATUS_COMPLETEParameter);
        }
        public ObjectResult<RPTContractReportDo> GetRptContractReportData(Nullable<int> iDocID, Nullable<bool> bFlagOn, string cPaymentMethod, string cBillingTiming)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
    
            ObjectParameter cPaymentMethodParameter;
    
            if (cPaymentMethod != null)
            {
                cPaymentMethodParameter = new ObjectParameter("cPaymentMethod", cPaymentMethod);
            }
            else
            {
                cPaymentMethodParameter = new ObjectParameter("cPaymentMethod", typeof(string));
            }
    
            ObjectParameter cBillingTimingParameter;
    
            if (cBillingTiming != null)
            {
                cBillingTimingParameter = new ObjectParameter("cBillingTiming", cBillingTiming);
            }
            else
            {
                cBillingTimingParameter = new ObjectParameter("cBillingTiming", typeof(string));
            }
            return base.ExecuteFunction<RPTContractReportDo>("GetRptContractReportData", iDocIDParameter, bFlagOnParameter, cPaymentMethodParameter, cBillingTimingParameter);
        }
        public ObjectResult<string> GetProjectStatus(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetProjectStatus", strProjectCodeParameter);
        }
        public ObjectResult<tbt_Project> UpdateTbt_ProjectData(string xmlTbt_Project)
        {
    
            ObjectParameter xmlTbt_ProjectParameter;
    
            if (xmlTbt_Project != null)
            {
                xmlTbt_ProjectParameter = new ObjectParameter("xmlTbt_Project", xmlTbt_Project);
            }
            else
            {
                xmlTbt_ProjectParameter = new ObjectParameter("xmlTbt_Project", typeof(string));
            }
            return base.ExecuteFunction<tbt_Project>("UpdateTbt_ProjectData", xmlTbt_ProjectParameter);
        }
        public ObjectResult<RPTConfirmCurrInstMemoDo> GetRptConfirmCurrentInstrumentMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<RPTConfirmCurrInstMemoDo>("GetRptConfirmCurrentInstrumentMemoData", iDocIDParameter, bFlagOnParameter);
        }
        public ObjectResult<RPTCancelContractMemoDo> GetRptCancelContractMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<RPTCancelContractMemoDo>("GetRptCancelContractMemoData", iDocIDParameter, bFlagOnParameter);
        }
        public ObjectResult<RPTCancelContractMemoDetailDo> GetRptCancelContractMemoDetailData(Nullable<int> iDocID)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
            return base.ExecuteFunction<RPTCancelContractMemoDetailDo>("GetRptCancelContractMemoDetailData", iDocIDParameter);
        }
        public ObjectResult<tbt_ProjectExpectedInstrumentDetails> UpdateTbt_ProjectExpectedInstrumentDetails(string strProjectCode, string strInstrumentCode, Nullable<int> intInstrumentQty, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter intInstrumentQtyParameter;
    
            if (intInstrumentQty.HasValue)
            {
                intInstrumentQtyParameter = new ObjectParameter("intInstrumentQty", intInstrumentQty);
            }
            else
            {
                intInstrumentQtyParameter = new ObjectParameter("intInstrumentQty", typeof(int));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_ProjectExpectedInstrumentDetails>("UpdateTbt_ProjectExpectedInstrumentDetails", strProjectCodeParameter, strInstrumentCodeParameter, intInstrumentQtyParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<tbt_ProjectExpectedInstrumentDetails> DeleteTbt_ProjectExpectedInstrumentDetails(string strProjectCode, string instrumentCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectExpectedInstrumentDetails>("DeleteTbt_ProjectExpectedInstrumentDetails", strProjectCodeParameter, instrumentCodeParameter);
        }
        public ObjectResult<tbt_ProjectSystemDetails> DeleteTbt_ProjectSystemDetails(string strProjectCode, string productCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter productCodeParameter;
    
            if (productCode != null)
            {
                productCodeParameter = new ObjectParameter("ProductCode", productCode);
            }
            else
            {
                productCodeParameter = new ObjectParameter("ProductCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectSystemDetails>("DeleteTbt_ProjectSystemDetails", strProjectCodeParameter, productCodeParameter);
        }
        public ObjectResult<tbt_ProjectSupportStaffDetails> DeleteTbt_ProjectSupportStaffDetails(string strProjectCode, string empNo)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectSupportStaffDetails>("DeleteTbt_ProjectSupportStaffDetails", strProjectCodeParameter, empNoParameter);
        }
        public ObjectResult<tbt_ProjectOtherRalatedCompany> DeleteTbt_ProjectOtherRalatedCompany(string strProjectCode, Nullable<int> sequenceNo)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter sequenceNoParameter;
    
            if (sequenceNo.HasValue)
            {
                sequenceNoParameter = new ObjectParameter("SequenceNo", sequenceNo);
            }
            else
            {
                sequenceNoParameter = new ObjectParameter("SequenceNo", typeof(int));
            }
            return base.ExecuteFunction<tbt_ProjectOtherRalatedCompany>("DeleteTbt_ProjectOtherRalatedCompany", strProjectCodeParameter, sequenceNoParameter);
        }
        public ObjectResult<tbt_ProjectOtherRalatedCompany> UpdateTbt_ProjectOtherRalatedCompany(string strProjectCode, Nullable<int> sequenceNo, string companyName, string name, string telNo, string remark)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter sequenceNoParameter;
    
            if (sequenceNo.HasValue)
            {
                sequenceNoParameter = new ObjectParameter("SequenceNo", sequenceNo);
            }
            else
            {
                sequenceNoParameter = new ObjectParameter("SequenceNo", typeof(int));
            }
    
            ObjectParameter companyNameParameter;
    
            if (companyName != null)
            {
                companyNameParameter = new ObjectParameter("CompanyName", companyName);
            }
            else
            {
                companyNameParameter = new ObjectParameter("CompanyName", typeof(string));
            }
    
            ObjectParameter nameParameter;
    
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(string));
            }
    
            ObjectParameter telNoParameter;
    
            if (telNo != null)
            {
                telNoParameter = new ObjectParameter("TelNo", telNo);
            }
            else
            {
                telNoParameter = new ObjectParameter("TelNo", typeof(string));
            }
    
            ObjectParameter remarkParameter;
    
            if (remark != null)
            {
                remarkParameter = new ObjectParameter("Remark", remark);
            }
            else
            {
                remarkParameter = new ObjectParameter("Remark", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectOtherRalatedCompany>("UpdateTbt_ProjectOtherRalatedCompany", strProjectCodeParameter, sequenceNoParameter, companyNameParameter, nameParameter, telNoParameter, remarkParameter);
        }
        public ObjectResult<tbt_ProjectStockoutBranchIntrumentDetails> InsertTbt_ProjectStockoutBranchIntrumentDetails(string xML_Tbt_ProjectStockoutBranchIntrumentDetails)
        {
    
            ObjectParameter xML_Tbt_ProjectStockoutBranchIntrumentDetailsParameter;
    
            if (xML_Tbt_ProjectStockoutBranchIntrumentDetails != null)
            {
                xML_Tbt_ProjectStockoutBranchIntrumentDetailsParameter = new ObjectParameter("XML_Tbt_ProjectStockoutBranchIntrumentDetails", xML_Tbt_ProjectStockoutBranchIntrumentDetails);
            }
            else
            {
                xML_Tbt_ProjectStockoutBranchIntrumentDetailsParameter = new ObjectParameter("XML_Tbt_ProjectStockoutBranchIntrumentDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockoutBranchIntrumentDetails>("InsertTbt_ProjectStockoutBranchIntrumentDetails", xML_Tbt_ProjectStockoutBranchIntrumentDetailsParameter);
        }
        public ObjectResult<tbt_ProjectStockoutBranchIntrumentDetails> UpdateTbt_ProjectStockoutBranchIntrumentDetails(string strProjectCode, Nullable<int> branchNo, Nullable<int> assignBranchQty, string updateBy, Nullable<System.DateTime> updateDate, string instrumentCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter branchNoParameter;
    
            if (branchNo.HasValue)
            {
                branchNoParameter = new ObjectParameter("BranchNo", branchNo);
            }
            else
            {
                branchNoParameter = new ObjectParameter("BranchNo", typeof(int));
            }
    
            ObjectParameter assignBranchQtyParameter;
    
            if (assignBranchQty.HasValue)
            {
                assignBranchQtyParameter = new ObjectParameter("AssignBranchQty", assignBranchQty);
            }
            else
            {
                assignBranchQtyParameter = new ObjectParameter("AssignBranchQty", typeof(int));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockoutBranchIntrumentDetails>("UpdateTbt_ProjectStockoutBranchIntrumentDetails", strProjectCodeParameter, branchNoParameter, assignBranchQtyParameter, updateByParameter, updateDateParameter, instrumentCodeParameter);
        }
        public ObjectResult<dtRentalContractBasicForInstall> GetRentalContractBasicForInstall(string strContractCode, string buildingType, string c_RENTAL_CHANGE_TYPE_ALTERNATIVE_START, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter buildingTypeParameter;
    
            if (buildingType != null)
            {
                buildingTypeParameter = new ObjectParameter("BuildingType", buildingType);
            }
            else
            {
                buildingTypeParameter = new ObjectParameter("BuildingType", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPE_ALTERNATIVE_STARTParameter;
    
            if (c_RENTAL_CHANGE_TYPE_ALTERNATIVE_START != null)
            {
                c_RENTAL_CHANGE_TYPE_ALTERNATIVE_STARTParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_ALTERNATIVE_START", c_RENTAL_CHANGE_TYPE_ALTERNATIVE_START);
            }
            else
            {
                c_RENTAL_CHANGE_TYPE_ALTERNATIVE_STARTParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_ALTERNATIVE_START", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtRentalContractBasicForInstall>("GetRentalContractBasicForInstall", strContractCodeParameter, buildingTypeParameter, c_RENTAL_CHANGE_TYPE_ALTERNATIVE_STARTParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtSaleBasic> GetSaleBasicForInstall(string strContractCode, string buildingType, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter buildingTypeParameter;
    
            if (buildingType != null)
            {
                buildingTypeParameter = new ObjectParameter("BuildingType", buildingType);
            }
            else
            {
                buildingTypeParameter = new ObjectParameter("BuildingType", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtSaleBasic>("GetSaleBasicForInstall", strContractCodeParameter, buildingTypeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtProjectForInstall> GetProjectForInstall(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<dtProjectForInstall>("GetProjectForInstall", strProjectCodeParameter);
        }
        public ObjectResult<RPTChangeFeeMemoDo> GetRptChangeFeeMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<RPTChangeFeeMemoDo>("GetRptChangeFeeMemoData", iDocIDParameter, bFlagOnParameter);
        }
        public ObjectResult<dtRentalContractBasicForView> GetRentalContractBasicForView(string strContractCode, string strUserCode, string c_RENTAL_CHANGE_TYPE)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strUserCodeParameter;
    
            if (strUserCode != null)
            {
                strUserCodeParameter = new ObjectParameter("strUserCode", strUserCode);
            }
            else
            {
                strUserCodeParameter = new ObjectParameter("strUserCode", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPEParameter;
    
            if (c_RENTAL_CHANGE_TYPE != null)
            {
                c_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE", c_RENTAL_CHANGE_TYPE);
            }
            else
            {
                c_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtRentalContractBasicForView>("GetRentalContractBasicForView", strContractCodeParameter, strUserCodeParameter, c_RENTAL_CHANGE_TYPEParameter);
        }
        public ObjectResult<dtSaleContractBasicForView> GetSaleContractBasicForView(string strContractCode, string c_SALE_PROC_MANAGE_STATUS, string c_SALE_TYPE, string c_SALE_CHANGE_TYPE, Nullable<bool> fLAG_ON, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_SALE_PROC_MANAGE_STATUSParameter;
    
            if (c_SALE_PROC_MANAGE_STATUS != null)
            {
                c_SALE_PROC_MANAGE_STATUSParameter = new ObjectParameter("C_SALE_PROC_MANAGE_STATUS", c_SALE_PROC_MANAGE_STATUS);
            }
            else
            {
                c_SALE_PROC_MANAGE_STATUSParameter = new ObjectParameter("C_SALE_PROC_MANAGE_STATUS", typeof(string));
            }
    
            ObjectParameter c_SALE_TYPEParameter;
    
            if (c_SALE_TYPE != null)
            {
                c_SALE_TYPEParameter = new ObjectParameter("C_SALE_TYPE", c_SALE_TYPE);
            }
            else
            {
                c_SALE_TYPEParameter = new ObjectParameter("C_SALE_TYPE", typeof(string));
            }
    
            ObjectParameter c_SALE_CHANGE_TYPEParameter;
    
            if (c_SALE_CHANGE_TYPE != null)
            {
                c_SALE_CHANGE_TYPEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE", c_SALE_CHANGE_TYPE);
            }
            else
            {
                c_SALE_CHANGE_TYPEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE", typeof(string));
            }
    
            ObjectParameter fLAG_ONParameter;
    
            if (fLAG_ON.HasValue)
            {
                fLAG_ONParameter = new ObjectParameter("FLAG_ON", fLAG_ON);
            }
            else
            {
                fLAG_ONParameter = new ObjectParameter("FLAG_ON", typeof(bool));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<dtSaleContractBasicForView>("GetSaleContractBasicForView", strContractCodeParameter, c_SALE_PROC_MANAGE_STATUSParameter, c_SALE_TYPEParameter, c_SALE_CHANGE_TYPEParameter, fLAG_ONParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<dtChangedCustHistList> GetChangedCustHistList(string pchvContractCode, string pchrOCC, string pchrCSCustCode, string pchrRCCustCode, string pchrSiteCode, string pchvC_CONTRACT_SIGNER_TYPE, string pchvC_CHANGE_NAME_REASON_TYPE)
        {
    
            ObjectParameter pchvContractCodeParameter;
    
            if (pchvContractCode != null)
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", pchvContractCode);
            }
            else
            {
                pchvContractCodeParameter = new ObjectParameter("pchvContractCode", typeof(string));
            }
    
            ObjectParameter pchrOCCParameter;
    
            if (pchrOCC != null)
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", pchrOCC);
            }
            else
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", typeof(string));
            }
    
            ObjectParameter pchrCSCustCodeParameter;
    
            if (pchrCSCustCode != null)
            {
                pchrCSCustCodeParameter = new ObjectParameter("pchrCSCustCode", pchrCSCustCode);
            }
            else
            {
                pchrCSCustCodeParameter = new ObjectParameter("pchrCSCustCode", typeof(string));
            }
    
            ObjectParameter pchrRCCustCodeParameter;
    
            if (pchrRCCustCode != null)
            {
                pchrRCCustCodeParameter = new ObjectParameter("pchrRCCustCode", pchrRCCustCode);
            }
            else
            {
                pchrRCCustCodeParameter = new ObjectParameter("pchrRCCustCode", typeof(string));
            }
    
            ObjectParameter pchrSiteCodeParameter;
    
            if (pchrSiteCode != null)
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", pchrSiteCode);
            }
            else
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", typeof(string));
            }
    
            ObjectParameter pchvC_CONTRACT_SIGNER_TYPEParameter;
    
            if (pchvC_CONTRACT_SIGNER_TYPE != null)
            {
                pchvC_CONTRACT_SIGNER_TYPEParameter = new ObjectParameter("pchvC_CONTRACT_SIGNER_TYPE", pchvC_CONTRACT_SIGNER_TYPE);
            }
            else
            {
                pchvC_CONTRACT_SIGNER_TYPEParameter = new ObjectParameter("pchvC_CONTRACT_SIGNER_TYPE", typeof(string));
            }
    
            ObjectParameter pchvC_CHANGE_NAME_REASON_TYPEParameter;
    
            if (pchvC_CHANGE_NAME_REASON_TYPE != null)
            {
                pchvC_CHANGE_NAME_REASON_TYPEParameter = new ObjectParameter("pchvC_CHANGE_NAME_REASON_TYPE", pchvC_CHANGE_NAME_REASON_TYPE);
            }
            else
            {
                pchvC_CHANGE_NAME_REASON_TYPEParameter = new ObjectParameter("pchvC_CHANGE_NAME_REASON_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtChangedCustHistList>("GetChangedCustHistList", pchvContractCodeParameter, pchrOCCParameter, pchrCSCustCodeParameter, pchrRCCustCodeParameter, pchrSiteCodeParameter, pchvC_CONTRACT_SIGNER_TYPEParameter, pchvC_CHANGE_NAME_REASON_TYPEParameter);
        }
        public ObjectResult<CheckCancelContractBeforeStartService_Result> CheckCancelContractBeforeStartService(string strContractCode, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<CheckCancelContractBeforeStartService_Result>("CheckCancelContractBeforeStartService", strContractCodeParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<RPTCoverLetterDo> GetRptCoverLetterData(Nullable<int> iDocID, string cPaymentMethod)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter cPaymentMethodParameter;
    
            if (cPaymentMethod != null)
            {
                cPaymentMethodParameter = new ObjectParameter("cPaymentMethod", cPaymentMethod);
            }
            else
            {
                cPaymentMethodParameter = new ObjectParameter("cPaymentMethod", typeof(string));
            }
            return base.ExecuteFunction<RPTCoverLetterDo>("GetRptCoverLetterData", iDocIDParameter, cPaymentMethodParameter);
        }
        public ObjectResult<RPTInstrumentDetailDo> GetRptInstrumentDetailData(Nullable<int> iDocID)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
            return base.ExecuteFunction<RPTInstrumentDetailDo>("GetRptInstrumentDetailData", iDocIDParameter);
        }
        public ObjectResult<tbt_ContractEmail> GetContractEmailByContractCodeOCC(string contractCode, string oCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("GetContractEmailByContractCodeOCC", contractCodeParameter, oCCParameter);
        }
        public ObjectResult<tbt_ContractEmail> GetTbt_ContractEmailByContractCodeOCC(string contractCode, string oCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractEmail>("GetTbt_ContractEmailByContractCodeOCC", contractCodeParameter, oCCParameter);
        }
        public ObjectResult<dtTbs_IncidentTypePattern> GetTbs_IncidentTypePattern(string strIncidentType)
        {
    
            ObjectParameter strIncidentTypeParameter;
    
            if (strIncidentType != null)
            {
                strIncidentTypeParameter = new ObjectParameter("strIncidentType", strIncidentType);
            }
            else
            {
                strIncidentTypeParameter = new ObjectParameter("strIncidentType", typeof(string));
            }
            return base.ExecuteFunction<dtTbs_IncidentTypePattern>("GetTbs_IncidentTypePattern", strIncidentTypeParameter);
        }
        public ObjectResult<tbt_Incident> InsertTbt_Incident(string xml_Incident)
        {
    
            ObjectParameter xml_IncidentParameter;
    
            if (xml_Incident != null)
            {
                xml_IncidentParameter = new ObjectParameter("xml_Incident", xml_Incident);
            }
            else
            {
                xml_IncidentParameter = new ObjectParameter("xml_Incident", typeof(string));
            }
            return base.ExecuteFunction<tbt_Incident>("InsertTbt_Incident", xml_IncidentParameter);
        }
        public ObjectResult<dtContractOfAllSite> GetReleatedContractOfCustIncident(string strSiteCodeList, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter strSiteCodeListParameter;
    
            if (strSiteCodeList != null)
            {
                strSiteCodeListParameter = new ObjectParameter("strSiteCodeList", strSiteCodeList);
            }
            else
            {
                strSiteCodeListParameter = new ObjectParameter("strSiteCodeList", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtContractOfAllSite>("GetReleatedContractOfCustIncident", strSiteCodeListParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<dtContractDoc> GetContractDocDataList(string strContractCode, string strQuotationTargetCode, string strOccAlphabet, string strOfficeCode, Nullable<int> cModuleIdContract, string cARStatus, Nullable<bool> cFlagOn)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strQuotationTargetCodeParameter;
    
            if (strQuotationTargetCode != null)
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", strQuotationTargetCode);
            }
            else
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter strOccAlphabetParameter;
    
            if (strOccAlphabet != null)
            {
                strOccAlphabetParameter = new ObjectParameter("strOccAlphabet", strOccAlphabet);
            }
            else
            {
                strOccAlphabetParameter = new ObjectParameter("strOccAlphabet", typeof(string));
            }
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter cModuleIdContractParameter;
    
            if (cModuleIdContract.HasValue)
            {
                cModuleIdContractParameter = new ObjectParameter("cModuleIdContract", cModuleIdContract);
            }
            else
            {
                cModuleIdContractParameter = new ObjectParameter("cModuleIdContract", typeof(int));
            }
    
            ObjectParameter cARStatusParameter;
    
            if (cARStatus != null)
            {
                cARStatusParameter = new ObjectParameter("cARStatus", cARStatus);
            }
            else
            {
                cARStatusParameter = new ObjectParameter("cARStatus", typeof(string));
            }
    
            ObjectParameter cFlagOnParameter;
    
            if (cFlagOn.HasValue)
            {
                cFlagOnParameter = new ObjectParameter("cFlagOn", cFlagOn);
            }
            else
            {
                cFlagOnParameter = new ObjectParameter("cFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<dtContractDoc>("GetContractDocDataList", strContractCodeParameter, strQuotationTargetCodeParameter, strOccAlphabetParameter, strOfficeCodeParameter, cModuleIdContractParameter, cARStatusParameter, cFlagOnParameter);
        }
        public ObjectResult<tbt_IncidentRole> InsertTbt_IncidentRole(string xml_IncidentRole)
        {
    
            ObjectParameter xml_IncidentRoleParameter;
    
            if (xml_IncidentRole != null)
            {
                xml_IncidentRoleParameter = new ObjectParameter("xml_IncidentRole", xml_IncidentRole);
            }
            else
            {
                xml_IncidentRoleParameter = new ObjectParameter("xml_IncidentRole", typeof(string));
            }
            return base.ExecuteFunction<tbt_IncidentRole>("InsertTbt_IncidentRole", xml_IncidentRoleParameter);
        }
        public ObjectResult<dtIncidentRole> GetIncidentRoleData(Nullable<int> incidentID, string c_INCIDENT_ROLE_TYPE, string c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICE)
        {
    
            ObjectParameter incidentIDParameter;
    
            if (incidentID.HasValue)
            {
                incidentIDParameter = new ObjectParameter("incidentID", incidentID);
            }
            else
            {
                incidentIDParameter = new ObjectParameter("incidentID", typeof(int));
            }
    
            ObjectParameter c_INCIDENT_ROLE_TYPEParameter;
    
            if (c_INCIDENT_ROLE_TYPE != null)
            {
                c_INCIDENT_ROLE_TYPEParameter = new ObjectParameter("C_INCIDENT_ROLE_TYPE", c_INCIDENT_ROLE_TYPE);
            }
            else
            {
                c_INCIDENT_ROLE_TYPEParameter = new ObjectParameter("C_INCIDENT_ROLE_TYPE", typeof(string));
            }
    
            ObjectParameter c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICEParameter;
    
            if (c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICE != null)
            {
                c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICEParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICE", c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICE);
            }
            else
            {
                c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICEParameter = new ObjectParameter("C_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICE", typeof(string));
            }
            return base.ExecuteFunction<dtIncidentRole>("GetIncidentRoleData", incidentIDParameter, c_INCIDENT_ROLE_TYPEParameter, c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICEParameter);
        }
        public ObjectResult<dtIncidentHistory> GetIncidentHistoryData(Nullable<int> incidentID, string c_INCIDENT_INTERACTION_TYPE)
        {
    
            ObjectParameter incidentIDParameter;
    
            if (incidentID.HasValue)
            {
                incidentIDParameter = new ObjectParameter("incidentID", incidentID);
            }
            else
            {
                incidentIDParameter = new ObjectParameter("incidentID", typeof(int));
            }
    
            ObjectParameter c_INCIDENT_INTERACTION_TYPEParameter;
    
            if (c_INCIDENT_INTERACTION_TYPE != null)
            {
                c_INCIDENT_INTERACTION_TYPEParameter = new ObjectParameter("C_INCIDENT_INTERACTION_TYPE", c_INCIDENT_INTERACTION_TYPE);
            }
            else
            {
                c_INCIDENT_INTERACTION_TYPEParameter = new ObjectParameter("C_INCIDENT_INTERACTION_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtIncidentHistory>("GetIncidentHistoryData", incidentIDParameter, c_INCIDENT_INTERACTION_TYPEParameter);
        }
        public ObjectResult<tbt_IncidentHistoryDetail> GetTbt_IncidentHistoryDetail(Nullable<int> strIncidentHistoryID)
        {
    
            ObjectParameter strIncidentHistoryIDParameter;
    
            if (strIncidentHistoryID.HasValue)
            {
                strIncidentHistoryIDParameter = new ObjectParameter("strIncidentHistoryID", strIncidentHistoryID);
            }
            else
            {
                strIncidentHistoryIDParameter = new ObjectParameter("strIncidentHistoryID", typeof(int));
            }
            return base.ExecuteFunction<tbt_IncidentHistoryDetail>("GetTbt_IncidentHistoryDetail", strIncidentHistoryIDParameter);
        }
        public ObjectResult<tbt_ContractDocument> UpdateDocumentStatus(string strDocStatus, Nullable<int> iDocID, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter strDocStatusParameter;
    
            if (strDocStatus != null)
            {
                strDocStatusParameter = new ObjectParameter("strDocStatus", strDocStatus);
            }
            else
            {
                strDocStatusParameter = new ObjectParameter("strDocStatus", typeof(string));
            }
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractDocument>("UpdateDocumentStatus", strDocStatusParameter, iDocIDParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<dtContractDocumentList> SearchContractDocument(string strDocStatus, string strContractCode, string strQuotationTargetCode, string strProjectCode, string strOcc, string strAlphabet, string strContractOfficeCode, string strOperationOfficeCode, string strContractOfficeCodeAuthority, string strOperationOfficeCodeAuthority, string strNegotiationStaffEmpNo, string strNegotiationStaffEmpName, string strDocumentCode, string cDocStatus, string cDocAuditResult, Nullable<bool> cFlagOn)
        {
    
            ObjectParameter strDocStatusParameter;
    
            if (strDocStatus != null)
            {
                strDocStatusParameter = new ObjectParameter("strDocStatus", strDocStatus);
            }
            else
            {
                strDocStatusParameter = new ObjectParameter("strDocStatus", typeof(string));
            }
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strQuotationTargetCodeParameter;
    
            if (strQuotationTargetCode != null)
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", strQuotationTargetCode);
            }
            else
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter strOccParameter;
    
            if (strOcc != null)
            {
                strOccParameter = new ObjectParameter("strOcc", strOcc);
            }
            else
            {
                strOccParameter = new ObjectParameter("strOcc", typeof(string));
            }
    
            ObjectParameter strAlphabetParameter;
    
            if (strAlphabet != null)
            {
                strAlphabetParameter = new ObjectParameter("strAlphabet", strAlphabet);
            }
            else
            {
                strAlphabetParameter = new ObjectParameter("strAlphabet", typeof(string));
            }
    
            ObjectParameter strContractOfficeCodeParameter;
    
            if (strContractOfficeCode != null)
            {
                strContractOfficeCodeParameter = new ObjectParameter("strContractOfficeCode", strContractOfficeCode);
            }
            else
            {
                strContractOfficeCodeParameter = new ObjectParameter("strContractOfficeCode", typeof(string));
            }
    
            ObjectParameter strOperationOfficeCodeParameter;
    
            if (strOperationOfficeCode != null)
            {
                strOperationOfficeCodeParameter = new ObjectParameter("strOperationOfficeCode", strOperationOfficeCode);
            }
            else
            {
                strOperationOfficeCodeParameter = new ObjectParameter("strOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter strContractOfficeCodeAuthorityParameter;
    
            if (strContractOfficeCodeAuthority != null)
            {
                strContractOfficeCodeAuthorityParameter = new ObjectParameter("strContractOfficeCodeAuthority", strContractOfficeCodeAuthority);
            }
            else
            {
                strContractOfficeCodeAuthorityParameter = new ObjectParameter("strContractOfficeCodeAuthority", typeof(string));
            }
    
            ObjectParameter strOperationOfficeCodeAuthorityParameter;
    
            if (strOperationOfficeCodeAuthority != null)
            {
                strOperationOfficeCodeAuthorityParameter = new ObjectParameter("strOperationOfficeCodeAuthority", strOperationOfficeCodeAuthority);
            }
            else
            {
                strOperationOfficeCodeAuthorityParameter = new ObjectParameter("strOperationOfficeCodeAuthority", typeof(string));
            }
    
            ObjectParameter strNegotiationStaffEmpNoParameter;
    
            if (strNegotiationStaffEmpNo != null)
            {
                strNegotiationStaffEmpNoParameter = new ObjectParameter("strNegotiationStaffEmpNo", strNegotiationStaffEmpNo);
            }
            else
            {
                strNegotiationStaffEmpNoParameter = new ObjectParameter("strNegotiationStaffEmpNo", typeof(string));
            }
    
            ObjectParameter strNegotiationStaffEmpNameParameter;
    
            if (strNegotiationStaffEmpName != null)
            {
                strNegotiationStaffEmpNameParameter = new ObjectParameter("strNegotiationStaffEmpName", strNegotiationStaffEmpName);
            }
            else
            {
                strNegotiationStaffEmpNameParameter = new ObjectParameter("strNegotiationStaffEmpName", typeof(string));
            }
    
            ObjectParameter strDocumentCodeParameter;
    
            if (strDocumentCode != null)
            {
                strDocumentCodeParameter = new ObjectParameter("strDocumentCode", strDocumentCode);
            }
            else
            {
                strDocumentCodeParameter = new ObjectParameter("strDocumentCode", typeof(string));
            }
    
            ObjectParameter cDocStatusParameter;
    
            if (cDocStatus != null)
            {
                cDocStatusParameter = new ObjectParameter("cDocStatus", cDocStatus);
            }
            else
            {
                cDocStatusParameter = new ObjectParameter("cDocStatus", typeof(string));
            }
    
            ObjectParameter cDocAuditResultParameter;
    
            if (cDocAuditResult != null)
            {
                cDocAuditResultParameter = new ObjectParameter("cDocAuditResult", cDocAuditResult);
            }
            else
            {
                cDocAuditResultParameter = new ObjectParameter("cDocAuditResult", typeof(string));
            }
    
            ObjectParameter cFlagOnParameter;
    
            if (cFlagOn.HasValue)
            {
                cFlagOnParameter = new ObjectParameter("cFlagOn", cFlagOn);
            }
            else
            {
                cFlagOnParameter = new ObjectParameter("cFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<dtContractDocumentList>("SearchContractDocument", strDocStatusParameter, strContractCodeParameter, strQuotationTargetCodeParameter, strProjectCodeParameter, strOccParameter, strAlphabetParameter, strContractOfficeCodeParameter, strOperationOfficeCodeParameter, strContractOfficeCodeAuthorityParameter, strOperationOfficeCodeAuthorityParameter, strNegotiationStaffEmpNoParameter, strNegotiationStaffEmpNameParameter, strDocumentCodeParameter, cDocStatusParameter, cDocAuditResultParameter, cFlagOnParameter);
        }
        public ObjectResult<tbt_IncidentRole> DeleteTbt_IncidentRole(Nullable<int> pIncidentRoleID)
        {
    
            ObjectParameter pIncidentRoleIDParameter;
    
            if (pIncidentRoleID.HasValue)
            {
                pIncidentRoleIDParameter = new ObjectParameter("pIncidentRoleID", pIncidentRoleID);
            }
            else
            {
                pIncidentRoleIDParameter = new ObjectParameter("pIncidentRoleID", typeof(int));
            }
            return base.ExecuteFunction<tbt_IncidentRole>("DeleteTbt_IncidentRole", pIncidentRoleIDParameter);
        }
        public ObjectResult<tbt_IncidentHistory> InsertTbt_IncidentHistory(string xml_IncidentHistory)
        {
    
            ObjectParameter xml_IncidentHistoryParameter;
    
            if (xml_IncidentHistory != null)
            {
                xml_IncidentHistoryParameter = new ObjectParameter("xml_IncidentHistory", xml_IncidentHistory);
            }
            else
            {
                xml_IncidentHistoryParameter = new ObjectParameter("xml_IncidentHistory", typeof(string));
            }
            return base.ExecuteFunction<tbt_IncidentHistory>("InsertTbt_IncidentHistory", xml_IncidentHistoryParameter);
        }
        public ObjectResult<tbt_IncidentHistoryDetail> InsertTbt_IncidentHistoryDetail(string xml_IncidentHistoryDetail)
        {
    
            ObjectParameter xml_IncidentHistoryDetailParameter;
    
            if (xml_IncidentHistoryDetail != null)
            {
                xml_IncidentHistoryDetailParameter = new ObjectParameter("xml_IncidentHistoryDetail", xml_IncidentHistoryDetail);
            }
            else
            {
                xml_IncidentHistoryDetailParameter = new ObjectParameter("xml_IncidentHistoryDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_IncidentHistoryDetail>("InsertTbt_IncidentHistoryDetail", xml_IncidentHistoryDetailParameter);
        }
        public ObjectResult<tbt_Incident> UpdateTbt_Incident(string xmlIncident)
        {
    
            ObjectParameter xmlIncidentParameter;
    
            if (xmlIncident != null)
            {
                xmlIncidentParameter = new ObjectParameter("xmlIncident", xmlIncident);
            }
            else
            {
                xmlIncidentParameter = new ObjectParameter("xmlIncident", typeof(string));
            }
            return base.ExecuteFunction<tbt_Incident>("UpdateTbt_Incident", xmlIncidentParameter);
        }
        public ObjectResult<RPTMACheckupSlipDo> GetMaintenanceCheckupSlipReport(string paramContractCode, string paramProductCode, Nullable<System.DateTime> paramInstructionDate, string paramContractStatusAfterStart)
        {
    
            ObjectParameter paramContractCodeParameter;
    
            if (paramContractCode != null)
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", paramContractCode);
            }
            else
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", typeof(string));
            }
    
            ObjectParameter paramProductCodeParameter;
    
            if (paramProductCode != null)
            {
                paramProductCodeParameter = new ObjectParameter("paramProductCode", paramProductCode);
            }
            else
            {
                paramProductCodeParameter = new ObjectParameter("paramProductCode", typeof(string));
            }
    
            ObjectParameter paramInstructionDateParameter;
    
            if (paramInstructionDate.HasValue)
            {
                paramInstructionDateParameter = new ObjectParameter("paramInstructionDate", paramInstructionDate);
            }
            else
            {
                paramInstructionDateParameter = new ObjectParameter("paramInstructionDate", typeof(System.DateTime));
            }
    
            ObjectParameter paramContractStatusAfterStartParameter;
    
            if (paramContractStatusAfterStart != null)
            {
                paramContractStatusAfterStartParameter = new ObjectParameter("paramContractStatusAfterStart", paramContractStatusAfterStart);
            }
            else
            {
                paramContractStatusAfterStartParameter = new ObjectParameter("paramContractStatusAfterStart", typeof(string));
            }
            return base.ExecuteFunction<RPTMACheckupSlipDo>("GetMaintenanceCheckupSlipReport", paramContractCodeParameter, paramProductCodeParameter, paramInstructionDateParameter, paramContractStatusAfterStartParameter);
        }
        public ObjectResult<tbt_IncidentRole> UpdateTbt_IncidentRole(string xml_doTbtIncidentRole)
        {
    
            ObjectParameter xml_doTbtIncidentRoleParameter;
    
            if (xml_doTbtIncidentRole != null)
            {
                xml_doTbtIncidentRoleParameter = new ObjectParameter("xml_doTbtIncidentRole", xml_doTbtIncidentRole);
            }
            else
            {
                xml_doTbtIncidentRoleParameter = new ObjectParameter("xml_doTbtIncidentRole", typeof(string));
            }
            return base.ExecuteFunction<tbt_IncidentRole>("UpdateTbt_IncidentRole", xml_doTbtIncidentRoleParameter);
        }
        public ObjectResult<tbt_Incident> GetTbt_Incident(Nullable<int> pIncidentID)
        {
    
            ObjectParameter pIncidentIDParameter;
    
            if (pIncidentID.HasValue)
            {
                pIncidentIDParameter = new ObjectParameter("pIncidentID", pIncidentID);
            }
            else
            {
                pIncidentIDParameter = new ObjectParameter("pIncidentID", typeof(int));
            }
            return base.ExecuteFunction<tbt_Incident>("GetTbt_Incident", pIncidentIDParameter);
        }
        public ObjectResult<RPTInstrumentCheckupDo> GetInstrument(string contractCode, string occ)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("contractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("contractCode", typeof(string));
            }
    
            ObjectParameter occParameter;
    
            if (occ != null)
            {
                occParameter = new ObjectParameter("occ", occ);
            }
            else
            {
                occParameter = new ObjectParameter("occ", typeof(string));
            }
            return base.ExecuteFunction<RPTInstrumentCheckupDo>("GetInstrument", contractCodeParameter, occParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetLastMaintenanceDate(string contractCode, string productCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("contractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("contractCode", typeof(string));
            }
    
            ObjectParameter productCodeParameter;
    
            if (productCode != null)
            {
                productCodeParameter = new ObjectParameter("productCode", productCode);
            }
            else
            {
                productCodeParameter = new ObjectParameter("productCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetLastMaintenanceDate", contractCodeParameter, productCodeParameter);
        }
        public ObjectResult<tbt_DocChangeFeeMemo> GetTbt_DocChangeFeeMemo(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_DocChangeFeeMemo>("GetTbt_DocChangeFeeMemo", pDocIDParameter);
        }
        public ObjectResult<tbt_DocChangeMemo> GetTbt_DocChangeMemo(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_DocChangeMemo>("GetTbt_DocChangeMemo", pDocIDParameter);
        }
        public ObjectResult<tbt_DocChangeNotice> GetTbt_DocChangeNotice(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_DocChangeNotice>("GetTbt_DocChangeNotice", pDocIDParameter);
        }
        public ObjectResult<tbt_DocConfirmCurrentInstrumentMemo> GetTbt_DocConfirmCurrentInstrumentMemo(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_DocConfirmCurrentInstrumentMemo>("GetTbt_DocConfirmCurrentInstrumentMemo", pDocIDParameter);
        }
        public ObjectResult<tbt_DocContractReport> GetTbt_DocContractReport(Nullable<int> pDocID)
        {
    
            ObjectParameter pDocIDParameter;
    
            if (pDocID.HasValue)
            {
                pDocIDParameter = new ObjectParameter("pDocID", pDocID);
            }
            else
            {
                pDocIDParameter = new ObjectParameter("pDocID", typeof(int));
            }
            return base.ExecuteFunction<tbt_DocContractReport>("GetTbt_DocContractReport", pDocIDParameter);
        }
        public ObjectResult<dtGetMaintenanceCheckupList> GetMaintenanceCheckupList(string xml_MaintenanceCheckup)
        {
    
            ObjectParameter xml_MaintenanceCheckupParameter;
    
            if (xml_MaintenanceCheckup != null)
            {
                xml_MaintenanceCheckupParameter = new ObjectParameter("xml_MaintenanceCheckup", xml_MaintenanceCheckup);
            }
            else
            {
                xml_MaintenanceCheckupParameter = new ObjectParameter("xml_MaintenanceCheckup", typeof(string));
            }
            return base.ExecuteFunction<dtGetMaintenanceCheckupList>("GetMaintenanceCheckupList", xml_MaintenanceCheckupParameter);
        }
        public ObjectResult<dtInstrumentAdditionalInstalled> GetInstrumentAdditionalInstalled(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<dtInstrumentAdditionalInstalled>("GetInstrumentAdditionalInstalled", strContractCodeParameter);
        }
        public ObjectResult<dtInstrumentInstalledBefore> GetInstrumentInstalledBefore(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<dtInstrumentInstalledBefore>("GetInstrumentInstalledBefore", strContractCodeParameter);
        }
        public ObjectResult<CheckCP12_Result> CheckCP12(string strContractCode, string strLastImplementOCC, string c_RENTAL_CHANGE_TYPE_PLAN_CHANGE, string c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strLastImplementOCCParameter;
    
            if (strLastImplementOCC != null)
            {
                strLastImplementOCCParameter = new ObjectParameter("strLastImplementOCC", strLastImplementOCC);
            }
            else
            {
                strLastImplementOCCParameter = new ObjectParameter("strLastImplementOCC", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPE_PLAN_CHANGEParameter;
    
            if (c_RENTAL_CHANGE_TYPE_PLAN_CHANGE != null)
            {
                c_RENTAL_CHANGE_TYPE_PLAN_CHANGEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_PLAN_CHANGE", c_RENTAL_CHANGE_TYPE_PLAN_CHANGE);
            }
            else
            {
                c_RENTAL_CHANGE_TYPE_PLAN_CHANGEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_PLAN_CHANGE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter;
    
            if (c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP != null)
            {
                c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP", c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP);
            }
            else
            {
                c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP", typeof(string));
            }
            return base.ExecuteFunction<CheckCP12_Result>("CheckCP12", strContractCodeParameter, strLastImplementOCCParameter, c_RENTAL_CHANGE_TYPE_PLAN_CHANGEParameter, c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter);
        }
        public ObjectResult<CheckCanReplaceInstallSlip_Result> CheckCanReplaceInstallSlip(string strContractCode, string c_SALE_CHANGE_TYPE_NEW_SALE, string c_SALE_CHANGE_TYPE_ADD_SALE)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_SALE_CHANGE_TYPE_NEW_SALEParameter;
    
            if (c_SALE_CHANGE_TYPE_NEW_SALE != null)
            {
                c_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", c_SALE_CHANGE_TYPE_NEW_SALE);
            }
            else
            {
                c_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_SALE_CHANGE_TYPE_ADD_SALEParameter;
    
            if (c_SALE_CHANGE_TYPE_ADD_SALE != null)
            {
                c_SALE_CHANGE_TYPE_ADD_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_ADD_SALE", c_SALE_CHANGE_TYPE_ADD_SALE);
            }
            else
            {
                c_SALE_CHANGE_TYPE_ADD_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_ADD_SALE", typeof(string));
            }
            return base.ExecuteFunction<CheckCanReplaceInstallSlip_Result>("CheckCanReplaceInstallSlip", strContractCodeParameter, c_SALE_CHANGE_TYPE_NEW_SALEParameter, c_SALE_CHANGE_TYPE_ADD_SALEParameter);
        }
        public ObjectResult<tbs_ARTypeTitle> GetTbs_ARTypeTitle(string strARType, string strARTitleType)
        {
    
            ObjectParameter strARTypeParameter;
    
            if (strARType != null)
            {
                strARTypeParameter = new ObjectParameter("strARType", strARType);
            }
            else
            {
                strARTypeParameter = new ObjectParameter("strARType", typeof(string));
            }
    
            ObjectParameter strARTitleTypeParameter;
    
            if (strARTitleType != null)
            {
                strARTitleTypeParameter = new ObjectParameter("strARTitleType", strARTitleType);
            }
            else
            {
                strARTitleTypeParameter = new ObjectParameter("strARTitleType", typeof(string));
            }
            return base.ExecuteFunction<tbs_ARTypeTitle>("GetTbs_ARTypeTitle", strARTypeParameter, strARTitleTypeParameter);
        }
        public ObjectResult<tbs_ARTypePattern> GetTbs_ARTypePattern(string strARType, string strARTitleType)
        {
    
            ObjectParameter strARTypeParameter;
    
            if (strARType != null)
            {
                strARTypeParameter = new ObjectParameter("strARType", strARType);
            }
            else
            {
                strARTypeParameter = new ObjectParameter("strARType", typeof(string));
            }
    
            ObjectParameter strARTitleTypeParameter;
    
            if (strARTitleType != null)
            {
                strARTitleTypeParameter = new ObjectParameter("strARTitleType", strARTitleType);
            }
            else
            {
                strARTitleTypeParameter = new ObjectParameter("strARTitleType", typeof(string));
            }
            return base.ExecuteFunction<tbs_ARTypePattern>("GetTbs_ARTypePattern", strARTypeParameter, strARTitleTypeParameter);
        }
        public ObjectResult<dtRelatedOfficeChief> GetReleatedContractOfCustAR(string requestNo, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter requestNoParameter;
    
            if (requestNo != null)
            {
                requestNoParameter = new ObjectParameter("RequestNo", requestNo);
            }
            else
            {
                requestNoParameter = new ObjectParameter("RequestNo", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtRelatedOfficeChief>("GetReleatedContractOfCustAR", requestNoParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<tbt_AR> InsertTbt_AR(string xml_AR)
        {
    
            ObjectParameter xml_ARParameter;
    
            if (xml_AR != null)
            {
                xml_ARParameter = new ObjectParameter("xml_AR", xml_AR);
            }
            else
            {
                xml_ARParameter = new ObjectParameter("xml_AR", typeof(string));
            }
            return base.ExecuteFunction<tbt_AR>("InsertTbt_AR", xml_ARParameter);
        }
        public ObjectResult<tbt_ARFeeAdjustment> InsertTbt_ARFeeAdjustment(string xml_ARFeeAdjustment)
        {
    
            ObjectParameter xml_ARFeeAdjustmentParameter;
    
            if (xml_ARFeeAdjustment != null)
            {
                xml_ARFeeAdjustmentParameter = new ObjectParameter("xml_ARFeeAdjustment", xml_ARFeeAdjustment);
            }
            else
            {
                xml_ARFeeAdjustmentParameter = new ObjectParameter("xml_ARFeeAdjustment", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARFeeAdjustment>("InsertTbt_ARFeeAdjustment", xml_ARFeeAdjustmentParameter);
        }
        public ObjectResult<tbt_ARRole> InsertTbt_ARRole(string xml_ARRole)
        {
    
            ObjectParameter xml_ARRoleParameter;
    
            if (xml_ARRole != null)
            {
                xml_ARRoleParameter = new ObjectParameter("xml_ARRole", xml_ARRole);
            }
            else
            {
                xml_ARRoleParameter = new ObjectParameter("xml_ARRole", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARRole>("InsertTbt_ARRole", xml_ARRoleParameter);
        }
        public ObjectResult<tbt_ARRole> GetTbt_ARRole(string pRequestNo)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARRole>("GetTbt_ARRole", pRequestNoParameter);
        }
        public ObjectResult<dtAR> GetARData(string pRequestNo, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_CUSTOMER, string c_AR_RELEVANT_TYPE_SITE, string c_AR_RELEVANT_TYPE_PROJECT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_AR_TYPE, string c_AR_STATUS, string c_CUST_PART_TYPE_REAL_CUST)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_AR_RELEVANT_TYPE_CONTRACT != null)
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", c_AR_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CUSTOMERParameter;
    
            if (c_AR_RELEVANT_TYPE_CUSTOMER != null)
            {
                c_AR_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CUSTOMER", c_AR_RELEVANT_TYPE_CUSTOMER);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CUSTOMERParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_SITEParameter;
    
            if (c_AR_RELEVANT_TYPE_SITE != null)
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", c_AR_RELEVANT_TYPE_SITE);
            }
            else
            {
                c_AR_RELEVANT_TYPE_SITEParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_SITE", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_PROJECTParameter;
    
            if (c_AR_RELEVANT_TYPE_PROJECT != null)
            {
                c_AR_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_PROJECT", c_AR_RELEVANT_TYPE_PROJECT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_PROJECTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_QUOTATIONParameter;
    
            if (c_AR_RELEVANT_TYPE_QUOTATION != null)
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", c_AR_RELEVANT_TYPE_QUOTATION);
            }
            else
            {
                c_AR_RELEVANT_TYPE_QUOTATIONParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_QUOTATION", typeof(string));
            }
    
            ObjectParameter c_AR_TYPEParameter;
    
            if (c_AR_TYPE != null)
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", c_AR_TYPE);
            }
            else
            {
                c_AR_TYPEParameter = new ObjectParameter("C_AR_TYPE", typeof(string));
            }
    
            ObjectParameter c_AR_STATUSParameter;
    
            if (c_AR_STATUS != null)
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", c_AR_STATUS);
            }
            else
            {
                c_AR_STATUSParameter = new ObjectParameter("C_AR_STATUS", typeof(string));
            }
    
            ObjectParameter c_CUST_PART_TYPE_REAL_CUSTParameter;
    
            if (c_CUST_PART_TYPE_REAL_CUST != null)
            {
                c_CUST_PART_TYPE_REAL_CUSTParameter = new ObjectParameter("C_CUST_PART_TYPE_REAL_CUST", c_CUST_PART_TYPE_REAL_CUST);
            }
            else
            {
                c_CUST_PART_TYPE_REAL_CUSTParameter = new ObjectParameter("C_CUST_PART_TYPE_REAL_CUST", typeof(string));
            }
            return base.ExecuteFunction<dtAR>("GetARData", pRequestNoParameter, c_AR_RELEVANT_TYPE_CONTRACTParameter, c_AR_RELEVANT_TYPE_CUSTOMERParameter, c_AR_RELEVANT_TYPE_SITEParameter, c_AR_RELEVANT_TYPE_PROJECTParameter, c_AR_RELEVANT_TYPE_QUOTATIONParameter, c_AR_TYPEParameter, c_AR_STATUSParameter, c_CUST_PART_TYPE_REAL_CUSTParameter);
        }
        public ObjectResult<dtARDepartmentChief> GetARDepartmentChief(string pRequestNo, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtARDepartmentChief>("GetARDepartmentChief", pRequestNoParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<dtAROfficeChief> GetAROfficeChief(string pRequestNo, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtAROfficeChief>("GetAROfficeChief", pRequestNoParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<dtARRole> GetARRoleData(string pRequestNo, string c_AR_ROLE_TYPE, string c_AR_ROLE_CHIEF_OF_RELATED_OFFICE)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_TYPEParameter;
    
            if (c_AR_ROLE_TYPE != null)
            {
                c_AR_ROLE_TYPEParameter = new ObjectParameter("C_AR_ROLE_TYPE", c_AR_ROLE_TYPE);
            }
            else
            {
                c_AR_ROLE_TYPEParameter = new ObjectParameter("C_AR_ROLE_TYPE", typeof(string));
            }
    
            ObjectParameter c_AR_ROLE_CHIEF_OF_RELATED_OFFICEParameter;
    
            if (c_AR_ROLE_CHIEF_OF_RELATED_OFFICE != null)
            {
                c_AR_ROLE_CHIEF_OF_RELATED_OFFICEParameter = new ObjectParameter("C_AR_ROLE_CHIEF_OF_RELATED_OFFICE", c_AR_ROLE_CHIEF_OF_RELATED_OFFICE);
            }
            else
            {
                c_AR_ROLE_CHIEF_OF_RELATED_OFFICEParameter = new ObjectParameter("C_AR_ROLE_CHIEF_OF_RELATED_OFFICE", typeof(string));
            }
            return base.ExecuteFunction<dtARRole>("GetARRoleData", pRequestNoParameter, c_AR_ROLE_TYPEParameter, c_AR_ROLE_CHIEF_OF_RELATED_OFFICEParameter);
        }
        public ObjectResult<tbt_ARHistory> GetTbt_ARHistory(string pRequestNo)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARHistory>("GetTbt_ARHistory", pRequestNoParameter);
        }
        public ObjectResult<tbt_ARHistoryDetail> GetTbt_ARHistoryDetail(Nullable<int> pARHistoryID)
        {
    
            ObjectParameter pARHistoryIDParameter;
    
            if (pARHistoryID.HasValue)
            {
                pARHistoryIDParameter = new ObjectParameter("pARHistoryID", pARHistoryID);
            }
            else
            {
                pARHistoryIDParameter = new ObjectParameter("pARHistoryID", typeof(int));
            }
            return base.ExecuteFunction<tbt_ARHistoryDetail>("GetTbt_ARHistoryDetail", pARHistoryIDParameter);
        }
        public ObjectResult<tbt_ARFeeAdjustment> GetTbt_ARFeeAdjustment(string pRequestNo)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARFeeAdjustment>("GetTbt_ARFeeAdjustment", pRequestNoParameter);
        }
        public ObjectResult<tbt_ARRole> DeleteTbt_ARRole(Nullable<int> pARRoleID)
        {
    
            ObjectParameter pARRoleIDParameter;
    
            if (pARRoleID.HasValue)
            {
                pARRoleIDParameter = new ObjectParameter("pARRoleID", pARRoleID);
            }
            else
            {
                pARRoleIDParameter = new ObjectParameter("pARRoleID", typeof(int));
            }
            return base.ExecuteFunction<tbt_ARRole>("DeleteTbt_ARRole", pARRoleIDParameter);
        }
        public ObjectResult<tbt_ARHistory> InsertTbt_ARHistory(string xml_ARHistory)
        {
    
            ObjectParameter xml_ARHistoryParameter;
    
            if (xml_ARHistory != null)
            {
                xml_ARHistoryParameter = new ObjectParameter("xml_ARHistory", xml_ARHistory);
            }
            else
            {
                xml_ARHistoryParameter = new ObjectParameter("xml_ARHistory", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARHistory>("InsertTbt_ARHistory", xml_ARHistoryParameter);
        }
        public ObjectResult<tbt_ARHistoryDetail> InsertTbt_ARHistoryDetail(string xml_ARHistoryDetail)
        {
    
            ObjectParameter xml_ARHistoryDetailParameter;
    
            if (xml_ARHistoryDetail != null)
            {
                xml_ARHistoryDetailParameter = new ObjectParameter("xml_ARHistoryDetail", xml_ARHistoryDetail);
            }
            else
            {
                xml_ARHistoryDetailParameter = new ObjectParameter("xml_ARHistoryDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARHistoryDetail>("InsertTbt_ARHistoryDetail", xml_ARHistoryDetailParameter);
        }
        public ObjectResult<tbt_AR> UpdateTbt_AR(string xmlAR)
        {
    
            ObjectParameter xmlARParameter;
    
            if (xmlAR != null)
            {
                xmlARParameter = new ObjectParameter("xmlAR", xmlAR);
            }
            else
            {
                xmlARParameter = new ObjectParameter("xmlAR", typeof(string));
            }
            return base.ExecuteFunction<tbt_AR>("UpdateTbt_AR", xmlARParameter);
        }
        public ObjectResult<tbt_ARRole> UpdateTbt_ARRole(string xml_doTbtARRole)
        {
    
            ObjectParameter xml_doTbtARRoleParameter;
    
            if (xml_doTbtARRole != null)
            {
                xml_doTbtARRoleParameter = new ObjectParameter("xml_doTbtARRole", xml_doTbtARRole);
            }
            else
            {
                xml_doTbtARRoleParameter = new ObjectParameter("xml_doTbtARRole", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARRole>("UpdateTbt_ARRole", xml_doTbtARRoleParameter);
        }
        public ObjectResult<tbt_AR> GetTbt_AR(string pRequestNo)
        {
    
            ObjectParameter pRequestNoParameter;
    
            if (pRequestNo != null)
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", pRequestNo);
            }
            else
            {
                pRequestNoParameter = new ObjectParameter("pRequestNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_AR>("GetTbt_AR", pRequestNoParameter);
        }
        public ObjectResult<dtSearchMACheckupResult> SearchSeparatedMaintenance(string pProductName, string pSiteName, string pEmployeeName, string pProductTypeCode, string pOperationOfficeCode, Nullable<System.DateTime> pInstructionDateFrom, Nullable<System.DateTime> pInstructionDateTo, string pUserCode, string pContractCode, string pMACheckupNo, Nullable<bool> pHasCheckupResult, Nullable<bool> pHaveInstrumentMalfunction, Nullable<bool> pNeedToContactSalesman)
        {
    
            ObjectParameter pProductNameParameter;
    
            if (pProductName != null)
            {
                pProductNameParameter = new ObjectParameter("pProductName", pProductName);
            }
            else
            {
                pProductNameParameter = new ObjectParameter("pProductName", typeof(string));
            }
    
            ObjectParameter pSiteNameParameter;
    
            if (pSiteName != null)
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", pSiteName);
            }
            else
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", typeof(string));
            }
    
            ObjectParameter pEmployeeNameParameter;
    
            if (pEmployeeName != null)
            {
                pEmployeeNameParameter = new ObjectParameter("pEmployeeName", pEmployeeName);
            }
            else
            {
                pEmployeeNameParameter = new ObjectParameter("pEmployeeName", typeof(string));
            }
    
            ObjectParameter pProductTypeCodeParameter;
    
            if (pProductTypeCode != null)
            {
                pProductTypeCodeParameter = new ObjectParameter("pProductTypeCode", pProductTypeCode);
            }
            else
            {
                pProductTypeCodeParameter = new ObjectParameter("pProductTypeCode", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCodeParameter;
    
            if (pOperationOfficeCode != null)
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode);
            }
            else
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pInstructionDateFromParameter;
    
            if (pInstructionDateFrom.HasValue)
            {
                pInstructionDateFromParameter = new ObjectParameter("pInstructionDateFrom", pInstructionDateFrom);
            }
            else
            {
                pInstructionDateFromParameter = new ObjectParameter("pInstructionDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pInstructionDateToParameter;
    
            if (pInstructionDateTo.HasValue)
            {
                pInstructionDateToParameter = new ObjectParameter("pInstructionDateTo", pInstructionDateTo);
            }
            else
            {
                pInstructionDateToParameter = new ObjectParameter("pInstructionDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pUserCodeParameter;
    
            if (pUserCode != null)
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", pUserCode);
            }
            else
            {
                pUserCodeParameter = new ObjectParameter("pUserCode", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pMACheckupNoParameter;
    
            if (pMACheckupNo != null)
            {
                pMACheckupNoParameter = new ObjectParameter("pMACheckupNo", pMACheckupNo);
            }
            else
            {
                pMACheckupNoParameter = new ObjectParameter("pMACheckupNo", typeof(string));
            }
    
            ObjectParameter pHasCheckupResultParameter;
    
            if (pHasCheckupResult.HasValue)
            {
                pHasCheckupResultParameter = new ObjectParameter("pHasCheckupResult", pHasCheckupResult);
            }
            else
            {
                pHasCheckupResultParameter = new ObjectParameter("pHasCheckupResult", typeof(bool));
            }
    
            ObjectParameter pHaveInstrumentMalfunctionParameter;
    
            if (pHaveInstrumentMalfunction.HasValue)
            {
                pHaveInstrumentMalfunctionParameter = new ObjectParameter("pHaveInstrumentMalfunction", pHaveInstrumentMalfunction);
            }
            else
            {
                pHaveInstrumentMalfunctionParameter = new ObjectParameter("pHaveInstrumentMalfunction", typeof(bool));
            }
    
            ObjectParameter pNeedToContactSalesmanParameter;
    
            if (pNeedToContactSalesman.HasValue)
            {
                pNeedToContactSalesmanParameter = new ObjectParameter("pNeedToContactSalesman", pNeedToContactSalesman);
            }
            else
            {
                pNeedToContactSalesmanParameter = new ObjectParameter("pNeedToContactSalesman", typeof(bool));
            }
            return base.ExecuteFunction<dtSearchMACheckupResult>("SearchSeparatedMaintenance", pProductNameParameter, pSiteNameParameter, pEmployeeNameParameter, pProductTypeCodeParameter, pOperationOfficeCodeParameter, pInstructionDateFromParameter, pInstructionDateToParameter, pUserCodeParameter, pContractCodeParameter, pMACheckupNoParameter, pHasCheckupResultParameter, pHaveInstrumentMalfunctionParameter, pNeedToContactSalesmanParameter);
        }
        public ObjectResult<string> GetPreviousUnimplementedOCC(string paramContractCode, string paramOCC, Nullable<bool> paramFLAGOFF)
        {
    
            ObjectParameter paramContractCodeParameter;
    
            if (paramContractCode != null)
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", paramContractCode);
            }
            else
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", typeof(string));
            }
    
            ObjectParameter paramOCCParameter;
    
            if (paramOCC != null)
            {
                paramOCCParameter = new ObjectParameter("paramOCC", paramOCC);
            }
            else
            {
                paramOCCParameter = new ObjectParameter("paramOCC", typeof(string));
            }
    
            ObjectParameter paramFLAGOFFParameter;
    
            if (paramFLAGOFF.HasValue)
            {
                paramFLAGOFFParameter = new ObjectParameter("paramFLAGOFF", paramFLAGOFF);
            }
            else
            {
                paramFLAGOFFParameter = new ObjectParameter("paramFLAGOFF", typeof(bool));
            }
            return base.ExecuteFunction<string>("GetPreviousUnimplementedOCC", paramContractCodeParameter, paramOCCParameter, paramFLAGOFFParameter);
        }
        public ObjectResult<tbs_IncidentReasonType> GetTbs_IncidentReasonType(string strIncidentType)
        {
    
            ObjectParameter strIncidentTypeParameter;
    
            if (strIncidentType != null)
            {
                strIncidentTypeParameter = new ObjectParameter("strIncidentType", strIncidentType);
            }
            else
            {
                strIncidentTypeParameter = new ObjectParameter("strIncidentType", typeof(string));
            }
            return base.ExecuteFunction<tbs_IncidentReasonType>("GetTbs_IncidentReasonType", strIncidentTypeParameter);
        }
        public ObjectResult<tbt_ContractCustomerHistory> InsertTbt_ContractCustomerHistory(string xml_ContractCustomerHistory)
        {
    
            ObjectParameter xml_ContractCustomerHistoryParameter;
    
            if (xml_ContractCustomerHistory != null)
            {
                xml_ContractCustomerHistoryParameter = new ObjectParameter("xml_ContractCustomerHistory", xml_ContractCustomerHistory);
            }
            else
            {
                xml_ContractCustomerHistoryParameter = new ObjectParameter("xml_ContractCustomerHistory", typeof(string));
            }
            return base.ExecuteFunction<tbt_ContractCustomerHistory>("InsertTbt_ContractCustomerHistory", xml_ContractCustomerHistoryParameter);
        }
        public ObjectResult<tbt_DraftRentalBEDetails> GetTbt_DraftRentalBEDetails(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalBEDetails>("GetTbt_DraftRentalBEDetails", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalSentryGuard> GetTbt_DraftRentalSentryGuard(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalSentryGuard>("GetTbt_DraftRentalSentryGuard", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_DraftRentalSentryGuardDetails> GetTbt_DraftRentalSentryGuardDetails(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DraftRentalSentryGuardDetails>("GetTbt_DraftRentalSentryGuardDetails", pchrQuotationTargetCodeParameter);
        }
        public int InsertEntireContract(string pContractCode, string pGUID, string pScreenID, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pLastUpdateDate, string pC_PROD_TYPE_BE, string pC_PROD_TYPE_SG, string pC_PROD_TYPE_MA, string xml_RentalContractBasic, string xml_RentalSecurityBasic, string xml_RentalBEDetails, string xml_RentalInstrumentDetails, string xml_RentalSentryGuard, string xml_RentalSentryGuardDetails, string xml_CancelContractMemoDetail, string xml_RentalOperationType, string xml_RentalMaintenanceDetails, string xml_RelationType)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pGUIDParameter;
    
            if (pGUID != null)
            {
                pGUIDParameter = new ObjectParameter("pGUID", pGUID);
            }
            else
            {
                pGUIDParameter = new ObjectParameter("pGUID", typeof(string));
            }
    
            ObjectParameter pScreenIDParameter;
    
            if (pScreenID != null)
            {
                pScreenIDParameter = new ObjectParameter("pScreenID", pScreenID);
            }
            else
            {
                pScreenIDParameter = new ObjectParameter("pScreenID", typeof(string));
            }
    
            ObjectParameter pCreateDateParameter;
    
            if (pCreateDate.HasValue)
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", pCreateDate);
            }
            else
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCreateByParameter;
    
            if (pCreateBy != null)
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", pCreateBy);
            }
            else
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", typeof(string));
            }
    
            ObjectParameter pLastUpdateDateParameter;
    
            if (pLastUpdateDate.HasValue)
            {
                pLastUpdateDateParameter = new ObjectParameter("pLastUpdateDate", pLastUpdateDate);
            }
            else
            {
                pLastUpdateDateParameter = new ObjectParameter("pLastUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pC_PROD_TYPE_BEParameter;
    
            if (pC_PROD_TYPE_BE != null)
            {
                pC_PROD_TYPE_BEParameter = new ObjectParameter("pC_PROD_TYPE_BE", pC_PROD_TYPE_BE);
            }
            else
            {
                pC_PROD_TYPE_BEParameter = new ObjectParameter("pC_PROD_TYPE_BE", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_SGParameter;
    
            if (pC_PROD_TYPE_SG != null)
            {
                pC_PROD_TYPE_SGParameter = new ObjectParameter("pC_PROD_TYPE_SG", pC_PROD_TYPE_SG);
            }
            else
            {
                pC_PROD_TYPE_SGParameter = new ObjectParameter("pC_PROD_TYPE_SG", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_MAParameter;
    
            if (pC_PROD_TYPE_MA != null)
            {
                pC_PROD_TYPE_MAParameter = new ObjectParameter("pC_PROD_TYPE_MA", pC_PROD_TYPE_MA);
            }
            else
            {
                pC_PROD_TYPE_MAParameter = new ObjectParameter("pC_PROD_TYPE_MA", typeof(string));
            }
    
            ObjectParameter xml_RentalContractBasicParameter;
    
            if (xml_RentalContractBasic != null)
            {
                xml_RentalContractBasicParameter = new ObjectParameter("xml_RentalContractBasic", xml_RentalContractBasic);
            }
            else
            {
                xml_RentalContractBasicParameter = new ObjectParameter("xml_RentalContractBasic", typeof(string));
            }
    
            ObjectParameter xml_RentalSecurityBasicParameter;
    
            if (xml_RentalSecurityBasic != null)
            {
                xml_RentalSecurityBasicParameter = new ObjectParameter("xml_RentalSecurityBasic", xml_RentalSecurityBasic);
            }
            else
            {
                xml_RentalSecurityBasicParameter = new ObjectParameter("xml_RentalSecurityBasic", typeof(string));
            }
    
            ObjectParameter xml_RentalBEDetailsParameter;
    
            if (xml_RentalBEDetails != null)
            {
                xml_RentalBEDetailsParameter = new ObjectParameter("xml_RentalBEDetails", xml_RentalBEDetails);
            }
            else
            {
                xml_RentalBEDetailsParameter = new ObjectParameter("xml_RentalBEDetails", typeof(string));
            }
    
            ObjectParameter xml_RentalInstrumentDetailsParameter;
    
            if (xml_RentalInstrumentDetails != null)
            {
                xml_RentalInstrumentDetailsParameter = new ObjectParameter("xml_RentalInstrumentDetails", xml_RentalInstrumentDetails);
            }
            else
            {
                xml_RentalInstrumentDetailsParameter = new ObjectParameter("xml_RentalInstrumentDetails", typeof(string));
            }
    
            ObjectParameter xml_RentalSentryGuardParameter;
    
            if (xml_RentalSentryGuard != null)
            {
                xml_RentalSentryGuardParameter = new ObjectParameter("xml_RentalSentryGuard", xml_RentalSentryGuard);
            }
            else
            {
                xml_RentalSentryGuardParameter = new ObjectParameter("xml_RentalSentryGuard", typeof(string));
            }
    
            ObjectParameter xml_RentalSentryGuardDetailsParameter;
    
            if (xml_RentalSentryGuardDetails != null)
            {
                xml_RentalSentryGuardDetailsParameter = new ObjectParameter("xml_RentalSentryGuardDetails", xml_RentalSentryGuardDetails);
            }
            else
            {
                xml_RentalSentryGuardDetailsParameter = new ObjectParameter("xml_RentalSentryGuardDetails", typeof(string));
            }
    
            ObjectParameter xml_CancelContractMemoDetailParameter;
    
            if (xml_CancelContractMemoDetail != null)
            {
                xml_CancelContractMemoDetailParameter = new ObjectParameter("xml_CancelContractMemoDetail", xml_CancelContractMemoDetail);
            }
            else
            {
                xml_CancelContractMemoDetailParameter = new ObjectParameter("xml_CancelContractMemoDetail", typeof(string));
            }
    
            ObjectParameter xml_RentalOperationTypeParameter;
    
            if (xml_RentalOperationType != null)
            {
                xml_RentalOperationTypeParameter = new ObjectParameter("xml_RentalOperationType", xml_RentalOperationType);
            }
            else
            {
                xml_RentalOperationTypeParameter = new ObjectParameter("xml_RentalOperationType", typeof(string));
            }
    
            ObjectParameter xml_RentalMaintenanceDetailsParameter;
    
            if (xml_RentalMaintenanceDetails != null)
            {
                xml_RentalMaintenanceDetailsParameter = new ObjectParameter("xml_RentalMaintenanceDetails", xml_RentalMaintenanceDetails);
            }
            else
            {
                xml_RentalMaintenanceDetailsParameter = new ObjectParameter("xml_RentalMaintenanceDetails", typeof(string));
            }
    
            ObjectParameter xml_RelationTypeParameter;
    
            if (xml_RelationType != null)
            {
                xml_RelationTypeParameter = new ObjectParameter("xml_RelationType", xml_RelationType);
            }
            else
            {
                xml_RelationTypeParameter = new ObjectParameter("xml_RelationType", typeof(string));
            }
            return base.ExecuteFunction("InsertEntireContract", pContractCodeParameter, pGUIDParameter, pScreenIDParameter, pCreateDateParameter, pCreateByParameter, pLastUpdateDateParameter, pC_PROD_TYPE_BEParameter, pC_PROD_TYPE_SGParameter, pC_PROD_TYPE_MAParameter, xml_RentalContractBasicParameter, xml_RentalSecurityBasicParameter, xml_RentalBEDetailsParameter, xml_RentalInstrumentDetailsParameter, xml_RentalSentryGuardParameter, xml_RentalSentryGuardDetailsParameter, xml_CancelContractMemoDetailParameter, xml_RentalOperationTypeParameter, xml_RentalMaintenanceDetailsParameter, xml_RelationTypeParameter);
        }
        public ObjectResult<tbt_Project> UpdateProjectStatus(string strProjectCode, string c_ProjectStatus, Nullable<System.DateTime> lastCompleteDate, Nullable<System.DateTime> cancelDate, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter c_ProjectStatusParameter;
    
            if (c_ProjectStatus != null)
            {
                c_ProjectStatusParameter = new ObjectParameter("C_ProjectStatus", c_ProjectStatus);
            }
            else
            {
                c_ProjectStatusParameter = new ObjectParameter("C_ProjectStatus", typeof(string));
            }
    
            ObjectParameter lastCompleteDateParameter;
    
            if (lastCompleteDate.HasValue)
            {
                lastCompleteDateParameter = new ObjectParameter("LastCompleteDate", lastCompleteDate);
            }
            else
            {
                lastCompleteDateParameter = new ObjectParameter("LastCompleteDate", typeof(System.DateTime));
            }
    
            ObjectParameter cancelDateParameter;
    
            if (cancelDate.HasValue)
            {
                cancelDateParameter = new ObjectParameter("CancelDate", cancelDate);
            }
            else
            {
                cancelDateParameter = new ObjectParameter("CancelDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_Project>("UpdateProjectStatus", strProjectCodeParameter, c_ProjectStatusParameter, lastCompleteDateParameter, cancelDateParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<tbt_ProjectPurchaserCustomer> UpdateTbt_ProjectPurchaseCustomer(string xmlTbt_ProjectPurchaseCustomer)
        {
    
            ObjectParameter xmlTbt_ProjectPurchaseCustomerParameter;
    
            if (xmlTbt_ProjectPurchaseCustomer != null)
            {
                xmlTbt_ProjectPurchaseCustomerParameter = new ObjectParameter("xmlTbt_ProjectPurchaseCustomer", xmlTbt_ProjectPurchaseCustomer);
            }
            else
            {
                xmlTbt_ProjectPurchaseCustomerParameter = new ObjectParameter("xmlTbt_ProjectPurchaseCustomer", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectPurchaserCustomer>("UpdateTbt_ProjectPurchaseCustomer", xmlTbt_ProjectPurchaseCustomerParameter);
        }
        public int EditDraftRentalContract(string pQuotationTargetCode, string pProductTypeCode, string pGUID, string pScreenID, Nullable<System.DateTime> pCreateDate, string pCreateBy, string pC_PROD_TYPE_ONLINE, string pC_PROD_TYPE_BE, string pC_PROD_TYPE_SG, string pC_PROD_TYPE_MA, string xml_DraftRentalContract, string xml_DraftRentalBillingTarget, string xml_DraftRentalEmail, string xml_DraftRentalOperationType, string xml_RelationType, string xml_DraftRentalInstrument, string xml_DraftRentalBEDetails, string xml_DraftRentalSentryGuard, string xml_DraftRentalSentryGuardDetails, string xml_DraftRentalMaintenanceDetails)
        {
    
            ObjectParameter pQuotationTargetCodeParameter;
    
            if (pQuotationTargetCode != null)
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", pQuotationTargetCode);
            }
            else
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pProductTypeCodeParameter;
    
            if (pProductTypeCode != null)
            {
                pProductTypeCodeParameter = new ObjectParameter("pProductTypeCode", pProductTypeCode);
            }
            else
            {
                pProductTypeCodeParameter = new ObjectParameter("pProductTypeCode", typeof(string));
            }
    
            ObjectParameter pGUIDParameter;
    
            if (pGUID != null)
            {
                pGUIDParameter = new ObjectParameter("pGUID", pGUID);
            }
            else
            {
                pGUIDParameter = new ObjectParameter("pGUID", typeof(string));
            }
    
            ObjectParameter pScreenIDParameter;
    
            if (pScreenID != null)
            {
                pScreenIDParameter = new ObjectParameter("pScreenID", pScreenID);
            }
            else
            {
                pScreenIDParameter = new ObjectParameter("pScreenID", typeof(string));
            }
    
            ObjectParameter pCreateDateParameter;
    
            if (pCreateDate.HasValue)
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", pCreateDate);
            }
            else
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCreateByParameter;
    
            if (pCreateBy != null)
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", pCreateBy);
            }
            else
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_ONLINEParameter;
    
            if (pC_PROD_TYPE_ONLINE != null)
            {
                pC_PROD_TYPE_ONLINEParameter = new ObjectParameter("pC_PROD_TYPE_ONLINE", pC_PROD_TYPE_ONLINE);
            }
            else
            {
                pC_PROD_TYPE_ONLINEParameter = new ObjectParameter("pC_PROD_TYPE_ONLINE", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_BEParameter;
    
            if (pC_PROD_TYPE_BE != null)
            {
                pC_PROD_TYPE_BEParameter = new ObjectParameter("pC_PROD_TYPE_BE", pC_PROD_TYPE_BE);
            }
            else
            {
                pC_PROD_TYPE_BEParameter = new ObjectParameter("pC_PROD_TYPE_BE", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_SGParameter;
    
            if (pC_PROD_TYPE_SG != null)
            {
                pC_PROD_TYPE_SGParameter = new ObjectParameter("pC_PROD_TYPE_SG", pC_PROD_TYPE_SG);
            }
            else
            {
                pC_PROD_TYPE_SGParameter = new ObjectParameter("pC_PROD_TYPE_SG", typeof(string));
            }
    
            ObjectParameter pC_PROD_TYPE_MAParameter;
    
            if (pC_PROD_TYPE_MA != null)
            {
                pC_PROD_TYPE_MAParameter = new ObjectParameter("pC_PROD_TYPE_MA", pC_PROD_TYPE_MA);
            }
            else
            {
                pC_PROD_TYPE_MAParameter = new ObjectParameter("pC_PROD_TYPE_MA", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalContractParameter;
    
            if (xml_DraftRentalContract != null)
            {
                xml_DraftRentalContractParameter = new ObjectParameter("xml_DraftRentalContract", xml_DraftRentalContract);
            }
            else
            {
                xml_DraftRentalContractParameter = new ObjectParameter("xml_DraftRentalContract", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalBillingTargetParameter;
    
            if (xml_DraftRentalBillingTarget != null)
            {
                xml_DraftRentalBillingTargetParameter = new ObjectParameter("xml_DraftRentalBillingTarget", xml_DraftRentalBillingTarget);
            }
            else
            {
                xml_DraftRentalBillingTargetParameter = new ObjectParameter("xml_DraftRentalBillingTarget", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalEmailParameter;
    
            if (xml_DraftRentalEmail != null)
            {
                xml_DraftRentalEmailParameter = new ObjectParameter("xml_DraftRentalEmail", xml_DraftRentalEmail);
            }
            else
            {
                xml_DraftRentalEmailParameter = new ObjectParameter("xml_DraftRentalEmail", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalOperationTypeParameter;
    
            if (xml_DraftRentalOperationType != null)
            {
                xml_DraftRentalOperationTypeParameter = new ObjectParameter("xml_DraftRentalOperationType", xml_DraftRentalOperationType);
            }
            else
            {
                xml_DraftRentalOperationTypeParameter = new ObjectParameter("xml_DraftRentalOperationType", typeof(string));
            }
    
            ObjectParameter xml_RelationTypeParameter;
    
            if (xml_RelationType != null)
            {
                xml_RelationTypeParameter = new ObjectParameter("xml_RelationType", xml_RelationType);
            }
            else
            {
                xml_RelationTypeParameter = new ObjectParameter("xml_RelationType", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalInstrumentParameter;
    
            if (xml_DraftRentalInstrument != null)
            {
                xml_DraftRentalInstrumentParameter = new ObjectParameter("xml_DraftRentalInstrument", xml_DraftRentalInstrument);
            }
            else
            {
                xml_DraftRentalInstrumentParameter = new ObjectParameter("xml_DraftRentalInstrument", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalBEDetailsParameter;
    
            if (xml_DraftRentalBEDetails != null)
            {
                xml_DraftRentalBEDetailsParameter = new ObjectParameter("xml_DraftRentalBEDetails", xml_DraftRentalBEDetails);
            }
            else
            {
                xml_DraftRentalBEDetailsParameter = new ObjectParameter("xml_DraftRentalBEDetails", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalSentryGuardParameter;
    
            if (xml_DraftRentalSentryGuard != null)
            {
                xml_DraftRentalSentryGuardParameter = new ObjectParameter("xml_DraftRentalSentryGuard", xml_DraftRentalSentryGuard);
            }
            else
            {
                xml_DraftRentalSentryGuardParameter = new ObjectParameter("xml_DraftRentalSentryGuard", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalSentryGuardDetailsParameter;
    
            if (xml_DraftRentalSentryGuardDetails != null)
            {
                xml_DraftRentalSentryGuardDetailsParameter = new ObjectParameter("xml_DraftRentalSentryGuardDetails", xml_DraftRentalSentryGuardDetails);
            }
            else
            {
                xml_DraftRentalSentryGuardDetailsParameter = new ObjectParameter("xml_DraftRentalSentryGuardDetails", typeof(string));
            }
    
            ObjectParameter xml_DraftRentalMaintenanceDetailsParameter;
    
            if (xml_DraftRentalMaintenanceDetails != null)
            {
                xml_DraftRentalMaintenanceDetailsParameter = new ObjectParameter("xml_DraftRentalMaintenanceDetails", xml_DraftRentalMaintenanceDetails);
            }
            else
            {
                xml_DraftRentalMaintenanceDetailsParameter = new ObjectParameter("xml_DraftRentalMaintenanceDetails", typeof(string));
            }
            return base.ExecuteFunction("EditDraftRentalContract", pQuotationTargetCodeParameter, pProductTypeCodeParameter, pGUIDParameter, pScreenIDParameter, pCreateDateParameter, pCreateByParameter, pC_PROD_TYPE_ONLINEParameter, pC_PROD_TYPE_BEParameter, pC_PROD_TYPE_SGParameter, pC_PROD_TYPE_MAParameter, xml_DraftRentalContractParameter, xml_DraftRentalBillingTargetParameter, xml_DraftRentalEmailParameter, xml_DraftRentalOperationTypeParameter, xml_RelationTypeParameter, xml_DraftRentalInstrumentParameter, xml_DraftRentalBEDetailsParameter, xml_DraftRentalSentryGuardParameter, xml_DraftRentalSentryGuardDetailsParameter, xml_DraftRentalMaintenanceDetailsParameter);
        }
        public ObjectResult<doServiceProductTypeCode> GetServiceProductTypeCode(string strCode, string c_SERVICE_TYPE_PROJECT)
        {
    
            ObjectParameter strCodeParameter;
    
            if (strCode != null)
            {
                strCodeParameter = new ObjectParameter("strCode", strCode);
            }
            else
            {
                strCodeParameter = new ObjectParameter("strCode", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_PROJECTParameter;
    
            if (c_SERVICE_TYPE_PROJECT != null)
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT);
            }
            else
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
            }
            return base.ExecuteFunction<doServiceProductTypeCode>("GetServiceProductTypeCode", strCodeParameter, c_SERVICE_TYPE_PROJECTParameter);
        }
        public ObjectResult<string> GetNextImplementedOCC(string paramContractCode, string paramOCC, Nullable<bool> paramFLAGON)
        {
    
            ObjectParameter paramContractCodeParameter;
    
            if (paramContractCode != null)
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", paramContractCode);
            }
            else
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", typeof(string));
            }
    
            ObjectParameter paramOCCParameter;
    
            if (paramOCC != null)
            {
                paramOCCParameter = new ObjectParameter("paramOCC", paramOCC);
            }
            else
            {
                paramOCCParameter = new ObjectParameter("paramOCC", typeof(string));
            }
    
            ObjectParameter paramFLAGONParameter;
    
            if (paramFLAGON.HasValue)
            {
                paramFLAGONParameter = new ObjectParameter("paramFLAGON", paramFLAGON);
            }
            else
            {
                paramFLAGONParameter = new ObjectParameter("paramFLAGON", typeof(bool));
            }
            return base.ExecuteFunction<string>("GetNextImplementedOCC", paramContractCodeParameter, paramOCCParameter, paramFLAGONParameter);
        }
        public ObjectResult<tbt_RelationType> DeleteTbt_RelationType_ByContractCodeOCC(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_RelationType>("DeleteTbt_RelationType_ByContractCodeOCC", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_ProjectStockOutMemo> GetTbt_ProjectStockoutMemoForView(string projectCode)
        {
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("projectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("projectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockOutMemo>("GetTbt_ProjectStockoutMemoForView", projectCodeParameter);
        }
        public ObjectResult<doProjectBranch> GetProjectStockOutBranch(string projectCode)
        {
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", typeof(string));
            }
            return base.ExecuteFunction<doProjectBranch>("GetProjectStockOutBranch", projectCodeParameter);
        }
        public ObjectResult<tbt_BillingTemp> GetTbt_BillingTemp(string strContractCode, string strOCC)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("GetTbt_BillingTemp", strContractCodeParameter, strOCCParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetMaxUpdateDateOfMATargetContract(string paramMAContractCode, string paramOCC, string c_RENTAL_CHANGE_TYPE_CHANGE_NAME, string c_RENTAL_CHANGE_TYPE_MOVE_INSTRU)
        {
    
            ObjectParameter paramMAContractCodeParameter;
    
            if (paramMAContractCode != null)
            {
                paramMAContractCodeParameter = new ObjectParameter("paramMAContractCode", paramMAContractCode);
            }
            else
            {
                paramMAContractCodeParameter = new ObjectParameter("paramMAContractCode", typeof(string));
            }
    
            ObjectParameter paramOCCParameter;
    
            if (paramOCC != null)
            {
                paramOCCParameter = new ObjectParameter("paramOCC", paramOCC);
            }
            else
            {
                paramOCCParameter = new ObjectParameter("paramOCC", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPE_CHANGE_NAMEParameter;
    
            if (c_RENTAL_CHANGE_TYPE_CHANGE_NAME != null)
            {
                c_RENTAL_CHANGE_TYPE_CHANGE_NAMEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_CHANGE_NAME", c_RENTAL_CHANGE_TYPE_CHANGE_NAME);
            }
            else
            {
                c_RENTAL_CHANGE_TYPE_CHANGE_NAMEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_CHANGE_NAME", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPE_MOVE_INSTRUParameter;
    
            if (c_RENTAL_CHANGE_TYPE_MOVE_INSTRU != null)
            {
                c_RENTAL_CHANGE_TYPE_MOVE_INSTRUParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_MOVE_INSTRU", c_RENTAL_CHANGE_TYPE_MOVE_INSTRU);
            }
            else
            {
                c_RENTAL_CHANGE_TYPE_MOVE_INSTRUParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_MOVE_INSTRU", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetMaxUpdateDateOfMATargetContract", paramMAContractCodeParameter, paramOCCParameter, c_RENTAL_CHANGE_TYPE_CHANGE_NAMEParameter, c_RENTAL_CHANGE_TYPE_MOVE_INSTRUParameter);
        }
        public ObjectResult<dtTbt_BillingTempForSP> GetBillingTempForChangePlan_Edit(string strContractCode, string strOCC, string c_CONTRACT_BILLING_TYPE_CONTRACT_FEE, string c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON, string c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE, string c_CONTRACT_BILLING_TYPE_INSTALLATION_FEE, string c_CONTRACT_BILLING_TYPE_DEPOSIT_FEE, string c_BILLING_TIMING_APPROVE_CONTRACT)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter;
    
            if (c_CONTRACT_BILLING_TYPE_CONTRACT_FEE != null)
            {
                c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_CONTRACT_FEE", c_CONTRACT_BILLING_TYPE_CONTRACT_FEE);
            }
            else
            {
                c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_CONTRACT_FEE", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CONParameter;
    
            if (c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON != null)
            {
                c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CONParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON", c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON);
            }
            else
            {
                c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CONParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONEParameter;
    
            if (c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE != null)
            {
                c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE", c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE);
            }
            else
            {
                c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_BILLING_TYPE_INSTALLATION_FEEParameter;
    
            if (c_CONTRACT_BILLING_TYPE_INSTALLATION_FEE != null)
            {
                c_CONTRACT_BILLING_TYPE_INSTALLATION_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE", c_CONTRACT_BILLING_TYPE_INSTALLATION_FEE);
            }
            else
            {
                c_CONTRACT_BILLING_TYPE_INSTALLATION_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_BILLING_TYPE_DEPOSIT_FEEParameter;
    
            if (c_CONTRACT_BILLING_TYPE_DEPOSIT_FEE != null)
            {
                c_CONTRACT_BILLING_TYPE_DEPOSIT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE", c_CONTRACT_BILLING_TYPE_DEPOSIT_FEE);
            }
            else
            {
                c_CONTRACT_BILLING_TYPE_DEPOSIT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TIMING_APPROVE_CONTRACTParameter;
    
            if (c_BILLING_TIMING_APPROVE_CONTRACT != null)
            {
                c_BILLING_TIMING_APPROVE_CONTRACTParameter = new ObjectParameter("C_BILLING_TIMING_APPROVE_CONTRACT", c_BILLING_TIMING_APPROVE_CONTRACT);
            }
            else
            {
                c_BILLING_TIMING_APPROVE_CONTRACTParameter = new ObjectParameter("C_BILLING_TIMING_APPROVE_CONTRACT", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_BillingTempForSP>("GetBillingTempForChangePlan_Edit", strContractCodeParameter, strOCCParameter, c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter, c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CONParameter, c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONEParameter, c_CONTRACT_BILLING_TYPE_INSTALLATION_FEEParameter, c_CONTRACT_BILLING_TYPE_DEPOSIT_FEEParameter, c_BILLING_TIMING_APPROVE_CONTRACTParameter);
        }
        public ObjectResult<dtTbt_BillingTempForSP> GetBillingTempForChangePlan_New(string strContractCode, string strOCC, string c_CONTRACT_BILLING_TYPE_CONTRACT_FEE)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter;
    
            if (c_CONTRACT_BILLING_TYPE_CONTRACT_FEE != null)
            {
                c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_CONTRACT_FEE", c_CONTRACT_BILLING_TYPE_CONTRACT_FEE);
            }
            else
            {
                c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_CONTRACT_FEE", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_BillingTempForSP>("GetBillingTempForChangePlan_New", strContractCodeParameter, strOCCParameter, c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter);
        }
        public ObjectResult<AutoRenewProcess_Result> AutoRenewProcessBatch()
        {
            return base.ExecuteFunction<AutoRenewProcess_Result>("AutoRenewProcessBatch");
        }
        public ObjectResult<doDraftRentalContractInformation> GetDraftRentalContractInformation(string strQuotationTargetCode)
        {
    
            ObjectParameter strQuotationTargetCodeParameter;
    
            if (strQuotationTargetCode != null)
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", strQuotationTargetCode);
            }
            else
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<doDraftRentalContractInformation>("GetDraftRentalContractInformation", strQuotationTargetCodeParameter);
        }
        public ObjectResult<doGetSaleDataForIssueInvoice> GetSaleDataForIssueInvoice(string contractCode, string oCC, string c_BILLING_TIMING_ACCEPTANCE, string c_BILLINGTEMP_FLAG_KEEP, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
    
            ObjectParameter c_BILLING_TIMING_ACCEPTANCEParameter;
    
            if (c_BILLING_TIMING_ACCEPTANCE != null)
            {
                c_BILLING_TIMING_ACCEPTANCEParameter = new ObjectParameter("C_BILLING_TIMING_ACCEPTANCE", c_BILLING_TIMING_ACCEPTANCE);
            }
            else
            {
                c_BILLING_TIMING_ACCEPTANCEParameter = new ObjectParameter("C_BILLING_TIMING_ACCEPTANCE", typeof(string));
            }
    
            ObjectParameter c_BILLINGTEMP_FLAG_KEEPParameter;
    
            if (c_BILLINGTEMP_FLAG_KEEP != null)
            {
                c_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("C_BILLINGTEMP_FLAG_KEEP", c_BILLINGTEMP_FLAG_KEEP);
            }
            else
            {
                c_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("C_BILLINGTEMP_FLAG_KEEP", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doGetSaleDataForIssueInvoice>("GetSaleDataForIssueInvoice", contractCodeParameter, oCCParameter, c_BILLING_TIMING_ACCEPTANCEParameter, c_BILLINGTEMP_FLAG_KEEPParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<Nullable<bool>> IsCompleteRemoveAll(string strContractCode, string c_RENTAL_INSTALLATION_TYPE_REMOVE_ALL)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALLATION_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALLATION_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALLATION_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALLATION_TYPE_REMOVE_ALL", c_RENTAL_INSTALLATION_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALLATION_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALLATION_TYPE_REMOVE_ALL", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("IsCompleteRemoveAll", strContractCodeParameter, c_RENTAL_INSTALLATION_TYPE_REMOVE_ALLParameter);
        }
        public ObjectResult<Nullable<bool>> IsProjectExist(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("IsProjectExist", strProjectCodeParameter);
        }
        public ObjectResult<string> GetMAContractCodeOf(string strMATargetContractCode, string strRelationType)
        {
    
            ObjectParameter strMATargetContractCodeParameter;
    
            if (strMATargetContractCode != null)
            {
                strMATargetContractCodeParameter = new ObjectParameter("strMATargetContractCode", strMATargetContractCode);
            }
            else
            {
                strMATargetContractCodeParameter = new ObjectParameter("strMATargetContractCode", typeof(string));
            }
    
            ObjectParameter strRelationTypeParameter;
    
            if (strRelationType != null)
            {
                strRelationTypeParameter = new ObjectParameter("strRelationType", strRelationType);
            }
            else
            {
                strRelationTypeParameter = new ObjectParameter("strRelationType", typeof(string));
            }
            return base.ExecuteFunction<string>("GetMAContractCodeOf", strMATargetContractCodeParameter, strRelationTypeParameter);
        }
        public ObjectResult<Nullable<bool>> IsContractExist(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("IsContractExist", strContractCodeParameter);
        }
        public ObjectResult<string> GetPreviousOCC(string strContractCode, string strCurrentOCC)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strCurrentOCCParameter;
    
            if (strCurrentOCC != null)
            {
                strCurrentOCCParameter = new ObjectParameter("strCurrentOCC", strCurrentOCC);
            }
            else
            {
                strCurrentOCCParameter = new ObjectParameter("strCurrentOCC", typeof(string));
            }
            return base.ExecuteFunction<string>("GetPreviousOCC", strContractCodeParameter, strCurrentOCCParameter);
        }
        public ObjectResult<dtBillingTempChangeFeeData> GetBillingTempForChangeFee(string strContractCode, string c_CONTRACT_BILLING_TYPE_CONTRACT_FEE)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter;
    
            if (c_CONTRACT_BILLING_TYPE_CONTRACT_FEE != null)
            {
                c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_CONTRACT_FEE", c_CONTRACT_BILLING_TYPE_CONTRACT_FEE);
            }
            else
            {
                c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter = new ObjectParameter("C_CONTRACT_BILLING_TYPE_CONTRACT_FEE", typeof(string));
            }
            return base.ExecuteFunction<dtBillingTempChangeFeeData>("GetBillingTempForChangeFee", strContractCodeParameter, c_CONTRACT_BILLING_TYPE_CONTRACT_FEEParameter);
        }
        public ObjectResult<tbt_BillingTemp> DeleteAllSendData(string pContractCode, string pC_BILLINGTEMP_FLAG_KEEP)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pC_BILLINGTEMP_FLAG_KEEPParameter;
    
            if (pC_BILLINGTEMP_FLAG_KEEP != null)
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", pC_BILLINGTEMP_FLAG_KEEP);
            }
            else
            {
                pC_BILLINGTEMP_FLAG_KEEPParameter = new ObjectParameter("pC_BILLINGTEMP_FLAG_KEEP", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("DeleteAllSendData", pContractCodeParameter, pC_BILLINGTEMP_FLAG_KEEPParameter);
        }
        public ObjectResult<doUpdateAutoRenew> UpdateAutoRenew(string contractCode, string oCC, Nullable<System.DateTime> calContractEndDate, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
    
            ObjectParameter calContractEndDateParameter;
    
            if (calContractEndDate.HasValue)
            {
                calContractEndDateParameter = new ObjectParameter("CalContractEndDate", calContractEndDate);
            }
            else
            {
                calContractEndDateParameter = new ObjectParameter("CalContractEndDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<doUpdateAutoRenew>("UpdateAutoRenew", contractCodeParameter, oCCParameter, calContractEndDateParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<dtAROccContract> GetAROccurringContract(string strSiteCode, string c_AR_RELEVANT_TYPE_CONTRACT)
        {
    
            ObjectParameter strSiteCodeParameter;
    
            if (strSiteCode != null)
            {
                strSiteCodeParameter = new ObjectParameter("strSiteCode", strSiteCode);
            }
            else
            {
                strSiteCodeParameter = new ObjectParameter("strSiteCode", typeof(string));
            }
    
            ObjectParameter c_AR_RELEVANT_TYPE_CONTRACTParameter;
    
            if (c_AR_RELEVANT_TYPE_CONTRACT != null)
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", c_AR_RELEVANT_TYPE_CONTRACT);
            }
            else
            {
                c_AR_RELEVANT_TYPE_CONTRACTParameter = new ObjectParameter("C_AR_RELEVANT_TYPE_CONTRACT", typeof(string));
            }
            return base.ExecuteFunction<dtAROccContract>("GetAROccurringContract", strSiteCodeParameter, c_AR_RELEVANT_TYPE_CONTRACTParameter);
        }
        public ObjectResult<doBillingTargetDetail> GetBillingTargetDetailByContractCode(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<doBillingTargetDetail>("GetBillingTargetDetailByContractCode", strContractCodeParameter);
        }
        public ObjectResult<tbt_AR> UpdateContractCode(string pQuotationTargetCode, string pContractCode, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo)
        {
    
            ObjectParameter pQuotationTargetCodeParameter;
    
            if (pQuotationTargetCode != null)
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", pQuotationTargetCode);
            }
            else
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pProcessingDateTimeParameter;
    
            if (pProcessingDateTime.HasValue)
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", pProcessingDateTime);
            }
            else
            {
                pProcessingDateTimeParameter = new ObjectParameter("pProcessingDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_AR>("UpdateContractCode", pQuotationTargetCodeParameter, pContractCodeParameter, pProcessingDateTimeParameter, pEmpNoParameter);
        }
        public ObjectResult<doSaleContractDataForFlowMenu> GetSaleContractDataForFlowMenu(string contractCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
            return base.ExecuteFunction<doSaleContractDataForFlowMenu>("GetSaleContractDataForFlowMenu", contractCodeParameter);
        }
        public ObjectResult<Nullable<bool>> IsContractDocExist(string strContractCode, string strQuotationTargetCode, string strOCCAlphabet, string strDocOCC)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strQuotationTargetCodeParameter;
    
            if (strQuotationTargetCode != null)
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", strQuotationTargetCode);
            }
            else
            {
                strQuotationTargetCodeParameter = new ObjectParameter("strQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter strOCCAlphabetParameter;
    
            if (strOCCAlphabet != null)
            {
                strOCCAlphabetParameter = new ObjectParameter("strOCCAlphabet", strOCCAlphabet);
            }
            else
            {
                strOCCAlphabetParameter = new ObjectParameter("strOCCAlphabet", typeof(string));
            }
    
            ObjectParameter strDocOCCParameter;
    
            if (strDocOCC != null)
            {
                strDocOCCParameter = new ObjectParameter("strDocOCC", strDocOCC);
            }
            else
            {
                strDocOCCParameter = new ObjectParameter("strDocOCC", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("IsContractDocExist", strContractCodeParameter, strQuotationTargetCodeParameter, strOCCAlphabetParameter, strDocOCCParameter);
        }
        public ObjectResult<tbt_SaleInstrumentDetails> DeleteTbt_SaleInstrumentDetails_ByContractCodeOCC(string pContractCode, string pOCC)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleInstrumentDetails>("DeleteTbt_SaleInstrumentDetails_ByContractCodeOCC", pContractCodeParameter, pOCCParameter);
        }
        public ObjectResult<tbt_ProjectStockOutMemo> InsertTbt_ProjectStockOutMemo(string xml_StockOutMemo)
        {
    
            ObjectParameter xml_StockOutMemoParameter;
    
            if (xml_StockOutMemo != null)
            {
                xml_StockOutMemoParameter = new ObjectParameter("xml_StockOutMemo", xml_StockOutMemo);
            }
            else
            {
                xml_StockOutMemoParameter = new ObjectParameter("xml_StockOutMemo", typeof(string));
            }
            return base.ExecuteFunction<tbt_ProjectStockOutMemo>("InsertTbt_ProjectStockOutMemo", xml_StockOutMemoParameter);
        }
        public ObjectResult<doRentalContractDataForFlowMenu> GetRentalContractDataForFlowMenu(string contractCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
            return base.ExecuteFunction<doRentalContractDataForFlowMenu>("GetRentalContractDataForFlowMenu", contractCodeParameter);
        }
        public ObjectResult<doGetContractProjectInfo> GetContractProjectInfo(string pContractCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<doGetContractProjectInfo>("GetContractProjectInfo", pContractCodeParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetRemovalInstallCompleteDate(string contractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetRemovalInstallCompleteDate", contractCodeParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter);
        }
        public ObjectResult<tbt_BillingTemp> GetFee(string contractCode, string oCC, string billingType, string billingTiming)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
    
            ObjectParameter billingTypeParameter;
    
            if (billingType != null)
            {
                billingTypeParameter = new ObjectParameter("BillingType", billingType);
            }
            else
            {
                billingTypeParameter = new ObjectParameter("BillingType", typeof(string));
            }
    
            ObjectParameter billingTimingParameter;
    
            if (billingTiming != null)
            {
                billingTimingParameter = new ObjectParameter("BillingTiming", billingTiming);
            }
            else
            {
                billingTimingParameter = new ObjectParameter("BillingTiming", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTemp>("GetFee", contractCodeParameter, oCCParameter, billingTypeParameter, billingTimingParameter);
        }
        public ObjectResult<tbt_SaleBasic> GetLinkageSaleContract(string strContractCode, string c_RELATION_TYPE_SALE)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_RELATION_TYPE_SALEParameter;
    
            if (c_RELATION_TYPE_SALE != null)
            {
                c_RELATION_TYPE_SALEParameter = new ObjectParameter("C_RELATION_TYPE_SALE", c_RELATION_TYPE_SALE);
            }
            else
            {
                c_RELATION_TYPE_SALEParameter = new ObjectParameter("C_RELATION_TYPE_SALE", typeof(string));
            }
            return base.ExecuteFunction<tbt_SaleBasic>("GetLinkageSaleContract", strContractCodeParameter, c_RELATION_TYPE_SALEParameter);
        }
        public ObjectResult<tbt_ARFeeAdjustment> UpdateTbt_ARFeeAdjustment(string xmlARFeeAdjustment)
        {
    
            ObjectParameter xmlARFeeAdjustmentParameter;
    
            if (xmlARFeeAdjustment != null)
            {
                xmlARFeeAdjustmentParameter = new ObjectParameter("xmlARFeeAdjustment", xmlARFeeAdjustment);
            }
            else
            {
                xmlARFeeAdjustmentParameter = new ObjectParameter("xmlARFeeAdjustment", typeof(string));
            }
            return base.ExecuteFunction<tbt_ARFeeAdjustment>("UpdateTbt_ARFeeAdjustment", xmlARFeeAdjustmentParameter);
        }
        public ObjectResult<tbt_DocStartMemo> InsertTbt_DocStartMemo(string xml_DocStartMemo)
        {
    
            ObjectParameter xml_DocStartMemoParameter;
    
            if (xml_DocStartMemo != null)
            {
                xml_DocStartMemoParameter = new ObjectParameter("xml_DocStartMemo", xml_DocStartMemo);
            }
            else
            {
                xml_DocStartMemoParameter = new ObjectParameter("xml_DocStartMemo", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocStartMemo>("InsertTbt_DocStartMemo", xml_DocStartMemoParameter);
        }
        public ObjectResult<RPTStartResumeMemoDo> GetRptStartResumeMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
        {
    
            ObjectParameter iDocIDParameter;
    
            if (iDocID.HasValue)
            {
                iDocIDParameter = new ObjectParameter("iDocID", iDocID);
            }
            else
            {
                iDocIDParameter = new ObjectParameter("iDocID", typeof(int));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<RPTStartResumeMemoDo>("GetRptStartResumeMemoData", iDocIDParameter, bFlagOnParameter);
        }
        public ObjectResult<string> GetRentalLastOCC(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetRentalLastOCC", strContractCodeParameter);
        }
        public ObjectResult<sp_CT_GetSaleBasicOneShotFlag_Result> GetSaleBasicOneShotFlag(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<sp_CT_GetSaleBasicOneShotFlag_Result>("GetSaleBasicOneShotFlag", strContractCodeParameter);
        }
        public ObjectResult<dtQuotationNoData> GetQuotationNo(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<dtQuotationNoData>("GetQuotationNo", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<doMaintenanceCompletionReport> GetMaintenanceCompletionReport(string paramContractCode, string paramProductCode, Nullable<System.DateTime> paramInstructionDate, Nullable<bool> bFlagOn)
        {
    
            ObjectParameter paramContractCodeParameter;
    
            if (paramContractCode != null)
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", paramContractCode);
            }
            else
            {
                paramContractCodeParameter = new ObjectParameter("paramContractCode", typeof(string));
            }
    
            ObjectParameter paramProductCodeParameter;
    
            if (paramProductCode != null)
            {
                paramProductCodeParameter = new ObjectParameter("paramProductCode", paramProductCode);
            }
            else
            {
                paramProductCodeParameter = new ObjectParameter("paramProductCode", typeof(string));
            }
    
            ObjectParameter paramInstructionDateParameter;
    
            if (paramInstructionDate.HasValue)
            {
                paramInstructionDateParameter = new ObjectParameter("paramInstructionDate", paramInstructionDate);
            }
            else
            {
                paramInstructionDateParameter = new ObjectParameter("paramInstructionDate", typeof(System.DateTime));
            }
    
            ObjectParameter bFlagOnParameter;
    
            if (bFlagOn.HasValue)
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", bFlagOn);
            }
            else
            {
                bFlagOnParameter = new ObjectParameter("bFlagOn", typeof(bool));
            }
            return base.ExecuteFunction<doMaintenanceCompletionReport>("GetMaintenanceCompletionReport", paramContractCodeParameter, paramProductCodeParameter, paramInstructionDateParameter, bFlagOnParameter);
        }
        public ObjectResult<dtUnreceivedContractDocuemntCTR095> GetUnreceivedContractDocumentCTR095(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
    
            ObjectParameter startDateParameter;
    
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(System.DateTime));
            }
    
            ObjectParameter endDateParameter;
    
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtUnreceivedContractDocuemntCTR095>("GetUnreceivedContractDocumentCTR095", startDateParameter, endDateParameter);
        }

        #endregion

    }
}
