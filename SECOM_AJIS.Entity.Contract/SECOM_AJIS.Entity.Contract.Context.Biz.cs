//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Contract
{
    public partial class BizCTDataEntities
    {
        #region Methods
    		public virtual List<dtContractData> GetContractDataForSearch(string pchrCustomerCode, string pchvnCustomerName, string pchvBranchName, string pchvnAddress, string pchvnAlley, string pchvnRoad, string pchvnSubDistrict, string pchrProvinceCode, string pchrDistrictCode, string pchrZipCode, string pchvSALE_CHANGE_TYPE_NEW_SALE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDataForSearch(pchrCustomerCode, pchvnCustomerName, pchvBranchName, pchvnAddress, pchvnAlley, pchvnRoad, pchvnSubDistrict, pchrProvinceCode, pchrDistrictCode, pchrZipCode, pchvSALE_CHANGE_TYPE_NEW_SALE, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtContractBranchName> GetContractBranchName(string pchvLiveSearch)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractBranchName(pchvLiveSearch).ToList();
    		}
    		public virtual List<tbt_RentalContractBasic> GetTbt_RentalContractBasic(string pContractCode, string pUserCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalContractBasic(pContractCode, pUserCode).ToList();
    		}
    		public virtual List<dtRelatedContract> GetRelatedContractList(string pchrRelationType, string pchvstrContractCode, string pchrOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRelatedContractList(pchrRelationType, pchvstrContractCode, pchrOCC, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtTbt_RentalContractBasicForView> GetTbt_RentalContractBasicForView(string pchvContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalContractBasicForView(pchvContractCode).ToList();
    		}
    		public virtual List<dtTbt_RentalSecurityBasicForView> GetTbt_RentalSecurityBasicForView(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalSecurityBasicForView(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dtTbt_RentalMaintenanceDetailsForView> GetTbt_RentalMaintenanceDetailsForView(string contractCode, string oCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalMaintenanceDetailsForView(contractCode, oCC).ToList();
    		}
    		public virtual List<dtTbt_CancelContractMemoDetailForView> GetTbt_CancelContractMemoDetailForView(string contractCode, string oCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_CancelContractMemoDetailForView(contractCode, oCC).ToList();
    		}
    		public virtual List<dtTbt_RentalOperationTypeListForView> GetTbt_RentalOperationTypeListForView(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalOperationTypeListForView(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dtContractsSameSite> GetContractsSameSiteList(string pSiteCode, string pC_RENTAL_CHANGE_TYPE, string pC_SALE_CHANGE_TYPE, string pC_SERVICE_TYPE_RENTAL, string pContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractsSameSiteList(pSiteCode, pC_RENTAL_CHANGE_TYPE, pC_SALE_CHANGE_TYPE, pC_SERVICE_TYPE_RENTAL, pContractCode).ToList();
    		}
    		public virtual List<dtTbt_RentalInstSubContractorListForView> GetTbt_RentalInstSubContractorListForView(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalInstSubContractorListForView(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dtContractDocument> GetContractDocDataListForView(string pContractCode, string pOCC, string pContractOfficeCode_List, string pOperationOfficeCode_List)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDocDataListForView(pContractCode, pOCC, pContractOfficeCode_List, pOperationOfficeCode_List).ToList();
    		}
    		public virtual List<doContractHeader> GetContractHeaderData(string xml0)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractHeaderData(xml0).ToList();
    		}
    		public virtual List<dtTbt_SaleBasicForView> GetTbt_SaleBasicForView(string pchvContractCode, string pchrOCC, Nullable<bool> pLatestOCCFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_SaleBasicForView(pchvContractCode, pchrOCC, pLatestOCCFlag).ToList();
    		}
    		public virtual List<dtSaleHistoryDigest> GetSaleHistoryDigestList(string pchvContractCode, string xml_SelChangeType, string xml_selIncidentARtype, string pC_SALE_CHANGE_TYPE, string pC_INCIDENT_TYPE, string pC_AR_TYPE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleHistoryDigestList(pchvContractCode, xml_SelChangeType, xml_selIncidentARtype, pC_SALE_CHANGE_TYPE, pC_INCIDENT_TYPE, pC_AR_TYPE, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtRentalHistoryDigest> GetRentalHistoryDigestList(string pchvContractCode, string xml_SelChangeType, string xml_selIncidentARtype, string pC_RENTAL_CHANGE_TYPE, string pC_INCIDENT_TYPE, string pC_AR_TYPE, string pC_DOC_AUDIT_RESULT, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRentalHistoryDigestList(pchvContractCode, xml_SelChangeType, xml_selIncidentARtype, pC_RENTAL_CHANGE_TYPE, pC_INCIDENT_TYPE, pC_AR_TYPE, pC_DOC_AUDIT_RESULT, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtSearchDraftContractResult> SearchDraftContractList(string pchvQuotationTargetCode, string pchrAlphabet, Nullable<System.DateTime> pdtmRegistrationDateFrom, Nullable<System.DateTime> pdtmRegistrationDateTo, string pchvSalesman1Code, string pchvnSaleman1Name, string pchvnContractTargetName, string pchrnSiteName, string pchvnContractOfficeCode, string pchvnOperationOfficeCode, string pchrApproveContractStatus, Nullable<System.DateTime> pdtmApproveDateFrom, Nullable<System.DateTime> pdtmApproveDateTo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchDraftContractList(pchvQuotationTargetCode, pchrAlphabet, pdtmRegistrationDateFrom, pdtmRegistrationDateTo, pchvSalesman1Code, pchvnSaleman1Name, pchvnContractTargetName, pchrnSiteName, pchvnContractOfficeCode, pchvnOperationOfficeCode, pchrApproveContractStatus, pdtmApproveDateFrom, pdtmApproveDateTo).ToList();
    		}
    		public virtual List<dtContractTargetInfoByRelated> GetContractTargetInfoByRelated(string pRelatedContractCode, string pRelationType, string pRelatedOCC, string pC_PROD_TYPE_SALE, string pC_PROD_TYPE_AL, string pC_PROD_TYPE_ONLINE, string pC_PROD_TYPE_RENTAL_SALE, string pRelatedProductTypeCode, string pC_RELATION_TYPE_MA, string pC_RELATION_TYPE_SALE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractTargetInfoByRelated(pRelatedContractCode, pRelationType, pRelatedOCC, pC_PROD_TYPE_SALE, pC_PROD_TYPE_AL, pC_PROD_TYPE_ONLINE, pC_PROD_TYPE_RENTAL_SALE, pRelatedProductTypeCode, pC_RELATION_TYPE_MA, pC_RELATION_TYPE_SALE).ToList();
    		}
    		public virtual List<dtMaintContractTargetInfoByRelated> GetMaintContractTargetInfoByRelated(string pRelatedContractCode, string pC_MA_TARGET_PROD_TYPE, string pC_MA_TYPE, string pC_MA_FEE_TYPE, string pC_RELATION_TYPE_MA, string pRelatedOCC, string pC_PROD_TYPE_SALE, string pC_PROD_TYPE_AL, string pC_PROD_TYPE_ONLINE, string pC_PROD_TYPE_RENTAL_SALE, string pRelatedProductTypeCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaintContractTargetInfoByRelated(pRelatedContractCode, pC_MA_TARGET_PROD_TYPE, pC_MA_TYPE, pC_MA_FEE_TYPE, pC_RELATION_TYPE_MA, pRelatedOCC, pC_PROD_TYPE_SALE, pC_PROD_TYPE_AL, pC_PROD_TYPE_ONLINE, pC_PROD_TYPE_RENTAL_SALE, pRelatedProductTypeCode).ToList();
    		}
    		public virtual List<dtSaleInstruDetailListForView> GetSaleInstruDetailListForView(string pContractCode, string pOCC, string pInstrumentTypeCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleInstruDetailListForView(pContractCode, pOCC, pInstrumentTypeCode).ToList();
    		}
    		public virtual List<dtTbt_RentalBEDetailsForView> GetTbt_RentalBEDetailsForView(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalBEDetailsForView(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dtTbt_RentalInstrumentDetailsListForView> GetTbt_RentalInstrumentDetailsListForView(string pContractCode, string pOCC, string pInstrumentCode, string pInstrumentTypeCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalInstrumentDetailsListForView(pContractCode, pOCC, pInstrumentCode, pInstrumentTypeCode).ToList();
    		}
    		public virtual List<dtTbt_RentalSentryGuardDetailsListForView> GetTbt_RentalSentryGuardDetailsListForView(string pContractCode, string pOCC, Nullable<int> pSequenceNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalSentryGuardDetailsListForView(pContractCode, pOCC, pSequenceNo).ToList();
    		}
    		public virtual List<dtTbt_RentalSentryGuardForView> GetTbt_RentalSentryGuardForView(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalSentryGuardForView(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dtTbt_SaleInstSubcontractorListForView> GetTbt_SaleInstSubcontractorListForView(string pContractCode, string pOCC, string pSubcontractorCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_SaleInstSubcontractorListForView(pContractCode, pOCC, pSubcontractorCode).ToList();
    		}
    		public virtual List<string> GetSaleLastOCC(string pContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleLastOCC(pContractCode).ToList();
    		}
    		public virtual List<dtTbt_BillingTempListForView> GetTbt_BillingTempListForView(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_BillingTempListForView(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dtGroupSummary> GetGroupSummaryForViewCustGrp(string strGroupCode, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetGroupSummaryForViewCustGrp(strGroupCode, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtCustomerListGrp> GetCustomerListForViewCustGrp(string strGroupCode, string strCustRoleType, string strProductTypeCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetCustomerListForViewCustGrp(strGroupCode, strCustRoleType, strProductTypeCode).ToList();
    		}
    		public virtual List<dtsiteListGrp> GetSiteListForViewCustGrp(string strGroupCode, string strCustRoleType, string strProductTypeCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSiteListForViewCustGrp(strGroupCode, strCustRoleType, strProductTypeCode).ToList();
    		}
    		public virtual List<dtContractListGrp> GetContractListForViewCustGrp(string strGroupCode, string strCustRoleType, string strProductTypeCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractListForViewCustGrp(strGroupCode, strCustRoleType, strProductTypeCode).ToList();
    		}
    		public virtual List<dtTbs_ARApproveNoRunningNo> GetTbs_ARApproveNoRunningNo(string pYear, string pPrefix)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_ARApproveNoRunningNo(pYear, pPrefix).ToList();
    		}
    		public virtual List<tbs_ARApproveNoRunningNo> UpdateTbs_ARApproveNoRunningNo(string pYear, string pPrefix, Nullable<int> pRunningNo, string pUpdateBy)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbs_ARApproveNoRunningNo(pYear, pPrefix, pRunningNo, pUpdateBy).ToList();
    		}
    		public virtual List<tbs_ARApproveNoRunningNo> InsertTbs_ARApproveNoRunningNo(string pYear, string pPrefix, Nullable<int> pRunningNo, string pUser)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbs_ARApproveNoRunningNo(pYear, pPrefix, pRunningNo, pUser).ToList();
    		}
    		public virtual List<dtGroupList> GetGroupListForSearchCustGrp(string pchvGroupCode, string pchrnGroupName, string pchvOfficeCode, string pchvEmpNo, Nullable<int> pintNumOfCustFrom, Nullable<int> pintNumOfCustTo, Nullable<int> pintNumOfSiteFrom, Nullable<int> pintNumOfSiteTo, string c_CONTRACT_STATUS_BEF_START, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_AFTER_START, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetGroupListForSearchCustGrp(pchvGroupCode, pchrnGroupName, pchvOfficeCode, pchvEmpNo, pintNumOfCustFrom, pintNumOfCustTo, pintNumOfSiteFrom, pintNumOfSiteTo, c_CONTRACT_STATUS_BEF_START, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_AFTER_START, c_FLAG_ON).ToList();
    		}
    		public virtual List<tbt_SaleBasic> GetTbt_SaleBasic(string pchvContractCode, string pchrOCC, Nullable<bool> pbLastOCCFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_SaleBasic(pchvContractCode, pchrOCC, pbLastOCCFlag).ToList();
    		}
    		public virtual List<dtTbs_ARRunningNo> GetTbs_ARRunningNo(string pOffice, string pYear, string pPrefix)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_ARRunningNo(pOffice, pYear, pPrefix).ToList();
    		}
    		public virtual List<tbs_ARRunningNo> UpdateTbs_ARRunningNo(string pOfficeNo, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUpdateBy)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbs_ARRunningNo(pOfficeNo, pYear, pPrefix, pRunningNo, pUpdateBy).ToList();
    		}
    		public virtual List<tbs_ARRunningNo> InsertTbs_ARRunningNo(string pOffice, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUser)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbs_ARRunningNo(pOffice, pYear, pPrefix, pRunningNo, pUser).ToList();
    		}
    		public virtual List<dtTbs_IncidentRunningNo> GetTbs_IncidentRunningNo(string pOffice, string pYear, string pPrefix)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_IncidentRunningNo(pOffice, pYear, pPrefix).ToList();
    		}
    		public virtual List<tbs_IncidentRunningNo> InsertTbs_IncidentRunningNo(string pOffice, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUser)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbs_IncidentRunningNo(pOffice, pYear, pPrefix, pRunningNo, pUser).ToList();
    		}
    		public virtual List<tbs_IncidentRunningNo> UpdateTbs_IncidentRunningNo(string pOfficeNo, string pYear, string pPrefix, Nullable<int> pRunningNo, string pUpdateBy)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbs_IncidentRunningNo(pOfficeNo, pYear, pPrefix, pRunningNo, pUpdateBy).ToList();
    		}
    		public virtual List<tbt_RentalSecurityBasic> GetTbt_RentalSecurityBasic(string pchvContractCode, string pchrOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalSecurityBasic(pchvContractCode, pchrOCC).ToList();
    		}
    		public virtual List<dtChangedCustHistDetail> GetChangedCustHistDetail(string pchvContractCode, Nullable<int> pintSequenceNo, string pchvC_CONTRACT_SIGNER_TYPE, string pchvC_CUST_STATUS, string pchvC_CUST_TYPE, string pchvC_FINANCIAL_MARKET_TYPE, string pchvC_CHANGE_NAME_REASON_TYPE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetChangedCustHistDetail(pchvContractCode, pintSequenceNo, pchvC_CONTRACT_SIGNER_TYPE, pchvC_CUST_STATUS, pchvC_CUST_TYPE, pchvC_FINANCIAL_MARKET_TYPE, pchvC_CHANGE_NAME_REASON_TYPE).ToList();
    		}
    		public virtual List<dtChangedCustHistList2> GetChangedCustHistList2(string pContractCode, string pOCC, string pCSCustCode, string pRCCustCode, string pSiteCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetChangedCustHistList2(pContractCode, pOCC, pCSCustCode, pRCCustCode, pSiteCode).ToList();
    		}
    		public virtual List<dtMaintCheckUpResultList> GetMaintCheckUpResultList(string pContractCode, string pMATargetContractCode, string pProductCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaintCheckUpResultList(pContractCode, pMATargetContractCode, pProductCode).ToList();
    		}
    		public virtual List<tbt_RentalInstrumentDetails> GetTbt_RentalInstrumentDetails(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalInstrumentDetails(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalInstSubcontractor> GetTbt_RentalInstSubContractor(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalInstSubContractor(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalMaintenanceDetails> GetTbt_RentalMaintenanceDetails(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalMaintenanceDetails(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalOperationType> GetTbt_RentalOperationType(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalOperationType(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalSentryGuard> GetTbt_RentalSentryGuard(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalSentryGuard(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalSentryGuardDetails> GetTbt_RentalSentryGuardDetails(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalSentryGuardDetails(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_CancelContractMemo> GetTbt_CancelContractMemo(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_CancelContractMemo(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_CancelContractMemoDetail> GetTbt_CancelContractMemoDetail(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_CancelContractMemoDetail(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalBEDetails> GetTbt_RentalBEDetails(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RentalBEDetails(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dsSaleInstrumentDetails> GetSaleInstrumentDetails(string pchrContractCode, string pchrOCC, string c_INST_TYPE_GENERAL, string c_SALE_CHANGE_TYPE_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleInstrumentDetails(pchrContractCode, pchrOCC, c_INST_TYPE_GENERAL, c_SALE_CHANGE_TYPE_CANCEL).ToList();
    		}
    		public virtual List<dsGetSiteContractList> GetSiteContractList(string pContractCode, Nullable<bool> pLastestOCCFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSiteContractList(pContractCode, pLastestOCCFlag).ToList();
    		}
    		public virtual List<dtGetMaintenanceTargetContract> GetMaintenanceTargetContract(string pContractCode, Nullable<bool> pLastestOCCFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaintenanceTargetContract(pContractCode, pLastestOCCFlag).ToList();
    		}
    		public virtual List<dtProjectData> GetProjectDataForSearch(string pchrProjectCode, string pchvContractCode, string pchnvProductCode, string pchnvProjectName, string pchnvProjectAddress, string pchnvPJPurchaseName, string pchnvOwner1Name, string pchnvCompanyName, string pchnvOtherProjectRelatedPersonName, string pchnvHeadSalesmanEmpName, string pchnvProjectManagerEmpName)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetProjectDataForSearch(pchrProjectCode, pchvContractCode, pchnvProductCode, pchnvProjectName, pchnvProjectAddress, pchnvPJPurchaseName, pchnvOwner1Name, pchnvCompanyName, pchnvOtherProjectRelatedPersonName, pchnvHeadSalesmanEmpName, pchnvProjectManagerEmpName).ToList();
    		}
    		public virtual List<dtCustomerList> GetCustomerListForSearchInfo(string pchrCustomerCode, string pchrRoleTypeContractTarget, string pchrRoleTypePurchaser, string pchrRoleTypeRealCustomer, string pchrGroupCode, string pchrnCustomerName, string pchrnGroupName, string pchrCustomerStatus, string pchrCustomerTypeCode, string pchrCompanyTypeCode, string pchrnIDNo, string pchrRegionCode, string pchrBusinessTypeCode, string pchrnCust_Address, string pchrnCust_Alley, string pchrnCust_Road, string pchrnCust_SubDistrict, string pchrCust_ProvinceCode, string pchrCust_DistrictCode, string pchrCust_ZipCode, string pchrnCust_PhoneNo, string pchrnCust_FaxNo, string pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, string pchrC_CUST_ROLE_TYPE_REAL_CUST, string pchrC_CUST_ROLE_TYPE_PURCHASER, Nullable<bool> pbitC_FLAG_ON, string pchrC_SERVICE_TYPE_RENTAL, string pchrC_SERVICE_TYPE_SALE, string pchrC_CONTRACT_STATUS_BEF_START, string c_CUST_TYPE_JURISTIC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetCustomerListForSearchInfo(pchrCustomerCode, pchrRoleTypeContractTarget, pchrRoleTypePurchaser, pchrRoleTypeRealCustomer, pchrGroupCode, pchrnCustomerName, pchrnGroupName, pchrCustomerStatus, pchrCustomerTypeCode, pchrCompanyTypeCode, pchrnIDNo, pchrRegionCode, pchrBusinessTypeCode, pchrnCust_Address, pchrnCust_Alley, pchrnCust_Road, pchrnCust_SubDistrict, pchrCust_ProvinceCode, pchrCust_DistrictCode, pchrCust_ZipCode, pchrnCust_PhoneNo, pchrnCust_FaxNo, pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, pchrC_CUST_ROLE_TYPE_REAL_CUST, pchrC_CUST_ROLE_TYPE_PURCHASER, pbitC_FLAG_ON, pchrC_SERVICE_TYPE_RENTAL, pchrC_SERVICE_TYPE_SALE, pchrC_CONTRACT_STATUS_BEF_START, c_CUST_TYPE_JURISTIC).ToList();
    		}
    		public virtual List<dtContractsSameSite> GetContractsListForViewSite(string pSiteCode, string pC_RENTAL_CHANGE_TYPE, string pC_SALE_CHANGE_TYPE, string pC_SERVICE_TYPE_RENTAL, string pC_SALE_CHANGE_TYPE_NEW_SALE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractsListForViewSite(pSiteCode, pC_RENTAL_CHANGE_TYPE, pC_SALE_CHANGE_TYPE, pC_SERVICE_TYPE_RENTAL, pC_SALE_CHANGE_TYPE_NEW_SALE, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtSiteList> GetSiteListForCustInfo(string pchvCustomerCode, string pchrCustomerRole, string pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, string pchrC_CUST_ROLE_TYPE_REAL_CUST, string pchrC_CUST_ROLE_TYPE_PURCHASER, Nullable<bool> pbitC_FLAG_ON, string pchrC_SERVICE_TYPE_RENTAL, string pchrC_RENTAL_CHANGE_TYPE_END_CONTRACT, string pchrC_RENTAL_CHANGE_TYPE_CANCEL, string pchrC_SERVICE_TYPE_SALE, string pchrC_CONTRACT_STATUS_CANCEL, string pchrC_CONTRACT_STATUS_END, string pchrC_CONTRACT_STATUS_BEF_START, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSiteListForCustInfo(pchvCustomerCode, pchrCustomerRole, pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, pchrC_CUST_ROLE_TYPE_REAL_CUST, pchrC_CUST_ROLE_TYPE_PURCHASER, pbitC_FLAG_ON, pchrC_SERVICE_TYPE_RENTAL, pchrC_RENTAL_CHANGE_TYPE_END_CONTRACT, pchrC_RENTAL_CHANGE_TYPE_CANCEL, pchrC_SERVICE_TYPE_SALE, pchrC_CONTRACT_STATUS_CANCEL, pchrC_CONTRACT_STATUS_END, pchrC_CONTRACT_STATUS_BEF_START, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<doBillingTempBasic> GetBillingBasicData(string pContractCode, string pOCC, string pBillingType, string pBillingTiming, string pC_BILLING_TYPE_SALE_PRICE, string pC_BILLINGTEMP_FLAG_KEEP, string pC_CURRENCY_LOCAL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetBillingBasicData(pContractCode, pOCC, pBillingType, pBillingTiming, pC_BILLING_TYPE_SALE_PRICE, pC_BILLINGTEMP_FLAG_KEEP, pC_CURRENCY_LOCAL).ToList();
    		}
    		public virtual List<doBillingTempDetail> GetBillingDetailData(string pContractCode, string pOCC, string pBillingType, string pBillingTiming, string pC_BILLINGTEMP_FLAG_KEEP)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetBillingDetailData(pContractCode, pOCC, pBillingType, pBillingTiming, pC_BILLINGTEMP_FLAG_KEEP).ToList();
    		}
    		public virtual List<tbt_BillingTemp> InsertTbt_BillingTemp(string pContractCode, string pOCC, string pBillingOCC, string pBillingTargetRunningNo, string pBillingClientCode, string pBillingTargetCode, string pBillingOfficeCode, string pBillingType, Nullable<int> pCreditTerm, string pBillingTiming, Nullable<decimal> pBillingAmt, string pPayMethod, Nullable<int> pBillingCycle, string pCalDailyFeeStatus, string pSendFlag, Nullable<System.DateTime> pProcessDateTime, string pEmpNo, string pDocLanguage, Nullable<decimal> pBillingAmtUsd, string pBillingAmtCurrencyType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_BillingTemp(pContractCode, pOCC, pBillingOCC, pBillingTargetRunningNo, pBillingClientCode, pBillingTargetCode, pBillingOfficeCode, pBillingType, pCreditTerm, pBillingTiming, pBillingAmt, pPayMethod, pBillingCycle, pCalDailyFeeStatus, pSendFlag, pProcessDateTime, pEmpNo, pDocLanguage, pBillingAmtUsd, pBillingAmtCurrencyType).ToList();
    		}
    		public virtual List<tbt_BillingTemp> DeleteTbt_BillingTemp_ByContractCode(string pContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_BillingTemp_ByContractCode(pContractCode).ToList();
    		}
    		public virtual List<tbt_BillingTemp> DeleteTbt_BillingTemp_ByContractCodeOCC(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_BillingTemp_ByContractCodeOCC(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_BillingTemp> DeleteTbt_BillingTemp_ByKey(string pContractCode, string pOCC, Nullable<int> pSequenceNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_BillingTemp_ByKey(pContractCode, pOCC, pSequenceNo).ToList();
    		}
    		public virtual List<tbt_BillingTemp> UpdateTbt_BillingTemp_ByBillingClientAndOffice(string pBillingOCC, string pBillingTargetCode, string pContractCode, string pBillingClientCode, string pBillingOfficeCode, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_BillingTemp_ByBillingClientAndOffice(pBillingOCC, pBillingTargetCode, pContractCode, pBillingClientCode, pBillingOfficeCode, pProcessingDateTime, pEmpNo).ToList();
    		}
    		public virtual List<tbt_BillingTemp> UpdateTbt_BillingTemp_ByBillingTarget(string pNewBillingClientCode, string pNewBillingOfficeCode, string pNewBillingTargetCode, string pOldBillingClientCode, string pOldBillingOfficeCode, string pOldBillingTargetCode, string pContractCode, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo, string pC_BILLINGTEMP_FLAG_KEEP)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_BillingTemp_ByBillingTarget(pNewBillingClientCode, pNewBillingOfficeCode, pNewBillingTargetCode, pOldBillingClientCode, pOldBillingOfficeCode, pOldBillingTargetCode, pContractCode, pProcessingDateTime, pEmpNo, pC_BILLINGTEMP_FLAG_KEEP).ToList();
    		}
    		public virtual List<tbt_BillingTemp> UpdateTbt_BillingTemp_ByKey(string pBillingOCC, string pBillingTargetRunningNo, string pBillingClientCode, string pBillingTargetCode, string pBillingOfficeCode, string pBillingType, Nullable<int> pCreditTerm, string pBillingTiming, Nullable<decimal> pBillingAmt, string pPayMethod, Nullable<int> pBillingCycle, string pCalDailyFeeStatus, string pSendFlag, string pContractCode, string pOCC, Nullable<int> pSequenceNo, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo, string pBillingAmtCurrencyType, Nullable<decimal> pBillingAmtUsd)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_BillingTemp_ByKey(pBillingOCC, pBillingTargetRunningNo, pBillingClientCode, pBillingTargetCode, pBillingOfficeCode, pBillingType, pCreditTerm, pBillingTiming, pBillingAmt, pPayMethod, pBillingCycle, pCalDailyFeeStatus, pSendFlag, pContractCode, pOCC, pSequenceNo, pProcessingDateTime, pEmpNo, pBillingAmtCurrencyType, pBillingAmtUsd).ToList();
    		}
    		public virtual List<tbt_BillingTemp> UpdateSendFlag(string pContractCode, Nullable<int> pSequenceNo, string pOCC, string pC_BILLINGTEMP_FLAG_SENT, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateSendFlag(pContractCode, pSequenceNo, pOCC, pC_BILLINGTEMP_FLAG_SENT, pProcessingDateTime, pEmpNo).ToList();
    		}
    		public virtual List<doRentalContractBasicInformation> GetRentalContractBasicInformation(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRentalContractBasicInformation(strContractCode).ToList();
    		}
    		public virtual List<Nullable<int>> GetContractCounterNo(string strContractCode, string strLastOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractCounterNo(strContractCode, strLastOCC).ToList();
    		}
    		public virtual List<string> GetLastImplementedOCCs(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLastImplementedOCCs(strContractCode).ToList();
    		}
    		public virtual List<string> GetLastUnimplementedOCCs(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLastUnimplementedOCCs(strContractCode).ToList();
    		}
    		public virtual List<string> GetContractDocOCC(string strCode, string strOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDocOCC(strCode, strOCC).ToList();
    		}
    		public virtual List<string> GetLastOCCs(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLastOCCs(strContractCode).ToList();
    		}
    		public virtual List<Nullable<int>> GetLastContractCounterNo(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLastContractCounterNo(strContractCode).ToList();
    		}
    		public virtual List<dtContractListGrp> GetContractListForViewCustGrp_CT_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractListForViewCustGrp_CT_Rental(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtContractListGrp> GetContractListForViewCustGrp_CT_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractListForViewCustGrp_CT_Sale(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtContractListGrp> GetContractListForViewCustGrp_R_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractListForViewCustGrp_R_Rental(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtContractListGrp> GetContractListForViewCustGrp_R_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractListForViewCustGrp_R_Sale(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtCustomerListGrp> GetCustomerListForViewCustGrp_CT_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetCustomerListForViewCustGrp_CT_Rental(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtCustomerListGrp> GetCustomerListForViewCustGrp_CT_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetCustomerListForViewCustGrp_CT_Sale(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtCustomerListGrp> GetCustomerListForViewCustGrp_R_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetCustomerListForViewCustGrp_R_Rental(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtCustomerListGrp> GetCustomerListForViewCustGrp_R_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetCustomerListForViewCustGrp_R_Sale(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<tbt_SaleBasic> UpdateTbt_SaleBasic(string xml_doTbtSaleBasic)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_SaleBasic(xml_doTbtSaleBasic).ToList();
    		}
    		public virtual List<tbt_RentalSecurityBasic> UpdateTbt_RentalSecurityBasic(string xml_doTbtRentalSecurityBasic)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_RentalSecurityBasic(xml_doTbtRentalSecurityBasic).ToList();
    		}
    		public virtual List<doContractAutoRenew> GetContractExpireNextMonth(string pC_CONTRACT_STATUS_AFTER_START, Nullable<System.DateTime> batchDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractExpireNextMonth(pC_CONTRACT_STATUS_AFTER_START, batchDate).ToList();
    		}
    		public virtual List<doRentalSecurityBasicInformation> GetRentalSecurityBasicInformation(string strContractCode, string occ)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRentalSecurityBasicInformation(strContractCode, occ).ToList();
    		}
    		public virtual List<tbt_Project> GetTbt_Project(string pProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_Project(pProjectCode).ToList();
    		}
    		public virtual List<tbt_ProjectStockoutInstrument> GetTbt_ProjectStockoutInstrument(string pProjectCode, string pInstrumentCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectStockoutInstrument(pProjectCode, pInstrumentCode).ToList();
    		}
    		public virtual List<tbt_ProjectStockoutInstrument> InsertTbt_ProjectStockoutInstrument(string xml_doTbtProjectStockoutInstrument)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectStockoutInstrument(xml_doTbtProjectStockoutInstrument).ToList();
    		}
    		public virtual List<tbt_ProjectStockoutInstrument> UpdateTbt_ProjectStockoutInstrument(string xml_doTbtProjectStockoutInstrument)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ProjectStockoutInstrument(xml_doTbtProjectStockoutInstrument).ToList();
    		}
    		public virtual List<tbt_RelationType> GetTbt_RelationType(string pContractCode, string pOCC, string pRelatedContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_RelationType(pContractCode, pOCC, pRelatedContractCode).ToList();
    		}
    		public virtual List<tbt_RelationType> CheckRelationType(string pContractCode, string pC_CONTRACT_STATUS_END, string pC_CONTRACT_STATUS_CANCEL, string pC_CONTRACT_STATUS_FIXED_CANCEL, string pQuotationTargetCode, string pRelationType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.CheckRelationType(pContractCode, pC_CONTRACT_STATUS_END, pC_CONTRACT_STATUS_CANCEL, pC_CONTRACT_STATUS_FIXED_CANCEL, pQuotationTargetCode, pRelationType).ToList();
    		}
    		public virtual List<Nullable<int>> CancelUnoperationedContract(string strContractCode, string strOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.CancelUnoperationedContract(strContractCode, strOCC).ToList();
    		}
    		public virtual List<tbt_CancelContractMemo> DeleteTbt_CancelContractMemo_ByKey(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_CancelContractMemo_ByKey(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalBEDetails> DeleteTbt_RentalBEDetails_ByKey(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalBEDetails_ByKey(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalOperationType> DeleteTbt_RentalOperationType_ByKey(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalOperationType_ByKey(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalSentryGuard> DeleteTbt_RentalSentryGuard_ByKey(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalSentryGuard_ByKey(pContractCode, pOCC).ToList();
    		}
    		public virtual List<dtsiteListGrp> GetSiteListForViewCustGrp_CT_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSiteListForViewCustGrp_CT_Rental(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtsiteListGrp> GetSiteListForViewCustGrp_CT_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSiteListForViewCustGrp_CT_Sale(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtsiteListGrp> GetSiteListForViewCustGrp_R_Rental(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSiteListForViewCustGrp_R_Rental(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtsiteListGrp> GetSiteListForViewCustGrp_R_Sale(string strGroupCode, string strCONTRACT_PREFIX, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSiteListForViewCustGrp_R_Sale(strGroupCode, strCONTRACT_PREFIX, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<tbt_CancelContractMemoDetail> DeleteTbt_CancelContractMemoDetail_ByContractCodeOCC(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_CancelContractMemoDetail_ByContractCodeOCC(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalInstrumentDetails> DeleteTbt_RentalInstrumentDetails_ByContractCodeOCC(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalInstrumentDetails_ByContractCodeOCC(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalInstSubcontractor> DeleteTbt_RentalInstSubContractor_ByContractCodeOCC(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalInstSubContractor_ByContractCodeOCC(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalSentryGuardDetails> DeleteTbt_RentalSentryguardDetails_ByContractCodeOCC(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalSentryguardDetails_ByContractCodeOCC(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalSecurityBasic> DeleteTbt_RentalSecurityBasic_ByKey(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalSecurityBasic_ByKey(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_RentalMaintenanceDetails> DeleteTbt_RentalMaintenanceDetails_ByKey(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RentalMaintenanceDetails_ByKey(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_SaleInstrumentDetails> GetTbt_SaleInstrumentDetails(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_SaleInstrumentDetails(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_SaleBasic> InsertTbt_SaleBasic(string xml_SaleBasic)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_SaleBasic(xml_SaleBasic).ToList();
    		}
    		public virtual List<tbt_SaleInstrumentDetails> InsertTbt_SaleInstrumentDetails(string xml_SaleInstrumentDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_SaleInstrumentDetails(xml_SaleInstrumentDetails).ToList();
    		}
    		public virtual List<tbt_SaleInstSubcontractor> InsertTbt_SaleInstSubcontractor(string pContractCode, string pOCC, string pSubcontractorCode, Nullable<System.DateTime> pDate, string pUser)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_SaleInstSubcontractor(pContractCode, pOCC, pSubcontractorCode, pDate, pUser).ToList();
    		}
    		public virtual List<tbt_RentalContractBasic> UpdateSummaryFields(string strContractCode, string strLastChangeType, Nullable<System.DateTime> dateLastChangeImplementDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateSummaryFields(strContractCode, strLastChangeType, dateLastChangeImplementDate).ToList();
    		}
    		public virtual List<tbt_RentalContractBasic> UpdateTbt_RentalContractBasic(string xml_doTbtRentalContractBasic)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_RentalContractBasic(xml_doTbtRentalContractBasic).ToList();
    		}
    		public virtual List<tbt_RentalContractBasic> InsertTbt_RentalContractBasic(string xml_RentalContractBasic)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalContractBasic(xml_RentalContractBasic).ToList();
    		}
    		public virtual List<tbt_RentalSecurityBasic> InsertTbt_RentalSecurityBasic(string xml_RentalSecurityBasic)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalSecurityBasic(xml_RentalSecurityBasic).ToList();
    		}
    		public virtual List<tbt_RentalBEDetails> InsertTbt_RentalBEDetails(string xml_RentalBEDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalBEDetails(xml_RentalBEDetails).ToList();
    		}
    		public virtual List<tbt_RentalInstrumentDetails> InsertTbt_RentalInstrumentDetails(string xml_RentalInstrumentDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalInstrumentDetails(xml_RentalInstrumentDetails).ToList();
    		}
    		public virtual List<tbt_RentalSentryGuard> InsertTbt_RentalSentryGuard(string xml_RentalSentryGuard)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalSentryGuard(xml_RentalSentryGuard).ToList();
    		}
    		public virtual List<tbt_RentalSentryGuardDetails> InsertTbt_RentalSentryGuardDetails(string xml_RentalSentryGuardDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalSentryGuardDetails(xml_RentalSentryGuardDetails).ToList();
    		}
    		public virtual List<tbt_CancelContractMemoDetail> InsertTbt_CancelContractMemoDetail(string xml_CancelContractMemoDetail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_CancelContractMemoDetail(xml_CancelContractMemoDetail).ToList();
    		}
    		public virtual List<tbt_RentalMaintenanceDetails> InsertTbt_RentalMaintenanceDetails(string xml_RentalMaintenanceDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalMaintenanceDetails(xml_RentalMaintenanceDetails).ToList();
    		}
    		public virtual List<tbt_RentalOperationType> InsertTbt_RentalOperationType(string pContractCode, string pOCC, string pOperationTypeCode, Nullable<System.DateTime> pProcessDateTime, string pEmpNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalOperationType(pContractCode, pOCC, pOperationTypeCode, pProcessDateTime, pEmpNo).ToList();
    		}
    		public virtual List<tbt_RentalInstSubcontractor> InsertTbt_RentalInstSubContractor(string pContractCode, string pOCC, string pSubcontractorCode, Nullable<System.DateTime> pProcessDateTime, string pUser)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RentalInstSubContractor(pContractCode, pOCC, pSubcontractorCode, pProcessDateTime, pUser).ToList();
    		}
    		public virtual List<tbt_ContractEmail> GetUnsentNotifyEmail(string pEmailType, Nullable<bool> pSendFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetUnsentNotifyEmail(pEmailType, pSendFlag).ToList();
    		}
    		public virtual List<tbt_ContractEmail> UpdateTbt_ContractEmail(string xml_doTbtContractEmail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ContractEmail(xml_doTbtContractEmail).ToList();
    		}
    		public virtual List<tbt_ContractEmail> DeleteTbt_ContractEmail(Nullable<int> pContractEmailID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_ContractEmail(pContractEmailID).ToList();
    		}
    		public virtual List<tbt_ContractEmail> GetTbt_ContractEmail(Nullable<int> pContractEmailID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ContractEmail(pContractEmailID).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckup> DeleteMACheckup(string pContractCode, Nullable<System.DateTime> pMaintenanceDate, Nullable<bool> pDeleteFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteMACheckup(pContractCode, pMaintenanceDate, pDeleteFlag).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckupDetails> DeleteMACheckupDetail(string pContractCode, Nullable<System.DateTime> pMaintenanceDate, Nullable<bool> pDeleteFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteMACheckupDetail(pContractCode, pMaintenanceDate, pDeleteFlag).ToList();
    		}
    		public virtual List<doCreateMASchedule> GetMAforCreateScheduleByMA(string pContractCode, string pC_RELATION_TYPE_MA, Nullable<bool> pLatestOCCFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMAforCreateScheduleByMA(pContractCode, pC_RELATION_TYPE_MA, pLatestOCCFlag).ToList();
    		}
    		public virtual List<doCreateMAScheduleDetail> GetMAforCreateScheduleDetailByMA(string pContractCode, string pC_RELATION_TYPE_MA, Nullable<bool> pLatestOCCFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMAforCreateScheduleDetailByMA(pContractCode, pC_RELATION_TYPE_MA, pLatestOCCFlag).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckup> InsertTbt_MaintenanceCheckup(string xml_MaintenanceCheckup)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_MaintenanceCheckup(xml_MaintenanceCheckup).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckupDetails> InsertTbt_MaintenanceCheckupDetails(string xml_MaintenanceCheckupDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_MaintenanceCheckupDetails(xml_MaintenanceCheckupDetails).ToList();
    		}
    		public virtual List<doMaintenanceCheckupInformation> GetMaintenanceCheckupInformation(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaintenanceCheckupInformation(pContractCode, pProductCode, pInstructionDate).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckup> GetTbt_MaintenanceCheckup(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_MaintenanceCheckup(pContractCode, pProductCode, pInstructionDate).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckupDetails> GetTbt_MaintenanceCheckupDetails(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate, string pMATargetContractCode, string pMATargetOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_MaintenanceCheckupDetails(pContractCode, pProductCode, pInstructionDate, pMATargetContractCode, pMATargetOCC).ToList();
    		}
    		public virtual List<Nullable<int>> IsLastResultToRegister(string pContractCode, string pProductCode, Nullable<System.DateTime> pInstructionDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsLastResultToRegister(pContractCode, pProductCode, pInstructionDate).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckup> UpdateTbt_MaintenanceCheckup(string xml_doTbtMaintenanceCheckup)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_MaintenanceCheckup(xml_doTbtMaintenanceCheckup).ToList();
    		}
    		public virtual List<tbt_MaintenanceCheckupDetails> UpdateTbt_MaintenanceCheckupDetails(string xml_doTbtMaintenanceCheckupDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_MaintenanceCheckupDetails(xml_doTbtMaintenanceCheckupDetails).ToList();
    		}
    		public virtual List<doSaleContractBasicInformation> GetSaleContractBasicInformation(string strContractCode, Nullable<bool> isLastOCCFlag, string strOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleContractBasicInformation(strContractCode, isLastOCCFlag, strOCC).ToList();
    		}
    		public virtual List<tbm_SubContractor> GetTbm_SubContractor(string pSubContractorCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbm_SubContractor(pSubContractorCode).ToList();
    		}
    		public virtual List<Nullable<int>> IsAllResultRegistered(string pContractCode, Nullable<System.DateTime> pInstructionDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsAllResultRegistered(pContractCode, pInstructionDate).ToList();
    		}
    		public virtual List<tbt_RentalSentryGuard> UpdateTbt_RentalSentryGuard(string xml_doTbtRentalSentryGuard)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_RentalSentryGuard(xml_doTbtRentalSentryGuard).ToList();
    		}
    		public virtual List<tbt_CancelContractMemoDetail> UpdateTbt_CancelContractMemoDetail(string xml_doTbtCancelContractMemoDetail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_CancelContractMemoDetail(xml_doTbtCancelContractMemoDetail).ToList();
    		}
    		public virtual List<dtSearchMACheckupResult> SearchAlarmPeriodMaintenance(string pProductName, string pSiteName, string pEmployeeName, string pC_PROD_TYPE_AL, string pC_PROD_TYPE_RENTAL_SALE, string pOperationOfficeCode, Nullable<System.DateTime> pInstructionDateFrom, Nullable<System.DateTime> pInstructionDateTo, string pUserCode, string pContractCode, string pMACheckupNo, Nullable<bool> pHasCheckupResult, Nullable<bool> pHaveInstrumentMalfunction, Nullable<bool> pNeedToContactSalesman)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchAlarmPeriodMaintenance(pProductName, pSiteName, pEmployeeName, pC_PROD_TYPE_AL, pC_PROD_TYPE_RENTAL_SALE, pOperationOfficeCode, pInstructionDateFrom, pInstructionDateTo, pUserCode, pContractCode, pMACheckupNo, pHasCheckupResult, pHaveInstrumentMalfunction, pNeedToContactSalesman).ToList();
    		}
    		public virtual List<dtSearchMACheckupResult> SearchSaleMaintenance(string pProductName, string pSiteName, string pEmployeeName, string pOperationOfficeCode, Nullable<System.DateTime> pInstructionDateFrom, Nullable<System.DateTime> pInstructionDateTo, string pUserCode, string pContractCode, string pMACheckupNo, Nullable<bool> pHasCheckupResult, Nullable<bool> pHaveInstrumentMalfunction, Nullable<bool> pNeedToContactSalesman, Nullable<bool> pFLAG_ON, string pC_PROD_TYPE_MA)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchSaleMaintenance(pProductName, pSiteName, pEmployeeName, pOperationOfficeCode, pInstructionDateFrom, pInstructionDateTo, pUserCode, pContractCode, pMACheckupNo, pHasCheckupResult, pHaveInstrumentMalfunction, pNeedToContactSalesman, pFLAG_ON, pC_PROD_TYPE_MA).ToList();
    		}
    		public virtual List<tbt_BillingTemp> DeleteTbt_BillingTemp_ByContractCodeOCCBillingClientCodeBillingOfficeCode(string contractCode, string oCC, string billingClientCode, string billingOfficeCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_BillingTemp_ByContractCodeOCCBillingClientCodeBillingOfficeCode(contractCode, oCC, billingClientCode, billingOfficeCode).ToList();
    		}
    		public virtual List<tbt_BillingTemp> UpdateTbt_BillingTempByKeyXML(string xml_doTbtUpdateTbtBillingTemp)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_BillingTempByKeyXML(xml_doTbtUpdateTbtBillingTemp).ToList();
    		}
    		public virtual List<string> GetLastMACheckupNo()
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLastMACheckupNo().ToList();
    		}
    		public virtual List<tbt_RelationType> InsertTbt_RelationType(string xml_RelationType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_RelationType(xml_RelationType).ToList();
    		}
    		public virtual List<doProjectContractDetail> GetContractDetailList(string pProjectCode, string pC_DOC_AUDIT_RESULT)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDetailList(pProjectCode, pC_DOC_AUDIT_RESULT).ToList();
    		}
    		public virtual List<Nullable<int>> IsSomeResultRegistered(string pContractCode, Nullable<System.DateTime> pInstructionDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsSomeResultRegistered(pContractCode, pInstructionDate).ToList();
    		}
    		public virtual List<tbt_DraftRentalBillingTarget> GetTbt_DraftRentalBillingTarget(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalBillingTarget(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalContract> GetTbt_DraftRentalContract(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalContract(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalEmail> GetTbt_DraftRentalEmail(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalEmail(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalInstrument> GetTbt_DraftRentalInstrument(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalInstrument(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalMaintenanceDetails> GetTbt_DraftRentalMaintenanceDetails(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalMaintenanceDetails(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalOperationType> GetTbt_DraftRentalOperationType(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalOperationType(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftSaleContract> GetTbt_DraftSaleContract(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftSaleContract(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_CancelContractMemo> GetLastCancelContractMemo(string strContractCode, Nullable<bool> isQuotation)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLastCancelContractMemo(strContractCode, isQuotation).ToList();
    		}
    		public virtual List<string> GetPreviousImplementedOCC(string paramContractCode, string paramOCC, Nullable<bool> paramFLAGON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetPreviousImplementedOCC(paramContractCode, paramOCC, paramFLAGON).ToList();
    		}
    		public virtual List<tbt_IncidentRole> GetTbt_IncidentRole(Nullable<int> incidentID, string empNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_IncidentRole(incidentID, empNo).ToList();
    		}
    		public virtual List<dtIncident> GetIncidentData(Nullable<int> incidentID, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_INCIDENT_RELEVANT_TYPE_CUSTOMER, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_RELEVANT_TYPE_PROJECT, string c_INCIDENT_TYPE, string c_REASON_TYPE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentData(incidentID, c_INCIDENT_RELEVANT_TYPE_CONTRACT, c_INCIDENT_RELEVANT_TYPE_CUSTOMER, c_INCIDENT_RELEVANT_TYPE_SITE, c_INCIDENT_RELEVANT_TYPE_PROJECT, c_INCIDENT_TYPE, c_REASON_TYPE).ToList();
    		}
    		public virtual List<string> GetIncidentOfficeChief(Nullable<int> incidentID, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentOfficeChief(incidentID, c_FLAG_ON).ToList();
    		}
    		public virtual List<string> GetIncidentDepartmentChief(Nullable<int> incidentID, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentDepartmentChief(incidentID, c_FLAG_ON).ToList();
    		}
    		public virtual List<tbs_ARPermissionConfiguration> GetTbs_ARPermissionConfiguration(string strPermissionType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_ARPermissionConfiguration(strPermissionType).ToList();
    		}
    		public virtual List<tbs_IncidentPermissionConfiguration> GetTbs_IncidentPermissionConfiguration(string incidentRole)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_IncidentPermissionConfiguration(incidentRole).ToList();
    		}
    		public virtual List<tbt_BillingTemp> DeleteAllOneTimeFee(string contractCode, string oCC, string c_BILLING_TYPE_INSTALLATION_FEE, string c_BILLING_TYPE_DEPOSIT_FEE, string pContractCode, string pOCC, string pBillingOCC, string pBillingTargetRunningNo, string pBillingClientCode, string pBillingTargetCode, string pBillingOfficeCode, string pBillingType, string pBillingTiming, Nullable<decimal> pBillingAmt, string pPayMethod, Nullable<int> pBillingCycle, string pCalDailyFeeStatus, string pSendFlag, Nullable<System.DateTime> pProcessDateTime, string pEmpNo, Nullable<decimal> pBillingAmtUsd, string pBillingAmtCurrencyType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteAllOneTimeFee(contractCode, oCC, c_BILLING_TYPE_INSTALLATION_FEE, c_BILLING_TYPE_DEPOSIT_FEE, pContractCode, pOCC, pBillingOCC, pBillingTargetRunningNo, pBillingClientCode, pBillingTargetCode, pBillingOfficeCode, pBillingType, pBillingTiming, pBillingAmt, pPayMethod, pBillingCycle, pCalDailyFeeStatus, pSendFlag, pProcessDateTime, pEmpNo, pBillingAmtUsd, pBillingAmtCurrencyType).ToList();
    		}
    		public virtual List<tbt_ContractEmail> DeleteTbt_ContractEmail_UnsentContractEmail(string paramContractCode, string paramEmailType, Nullable<bool> paramFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_ContractEmail_UnsentContractEmail(paramContractCode, paramEmailType, paramFlag).ToList();
    		}
    		public virtual List<tbt_BillingTemp> GetBillingTargetForEditing(string strContractCode, string strOCC, string c_BILLING_TYPE_CONTRACT_FEE, string c_BILLING_TYPE_INSTALLATION_FEE, string c_BILLING_TYPE_MAINTENANCE_FEE, string c_BILLING_TYPE_STOP_FEE, string c_BILLING_TYPE_SALE_PRICE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetBillingTargetForEditing(strContractCode, strOCC, c_BILLING_TYPE_CONTRACT_FEE, c_BILLING_TYPE_INSTALLATION_FEE, c_BILLING_TYPE_MAINTENANCE_FEE, c_BILLING_TYPE_STOP_FEE, c_BILLING_TYPE_SALE_PRICE).ToList();
    		}
    		public virtual List<tbt_SaleInstrumentDetails> UpdateTbt_SaleInstrumentDetails(string xml_doTbt_SaleInstrumentDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_SaleInstrumentDetails(xml_doTbt_SaleInstrumentDetails).ToList();
    		}
    		public virtual List<dtSummaryIncident> SummaryIncident(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> currentdate, string c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTION, string c_INCIDENT_STATUS_COMPLETE, string c_INCIDENT_TYPE_CANCEL, string c_INCIDENT_TYPE_COMPLAIN)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SummaryIncident(dateFrom, dateTo, currentdate, c_INCIDENT_STATUS_WAIT_FOR_INSTRUCTION, c_INCIDENT_STATUS_COMPLETE, c_INCIDENT_TYPE_CANCEL, c_INCIDENT_TYPE_COMPLAIN).ToList();
    		}
    		public virtual List<doMaintenanceRelationType> GenerateMaintenanceRelationType(string xml0, Nullable<bool> pBeforeStartFlag)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GenerateMaintenanceRelationType(xml0, pBeforeStartFlag).ToList();
    		}
    		public virtual List<tbt_DraftRentalBEDetails> InsertTbt_DraftRentalBEDetails(string xml_DraftRentalBEDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalBEDetails(xml_DraftRentalBEDetails).ToList();
    		}
    		public virtual List<tbt_DraftRentalBillingTarget> InsertTbt_DraftRentalBillingTarget(string xml_DraftRentalBillingTarget)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalBillingTarget(xml_DraftRentalBillingTarget).ToList();
    		}
    		public virtual List<tbt_DraftRentalContract> InsertTbt_DraftRentalContract(string xml_DraftRentalContract)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalContract(xml_DraftRentalContract).ToList();
    		}
    		public virtual List<tbt_DraftRentalEmail> InsertTbt_DraftRentalEmail(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalEmail(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalInstrument> InsertTbt_DraftRentalInstrument(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalInstrument(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalMaintenanceDetails> InsertTbt_DraftRentalMaintenanceDetails(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalMaintenanceDetails(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalOperationType> InsertTbt_DraftRentalOperationType(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalOperationType(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalSentryGuard> InsertTbt_DraftRentalSentryGuard(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalSentryGuard(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalSentryGuardDetails> InsertTbt_DraftRentalSentryGuardDetails(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftRentalSentryGuardDetails(xml).ToList();
    		}
    		public virtual List<tbt_ContractEmail> InsertTbt_ContractEmail(string xml_ContractEmail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ContractEmail(xml_ContractEmail).ToList();
    		}
    		public virtual List<dtContractSignerType> GetContractSignerType(string c_CONTRACT_SIGNER_TYPE, string contractCode, string oCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractSignerType(c_CONTRACT_SIGNER_TYPE, contractCode, oCC).ToList();
    		}
    		public virtual List<tbt_DraftRentalBillingTarget> DeleteTbt_DraftRentalBillingTarget(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftRentalBillingTarget(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalEmail> DeleteTbt_DraftRentalEmail(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftRentalEmail(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalInstrument> DeleteTbt_DraftRentalInstrument(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftRentalInstrument(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalOperationType> DeleteTbt_DraftRentalOperationType(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftRentalOperationType(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalSentryGuardDetails> DeleteTbt_DraftRentalSentryGuardDetails(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftRentalSentryGuardDetails(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalBEDetails> UpdateTbt_DraftRentalBEDetails(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_DraftRentalBEDetails(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalContract> UpdateTbt_DraftRentalContract(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_DraftRentalContract(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalMaintenanceDetails> UpdateTbt_DraftRentalMaintenanceDetails(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_DraftRentalMaintenanceDetails(xml).ToList();
    		}
    		public virtual List<tbt_DraftRentalSentryGuard> UpdateTbt_DraftRentalSentryGuard(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_DraftRentalSentryGuard(xml).ToList();
    		}
    		public virtual List<tbt_RelationType> DeleteTbt_RelationType(string pchrContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RelationType(pchrContractCode).ToList();
    		}
    		public virtual List<dtContractList> GetContractListForSearchInfo(string pchrRoleTypeContractTarget, string pchrRoleTypePurchaser, string pchrRoleTypeRealCustomer, string pchrServiceTypeCode, string pchrCustomerCode, string pchrGroupCode, string pchrSiteCode, string pchvContractCode, string pchvUserCode, string pchvPlanCode, string pchvProjectCode, string pchrnCustomerName, string pchrnBranchName, string pchrnGroupName, string pchrCustomerStatus, string pchrCustomerTypeCode, string pchrCompanyTypeCode, string pchrnIDNo, string pchrRegionCode, string pchrBusinessTypeCode, string pchrnCust_Address, string pchrnCust_Alley, string pchrnCust_Road, string pchrnCust_SubDistrict, string pchrCust_ProvinceCode, string pchrCust_DistrictCode, string pchrCust_ZipCode, string pchrnCust_PhoneNo, string pchrnCust_FaxNo, string pchrnSiteName, string pchrnSite_Address, string pchrnSite_Alley, string pchrnSite_Road, string pchrnSite_SubDistrict, string pchrSite_ProvinceCode, string pchrSite_DistrictCode, string pchrSite_ZipCode, string pchrnSite_PhoneNo, Nullable<System.DateTime> pdtmOperationDate_From, Nullable<System.DateTime> pdtmOperationDate_To, Nullable<System.DateTime> pdtmCustAcceptDate_From, Nullable<System.DateTime> pdtmCustAcceptDate_To, Nullable<System.DateTime> pdtmInstallationCompleteDate_From, Nullable<System.DateTime> pdtmInstallationCompleteDate_To, string pchvContractOfficeCode, string pchvdsTransDataOfficeCode, string pchvOperationOfficeCode, string pchvSalesmanEmpNo1, string pchvSalesmanEmpName1, string pchrProductCode, string pchrChangeTypeCode, string pchrProcessManageStatusCode, string pchrStartTypeCode, string pchvC_RENTAL_CHANGE_TYPE, string pchvC_SALE_CHANGE_TYPE, string pchvC_SALE_PROC_MANAGE_STATUS, string pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, string pchrC_CUST_ROLE_TYPE_REAL_CUST, string pchrC_CUST_ROLE_TYPE_PURCHASER, Nullable<bool> pbitC_FLAG_ON, string pchrC_SERVICE_TYPE_RENTAL, string pchrC_SERVICE_TYPE_SALE, string pchrC_CONTRACT_STATUS_BEF_START, string pchrC_CONTRACT_STATUS_CANCEL, string pchrC_CONTRACT_STATUS_END, string c_SALE_CHANGE_TYPE_NEW_SALE, string c_CUST_TYPE_JURISTIC, Nullable<System.DateTime> stopDateFrom, Nullable<System.DateTime> stopDateTo, Nullable<System.DateTime> cancelDateFrom, Nullable<System.DateTime> cancelDateTo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractListForSearchInfo(pchrRoleTypeContractTarget, pchrRoleTypePurchaser, pchrRoleTypeRealCustomer, pchrServiceTypeCode, pchrCustomerCode, pchrGroupCode, pchrSiteCode, pchvContractCode, pchvUserCode, pchvPlanCode, pchvProjectCode, pchrnCustomerName, pchrnBranchName, pchrnGroupName, pchrCustomerStatus, pchrCustomerTypeCode, pchrCompanyTypeCode, pchrnIDNo, pchrRegionCode, pchrBusinessTypeCode, pchrnCust_Address, pchrnCust_Alley, pchrnCust_Road, pchrnCust_SubDistrict, pchrCust_ProvinceCode, pchrCust_DistrictCode, pchrCust_ZipCode, pchrnCust_PhoneNo, pchrnCust_FaxNo, pchrnSiteName, pchrnSite_Address, pchrnSite_Alley, pchrnSite_Road, pchrnSite_SubDistrict, pchrSite_ProvinceCode, pchrSite_DistrictCode, pchrSite_ZipCode, pchrnSite_PhoneNo, pdtmOperationDate_From, pdtmOperationDate_To, pdtmCustAcceptDate_From, pdtmCustAcceptDate_To, pdtmInstallationCompleteDate_From, pdtmInstallationCompleteDate_To, pchvContractOfficeCode, pchvdsTransDataOfficeCode, pchvOperationOfficeCode, pchvSalesmanEmpNo1, pchvSalesmanEmpName1, pchrProductCode, pchrChangeTypeCode, pchrProcessManageStatusCode, pchrStartTypeCode, pchvC_RENTAL_CHANGE_TYPE, pchvC_SALE_CHANGE_TYPE, pchvC_SALE_PROC_MANAGE_STATUS, pchrC_CUST_ROLE_TYPE_CONTRACT_TARGET, pchrC_CUST_ROLE_TYPE_REAL_CUST, pchrC_CUST_ROLE_TYPE_PURCHASER, pbitC_FLAG_ON, pchrC_SERVICE_TYPE_RENTAL, pchrC_SERVICE_TYPE_SALE, pchrC_CONTRACT_STATUS_BEF_START, pchrC_CONTRACT_STATUS_CANCEL, pchrC_CONTRACT_STATUS_END, c_SALE_CHANGE_TYPE_NEW_SALE, c_CUST_TYPE_JURISTIC, stopDateFrom, stopDateTo, cancelDateFrom, cancelDateTo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<tbs_ContractDocTemplate> GetTbs_ContractDocTemplate(string pDocumentCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_ContractDocTemplate(pDocumentCode).ToList();
    		}
    		public virtual List<tbt_DocCancelContractMemo> GetTbt_DocCancelContractMemo(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DocCancelContractMemo(pDocID).ToList();
    		}
    		public virtual List<tbt_DocCancelContractMemoDetail> GetTbt_DocCancelContractMemoDetail(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DocCancelContractMemoDetail(pDocID).ToList();
    		}
    		public virtual List<tbt_CancelContractMemo> InsertTbt_CancelContractMemo(string xml_CancelContractMemo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_CancelContractMemo(xml_CancelContractMemo).ToList();
    		}
    		public virtual List<tbs_ContractDocTemplate> InsertTbs_ContractDocTemplate(string xml_ContractDocTemplate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbs_ContractDocTemplate(xml_ContractDocTemplate).ToList();
    		}
    		public virtual List<tbt_DocCancelContractMemo> InsertTbt_DocCancelContractMemo(string xml_DocCancelContractMemo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocCancelContractMemo(xml_DocCancelContractMemo).ToList();
    		}
    		public virtual List<tbt_DocCancelContractMemoDetail> InsertTbt_DocCancelContractMemoDetail(string xml_DocCancelContractMemoDetail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocCancelContractMemoDetail(xml_DocCancelContractMemoDetail).ToList();
    		}
    		public virtual List<tbt_ContractDocument> GetTbt_ContractDocument(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ContractDocument(pDocID).ToList();
    		}
    		public virtual List<tbt_ContractDocument> InsertTbt_ContractDocument(string xml_ContractDocument)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ContractDocument(xml_ContractDocument).ToList();
    		}
    		public virtual List<tbt_DocChangeMemo> InsertTbt_DocChangeMemo(string xml_DocChangeMemo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocChangeMemo(xml_DocChangeMemo).ToList();
    		}
    		public virtual List<tbt_DocChangeNotice> InsertTbt_DocChangeNotice(string xml_DocChangeNotice)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocChangeNotice(xml_DocChangeNotice).ToList();
    		}
    		public virtual List<tbt_DocChangeFeeMemo> InsertTbt_DocChangeFeeMemo(string xml_DocChangeFeeMemo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocChangeFeeMemo(xml_DocChangeFeeMemo).ToList();
    		}
    		public virtual List<tbt_DocContractReport> InsertTbt_DocContractReport(string xml_DocContractReport)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocContractReport(xml_DocContractReport).ToList();
    		}
    		public virtual List<tbt_DocConfirmCurrentInstrumentMemo> InsertTbt_DocConfirmCurrentInstrumentMemo(string xml_DocConfirmCurrentInstrumentMemo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocConfirmCurrentInstrumentMemo(xml_DocConfirmCurrentInstrumentMemo).ToList();
    		}
    		public virtual List<tbt_DocInstrumentDetails> InsertTbt_DocInstrumentDetails(string xml_DocInstrumentDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocInstrumentDetails(xml_DocInstrumentDetails).ToList();
    		}
    		public virtual List<tbt_ContractDocument> GetContractDocHeaderByQuotationCode(string pchrQuotationTargetCode, string pchrAlphabet, string pchrContractDocOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDocHeaderByQuotationCode(pchrQuotationTargetCode, pchrAlphabet, pchrContractDocOCC).ToList();
    		}
    		public virtual List<tbt_ContractDocument> UpdateTbt_ContractDocument(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ContractDocument(xml).ToList();
    		}
    		public virtual List<Nullable<int>> IsUsedCustomer(string pchrCustCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsUsedCustomer(pchrCustCode).ToList();
    		}
    		public virtual List<Nullable<int>> IsUsedSite(string pchrSiteCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsUsedSite(pchrSiteCode).ToList();
    		}
    		public virtual List<dtARList> GetARListByRole(string aRStatus, string specfyPeriod, Nullable<System.DateTime> specifyPeriodFrom, Nullable<System.DateTime> specifyPeriodTo, string empNo, string aRRole, Nullable<System.DateTime> currentdate, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_AR_RELEVANT_TYPE_SITE, string c_CUST_ROLE_TYPE_REAL_CUST, string c_AR_ROLE_APPROVER, string c_AR_ROLE_AUDITOR, string c_AR_ROLE_REQUESTER, string c_AR_TYPE, string c_AR_STATUS, string c_DEADLINE_TIME_TYPE, string c_AR_SEARCH_STATUS_COMPLETE, string c_AR_SEARCH_STATUS_HANDLING, string c_AR_SEARCH_PERIOD_REQUEST_DATE, string c_AR_SEARCH_PERIOD_APPROVE_DATE, string c_AR_SEARCH_PERIOD_DUEDATE, string c_AR_SEARCH_PERIOD_LASTACTION_DATE, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetARListByRole(aRStatus, specfyPeriod, specifyPeriodFrom, specifyPeriodTo, empNo, aRRole, currentdate, c_AR_RELEVANT_TYPE_CONTRACT, c_AR_RELEVANT_TYPE_QUOTATION, c_AR_RELEVANT_TYPE_SITE, c_CUST_ROLE_TYPE_REAL_CUST, c_AR_ROLE_APPROVER, c_AR_ROLE_AUDITOR, c_AR_ROLE_REQUESTER, c_AR_TYPE, c_AR_STATUS, c_DEADLINE_TIME_TYPE, c_AR_SEARCH_STATUS_COMPLETE, c_AR_SEARCH_STATUS_HANDLING, c_AR_SEARCH_PERIOD_REQUEST_DATE, c_AR_SEARCH_PERIOD_APPROVE_DATE, c_AR_SEARCH_PERIOD_DUEDATE, c_AR_SEARCH_PERIOD_LASTACTION_DATE, c_AR_STATUS_INSTRUCTED, c_AR_STATUS_REJECTED, c_AR_STATUS_APPROVED).ToList();
    		}
    		public virtual List<dtARList> SearchARList(string customerName, string projectName, string requestNo, string approveNo, string aRTitleType, string aRType, string aRStatusHandling, string aRStatusComplete, string aROfficeCode, string specfyPeriod, Nullable<System.DateTime> specifyPeriodFrom, Nullable<System.DateTime> specifyPeriodTo, string requester, string approver, string auditor, string contractTargetPurchaserName, string siteName, string customerGroupName, string contractCode, string userCode, string quotationTargetCode, string contractOfficeCode, string operationOfficeCode, string contractStatus, string contractType, string c_AR_ROLE_APPROVER, string c_AR_ROLE_REQUESTER, string c_AR_ROLE_AUDITOR, string c_AR_TYPE, string c_AR_STATUS, string c_DEADLINE_TIME_TYPE, string c_AR_SEARCH_PERIOD_REQUEST_DATE, string c_AR_SEARCH_PERIOD_APPROVE_DATE, string c_AR_SEARCH_PERIOD_DUEDATE, string c_AR_SEARCH_PERIOD_LASTACTION_DATE, string c_AR_RELEVANT_TYPE_CUSTOMER, string c_AR_RELEVANT_TYPE_SITE, string c_AR_RELEVANT_TYPE_PROJECT, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_CUST_ROLE_TYPE_CONTRACT_TARGET, string c_CUST_ROLE_TYPE_REAL_CUST, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchARList(customerName, projectName, requestNo, approveNo, aRTitleType, aRType, aRStatusHandling, aRStatusComplete, aROfficeCode, specfyPeriod, specifyPeriodFrom, specifyPeriodTo, requester, approver, auditor, contractTargetPurchaserName, siteName, customerGroupName, contractCode, userCode, quotationTargetCode, contractOfficeCode, operationOfficeCode, contractStatus, contractType, c_AR_ROLE_APPROVER, c_AR_ROLE_REQUESTER, c_AR_ROLE_AUDITOR, c_AR_TYPE, c_AR_STATUS, c_DEADLINE_TIME_TYPE, c_AR_SEARCH_PERIOD_REQUEST_DATE, c_AR_SEARCH_PERIOD_APPROVE_DATE, c_AR_SEARCH_PERIOD_DUEDATE, c_AR_SEARCH_PERIOD_LASTACTION_DATE, c_AR_RELEVANT_TYPE_CUSTOMER, c_AR_RELEVANT_TYPE_SITE, c_AR_RELEVANT_TYPE_PROJECT, c_AR_RELEVANT_TYPE_CONTRACT, c_AR_RELEVANT_TYPE_QUOTATION, c_CUST_ROLE_TYPE_CONTRACT_TARGET, c_CUST_ROLE_TYPE_REAL_CUST, c_AR_STATUS_INSTRUCTED, c_AR_STATUS_REJECTED, c_AR_STATUS_APPROVED).ToList();
    		}
    		public virtual List<tbt_ProjectPurchaserCustomer> InsertTbt_ProjectPurchaserCustomer(string xml_Tbt_ProjectPurchaserCustomer)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectPurchaserCustomer(xml_Tbt_ProjectPurchaserCustomer).ToList();
    		}
    		public virtual List<tbt_ProjectExpectedInstrumentDetails> InsertTbt_ProjectExpectedInstrumentDetail(string xml_dotbt_ProjectExpectedInstrumentDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectExpectedInstrumentDetail(xml_dotbt_ProjectExpectedInstrumentDetails).ToList();
    		}
    		public virtual List<tbt_ProjectOtherRalatedCompany> InsertTbt_ProjectOtherRalatedCompany(string xml_dotbt_ProjectOtherRalatedCompany)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectOtherRalatedCompany(xml_dotbt_ProjectOtherRalatedCompany).ToList();
    		}
    		public virtual List<tbt_ProjectSupportStaffDetails> InsertTbt_ProjectSupportStaffDetail(string xml_Tbt_ProjectSupportStaffDetail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectSupportStaffDetail(xml_Tbt_ProjectSupportStaffDetail).ToList();
    		}
    		public virtual List<tbt_ProjectSystemDetails> InsertTbt_ProjectSystemDetail(string xml_Tbt_ProjectSystemDetail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectSystemDetail(xml_Tbt_ProjectSystemDetail).ToList();
    		}
    		public virtual List<tbt_Project> InsertTbt_Project(string xml_doTbt_Project)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_Project(xml_doTbt_Project).ToList();
    		}
    		public virtual List<dtSearchSaleWarrantyExpireResult> SearchSaleWarrantyExpireList(Nullable<bool> isMaintenanceContractFlag, Nullable<System.DateTime> dtExpireWarrantyFrom, Nullable<System.DateTime> dtExpireWarrantyTo, string strOperationOfficeCode, string strSaleContractOfficeCode, string pC_CONTRACT_STATUS_BEF_START, string pC_CONTRACT_STATUS_AFTER_START, string pC_RELATION_TYPE_MA, string pC_SALE_CHANGE_TYPE_NEW_SALE, string pC_SALE_CHANGE_TYPE_ADD_SALE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchSaleWarrantyExpireList(isMaintenanceContractFlag, dtExpireWarrantyFrom, dtExpireWarrantyTo, strOperationOfficeCode, strSaleContractOfficeCode, pC_CONTRACT_STATUS_BEF_START, pC_CONTRACT_STATUS_AFTER_START, pC_RELATION_TYPE_MA, pC_SALE_CHANGE_TYPE_NEW_SALE, pC_SALE_CHANGE_TYPE_ADD_SALE).ToList();
    		}
    		public virtual List<dtIncidentListCTS320> GetIncidentList(string incidentRelevantType, string customerCode, string siteCode, string contractCode, string projectCode, string incidentType, Nullable<System.DateTime> duedateDeadline, string incidentStatus, string c_INCIDENT_ROLE_CONTROL_CHIEF, string c_INCIDENT_ROLE_CHIEF, string c_INCIDENT_ROLE_CORRESPONDENT, string c_INCIDENT_ROLE_ASSISTANT, string c_INCIDENT_TYPE, string c_INCIDENT_RELEVANT_TYPE_CUSTOMER, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_STATUS, string c_INCIDENT_STATUS_COMPLETE, string c_INCIDENT_SEARCH_STATUS_COMPLETE, string c_INCIDENT_SEARCH_STATUS_HANDLING, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_DEADLINE_TIME_TYPE, string c_FLAG_ON, Nullable<bool> isSearchByCustomer, Nullable<bool> isSearchBySite, Nullable<bool> isSearchByContract, Nullable<bool> isSearchByProject)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentList(incidentRelevantType, customerCode, siteCode, contractCode, projectCode, incidentType, duedateDeadline, incidentStatus, c_INCIDENT_ROLE_CONTROL_CHIEF, c_INCIDENT_ROLE_CHIEF, c_INCIDENT_ROLE_CORRESPONDENT, c_INCIDENT_ROLE_ASSISTANT, c_INCIDENT_TYPE, c_INCIDENT_RELEVANT_TYPE_CUSTOMER, c_INCIDENT_RELEVANT_TYPE_SITE, c_INCIDENT_STATUS, c_INCIDENT_STATUS_COMPLETE, c_INCIDENT_SEARCH_STATUS_COMPLETE, c_INCIDENT_SEARCH_STATUS_HANDLING, c_INCIDENT_RELEVANT_TYPE_CONTRACT, c_DEADLINE_TIME_TYPE, c_FLAG_ON, isSearchByCustomer, isSearchBySite, isSearchByContract, isSearchByProject).ToList();
    		}
    		public virtual List<dtContractDocHeader> GetContractDocHeader(string pContractCode, string pQuotationTargetCode, string pOCC_Alphabet, string pContractDocOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDocHeader(pContractCode, pQuotationTargetCode, pOCC_Alphabet, pContractDocOCC).ToList();
    		}
    		public virtual List<tbt_RelationType> GetTbt_GetContractLinkageRelation(string paramContractCode, string paramOCC, string paramRelationType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_GetContractLinkageRelation(paramContractCode, paramOCC, paramRelationType).ToList();
    		}
    		public virtual List<tbt_DraftSaleBillingTarget> GetTbt_DraftSaleBillingTarget(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftSaleBillingTarget(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftSaleEmail> GetTbt_DraftSaleEmail(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftSaleEmail(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftSaleInstrument> GetTbt_DraftSaleInstrument(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftSaleInstrument(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<dtIncidentOccSite> GetIncidentOccurringSite(string strCustCode, string c_INCIDENT_RELEVANT_TYPE_SITE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentOccurringSite(strCustCode, c_INCIDENT_RELEVANT_TYPE_SITE).ToList();
    		}
    		public virtual List<dtIncidentOccContract> GetIncidentOccurringContract(string strSiteCode, string c_INCIDENT_RELEVANT_TYPE_CONTRACT)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentOccurringContract(strSiteCode, c_INCIDENT_RELEVANT_TYPE_CONTRACT).ToList();
    		}
    		public virtual List<dtSummaryAR> SummaryAR(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> currentDate, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SummaryAR(dateFrom, dateTo, currentDate, c_AR_STATUS_INSTRUCTED, c_AR_STATUS_REJECTED, c_AR_STATUS_APPROVED).ToList();
    		}
    		public virtual List<RPTChangeNoticeDo> GetRptChangeNoticeData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptChangeNoticeData(iDocID, bFlagOn).ToList();
    		}
    		public virtual List<doSummaryFee> SumFeeUnimplementData(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SumFeeUnimplementData(strContractCode).ToList();
    		}
    		public virtual List<tbt_Project> GetTbt_ProjectForViewSQL(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectForViewSQL(strProjectCode).ToList();
    		}
    		public virtual List<tbt_DraftSaleContract> InsertTbt_DraftSaleContract(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftSaleContract(xml).ToList();
    		}
    		public virtual List<tbt_DraftSaleBillingTarget> InsertTbt_DraftSaleBillingTarget(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftSaleBillingTarget(xml).ToList();
    		}
    		public virtual List<tbt_DraftSaleEmail> InsertTbt_DraftSaleEmail(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftSaleEmail(xml).ToList();
    		}
    		public virtual List<tbt_DraftSaleInstrument> InsertTbt_DraftSaleInstrument(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DraftSaleInstrument(xml).ToList();
    		}
    		public virtual List<tbt_DraftSaleContract> UpdateTbt_DraftSaleContract(string xml)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_DraftSaleContract(xml).ToList();
    		}
    		public virtual List<tbt_DraftSaleBillingTarget> DeleteTbt_DraftSaleBillingTarget(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftSaleBillingTarget(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftSaleEmail> DeleteTbt_DraftSaleEmail(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftSaleEmail(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftSaleInstrument> DeleteTbt_DraftSaleInstrument(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_DraftSaleInstrument(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<dtTbt_ProjectSupportStaffDetailForView> GetTbt_ProjectSupportStaffDetailForView(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectSupportStaffDetailForView(strProjectCode).ToList();
    		}
    		public virtual List<dtTbt_ProjectExpectedInstrumentDetailsForView> GetTbt_ProjectExpectedInstrumentDetailsForView(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectExpectedInstrumentDetailsForView(strProjectCode).ToList();
    		}
    		public virtual List<dtTbt_ProjectSystemDetailForView> GetTbt_ProjectSystemDetailForView(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectSystemDetailForView(strProjectCode).ToList();
    		}
    		public virtual List<dtTbt_ProjectStockoutIntrumentForView> GetTbt_ProjectStockoutIntrumentForView(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectStockoutIntrumentForView(strProjectCode).ToList();
    		}
    		public virtual List<tbt_ProjectOtherRalatedCompany> GetTbt_ProjectOtherRalatedCompanyForView(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectOtherRalatedCompanyForView(strProjectCode).ToList();
    		}
    		public virtual List<tbt_ContractDocument> GetContractDocHeaderByContractCode(string pContractCode, string pOCC, string pchrContractDocOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDocHeaderByContractCode(pContractCode, pOCC, pchrContractDocOCC).ToList();
    		}
    		public virtual List<tbt_ProjectStockoutBranchIntrumentDetails> GetTbt_ProjectStockoutBranchIntrumentDetails(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectStockoutBranchIntrumentDetails(strProjectCode).ToList();
    		}
    		public virtual List<dtTbt_ProjectStockoutBranchIntrumentDetailForView> GetTbt_ProjectStockoutBranchIntrumentDetailForView(string strProjectCode, Nullable<int> iBranchNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectStockoutBranchIntrumentDetailForView(strProjectCode, iBranchNo).ToList();
    		}
    		public virtual List<dtTbt_ProjectPurchaserCustomerForView> GetTbt_ProjectPurchaserCustomerForView(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectPurchaserCustomerForView(strProjectCode).ToList();
    		}
    		public virtual List<RPTChangeMemoDo> GetRptChangeMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptChangeMemoData(iDocID, bFlagOn).ToList();
    		}
    		public virtual int SetNotUsedStatus(string pContractDoc, string pOCC, string pC_CONTRACT_DOC_STATUS_NOT_USED, string pC_CONTRACT_DOC_STATUS_COLLECTED, Nullable<bool> pIsRecursive, string pRef)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SetNotUsedStatus(pContractDoc, pOCC, pC_CONTRACT_DOC_STATUS_NOT_USED, pC_CONTRACT_DOC_STATUS_COLLECTED, pIsRecursive, pRef);
    		}
    		public virtual List<dtARListCTS370> GetARList(string aRRelavantType, string custCode, string siteCode, string contractCode, string quotationTargetCode, string projectCode, string aRType, Nullable<System.DateTime> duedateDeadline, string aRStatus, string c_AR_ROLE_APPROVER, string c_AR_ROLE_REQUESTER, string c_AR_ROLE_AUDITOR, string c_AR_TYPE, string c_AR_STATUS, string c_AR_RELEVANT_TYPE_CUSTOMER, string c_AR_RELEVANT_TYPE_SITE, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_PROJECT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_AR_SEARCH_STATUS_COMPLETE, string c_AR_SEARCH_STATUS_HANDLING, string c_AR_STATUS_INSTRUCTED, string c_AR_STATUS_REJECTED, string c_AR_STATUS_APPROVED, string c_DEADLINE_TIME_TYPE, string c_CUST_ROLE_TYPE_CONTRACT_TARGET, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetARList(aRRelavantType, custCode, siteCode, contractCode, quotationTargetCode, projectCode, aRType, duedateDeadline, aRStatus, c_AR_ROLE_APPROVER, c_AR_ROLE_REQUESTER, c_AR_ROLE_AUDITOR, c_AR_TYPE, c_AR_STATUS, c_AR_RELEVANT_TYPE_CUSTOMER, c_AR_RELEVANT_TYPE_SITE, c_AR_RELEVANT_TYPE_CONTRACT, c_AR_RELEVANT_TYPE_PROJECT, c_AR_RELEVANT_TYPE_QUOTATION, c_AR_SEARCH_STATUS_COMPLETE, c_AR_SEARCH_STATUS_HANDLING, c_AR_STATUS_INSTRUCTED, c_AR_STATUS_REJECTED, c_AR_STATUS_APPROVED, c_DEADLINE_TIME_TYPE, c_CUST_ROLE_TYPE_CONTRACT_TARGET, c_FLAG_ON).ToList();
    		}
    		public virtual List<dtAROccSite> GetAROccurringSite(string strCustCode, string c_AR_RELEVANT_TYPE_SITE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetAROccurringSite(strCustCode, c_AR_RELEVANT_TYPE_SITE).ToList();
    		}
    		public virtual List<dtIncidentList> GetIncidentListByRole(string incidentRole, string empNo, Nullable<System.DateTime> dueDate, string incidentStatus, string c_INCIDENT_SEARCH_STATUS_COMPLETE, string c_INCIDENT_SEARCH_STATUS_HANDLING, string c_INCIDENT_ROLE_CONTROL_CHIEF, string c_INCIDENT_ROLE_CHIEF, string c_INCIDENT_ROLE_CORRESPONDENT, string c_INCIDENT_ROLE_ASSISTANT, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_STATUS, string c_INCIDENT_STATUS_COMPLETE, string c_INCIDENT_TYPE, string c_DEADLINE_TIME_TYPE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentListByRole(incidentRole, empNo, dueDate, incidentStatus, c_INCIDENT_SEARCH_STATUS_COMPLETE, c_INCIDENT_SEARCH_STATUS_HANDLING, c_INCIDENT_ROLE_CONTROL_CHIEF, c_INCIDENT_ROLE_CHIEF, c_INCIDENT_ROLE_CORRESPONDENT, c_INCIDENT_ROLE_ASSISTANT, c_INCIDENT_RELEVANT_TYPE_CONTRACT, c_INCIDENT_RELEVANT_TYPE_SITE, c_INCIDENT_STATUS, c_INCIDENT_STATUS_COMPLETE, c_INCIDENT_TYPE, c_DEADLINE_TIME_TYPE).ToList();
    		}
    		public virtual List<dtIncidentList> SearchIncidentList(string incidentNo, string incidentTitle, string incidentType, string incidentStatusHandling, string incidentStatusComplete, string incidentOfficeCode, string specfyPeriod, Nullable<System.DateTime> specifyPeriodFrom, Nullable<System.DateTime> specifyPeriodTo, string registrant, string controlChief, string correspondent, string chief, string assistant, string contractTargetPurchaserName, string siteName, string customerGroupName, string contractCode, string userCode, string contractOfficeCode, string operationOfficeCode, string contractStatus, string contractType, string customerName, string projectName, string c_INCIDENT_ROLE_CONTROL_CHIEF, string c_INCIDENT_ROLE_CHIEF, string c_INCIDENT_ROLE_CORRESPONDENT, string c_INCIDENT_ROLE_ASSISTANT, string c_INCIDENT_TYPE, string c_INCIDENT_STATUS, string c_DEADLINE_TIME_TYPE, string c_INCIDENT_SEARCH_PERIOD_OCCURRING, string c_INCIDENT_SEARCH_PERIOD_DUEDATE, string c_INCIDENT_SEARCH_PERIOD_COMPLETE, string c_INCIDENT_RELEVANT_TYPE_CONTRACT, string c_INCIDENT_RELEVANT_TYPE_CUSTOMER, string c_INCIDENT_RELEVANT_TYPE_PROJECT, string c_INCIDENT_RELEVANT_TYPE_SITE, string c_INCIDENT_STATUS_COMPLETE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchIncidentList(incidentNo, incidentTitle, incidentType, incidentStatusHandling, incidentStatusComplete, incidentOfficeCode, specfyPeriod, specifyPeriodFrom, specifyPeriodTo, registrant, controlChief, correspondent, chief, assistant, contractTargetPurchaserName, siteName, customerGroupName, contractCode, userCode, contractOfficeCode, operationOfficeCode, contractStatus, contractType, customerName, projectName, c_INCIDENT_ROLE_CONTROL_CHIEF, c_INCIDENT_ROLE_CHIEF, c_INCIDENT_ROLE_CORRESPONDENT, c_INCIDENT_ROLE_ASSISTANT, c_INCIDENT_TYPE, c_INCIDENT_STATUS, c_DEADLINE_TIME_TYPE, c_INCIDENT_SEARCH_PERIOD_OCCURRING, c_INCIDENT_SEARCH_PERIOD_DUEDATE, c_INCIDENT_SEARCH_PERIOD_COMPLETE, c_INCIDENT_RELEVANT_TYPE_CONTRACT, c_INCIDENT_RELEVANT_TYPE_CUSTOMER, c_INCIDENT_RELEVANT_TYPE_PROJECT, c_INCIDENT_RELEVANT_TYPE_SITE, c_INCIDENT_STATUS_COMPLETE).ToList();
    		}
    		public virtual List<RPTContractReportDo> GetRptContractReportData(Nullable<int> iDocID, Nullable<bool> bFlagOn, string cPaymentMethod, string cBillingTiming)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptContractReportData(iDocID, bFlagOn, cPaymentMethod, cBillingTiming).ToList();
    		}
    		public virtual List<string> GetProjectStatus(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetProjectStatus(strProjectCode).ToList();
    		}
    		public virtual List<tbt_Project> UpdateTbt_ProjectData(string xmlTbt_Project)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ProjectData(xmlTbt_Project).ToList();
    		}
    		public virtual List<RPTConfirmCurrInstMemoDo> GetRptConfirmCurrentInstrumentMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptConfirmCurrentInstrumentMemoData(iDocID, bFlagOn).ToList();
    		}
    		public virtual List<RPTCancelContractMemoDo> GetRptCancelContractMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptCancelContractMemoData(iDocID, bFlagOn).ToList();
    		}
    		public virtual List<RPTCancelContractMemoDetailDo> GetRptCancelContractMemoDetailData(Nullable<int> iDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptCancelContractMemoDetailData(iDocID).ToList();
    		}
    		public virtual List<tbt_ProjectExpectedInstrumentDetails> UpdateTbt_ProjectExpectedInstrumentDetails(string strProjectCode, string strInstrumentCode, Nullable<int> intInstrumentQty, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ProjectExpectedInstrumentDetails(strProjectCode, strInstrumentCode, intInstrumentQty, updateBy, updateDate).ToList();
    		}
    		public virtual List<tbt_ProjectExpectedInstrumentDetails> DeleteTbt_ProjectExpectedInstrumentDetails(string strProjectCode, string instrumentCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_ProjectExpectedInstrumentDetails(strProjectCode, instrumentCode).ToList();
    		}
    		public virtual List<tbt_ProjectSystemDetails> DeleteTbt_ProjectSystemDetails(string strProjectCode, string productCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_ProjectSystemDetails(strProjectCode, productCode).ToList();
    		}
    		public virtual List<tbt_ProjectSupportStaffDetails> DeleteTbt_ProjectSupportStaffDetails(string strProjectCode, string empNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_ProjectSupportStaffDetails(strProjectCode, empNo).ToList();
    		}
    		public virtual List<tbt_ProjectOtherRalatedCompany> DeleteTbt_ProjectOtherRalatedCompany(string strProjectCode, Nullable<int> sequenceNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_ProjectOtherRalatedCompany(strProjectCode, sequenceNo).ToList();
    		}
    		public virtual List<tbt_ProjectOtherRalatedCompany> UpdateTbt_ProjectOtherRalatedCompany(string strProjectCode, Nullable<int> sequenceNo, string companyName, string name, string telNo, string remark)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ProjectOtherRalatedCompany(strProjectCode, sequenceNo, companyName, name, telNo, remark).ToList();
    		}
    		public virtual List<tbt_ProjectStockoutBranchIntrumentDetails> InsertTbt_ProjectStockoutBranchIntrumentDetails(string xML_Tbt_ProjectStockoutBranchIntrumentDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectStockoutBranchIntrumentDetails(xML_Tbt_ProjectStockoutBranchIntrumentDetails).ToList();
    		}
    		public virtual List<tbt_ProjectStockoutBranchIntrumentDetails> UpdateTbt_ProjectStockoutBranchIntrumentDetails(string strProjectCode, Nullable<int> branchNo, Nullable<int> assignBranchQty, string updateBy, Nullable<System.DateTime> updateDate, string instrumentCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ProjectStockoutBranchIntrumentDetails(strProjectCode, branchNo, assignBranchQty, updateBy, updateDate, instrumentCode).ToList();
    		}
    		public virtual List<dtRentalContractBasicForInstall> GetRentalContractBasicForInstall(string strContractCode, string buildingType, string c_RENTAL_CHANGE_TYPE_ALTERNATIVE_START, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRentalContractBasicForInstall(strContractCode, buildingType, c_RENTAL_CHANGE_TYPE_ALTERNATIVE_START, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtSaleBasic> GetSaleBasicForInstall(string strContractCode, string buildingType, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleBasicForInstall(strContractCode, buildingType, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtProjectForInstall> GetProjectForInstall(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetProjectForInstall(strProjectCode).ToList();
    		}
    		public virtual List<RPTChangeFeeMemoDo> GetRptChangeFeeMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptChangeFeeMemoData(iDocID, bFlagOn).ToList();
    		}
    		public virtual List<dtRentalContractBasicForView> GetRentalContractBasicForView(string strContractCode, string strUserCode, string c_RENTAL_CHANGE_TYPE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRentalContractBasicForView(strContractCode, strUserCode, c_RENTAL_CHANGE_TYPE).ToList();
    		}
    		public virtual List<dtSaleContractBasicForView> GetSaleContractBasicForView(string strContractCode, string c_SALE_PROC_MANAGE_STATUS, string c_SALE_TYPE, string c_SALE_CHANGE_TYPE, Nullable<bool> fLAG_ON, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleContractBasicForView(strContractCode, c_SALE_PROC_MANAGE_STATUS, c_SALE_TYPE, c_SALE_CHANGE_TYPE, fLAG_ON, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<dtChangedCustHistList> GetChangedCustHistList(string pchvContractCode, string pchrOCC, string pchrCSCustCode, string pchrRCCustCode, string pchrSiteCode, string pchvC_CONTRACT_SIGNER_TYPE, string pchvC_CHANGE_NAME_REASON_TYPE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetChangedCustHistList(pchvContractCode, pchrOCC, pchrCSCustCode, pchrRCCustCode, pchrSiteCode, pchvC_CONTRACT_SIGNER_TYPE, pchvC_CHANGE_NAME_REASON_TYPE).ToList();
    		}
    		public virtual List<CheckCancelContractBeforeStartService_Result> CheckCancelContractBeforeStartService(string strContractCode, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.CheckCancelContractBeforeStartService(strContractCode, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<RPTCoverLetterDo> GetRptCoverLetterData(Nullable<int> iDocID, string cPaymentMethod)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptCoverLetterData(iDocID, cPaymentMethod).ToList();
    		}
    		public virtual List<RPTInstrumentDetailDo> GetRptInstrumentDetailData(Nullable<int> iDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptInstrumentDetailData(iDocID).ToList();
    		}
    		public virtual List<tbt_ContractEmail> GetContractEmailByContractCodeOCC(string contractCode, string oCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractEmailByContractCodeOCC(contractCode, oCC).ToList();
    		}
    		public virtual List<tbt_ContractEmail> GetTbt_ContractEmailByContractCodeOCC(string contractCode, string oCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ContractEmailByContractCodeOCC(contractCode, oCC).ToList();
    		}
    		public virtual List<dtTbs_IncidentTypePattern> GetTbs_IncidentTypePattern(string strIncidentType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_IncidentTypePattern(strIncidentType).ToList();
    		}
    		public virtual List<tbt_Incident> InsertTbt_Incident(string xml_Incident)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_Incident(xml_Incident).ToList();
    		}
    		public virtual List<dtContractOfAllSite> GetReleatedContractOfCustIncident(string strSiteCodeList, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetReleatedContractOfCustIncident(strSiteCodeList, c_FLAG_ON).ToList();
    		}
    		public virtual List<dtContractDoc> GetContractDocDataList(string strContractCode, string strQuotationTargetCode, string strOccAlphabet, string strOfficeCode, Nullable<int> cModuleIdContract, string cARStatus, Nullable<bool> cFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractDocDataList(strContractCode, strQuotationTargetCode, strOccAlphabet, strOfficeCode, cModuleIdContract, cARStatus, cFlagOn).ToList();
    		}
    		public virtual List<tbt_IncidentRole> InsertTbt_IncidentRole(string xml_IncidentRole)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_IncidentRole(xml_IncidentRole).ToList();
    		}
    		public virtual List<dtIncidentRole> GetIncidentRoleData(Nullable<int> incidentID, string c_INCIDENT_ROLE_TYPE, string c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentRoleData(incidentID, c_INCIDENT_ROLE_TYPE, c_INCIDENT_ROLE_CHIEF_OF_RELATED_OFFICE).ToList();
    		}
    		public virtual List<dtIncidentHistory> GetIncidentHistoryData(Nullable<int> incidentID, string c_INCIDENT_INTERACTION_TYPE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetIncidentHistoryData(incidentID, c_INCIDENT_INTERACTION_TYPE).ToList();
    		}
    		public virtual List<tbt_IncidentHistoryDetail> GetTbt_IncidentHistoryDetail(Nullable<int> strIncidentHistoryID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_IncidentHistoryDetail(strIncidentHistoryID).ToList();
    		}
    		public virtual List<tbt_ContractDocument> UpdateDocumentStatus(string strDocStatus, Nullable<int> iDocID, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateDocumentStatus(strDocStatus, iDocID, updateDate, updateBy).ToList();
    		}
    		public virtual List<dtContractDocumentList> SearchContractDocument(string strDocStatus, string strContractCode, string strQuotationTargetCode, string strProjectCode, string strOcc, string strAlphabet, string strContractOfficeCode, string strOperationOfficeCode, string strContractOfficeCodeAuthority, string strOperationOfficeCodeAuthority, string strNegotiationStaffEmpNo, string strNegotiationStaffEmpName, string strDocumentCode, string cDocStatus, string cDocAuditResult, Nullable<bool> cFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchContractDocument(strDocStatus, strContractCode, strQuotationTargetCode, strProjectCode, strOcc, strAlphabet, strContractOfficeCode, strOperationOfficeCode, strContractOfficeCodeAuthority, strOperationOfficeCodeAuthority, strNegotiationStaffEmpNo, strNegotiationStaffEmpName, strDocumentCode, cDocStatus, cDocAuditResult, cFlagOn).ToList();
    		}
    		public virtual List<tbt_IncidentRole> DeleteTbt_IncidentRole(Nullable<int> pIncidentRoleID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_IncidentRole(pIncidentRoleID).ToList();
    		}
    		public virtual List<tbt_IncidentHistory> InsertTbt_IncidentHistory(string xml_IncidentHistory)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_IncidentHistory(xml_IncidentHistory).ToList();
    		}
    		public virtual List<tbt_IncidentHistoryDetail> InsertTbt_IncidentHistoryDetail(string xml_IncidentHistoryDetail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_IncidentHistoryDetail(xml_IncidentHistoryDetail).ToList();
    		}
    		public virtual List<tbt_Incident> UpdateTbt_Incident(string xmlIncident)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_Incident(xmlIncident).ToList();
    		}
    		public virtual List<RPTMACheckupSlipDo> GetMaintenanceCheckupSlipReport(string paramContractCode, string paramProductCode, Nullable<System.DateTime> paramInstructionDate, string paramContractStatusAfterStart)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaintenanceCheckupSlipReport(paramContractCode, paramProductCode, paramInstructionDate, paramContractStatusAfterStart).ToList();
    		}
    		public virtual List<tbt_IncidentRole> UpdateTbt_IncidentRole(string xml_doTbtIncidentRole)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_IncidentRole(xml_doTbtIncidentRole).ToList();
    		}
    		public virtual List<tbt_Incident> GetTbt_Incident(Nullable<int> pIncidentID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_Incident(pIncidentID).ToList();
    		}
    		public virtual List<RPTInstrumentCheckupDo> GetInstrument(string contractCode, string occ)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetInstrument(contractCode, occ).ToList();
    		}
    		public virtual List<Nullable<System.DateTime>> GetLastMaintenanceDate(string contractCode, string productCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLastMaintenanceDate(contractCode, productCode).ToList();
    		}
    		public virtual List<tbt_DocChangeFeeMemo> GetTbt_DocChangeFeeMemo(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DocChangeFeeMemo(pDocID).ToList();
    		}
    		public virtual List<tbt_DocChangeMemo> GetTbt_DocChangeMemo(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DocChangeMemo(pDocID).ToList();
    		}
    		public virtual List<tbt_DocChangeNotice> GetTbt_DocChangeNotice(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DocChangeNotice(pDocID).ToList();
    		}
    		public virtual List<tbt_DocConfirmCurrentInstrumentMemo> GetTbt_DocConfirmCurrentInstrumentMemo(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DocConfirmCurrentInstrumentMemo(pDocID).ToList();
    		}
    		public virtual List<tbt_DocContractReport> GetTbt_DocContractReport(Nullable<int> pDocID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DocContractReport(pDocID).ToList();
    		}
    		public virtual List<dtGetMaintenanceCheckupList> GetMaintenanceCheckupList(string xml_MaintenanceCheckup)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaintenanceCheckupList(xml_MaintenanceCheckup).ToList();
    		}
    		public virtual List<dtInstrumentAdditionalInstalled> GetInstrumentAdditionalInstalled(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetInstrumentAdditionalInstalled(strContractCode).ToList();
    		}
    		public virtual List<dtInstrumentInstalledBefore> GetInstrumentInstalledBefore(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetInstrumentInstalledBefore(strContractCode).ToList();
    		}
    		public virtual List<CheckCP12_Result> CheckCP12(string strContractCode, string strLastImplementOCC, string c_RENTAL_CHANGE_TYPE_PLAN_CHANGE, string c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.CheckCP12(strContractCode, strLastImplementOCC, c_RENTAL_CHANGE_TYPE_PLAN_CHANGE, c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP).ToList();
    		}
    		public virtual List<CheckCanReplaceInstallSlip_Result> CheckCanReplaceInstallSlip(string strContractCode, string c_SALE_CHANGE_TYPE_NEW_SALE, string c_SALE_CHANGE_TYPE_ADD_SALE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.CheckCanReplaceInstallSlip(strContractCode, c_SALE_CHANGE_TYPE_NEW_SALE, c_SALE_CHANGE_TYPE_ADD_SALE).ToList();
    		}
    		public virtual List<tbs_ARTypeTitle> GetTbs_ARTypeTitle(string strARType, string strARTitleType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_ARTypeTitle(strARType, strARTitleType).ToList();
    		}
    		public virtual List<tbs_ARTypePattern> GetTbs_ARTypePattern(string strARType, string strARTitleType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_ARTypePattern(strARType, strARTitleType).ToList();
    		}
    		public virtual List<dtRelatedOfficeChief> GetReleatedContractOfCustAR(string requestNo, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetReleatedContractOfCustAR(requestNo, c_FLAG_ON).ToList();
    		}
    		public virtual List<tbt_AR> InsertTbt_AR(string xml_AR)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_AR(xml_AR).ToList();
    		}
    		public virtual List<tbt_ARFeeAdjustment> InsertTbt_ARFeeAdjustment(string xml_ARFeeAdjustment)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ARFeeAdjustment(xml_ARFeeAdjustment).ToList();
    		}
    		public virtual List<tbt_ARRole> InsertTbt_ARRole(string xml_ARRole)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ARRole(xml_ARRole).ToList();
    		}
    		public virtual List<tbt_ARRole> GetTbt_ARRole(string pRequestNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ARRole(pRequestNo).ToList();
    		}
    		public virtual List<dtAR> GetARData(string pRequestNo, string c_AR_RELEVANT_TYPE_CONTRACT, string c_AR_RELEVANT_TYPE_CUSTOMER, string c_AR_RELEVANT_TYPE_SITE, string c_AR_RELEVANT_TYPE_PROJECT, string c_AR_RELEVANT_TYPE_QUOTATION, string c_AR_TYPE, string c_AR_STATUS, string c_CUST_PART_TYPE_REAL_CUST)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetARData(pRequestNo, c_AR_RELEVANT_TYPE_CONTRACT, c_AR_RELEVANT_TYPE_CUSTOMER, c_AR_RELEVANT_TYPE_SITE, c_AR_RELEVANT_TYPE_PROJECT, c_AR_RELEVANT_TYPE_QUOTATION, c_AR_TYPE, c_AR_STATUS, c_CUST_PART_TYPE_REAL_CUST).ToList();
    		}
    		public virtual List<dtARDepartmentChief> GetARDepartmentChief(string pRequestNo, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetARDepartmentChief(pRequestNo, c_FLAG_ON).ToList();
    		}
    		public virtual List<dtAROfficeChief> GetAROfficeChief(string pRequestNo, Nullable<bool> c_FLAG_ON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetAROfficeChief(pRequestNo, c_FLAG_ON).ToList();
    		}
    		public virtual List<dtARRole> GetARRoleData(string pRequestNo, string c_AR_ROLE_TYPE, string c_AR_ROLE_CHIEF_OF_RELATED_OFFICE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetARRoleData(pRequestNo, c_AR_ROLE_TYPE, c_AR_ROLE_CHIEF_OF_RELATED_OFFICE).ToList();
    		}
    		public virtual List<tbt_ARHistory> GetTbt_ARHistory(string pRequestNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ARHistory(pRequestNo).ToList();
    		}
    		public virtual List<tbt_ARHistoryDetail> GetTbt_ARHistoryDetail(Nullable<int> pARHistoryID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ARHistoryDetail(pARHistoryID).ToList();
    		}
    		public virtual List<tbt_ARFeeAdjustment> GetTbt_ARFeeAdjustment(string pRequestNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ARFeeAdjustment(pRequestNo).ToList();
    		}
    		public virtual List<tbt_ARRole> DeleteTbt_ARRole(Nullable<int> pARRoleID)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_ARRole(pARRoleID).ToList();
    		}
    		public virtual List<tbt_ARHistory> InsertTbt_ARHistory(string xml_ARHistory)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ARHistory(xml_ARHistory).ToList();
    		}
    		public virtual List<tbt_ARHistoryDetail> InsertTbt_ARHistoryDetail(string xml_ARHistoryDetail)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ARHistoryDetail(xml_ARHistoryDetail).ToList();
    		}
    		public virtual List<tbt_AR> UpdateTbt_AR(string xmlAR)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_AR(xmlAR).ToList();
    		}
    		public virtual List<tbt_ARRole> UpdateTbt_ARRole(string xml_doTbtARRole)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ARRole(xml_doTbtARRole).ToList();
    		}
    		public virtual List<tbt_AR> GetTbt_AR(string pRequestNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_AR(pRequestNo).ToList();
    		}
    		public virtual List<dtSearchMACheckupResult> SearchSeparatedMaintenance(string pProductName, string pSiteName, string pEmployeeName, string pProductTypeCode, string pOperationOfficeCode, Nullable<System.DateTime> pInstructionDateFrom, Nullable<System.DateTime> pInstructionDateTo, string pUserCode, string pContractCode, string pMACheckupNo, Nullable<bool> pHasCheckupResult, Nullable<bool> pHaveInstrumentMalfunction, Nullable<bool> pNeedToContactSalesman)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.SearchSeparatedMaintenance(pProductName, pSiteName, pEmployeeName, pProductTypeCode, pOperationOfficeCode, pInstructionDateFrom, pInstructionDateTo, pUserCode, pContractCode, pMACheckupNo, pHasCheckupResult, pHaveInstrumentMalfunction, pNeedToContactSalesman).ToList();
    		}
    		public virtual List<string> GetPreviousUnimplementedOCC(string paramContractCode, string paramOCC, Nullable<bool> paramFLAGOFF)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetPreviousUnimplementedOCC(paramContractCode, paramOCC, paramFLAGOFF).ToList();
    		}
    		public virtual List<tbs_IncidentReasonType> GetTbs_IncidentReasonType(string strIncidentType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbs_IncidentReasonType(strIncidentType).ToList();
    		}
    		public virtual List<tbt_ContractCustomerHistory> InsertTbt_ContractCustomerHistory(string xml_ContractCustomerHistory)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ContractCustomerHistory(xml_ContractCustomerHistory).ToList();
    		}
    		public virtual List<tbt_DraftRentalBEDetails> GetTbt_DraftRentalBEDetails(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalBEDetails(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalSentryGuard> GetTbt_DraftRentalSentryGuard(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalSentryGuard(pchrQuotationTargetCode).ToList();
    		}
    		public virtual List<tbt_DraftRentalSentryGuardDetails> GetTbt_DraftRentalSentryGuardDetails(string pchrQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_DraftRentalSentryGuardDetails(pchrQuotationTargetCode).ToList();
    		}
    		public virtual int InsertEntireContract(string pContractCode, string pGUID, string pScreenID, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pLastUpdateDate, string pC_PROD_TYPE_BE, string pC_PROD_TYPE_SG, string pC_PROD_TYPE_MA, string xml_RentalContractBasic, string xml_RentalSecurityBasic, string xml_RentalBEDetails, string xml_RentalInstrumentDetails, string xml_RentalSentryGuard, string xml_RentalSentryGuardDetails, string xml_CancelContractMemoDetail, string xml_RentalOperationType, string xml_RentalMaintenanceDetails, string xml_RelationType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertEntireContract(pContractCode, pGUID, pScreenID, pCreateDate, pCreateBy, pLastUpdateDate, pC_PROD_TYPE_BE, pC_PROD_TYPE_SG, pC_PROD_TYPE_MA, xml_RentalContractBasic, xml_RentalSecurityBasic, xml_RentalBEDetails, xml_RentalInstrumentDetails, xml_RentalSentryGuard, xml_RentalSentryGuardDetails, xml_CancelContractMemoDetail, xml_RentalOperationType, xml_RentalMaintenanceDetails, xml_RelationType);
    		}
    		public virtual List<tbt_Project> UpdateProjectStatus(string strProjectCode, string c_ProjectStatus, Nullable<System.DateTime> lastCompleteDate, Nullable<System.DateTime> cancelDate, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateProjectStatus(strProjectCode, c_ProjectStatus, lastCompleteDate, cancelDate, updateBy, updateDate).ToList();
    		}
    		public virtual List<tbt_ProjectPurchaserCustomer> UpdateTbt_ProjectPurchaseCustomer(string xmlTbt_ProjectPurchaseCustomer)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ProjectPurchaseCustomer(xmlTbt_ProjectPurchaseCustomer).ToList();
    		}
    		public virtual int EditDraftRentalContract(string pQuotationTargetCode, string pProductTypeCode, string pGUID, string pScreenID, Nullable<System.DateTime> pCreateDate, string pCreateBy, string pC_PROD_TYPE_ONLINE, string pC_PROD_TYPE_BE, string pC_PROD_TYPE_SG, string pC_PROD_TYPE_MA, string xml_DraftRentalContract, string xml_DraftRentalBillingTarget, string xml_DraftRentalEmail, string xml_DraftRentalOperationType, string xml_RelationType, string xml_DraftRentalInstrument, string xml_DraftRentalBEDetails, string xml_DraftRentalSentryGuard, string xml_DraftRentalSentryGuardDetails, string xml_DraftRentalMaintenanceDetails)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.EditDraftRentalContract(pQuotationTargetCode, pProductTypeCode, pGUID, pScreenID, pCreateDate, pCreateBy, pC_PROD_TYPE_ONLINE, pC_PROD_TYPE_BE, pC_PROD_TYPE_SG, pC_PROD_TYPE_MA, xml_DraftRentalContract, xml_DraftRentalBillingTarget, xml_DraftRentalEmail, xml_DraftRentalOperationType, xml_RelationType, xml_DraftRentalInstrument, xml_DraftRentalBEDetails, xml_DraftRentalSentryGuard, xml_DraftRentalSentryGuardDetails, xml_DraftRentalMaintenanceDetails);
    		}
    		public virtual List<doServiceProductTypeCode> GetServiceProductTypeCode(string strCode, string c_SERVICE_TYPE_PROJECT)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetServiceProductTypeCode(strCode, c_SERVICE_TYPE_PROJECT).ToList();
    		}
    		public virtual List<string> GetNextImplementedOCC(string paramContractCode, string paramOCC, Nullable<bool> paramFLAGON)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetNextImplementedOCC(paramContractCode, paramOCC, paramFLAGON).ToList();
    		}
    		public virtual List<tbt_RelationType> DeleteTbt_RelationType_ByContractCodeOCC(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_RelationType_ByContractCodeOCC(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_ProjectStockOutMemo> GetTbt_ProjectStockoutMemoForView(string projectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_ProjectStockoutMemoForView(projectCode).ToList();
    		}
    		public virtual List<doProjectBranch> GetProjectStockOutBranch(string projectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetProjectStockOutBranch(projectCode).ToList();
    		}
    		public virtual List<tbt_BillingTemp> GetTbt_BillingTemp(string strContractCode, string strOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetTbt_BillingTemp(strContractCode, strOCC).ToList();
    		}
    		public virtual List<Nullable<System.DateTime>> GetMaxUpdateDateOfMATargetContract(string paramMAContractCode, string paramOCC, string c_RENTAL_CHANGE_TYPE_CHANGE_NAME, string c_RENTAL_CHANGE_TYPE_MOVE_INSTRU)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaxUpdateDateOfMATargetContract(paramMAContractCode, paramOCC, c_RENTAL_CHANGE_TYPE_CHANGE_NAME, c_RENTAL_CHANGE_TYPE_MOVE_INSTRU).ToList();
    		}
    		public virtual List<dtTbt_BillingTempForSP> GetBillingTempForChangePlan_Edit(string strContractCode, string strOCC, string c_CONTRACT_BILLING_TYPE_CONTRACT_FEE, string c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON, string c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE, string c_CONTRACT_BILLING_TYPE_INSTALLATION_FEE, string c_CONTRACT_BILLING_TYPE_DEPOSIT_FEE, string c_BILLING_TIMING_APPROVE_CONTRACT)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetBillingTempForChangePlan_Edit(strContractCode, strOCC, c_CONTRACT_BILLING_TYPE_CONTRACT_FEE, c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON, c_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE, c_CONTRACT_BILLING_TYPE_INSTALLATION_FEE, c_CONTRACT_BILLING_TYPE_DEPOSIT_FEE, c_BILLING_TIMING_APPROVE_CONTRACT).ToList();
    		}
    		public virtual List<dtTbt_BillingTempForSP> GetBillingTempForChangePlan_New(string strContractCode, string strOCC, string c_CONTRACT_BILLING_TYPE_CONTRACT_FEE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetBillingTempForChangePlan_New(strContractCode, strOCC, c_CONTRACT_BILLING_TYPE_CONTRACT_FEE).ToList();
    		}
    		public virtual List<AutoRenewProcess_Result> AutoRenewProcessBatch()
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.AutoRenewProcessBatch().ToList();
    		}
    		public virtual List<doDraftRentalContractInformation> GetDraftRentalContractInformation(string strQuotationTargetCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetDraftRentalContractInformation(strQuotationTargetCode).ToList();
    		}
    		public virtual List<doGetSaleDataForIssueInvoice> GetSaleDataForIssueInvoice(string contractCode, string oCC, string c_BILLING_TIMING_ACCEPTANCE, string c_BILLINGTEMP_FLAG_KEEP, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleDataForIssueInvoice(contractCode, oCC, c_BILLING_TIMING_ACCEPTANCE, c_BILLINGTEMP_FLAG_KEEP, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<Nullable<bool>> IsCompleteRemoveAll(string strContractCode, string c_RENTAL_INSTALLATION_TYPE_REMOVE_ALL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsCompleteRemoveAll(strContractCode, c_RENTAL_INSTALLATION_TYPE_REMOVE_ALL).ToList();
    		}
    		public virtual List<Nullable<bool>> IsProjectExist(string strProjectCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsProjectExist(strProjectCode).ToList();
    		}
    		public virtual List<string> GetMAContractCodeOf(string strMATargetContractCode, string strRelationType)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMAContractCodeOf(strMATargetContractCode, strRelationType).ToList();
    		}
    		public virtual List<Nullable<bool>> IsContractExist(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsContractExist(strContractCode).ToList();
    		}
    		public virtual List<string> GetPreviousOCC(string strContractCode, string strCurrentOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetPreviousOCC(strContractCode, strCurrentOCC).ToList();
    		}
    		public virtual List<dtBillingTempChangeFeeData> GetBillingTempForChangeFee(string strContractCode, string c_CONTRACT_BILLING_TYPE_CONTRACT_FEE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetBillingTempForChangeFee(strContractCode, c_CONTRACT_BILLING_TYPE_CONTRACT_FEE).ToList();
    		}
    		public virtual List<tbt_BillingTemp> DeleteAllSendData(string pContractCode, string pC_BILLINGTEMP_FLAG_KEEP)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteAllSendData(pContractCode, pC_BILLINGTEMP_FLAG_KEEP).ToList();
    		}
    		public virtual List<doUpdateAutoRenew> UpdateAutoRenew(string contractCode, string oCC, Nullable<System.DateTime> calContractEndDate, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateAutoRenew(contractCode, oCC, calContractEndDate, updateDate, updateBy).ToList();
    		}
    		public virtual List<dtAROccContract> GetAROccurringContract(string strSiteCode, string c_AR_RELEVANT_TYPE_CONTRACT)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetAROccurringContract(strSiteCode, c_AR_RELEVANT_TYPE_CONTRACT).ToList();
    		}
    		public virtual List<doBillingTargetDetail> GetBillingTargetDetailByContractCode(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetBillingTargetDetailByContractCode(strContractCode).ToList();
    		}
    		public virtual List<tbt_AR> UpdateContractCode(string pQuotationTargetCode, string pContractCode, Nullable<System.DateTime> pProcessingDateTime, string pEmpNo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateContractCode(pQuotationTargetCode, pContractCode, pProcessingDateTime, pEmpNo).ToList();
    		}
    		public virtual List<doSaleContractDataForFlowMenu> GetSaleContractDataForFlowMenu(string contractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleContractDataForFlowMenu(contractCode).ToList();
    		}
    		public virtual List<Nullable<bool>> IsContractDocExist(string strContractCode, string strQuotationTargetCode, string strOCCAlphabet, string strDocOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.IsContractDocExist(strContractCode, strQuotationTargetCode, strOCCAlphabet, strDocOCC).ToList();
    		}
    		public virtual List<tbt_SaleInstrumentDetails> DeleteTbt_SaleInstrumentDetails_ByContractCodeOCC(string pContractCode, string pOCC)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.DeleteTbt_SaleInstrumentDetails_ByContractCodeOCC(pContractCode, pOCC).ToList();
    		}
    		public virtual List<tbt_ProjectStockOutMemo> InsertTbt_ProjectStockOutMemo(string xml_StockOutMemo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_ProjectStockOutMemo(xml_StockOutMemo).ToList();
    		}
    		public virtual List<doRentalContractDataForFlowMenu> GetRentalContractDataForFlowMenu(string contractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRentalContractDataForFlowMenu(contractCode).ToList();
    		}
    		public virtual List<doGetContractProjectInfo> GetContractProjectInfo(string pContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetContractProjectInfo(pContractCode).ToList();
    		}
    		public virtual List<Nullable<System.DateTime>> GetRemovalInstallCompleteDate(string contractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRemovalInstallCompleteDate(contractCode, c_RENTAL_INSTALL_TYPE_REMOVE_ALL, c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL).ToList();
    		}
    		public virtual List<tbt_BillingTemp> GetFee(string contractCode, string oCC, string billingType, string billingTiming)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetFee(contractCode, oCC, billingType, billingTiming).ToList();
    		}
    		public virtual List<tbt_SaleBasic> GetLinkageSaleContract(string strContractCode, string c_RELATION_TYPE_SALE)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetLinkageSaleContract(strContractCode, c_RELATION_TYPE_SALE).ToList();
    		}
    		public virtual List<tbt_ARFeeAdjustment> UpdateTbt_ARFeeAdjustment(string xmlARFeeAdjustment)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.UpdateTbt_ARFeeAdjustment(xmlARFeeAdjustment).ToList();
    		}
    		public virtual List<tbt_DocStartMemo> InsertTbt_DocStartMemo(string xml_DocStartMemo)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.InsertTbt_DocStartMemo(xml_DocStartMemo).ToList();
    		}
    		public virtual List<RPTStartResumeMemoDo> GetRptStartResumeMemoData(Nullable<int> iDocID, Nullable<bool> bFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRptStartResumeMemoData(iDocID, bFlagOn).ToList();
    		}
    		public virtual List<string> GetRentalLastOCC(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetRentalLastOCC(strContractCode).ToList();
    		}
    		public virtual List<sp_CT_GetSaleBasicOneShotFlag_Result> GetSaleBasicOneShotFlag(string strContractCode)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetSaleBasicOneShotFlag(strContractCode).ToList();
    		}
    		public virtual List<dtQuotationNoData> GetQuotationNo(string quotationTargetCode, string alphabet)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetQuotationNo(quotationTargetCode, alphabet).ToList();
    		}
    		public virtual List<doMaintenanceCompletionReport> GetMaintenanceCompletionReport(string paramContractCode, string paramProductCode, Nullable<System.DateTime> paramInstructionDate, Nullable<bool> bFlagOn)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetMaintenanceCompletionReport(paramContractCode, paramProductCode, paramInstructionDate, bFlagOn).ToList();
    		}
    		public virtual List<dtUnreceivedContractDocuemntCTR095> GetUnreceivedContractDocumentCTR095(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
    		{
    			CTDataEntities context = new CTDataEntities();
    			return context.GetUnreceivedContractDocumentCTR095(startDate, endDate).ToList();
    		}

        #endregion

    }
}
