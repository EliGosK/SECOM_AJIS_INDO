//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Billing
{
    public partial class BLDataEntities : ObjectContext
    {
        public const string ConnectionString = "name=BLDataEntities";
        public const string ContainerName = "BLDataEntities";
    
        #region Constructors
    
        public BLDataEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public BLDataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public BLDataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<tbt_BillingTarget> tbt_BillingTarget
        {
            get { return _tbt_BillingTarget  ?? (_tbt_BillingTarget = CreateObjectSet<tbt_BillingTarget>("tbt_BillingTarget")); }
        }
        private ObjectSet<tbt_BillingTarget> _tbt_BillingTarget;
    
        public ObjectSet<tbt_BillingTypeDetail> tbt_BillingTypeDetail
        {
            get { return _tbt_BillingTypeDetail  ?? (_tbt_BillingTypeDetail = CreateObjectSet<tbt_BillingTypeDetail>("tbt_BillingTypeDetail")); }
        }
        private ObjectSet<tbt_BillingTypeDetail> _tbt_BillingTypeDetail;
    
        public ObjectSet<tbt_AutoTransferBankAccount> tbt_AutoTransferBankAccount
        {
            get { return _tbt_AutoTransferBankAccount  ?? (_tbt_AutoTransferBankAccount = CreateObjectSet<tbt_AutoTransferBankAccount>("tbt_AutoTransferBankAccount")); }
        }
        private ObjectSet<tbt_AutoTransferBankAccount> _tbt_AutoTransferBankAccount;
    
        public ObjectSet<tbt_CreditCard> tbt_CreditCard
        {
            get { return _tbt_CreditCard  ?? (_tbt_CreditCard = CreateObjectSet<tbt_CreditCard>("tbt_CreditCard")); }
        }
        private ObjectSet<tbt_CreditCard> _tbt_CreditCard;
    
        public ObjectSet<tbm_AutoTransferScheduleList> tbm_AutoTransferScheduleList
        {
            get { return _tbm_AutoTransferScheduleList  ?? (_tbm_AutoTransferScheduleList = CreateObjectSet<tbm_AutoTransferScheduleList>("tbm_AutoTransferScheduleList")); }
        }
        private ObjectSet<tbm_AutoTransferScheduleList> _tbm_AutoTransferScheduleList;
    
        public ObjectSet<tbt_TaxInvoice> tbt_TaxInvoice
        {
            get { return _tbt_TaxInvoice  ?? (_tbt_TaxInvoice = CreateObjectSet<tbt_TaxInvoice>("tbt_TaxInvoice")); }
        }
        private ObjectSet<tbt_TaxInvoice> _tbt_TaxInvoice;
    
        public ObjectSet<tbt_CreditNote> tbt_CreditNote
        {
            get { return _tbt_CreditNote  ?? (_tbt_CreditNote = CreateObjectSet<tbt_CreditNote>("tbt_CreditNote")); }
        }
        private ObjectSet<tbt_CreditNote> _tbt_CreditNote;
    
        public ObjectSet<tbt_ExportAutoTransfer> tbt_ExportAutoTransfer
        {
            get { return _tbt_ExportAutoTransfer  ?? (_tbt_ExportAutoTransfer = CreateObjectSet<tbt_ExportAutoTransfer>("tbt_ExportAutoTransfer")); }
        }
        private ObjectSet<tbt_ExportAutoTransfer> _tbt_ExportAutoTransfer;
    
        public ObjectSet<tbt_Depositfee> tbt_Depositfee
        {
            get { return _tbt_Depositfee  ?? (_tbt_Depositfee = CreateObjectSet<tbt_Depositfee>("tbt_Depositfee")); }
        }
        private ObjectSet<tbt_Depositfee> _tbt_Depositfee;
    
        public ObjectSet<tbt_InvoiceReprint> tbt_InvoiceReprint
        {
            get { return _tbt_InvoiceReprint  ?? (_tbt_InvoiceReprint = CreateObjectSet<tbt_InvoiceReprint>("tbt_InvoiceReprint")); }
        }
        private ObjectSet<tbt_InvoiceReprint> _tbt_InvoiceReprint;
    
        public ObjectSet<tbt_BillingBasic> tbt_BillingBasic
        {
            get { return _tbt_BillingBasic  ?? (_tbt_BillingBasic = CreateObjectSet<tbt_BillingBasic>("tbt_BillingBasic")); }
        }
        private ObjectSet<tbt_BillingBasic> _tbt_BillingBasic;
    
        public ObjectSet<tbt_Invoice> tbt_Invoice
        {
            get { return _tbt_Invoice  ?? (_tbt_Invoice = CreateObjectSet<tbt_Invoice>("tbt_Invoice")); }
        }
        private ObjectSet<tbt_Invoice> _tbt_Invoice;
    
        public ObjectSet<tbt_BillingDetail> tbt_BillingDetail
        {
            get { return _tbt_BillingDetail  ?? (_tbt_BillingDetail = CreateObjectSet<tbt_BillingDetail>("tbt_BillingDetail")); }
        }
        private ObjectSet<tbt_BillingDetail> _tbt_BillingDetail;
    
        public ObjectSet<tbt_MonthlyBillingHistory> tbt_MonthlyBillingHistory
        {
            get { return _tbt_MonthlyBillingHistory  ?? (_tbt_MonthlyBillingHistory = CreateObjectSet<tbt_MonthlyBillingHistory>("tbt_MonthlyBillingHistory")); }
        }
        private ObjectSet<tbt_MonthlyBillingHistory> _tbt_MonthlyBillingHistory;
    
        public ObjectSet<tbt_InvoiceIssueList> tbt_InvoiceIssueList
        {
            get { return _tbt_InvoiceIssueList  ?? (_tbt_InvoiceIssueList = CreateObjectSet<tbt_InvoiceIssueList>("tbt_InvoiceIssueList")); }
        }
        private ObjectSet<tbt_InvoiceIssueList> _tbt_InvoiceIssueList;

        #endregion

        #region Function Imports
        public ObjectResult<doTbt_BillingBasic> GetBillingBasic(string contractCode, string billingOCC, string billingTargetCode, string billingClientCode, string billingOfficeCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter billingOfficeCodeParameter;
    
            if (billingOfficeCode != null)
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", billingOfficeCode);
            }
            else
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doTbt_BillingBasic>("GetBillingBasic", contractCodeParameter, billingOCCParameter, billingTargetCodeParameter, billingClientCodeParameter, billingOfficeCodeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_BillingBasic> UpdateTbt_BillingBasicData(string xml_doTbtBillingBasic)
        {
    
            ObjectParameter xml_doTbtBillingBasicParameter;
    
            if (xml_doTbtBillingBasic != null)
            {
                xml_doTbtBillingBasicParameter = new ObjectParameter("xml_doTbtBillingBasic", xml_doTbtBillingBasic);
            }
            else
            {
                xml_doTbtBillingBasicParameter = new ObjectParameter("xml_doTbtBillingBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("UpdateTbt_BillingBasicData", xml_doTbtBillingBasicParameter);
        }
        public ObjectResult<tbt_BillingTypeDetail> GetTbt_BillingTypeDetail(string contractCode, string billingOCC, string billingTypeCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingTypeCodeParameter;
    
            if (billingTypeCode != null)
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", billingTypeCode);
            }
            else
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTypeDetail>("GetTbt_BillingTypeDetail", contractCodeParameter, billingOCCParameter, billingTypeCodeParameter);
        }
        public ObjectResult<tbt_BillingTypeDetail> InsertTbt_BillingTypeDetailData(string xml_BillingTypeDetail)
        {
    
            ObjectParameter xml_BillingTypeDetailParameter;
    
            if (xml_BillingTypeDetail != null)
            {
                xml_BillingTypeDetailParameter = new ObjectParameter("xml_BillingTypeDetail", xml_BillingTypeDetail);
            }
            else
            {
                xml_BillingTypeDetailParameter = new ObjectParameter("xml_BillingTypeDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTypeDetail>("InsertTbt_BillingTypeDetailData", xml_BillingTypeDetailParameter);
        }
        public ObjectResult<tbt_BillingTarget> GetTbt_BillingTarget(string billingTargetCode, string billingClientCode, string billingOfficeCode)
        {
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter billingOfficeCodeParameter;
    
            if (billingOfficeCode != null)
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", billingOfficeCode);
            }
            else
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTarget>("GetTbt_BillingTarget", billingTargetCodeParameter, billingClientCodeParameter, billingOfficeCodeParameter);
        }
        public ObjectResult<string> GenerateBillingTargetNo(string billingClientCode)
        {
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GenerateBillingTargetNo", billingClientCodeParameter);
        }
        public ObjectResult<tbt_BillingTarget> InsertTbt_BillingTargetData(string xml_BillingTarget)
        {
    
            ObjectParameter xml_BillingTargetParameter;
    
            if (xml_BillingTarget != null)
            {
                xml_BillingTargetParameter = new ObjectParameter("xml_BillingTarget", xml_BillingTarget);
            }
            else
            {
                xml_BillingTargetParameter = new ObjectParameter("xml_BillingTarget", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTarget>("InsertTbt_BillingTargetData", xml_BillingTargetParameter);
        }
        public ObjectResult<BillingBasicList> GetBillingBasicList(string contractCode, string c_CUST_TYPE)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter c_CUST_TYPEParameter;
    
            if (c_CUST_TYPE != null)
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", c_CUST_TYPE);
            }
            else
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", typeof(string));
            }
            return base.ExecuteFunction<BillingBasicList>("GetBillingBasicList", contractCodeParameter, c_CUST_TYPEParameter);
        }
        public ObjectResult<string> GetBillingOCC(string contractCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetBillingOCC", contractCodeParameter);
        }
        public ObjectResult<tbt_BillingBasic> InsertTbt_BillingBasicData(string xml_BillingBasic)
        {
    
            ObjectParameter xml_BillingBasicParameter;
    
            if (xml_BillingBasic != null)
            {
                xml_BillingBasicParameter = new ObjectParameter("xml_BillingBasic", xml_BillingBasic);
            }
            else
            {
                xml_BillingBasicParameter = new ObjectParameter("xml_BillingBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("InsertTbt_BillingBasicData", xml_BillingBasicParameter);
        }
        public ObjectResult<tbt_MonthlyBillingHistory> GetLastBillingHistory(string contractCode, string billingOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<tbt_MonthlyBillingHistory>("GetLastBillingHistory", contractCodeParameter, billingOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_MonthlyBillingHistory> UpdateTbt_MonthlyBillingHistoryData(string xml_doTbtMonthlyBillingHistory)
        {
    
            ObjectParameter xml_doTbtMonthlyBillingHistoryParameter;
    
            if (xml_doTbtMonthlyBillingHistory != null)
            {
                xml_doTbtMonthlyBillingHistoryParameter = new ObjectParameter("xml_doTbtMonthlyBillingHistory", xml_doTbtMonthlyBillingHistory);
            }
            else
            {
                xml_doTbtMonthlyBillingHistoryParameter = new ObjectParameter("xml_doTbtMonthlyBillingHistory", typeof(string));
            }
            return base.ExecuteFunction<tbt_MonthlyBillingHistory>("UpdateTbt_MonthlyBillingHistoryData", xml_doTbtMonthlyBillingHistoryParameter);
        }
        public ObjectResult<tbt_MonthlyBillingHistory> InsertTbt_MonthlyBillingHistory(string xml_MonthlyBillingHistory)
        {
    
            ObjectParameter xml_MonthlyBillingHistoryParameter;
    
            if (xml_MonthlyBillingHistory != null)
            {
                xml_MonthlyBillingHistoryParameter = new ObjectParameter("xml_MonthlyBillingHistory", xml_MonthlyBillingHistory);
            }
            else
            {
                xml_MonthlyBillingHistoryParameter = new ObjectParameter("xml_MonthlyBillingHistory", typeof(string));
            }
            return base.ExecuteFunction<tbt_MonthlyBillingHistory>("InsertTbt_MonthlyBillingHistory", xml_MonthlyBillingHistoryParameter);
        }
        public ObjectResult<Nullable<int>> GetBillingDetailNo(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("GetBillingDetailNo", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<tbt_BillingDetail> InsertTbt_BillingDetail(string xml_BillingDetail)
        {
    
            ObjectParameter xml_BillingDetailParameter;
    
            if (xml_BillingDetail != null)
            {
                xml_BillingDetailParameter = new ObjectParameter("xml_BillingDetail", xml_BillingDetail);
            }
            else
            {
                xml_BillingDetailParameter = new ObjectParameter("xml_BillingDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("InsertTbt_BillingDetail", xml_BillingDetailParameter);
        }
        public ObjectResult<tbt_BillingBasic> GetTbt_BillingBasic(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("GetTbt_BillingBasic", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<tbt_AutoTransferBankAccount> GetTbt_AutoTransferBankAccount(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_AutoTransferBankAccount>("GetTbt_AutoTransferBankAccount", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<tbt_CreditCard> GetTbt_CreditCard(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_CreditCard>("GetTbt_CreditCard", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetAutoTransferDate(string bankCode, string autoTransferDate)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
    
            ObjectParameter autoTransferDateParameter;
    
            if (autoTransferDate != null)
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", autoTransferDate);
            }
            else
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetAutoTransferDate", bankCodeParameter, autoTransferDateParameter);
        }
        public ObjectResult<tbt_BillingBasic> GetTbt_BillingBasicListData(string contractCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("GetTbt_BillingBasicListData", contractCodeParameter);
        }
        public ObjectResult<tbt_MonthlyBillingHistory> GetBillingHistoryPeriodList(string contractCode, string billingOCC, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_MonthlyBillingHistory>("GetBillingHistoryPeriodList", contractCodeParameter, billingOCCParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<BillingTypeDetail> GetBillingTypeDetailContinues(string contractCode, string billingOCC, string c_BILLING_TYPE_GROUP_CONTINUES)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_GROUP_CONTINUESParameter;
    
            if (c_BILLING_TYPE_GROUP_CONTINUES != null)
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", c_BILLING_TYPE_GROUP_CONTINUES);
            }
            else
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", typeof(string));
            }
            return base.ExecuteFunction<BillingTypeDetail>("GetBillingTypeDetailContinues", contractCodeParameter, billingOCCParameter, c_BILLING_TYPE_GROUP_CONTINUESParameter);
        }
        public ObjectResult<dtTbt_BillingTargetForView> GetTbt_BillingTargetForView(string billingTargetCode, string c_CUST_TYPE)
        {
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter c_CUST_TYPEParameter;
    
            if (c_CUST_TYPE != null)
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", c_CUST_TYPE);
            }
            else
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_BillingTargetForView>("GetTbt_BillingTargetForView", billingTargetCodeParameter, c_CUST_TYPEParameter);
        }
        public ObjectResult<tbt_BillingTarget> UpdateTbt_BillingTarget(string xml_doTbtBillingTarget)
        {
    
            ObjectParameter xml_doTbtBillingTargetParameter;
    
            if (xml_doTbtBillingTarget != null)
            {
                xml_doTbtBillingTargetParameter = new ObjectParameter("xml_doTbtBillingTarget", xml_doTbtBillingTarget);
            }
            else
            {
                xml_doTbtBillingTargetParameter = new ObjectParameter("xml_doTbtBillingTarget", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTarget>("UpdateTbt_BillingTarget", xml_doTbtBillingTargetParameter);
        }
        public ObjectResult<tbt_CreditCard> InsertTbt_CreditCard(string xml_DocCancelContractMemoDetail)
        {
    
            ObjectParameter xml_DocCancelContractMemoDetailParameter;
    
            if (xml_DocCancelContractMemoDetail != null)
            {
                xml_DocCancelContractMemoDetailParameter = new ObjectParameter("xml_DocCancelContractMemoDetail", xml_DocCancelContractMemoDetail);
            }
            else
            {
                xml_DocCancelContractMemoDetailParameter = new ObjectParameter("xml_DocCancelContractMemoDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_CreditCard>("InsertTbt_CreditCard", xml_DocCancelContractMemoDetailParameter);
        }
        public ObjectResult<tbt_AutoTransferBankAccount> InsertTbt_AutoTransferBankAccount(string xml_DocCancelContractMemoDetail)
        {
    
            ObjectParameter xml_DocCancelContractMemoDetailParameter;
    
            if (xml_DocCancelContractMemoDetail != null)
            {
                xml_DocCancelContractMemoDetailParameter = new ObjectParameter("xml_DocCancelContractMemoDetail", xml_DocCancelContractMemoDetail);
            }
            else
            {
                xml_DocCancelContractMemoDetailParameter = new ObjectParameter("xml_DocCancelContractMemoDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_AutoTransferBankAccount>("InsertTbt_AutoTransferBankAccount", xml_DocCancelContractMemoDetailParameter);
        }
        public ObjectResult<doBillingDetail> GetBillingDetailForCombine(string billingTargetCode, string billingTypeCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US, string c_CURRENCY)
        {
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingTypeCodeParameter;
    
            if (billingTypeCode != null)
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", billingTypeCode);
            }
            else
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
    
            ObjectParameter c_CURRENCYParameter;
    
            if (c_CURRENCY != null)
            {
                c_CURRENCYParameter = new ObjectParameter("C_CURRENCY", c_CURRENCY);
            }
            else
            {
                c_CURRENCYParameter = new ObjectParameter("C_CURRENCY", typeof(string));
            }
            return base.ExecuteFunction<doBillingDetail>("GetBillingDetailForCombine", billingTargetCodeParameter, billingTypeCodeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter, c_CURRENCYParameter);
        }
        public ObjectResult<tbt_BillingTypeDetail> DeleteTbt_BillingTypeDetailData(string contractCode, string billingOCC, string billingTypeCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingTypeCodeParameter;
    
            if (billingTypeCode != null)
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", billingTypeCode);
            }
            else
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTypeDetail>("DeleteTbt_BillingTypeDetailData", contractCodeParameter, billingOCCParameter, billingTypeCodeParameter);
        }
        public ObjectResult<tbt_BillingTypeDetail> UpdateTbt_BillingTypeDetailData(string xml_doTbt_BillingTypeDetail)
        {
    
            ObjectParameter xml_doTbt_BillingTypeDetailParameter;
    
            if (xml_doTbt_BillingTypeDetail != null)
            {
                xml_doTbt_BillingTypeDetailParameter = new ObjectParameter("xml_doTbt_BillingTypeDetail", xml_doTbt_BillingTypeDetail);
            }
            else
            {
                xml_doTbt_BillingTypeDetailParameter = new ObjectParameter("xml_doTbt_BillingTypeDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingTypeDetail>("UpdateTbt_BillingTypeDetailData", xml_doTbt_BillingTypeDetailParameter);
        }
        public ObjectResult<tbt_CreditCard> UpdateTbt_CreditCard(string xml_dotbt_CreditCard)
        {
    
            ObjectParameter xml_dotbt_CreditCardParameter;
    
            if (xml_dotbt_CreditCard != null)
            {
                xml_dotbt_CreditCardParameter = new ObjectParameter("xml_dotbt_CreditCard", xml_dotbt_CreditCard);
            }
            else
            {
                xml_dotbt_CreditCardParameter = new ObjectParameter("xml_dotbt_CreditCard", typeof(string));
            }
            return base.ExecuteFunction<tbt_CreditCard>("UpdateTbt_CreditCard", xml_dotbt_CreditCardParameter);
        }
        public ObjectResult<tbt_CreditCard> DeleteTbt_CreditCard(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_CreditCard>("DeleteTbt_CreditCard", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<tbt_AutoTransferBankAccount> UpdateTbt_AutoTransferBankAccountData(string xml_doTbtAutoTransferBankAccount)
        {
    
            ObjectParameter xml_doTbtAutoTransferBankAccountParameter;
    
            if (xml_doTbtAutoTransferBankAccount != null)
            {
                xml_doTbtAutoTransferBankAccountParameter = new ObjectParameter("xml_doTbtAutoTransferBankAccount", xml_doTbtAutoTransferBankAccount);
            }
            else
            {
                xml_doTbtAutoTransferBankAccountParameter = new ObjectParameter("xml_doTbtAutoTransferBankAccount", typeof(string));
            }
            return base.ExecuteFunction<tbt_AutoTransferBankAccount>("UpdateTbt_AutoTransferBankAccountData", xml_doTbtAutoTransferBankAccountParameter);
        }
        public ObjectResult<tbt_AutoTransferBankAccount> DeleteTbt_autoTransferBankAccountdata(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_AutoTransferBankAccount>("DeleteTbt_autoTransferBankAccountdata", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<doTbt_MonthlyBillingHistoryList> GetBillingHistoryList(string contractCode, string billingOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doTbt_MonthlyBillingHistoryList>("GetBillingHistoryList", contractCodeParameter, billingOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doBillingTypeDetailList> GetBillingTypeDetailList(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<doBillingTypeDetailList>("GetBillingTypeDetailList", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<dtTbt_AutoTransferBankAccountForView> GetTbt_AutoTransferBankAccountForView(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_AutoTransferBankAccountForView>("GetTbt_AutoTransferBankAccountForView", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<dtViewBillingBasic> GetViewBillingBasic(string strContractCode, string strBillingOCC, string strBillingClientCode, string strBillingTargetCode, string strBillingCilentname, string strAddress)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strBillingOCCParameter;
    
            if (strBillingOCC != null)
            {
                strBillingOCCParameter = new ObjectParameter("strBillingOCC", strBillingOCC);
            }
            else
            {
                strBillingOCCParameter = new ObjectParameter("strBillingOCC", typeof(string));
            }
    
            ObjectParameter strBillingClientCodeParameter;
    
            if (strBillingClientCode != null)
            {
                strBillingClientCodeParameter = new ObjectParameter("strBillingClientCode", strBillingClientCode);
            }
            else
            {
                strBillingClientCodeParameter = new ObjectParameter("strBillingClientCode", typeof(string));
            }
    
            ObjectParameter strBillingTargetCodeParameter;
    
            if (strBillingTargetCode != null)
            {
                strBillingTargetCodeParameter = new ObjectParameter("strBillingTargetCode", strBillingTargetCode);
            }
            else
            {
                strBillingTargetCodeParameter = new ObjectParameter("strBillingTargetCode", typeof(string));
            }
    
            ObjectParameter strBillingCilentnameParameter;
    
            if (strBillingCilentname != null)
            {
                strBillingCilentnameParameter = new ObjectParameter("strBillingCilentname", strBillingCilentname);
            }
            else
            {
                strBillingCilentnameParameter = new ObjectParameter("strBillingCilentname", typeof(string));
            }
    
            ObjectParameter strAddressParameter;
    
            if (strAddress != null)
            {
                strAddressParameter = new ObjectParameter("strAddress", strAddress);
            }
            else
            {
                strAddressParameter = new ObjectParameter("strAddress", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingBasic>("GetViewBillingBasic", strContractCodeParameter, strBillingOCCParameter, strBillingClientCodeParameter, strBillingTargetCodeParameter, strBillingCilentnameParameter, strAddressParameter);
        }
        public ObjectResult<dtViewBillingOccList> GetViewBillingOccList(string strContractCode)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingOccList>("GetViewBillingOccList", strContractCodeParameter);
        }
        public ObjectResult<doGetBillingDetailForCancel> GetBillingDetailForCancel(string contractCode, string billingOCC, string paymentStatus, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter paymentStatusParameter;
    
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doGetBillingDetailForCancel>("GetBillingDetailForCancel", contractCodeParameter, billingOCCParameter, paymentStatusParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doCheckInvoiceSameAccount> CheckInvoiceSameAccount(string invoiceNo, Nullable<int> invoiceOCC, string paymentMethod)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
    
            ObjectParameter paymentMethodParameter;
    
            if (paymentMethod != null)
            {
                paymentMethodParameter = new ObjectParameter("PaymentMethod", paymentMethod);
            }
            else
            {
                paymentMethodParameter = new ObjectParameter("PaymentMethod", typeof(string));
            }
            return base.ExecuteFunction<doCheckInvoiceSameAccount>("CheckInvoiceSameAccount", invoiceNoParameter, invoiceOCCParameter, paymentMethodParameter);
        }
        public ObjectResult<doGetBillingDetailContinues> GetBillingDetailContinues(string contractCode, string billingOCC, string paymentStatus, string c_BILLING_TYPE_GROUP_CONTINUES)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter paymentStatusParameter;
    
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_GROUP_CONTINUESParameter;
    
            if (c_BILLING_TYPE_GROUP_CONTINUES != null)
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", c_BILLING_TYPE_GROUP_CONTINUES);
            }
            else
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", typeof(string));
            }
            return base.ExecuteFunction<doGetBillingDetailContinues>("GetBillingDetailContinues", contractCodeParameter, billingOCCParameter, paymentStatusParameter, c_BILLING_TYPE_GROUP_CONTINUESParameter);
        }
        public ObjectResult<doGetBillingDetailOfInvoice> GetBillingDetailOfInvoice(string invoiceNo, Nullable<int> invoiceOCC, string paymentStatus, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
    
            ObjectParameter paymentStatusParameter;
    
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doGetBillingDetailOfInvoice>("GetBillingDetailOfInvoice", invoiceNoParameter, invoiceOCCParameter, paymentStatusParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_MonthlyBillingHistory> GetFirstBillingHistory(string contractCode, string billingOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<tbt_MonthlyBillingHistory>("GetFirstBillingHistory", contractCodeParameter, billingOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doGetUnpaidInvoiceData> GetUnpaidInvoiceData(string invoiceNo, string invoicePaymentStatus)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoicePaymentStatusParameter;
    
            if (invoicePaymentStatus != null)
            {
                invoicePaymentStatusParameter = new ObjectParameter("InvoicePaymentStatus", invoicePaymentStatus);
            }
            else
            {
                invoicePaymentStatusParameter = new ObjectParameter("InvoicePaymentStatus", typeof(string));
            }
            return base.ExecuteFunction<doGetUnpaidInvoiceData>("GetUnpaidInvoiceData", invoiceNoParameter, invoicePaymentStatusParameter);
        }
        public ObjectResult<tbt_BillingDetail> GetTbt_BillingDetailData(string contractCode, string billingOCC, Nullable<int> billingDetailNo)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingDetailNoParameter;
    
            if (billingDetailNo.HasValue)
            {
                billingDetailNoParameter = new ObjectParameter("BillingDetailNo", billingDetailNo);
            }
            else
            {
                billingDetailNoParameter = new ObjectParameter("BillingDetailNo", typeof(int));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("GetTbt_BillingDetailData", contractCodeParameter, billingOCCParameter, billingDetailNoParameter);
        }
        public ObjectResult<tbt_BillingDetail> DeleteTbt_BillingDetailData(string contractCode, string billingOCC, Nullable<int> billingDetailNo)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingDetailNoParameter;
    
            if (billingDetailNo.HasValue)
            {
                billingDetailNoParameter = new ObjectParameter("BillingDetailNo", billingDetailNo);
            }
            else
            {
                billingDetailNoParameter = new ObjectParameter("BillingDetailNo", typeof(int));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("DeleteTbt_BillingDetailData", contractCodeParameter, billingOCCParameter, billingDetailNoParameter);
        }
        public ObjectResult<tbt_BillingDetail> UpdateTbt_BillingDetailData(string xml_doTbt_BillingDetail)
        {
    
            ObjectParameter xml_doTbt_BillingDetailParameter;
    
            if (xml_doTbt_BillingDetail != null)
            {
                xml_doTbt_BillingDetailParameter = new ObjectParameter("xml_doTbt_BillingDetail", xml_doTbt_BillingDetail);
            }
            else
            {
                xml_doTbt_BillingDetailParameter = new ObjectParameter("xml_doTbt_BillingDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("UpdateTbt_BillingDetailData", xml_doTbt_BillingDetailParameter);
        }
        public int DeleteTbt_Invoice(string invoiceNo, Nullable<int> invoiceOCC)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction("DeleteTbt_Invoice", invoiceNoParameter, invoiceOCCParameter);
        }
        public ObjectResult<tbt_Invoice> GetTbt_Invoice(string invoiceNo, Nullable<int> invoiceOCC)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction<tbt_Invoice>("GetTbt_Invoice", invoiceNoParameter, invoiceOCCParameter);
        }
        public ObjectResult<tbt_Invoice> InsertTbt_Invoice(string xmlTbt_Invoice)
        {
    
            ObjectParameter xmlTbt_InvoiceParameter;
    
            if (xmlTbt_Invoice != null)
            {
                xmlTbt_InvoiceParameter = new ObjectParameter("xmlTbt_Invoice", xmlTbt_Invoice);
            }
            else
            {
                xmlTbt_InvoiceParameter = new ObjectParameter("xmlTbt_Invoice", typeof(string));
            }
            return base.ExecuteFunction<tbt_Invoice>("InsertTbt_Invoice", xmlTbt_InvoiceParameter);
        }
        public ObjectResult<tbt_Invoice> UpdateTbt_Invoice(string xml_doTbt_Invoice)
        {
    
            ObjectParameter xml_doTbt_InvoiceParameter;
    
            if (xml_doTbt_Invoice != null)
            {
                xml_doTbt_InvoiceParameter = new ObjectParameter("xml_doTbt_Invoice", xml_doTbt_Invoice);
            }
            else
            {
                xml_doTbt_InvoiceParameter = new ObjectParameter("xml_doTbt_Invoice", typeof(string));
            }
            return base.ExecuteFunction<tbt_Invoice>("UpdateTbt_Invoice", xml_doTbt_InvoiceParameter);
        }
        public ObjectResult<dtTbt_CreditCardForView> GetTbt_CreditCardForView(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_CreditCardForView>("GetTbt_CreditCardForView", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<doTax> GetTaxCharged(string contractCode, string billingOCC, string billingTypeCode, Nullable<System.DateTime> invoiceDate)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingTypeCodeParameter;
    
            if (billingTypeCode != null)
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", billingTypeCode);
            }
            else
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", typeof(string));
            }
    
            ObjectParameter invoiceDateParameter;
    
            if (invoiceDate.HasValue)
            {
                invoiceDateParameter = new ObjectParameter("InvoiceDate", invoiceDate);
            }
            else
            {
                invoiceDateParameter = new ObjectParameter("InvoiceDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doTax>("GetTaxCharged", contractCodeParameter, billingOCCParameter, billingTypeCodeParameter, invoiceDateParameter);
        }
        public ObjectResult<string> GetInvoiceOCC(string invoiceNo)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
            return base.ExecuteFunction<string>("GetInvoiceOCC", invoiceNoParameter);
        }
        public ObjectResult<string> GetInvoiceRunningNo(string runningType, string year, string month, string operateBy, Nullable<System.DateTime> operateDate)
        {
    
            ObjectParameter runningTypeParameter;
    
            if (runningType != null)
            {
                runningTypeParameter = new ObjectParameter("RunningType", runningType);
            }
            else
            {
                runningTypeParameter = new ObjectParameter("RunningType", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(string));
            }
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("Month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("Month", typeof(string));
            }
    
            ObjectParameter operateByParameter;
    
            if (operateBy != null)
            {
                operateByParameter = new ObjectParameter("OperateBy", operateBy);
            }
            else
            {
                operateByParameter = new ObjectParameter("OperateBy", typeof(string));
            }
    
            ObjectParameter operateDateParameter;
    
            if (operateDate.HasValue)
            {
                operateDateParameter = new ObjectParameter("OperateDate", operateDate);
            }
            else
            {
                operateDateParameter = new ObjectParameter("OperateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<string>("GetInvoiceRunningNo", runningTypeParameter, yearParameter, monthParameter, operateByParameter, operateDateParameter);
        }
        public ObjectResult<tbt_TaxInvoice> InsertTbt_TaxInvoice(string xmlTbt_TaxInvoice)
        {
    
            ObjectParameter xmlTbt_TaxInvoiceParameter;
    
            if (xmlTbt_TaxInvoice != null)
            {
                xmlTbt_TaxInvoiceParameter = new ObjectParameter("xmlTbt_TaxInvoice", xmlTbt_TaxInvoice);
            }
            else
            {
                xmlTbt_TaxInvoiceParameter = new ObjectParameter("xmlTbt_TaxInvoice", typeof(string));
            }
            return base.ExecuteFunction<tbt_TaxInvoice>("InsertTbt_TaxInvoice", xmlTbt_TaxInvoiceParameter);
        }
        public ObjectResult<tbt_TaxInvoice> GetTaxInvoice(string invoiceNo, Nullable<int> invoiceOCC)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction<tbt_TaxInvoice>("GetTaxInvoice", invoiceNoParameter, invoiceOCCParameter);
        }
        public ObjectResult<tbt_TaxInvoice> GetTbt_TaxInvoice(string taxInvoiceNo)
        {
    
            ObjectParameter taxInvoiceNoParameter;
    
            if (taxInvoiceNo != null)
            {
                taxInvoiceNoParameter = new ObjectParameter("TaxInvoiceNo", taxInvoiceNo);
            }
            else
            {
                taxInvoiceNoParameter = new ObjectParameter("TaxInvoiceNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_TaxInvoice>("GetTbt_TaxInvoice", taxInvoiceNoParameter);
        }
        public ObjectResult<tbt_TaxInvoice> UpdateTbt_TaxInvoice(string xml_doTbt_TaxInvoice)
        {
    
            ObjectParameter xml_doTbt_TaxInvoiceParameter;
    
            if (xml_doTbt_TaxInvoice != null)
            {
                xml_doTbt_TaxInvoiceParameter = new ObjectParameter("xml_doTbt_TaxInvoice", xml_doTbt_TaxInvoice);
            }
            else
            {
                xml_doTbt_TaxInvoiceParameter = new ObjectParameter("xml_doTbt_TaxInvoice", typeof(string));
            }
            return base.ExecuteFunction<tbt_TaxInvoice>("UpdateTbt_TaxInvoice", xml_doTbt_TaxInvoiceParameter);
        }
        public ObjectResult<tbt_Depositfee> GetDepositFee(string contractCode, string billingOCC, string invoiceNo, string depositStatus, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter depositStatusParameter;
    
            if (depositStatus != null)
            {
                depositStatusParameter = new ObjectParameter("DepositStatus", depositStatus);
            }
            else
            {
                depositStatusParameter = new ObjectParameter("DepositStatus", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<tbt_Depositfee>("GetDepositFee", contractCodeParameter, billingOCCParameter, invoiceNoParameter, depositStatusParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_Depositfee> GetTbt_Depositfee(string contractCode, string billingOCC, Nullable<int> depositFeeNo)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter depositFeeNoParameter;
    
            if (depositFeeNo.HasValue)
            {
                depositFeeNoParameter = new ObjectParameter("DepositFeeNo", depositFeeNo);
            }
            else
            {
                depositFeeNoParameter = new ObjectParameter("DepositFeeNo", typeof(int));
            }
            return base.ExecuteFunction<tbt_Depositfee>("GetTbt_Depositfee", contractCodeParameter, billingOCCParameter, depositFeeNoParameter);
        }
        public ObjectResult<tbt_Depositfee> InsertTbt_Depositfee(string xmlTbt_Depositfee)
        {
    
            ObjectParameter xmlTbt_DepositfeeParameter;
    
            if (xmlTbt_Depositfee != null)
            {
                xmlTbt_DepositfeeParameter = new ObjectParameter("xmlTbt_Depositfee", xmlTbt_Depositfee);
            }
            else
            {
                xmlTbt_DepositfeeParameter = new ObjectParameter("xmlTbt_Depositfee", typeof(string));
            }
            return base.ExecuteFunction<tbt_Depositfee>("InsertTbt_Depositfee", xmlTbt_DepositfeeParameter);
        }
        public ObjectResult<tbt_Depositfee> UpdateTbt_Depositfee(string xml_doTbt_Depositfee)
        {
    
            ObjectParameter xml_doTbt_DepositfeeParameter;
    
            if (xml_doTbt_Depositfee != null)
            {
                xml_doTbt_DepositfeeParameter = new ObjectParameter("xml_doTbt_Depositfee", xml_doTbt_Depositfee);
            }
            else
            {
                xml_doTbt_DepositfeeParameter = new ObjectParameter("xml_doTbt_Depositfee", typeof(string));
            }
            return base.ExecuteFunction<tbt_Depositfee>("UpdateTbt_Depositfee", xml_doTbt_DepositfeeParameter);
        }
        public ObjectResult<dtViewBillingDetailList> GetViewBillingDetailList(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingDetailList>("GetViewBillingDetailList", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<dtTbt_BillingBasicForView> GetTbt_BillingBasicForView(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<dtTbt_BillingBasicForView>("GetTbt_BillingBasicForView", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<dtViewBillingDetailListOfLastInvoiceOCC> GetViewBillingDetailListOfLastInvoiceOCC(string invoiceNo, string billingClientCode, string billingTargetCode, string billingCilentname, string address)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingCilentnameParameter;
    
            if (billingCilentname != null)
            {
                billingCilentnameParameter = new ObjectParameter("BillingCilentname", billingCilentname);
            }
            else
            {
                billingCilentnameParameter = new ObjectParameter("BillingCilentname", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingDetailListOfLastInvoiceOCC>("GetViewBillingDetailListOfLastInvoiceOCC", invoiceNoParameter, billingClientCodeParameter, billingTargetCodeParameter, billingCilentnameParameter, addressParameter);
        }
        public ObjectResult<dtViewDepositDetailInformation> GetViewDepositDetailInformation(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<dtViewDepositDetailInformation>("GetViewDepositDetailInformation", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<dtViewBillingBasicList> GetViewBillingBasicList(string billingClientCode, string billingTargetCode, string billingClientName, string address, string invoiceNo, string taxIDNo)
        {
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingClientNameParameter;
    
            if (billingClientName != null)
            {
                billingClientNameParameter = new ObjectParameter("BillingClientName", billingClientName);
            }
            else
            {
                billingClientNameParameter = new ObjectParameter("BillingClientName", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter taxIDNoParameter;
    
            if (taxIDNo != null)
            {
                taxIDNoParameter = new ObjectParameter("TaxIDNo", taxIDNo);
            }
            else
            {
                taxIDNoParameter = new ObjectParameter("TaxIDNo", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingBasicList>("GetViewBillingBasicList", billingClientCodeParameter, billingTargetCodeParameter, billingClientNameParameter, addressParameter, invoiceNoParameter, taxIDNoParameter);
        }
        public ObjectResult<dtViewBillingInvoiceListOfLastInvoiceOcc> GetViewBillingInvoiceListOfLastInvoiceOcc(string billingClientCode, string billingTargetCode, string billingCilentname, string address, string invoiceNo, string taxIDNo)
        {
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingCilentnameParameter;
    
            if (billingCilentname != null)
            {
                billingCilentnameParameter = new ObjectParameter("BillingCilentname", billingCilentname);
            }
            else
            {
                billingCilentnameParameter = new ObjectParameter("BillingCilentname", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter taxIDNoParameter;
    
            if (taxIDNo != null)
            {
                taxIDNoParameter = new ObjectParameter("TaxIDNo", taxIDNo);
            }
            else
            {
                taxIDNoParameter = new ObjectParameter("TaxIDNo", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingInvoiceListOfLastInvoiceOcc>("GetViewBillingInvoiceListOfLastInvoiceOcc", billingClientCodeParameter, billingTargetCodeParameter, billingCilentnameParameter, addressParameter, invoiceNoParameter, taxIDNoParameter);
        }
        public ObjectResult<doBillingTargetList> GetViewBillingTargetList(string billingClientCode, string billingTargetCode, string billingClientName, string address, string invoiceNo, string taxIDNo)
        {
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingClientNameParameter;
    
            if (billingClientName != null)
            {
                billingClientNameParameter = new ObjectParameter("BillingClientName", billingClientName);
            }
            else
            {
                billingClientNameParameter = new ObjectParameter("BillingClientName", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter taxIDNoParameter;
    
            if (taxIDNo != null)
            {
                taxIDNoParameter = new ObjectParameter("TaxIDNo", taxIDNo);
            }
            else
            {
                taxIDNoParameter = new ObjectParameter("TaxIDNo", typeof(string));
            }
            return base.ExecuteFunction<doBillingTargetList>("GetViewBillingTargetList", billingClientCodeParameter, billingTargetCodeParameter, billingClientNameParameter, addressParameter, invoiceNoParameter, taxIDNoParameter);
        }
        public ObjectResult<doCheckInvoiceSameAccountNo> CheckInvoiceSameAccountNo_AUTO_TRANFER(string invoiceNo, Nullable<int> invoiceOCC)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction<doCheckInvoiceSameAccountNo>("CheckInvoiceSameAccountNo_AUTO_TRANFER", invoiceNoParameter, invoiceOCCParameter);
        }
        public ObjectResult<doCheckInvoiceSameAccountNo> CheckInvoiceSameAccountNo_CREDIT_CARD(string invoiceNo, Nullable<int> invoiceOCC)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction<doCheckInvoiceSameAccountNo>("CheckInvoiceSameAccountNo_CREDIT_CARD", invoiceNoParameter, invoiceOCCParameter);
        }
        public ObjectResult<tbt_BillingDetail> GetBillingDetailPartialFeeList(string contractCode, string billingOCC, string billingTypeCode, string paymentStatus, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingTypeCodeParameter;
    
            if (billingTypeCode != null)
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", billingTypeCode);
            }
            else
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", typeof(string));
            }
    
            ObjectParameter paymentStatusParameter;
    
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("GetBillingDetailPartialFeeList", contractCodeParameter, billingOCCParameter, billingTypeCodeParameter, paymentStatusParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetNextAutoTransferDate(string bankCode, string autoTransferDate)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
    
            ObjectParameter autoTransferDateParameter;
    
            if (autoTransferDate != null)
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", autoTransferDate);
            }
            else
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetNextAutoTransferDate", bankCodeParameter, autoTransferDateParameter);
        }
        public ObjectResult<tbt_ExportAutoTransfer> GetTbt_ExportAutoTransfer(Nullable<int> exportAutoTransferID)
        {
    
            ObjectParameter exportAutoTransferIDParameter;
    
            if (exportAutoTransferID.HasValue)
            {
                exportAutoTransferIDParameter = new ObjectParameter("ExportAutoTransferID", exportAutoTransferID);
            }
            else
            {
                exportAutoTransferIDParameter = new ObjectParameter("ExportAutoTransferID", typeof(int));
            }
            return base.ExecuteFunction<tbt_ExportAutoTransfer>("GetTbt_ExportAutoTransfer", exportAutoTransferIDParameter);
        }
        public ObjectResult<tbt_ExportAutoTransfer> GetExportAutoTransfer(string bankCode, Nullable<System.DateTime> autoTransferDate)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
    
            ObjectParameter autoTransferDateParameter;
    
            if (autoTransferDate.HasValue)
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", autoTransferDate);
            }
            else
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_ExportAutoTransfer>("GetExportAutoTransfer", bankCodeParameter, autoTransferDateParameter);
        }
        public ObjectResult<doGetBankAutoTransferDateForGen> GetBankAutoTransferDateForGen()
        {
            return base.ExecuteFunction<doGetBankAutoTransferDateForGen>("GetBankAutoTransferDateForGen");
        }
        public ObjectResult<doGetInvoiceForGenBankFile> GetInvoiceForGenBankFile(string bankCode, string autoTransferDate, string invoicePaymentStatus)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
    
            ObjectParameter autoTransferDateParameter;
    
            if (autoTransferDate != null)
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", autoTransferDate);
            }
            else
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", typeof(string));
            }
    
            ObjectParameter invoicePaymentStatusParameter;
    
            if (invoicePaymentStatus != null)
            {
                invoicePaymentStatusParameter = new ObjectParameter("InvoicePaymentStatus", invoicePaymentStatus);
            }
            else
            {
                invoicePaymentStatusParameter = new ObjectParameter("InvoicePaymentStatus", typeof(string));
            }
            return base.ExecuteFunction<doGetInvoiceForGenBankFile>("GetInvoiceForGenBankFile", bankCodeParameter, autoTransferDateParameter, invoicePaymentStatusParameter);
        }
        public ObjectResult<tbt_ExportAutoTransfer> InsertTbt_ExportAutoTransfer(string bankCode, string bankBranchCode, Nullable<System.DateTime> generateDate, Nullable<System.DateTime> autoTransferDate, string filePath, string fileName, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
    
            ObjectParameter bankBranchCodeParameter;
    
            if (bankBranchCode != null)
            {
                bankBranchCodeParameter = new ObjectParameter("BankBranchCode", bankBranchCode);
            }
            else
            {
                bankBranchCodeParameter = new ObjectParameter("BankBranchCode", typeof(string));
            }
    
            ObjectParameter generateDateParameter;
    
            if (generateDate.HasValue)
            {
                generateDateParameter = new ObjectParameter("GenerateDate", generateDate);
            }
            else
            {
                generateDateParameter = new ObjectParameter("GenerateDate", typeof(System.DateTime));
            }
    
            ObjectParameter autoTransferDateParameter;
    
            if (autoTransferDate.HasValue)
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", autoTransferDate);
            }
            else
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", typeof(System.DateTime));
            }
    
            ObjectParameter filePathParameter;
    
            if (filePath != null)
            {
                filePathParameter = new ObjectParameter("FilePath", filePath);
            }
            else
            {
                filePathParameter = new ObjectParameter("FilePath", typeof(string));
            }
    
            ObjectParameter fileNameParameter;
    
            if (fileName != null)
            {
                fileNameParameter = new ObjectParameter("FileName", fileName);
            }
            else
            {
                fileNameParameter = new ObjectParameter("FileName", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_ExportAutoTransfer>("InsertTbt_ExportAutoTransfer", bankCodeParameter, bankBranchCodeParameter, generateDateParameter, autoTransferDateParameter, filePathParameter, fileNameParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<dtBillingTargetData> GetViewBillingTargetDataForSearch(string billingCilentCode, string billingOfficeCode, string billingCilentname, string custTypeCode, string companyTypeCode, string regionCode, string businessTypeCode, string address, string phoneNo)
        {
    
            ObjectParameter billingCilentCodeParameter;
    
            if (billingCilentCode != null)
            {
                billingCilentCodeParameter = new ObjectParameter("BillingCilentCode", billingCilentCode);
            }
            else
            {
                billingCilentCodeParameter = new ObjectParameter("BillingCilentCode", typeof(string));
            }
    
            ObjectParameter billingOfficeCodeParameter;
    
            if (billingOfficeCode != null)
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", billingOfficeCode);
            }
            else
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", typeof(string));
            }
    
            ObjectParameter billingCilentnameParameter;
    
            if (billingCilentname != null)
            {
                billingCilentnameParameter = new ObjectParameter("BillingCilentname", billingCilentname);
            }
            else
            {
                billingCilentnameParameter = new ObjectParameter("BillingCilentname", typeof(string));
            }
    
            ObjectParameter custTypeCodeParameter;
    
            if (custTypeCode != null)
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", custTypeCode);
            }
            else
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", typeof(string));
            }
    
            ObjectParameter companyTypeCodeParameter;
    
            if (companyTypeCode != null)
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", companyTypeCode);
            }
            else
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", typeof(string));
            }
    
            ObjectParameter regionCodeParameter;
    
            if (regionCode != null)
            {
                regionCodeParameter = new ObjectParameter("RegionCode", regionCode);
            }
            else
            {
                regionCodeParameter = new ObjectParameter("RegionCode", typeof(string));
            }
    
            ObjectParameter businessTypeCodeParameter;
    
            if (businessTypeCode != null)
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", businessTypeCode);
            }
            else
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", typeof(string));
            }
    
            ObjectParameter addressParameter;
    
            if (address != null)
            {
                addressParameter = new ObjectParameter("Address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("Address", typeof(string));
            }
    
            ObjectParameter phoneNoParameter;
    
            if (phoneNo != null)
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", phoneNo);
            }
            else
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", typeof(string));
            }
            return base.ExecuteFunction<dtBillingTargetData>("GetViewBillingTargetDataForSearch", billingCilentCodeParameter, billingOfficeCodeParameter, billingCilentnameParameter, custTypeCodeParameter, companyTypeCodeParameter, regionCodeParameter, businessTypeCodeParameter, addressParameter, phoneNoParameter);
        }
        public ObjectResult<tbt_Invoice> GetInvoiceOfChangeDate(string contractCode, string billingOCC, Nullable<System.DateTime> changeFeeDate)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter changeFeeDateParameter;
    
            if (changeFeeDate.HasValue)
            {
                changeFeeDateParameter = new ObjectParameter("ChangeFeeDate", changeFeeDate);
            }
            else
            {
                changeFeeDateParameter = new ObjectParameter("ChangeFeeDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_Invoice>("GetInvoiceOfChangeDate", contractCodeParameter, billingOCCParameter, changeFeeDateParameter);
        }
        public ObjectResult<tbt_BillingDetail> GetTbt_BillingDetailOfInvoice(string invoiceNo, Nullable<int> invoiceOCC, string c_PAYMENT_STATUS_CANCEL, string c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED, string c_PAYMENT_STATUS_NOTE_FAIL, string c_PAYMENT_STATUS_POST_FAIL)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
    
            ObjectParameter c_PAYMENT_STATUS_CANCELParameter;
    
            if (c_PAYMENT_STATUS_CANCEL != null)
            {
                c_PAYMENT_STATUS_CANCELParameter = new ObjectParameter("C_PAYMENT_STATUS_CANCEL", c_PAYMENT_STATUS_CANCEL);
            }
            else
            {
                c_PAYMENT_STATUS_CANCELParameter = new ObjectParameter("C_PAYMENT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter;
    
            if (c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED != null)
            {
                c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter = new ObjectParameter("C_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED", c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED);
            }
            else
            {
                c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter = new ObjectParameter("C_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_NOTE_FAILParameter;
    
            if (c_PAYMENT_STATUS_NOTE_FAIL != null)
            {
                c_PAYMENT_STATUS_NOTE_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_NOTE_FAIL", c_PAYMENT_STATUS_NOTE_FAIL);
            }
            else
            {
                c_PAYMENT_STATUS_NOTE_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_NOTE_FAIL", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_POST_FAILParameter;
    
            if (c_PAYMENT_STATUS_POST_FAIL != null)
            {
                c_PAYMENT_STATUS_POST_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_POST_FAIL", c_PAYMENT_STATUS_POST_FAIL);
            }
            else
            {
                c_PAYMENT_STATUS_POST_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_POST_FAIL", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("GetTbt_BillingDetailOfInvoice", invoiceNoParameter, invoiceOCCParameter, c_PAYMENT_STATUS_CANCELParameter, c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter, c_PAYMENT_STATUS_NOTE_FAILParameter, c_PAYMENT_STATUS_POST_FAILParameter);
        }
        public ObjectResult<doGetInvoiceWithBillingClientName> GetInvoiceWithBillingClientName(string invoiceNo)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
            return base.ExecuteFunction<doGetInvoiceWithBillingClientName>("GetInvoiceWithBillingClientName", invoiceNoParameter);
        }
        public ObjectResult<dtBillingDetailByProcess> GetBillingDetailByProcess(string c_PAYMENT_METHOD_AUTO_TRANFER, string c_PAYMENT_METHOD_BANK_TRANSFER, string c_PAYMENT_METHOD_CREDIT_CARD, string c_PAYMENT_METHOD_MESSENGER, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_DETAIL_AUTO_CREDIT, string c_BILLING_TYPE_SERVICE, string c_BILLING_TYPE_MA, string c_BILLING_TYPE_SG, string c_BILLING_TYPE_DURING_STOP_SERVICE, string c_BILLING_TYPE_DURING_STOP_MA, string c_BILLING_TYPE_DURING_STOP_SG, string c_BILLING_TYPE_GROUP_CONTINUES, Nullable<System.DateTime> batchDate)
        {
    
            ObjectParameter c_PAYMENT_METHOD_AUTO_TRANFERParameter;
    
            if (c_PAYMENT_METHOD_AUTO_TRANFER != null)
            {
                c_PAYMENT_METHOD_AUTO_TRANFERParameter = new ObjectParameter("C_PAYMENT_METHOD_AUTO_TRANFER", c_PAYMENT_METHOD_AUTO_TRANFER);
            }
            else
            {
                c_PAYMENT_METHOD_AUTO_TRANFERParameter = new ObjectParameter("C_PAYMENT_METHOD_AUTO_TRANFER", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_METHOD_BANK_TRANSFERParameter;
    
            if (c_PAYMENT_METHOD_BANK_TRANSFER != null)
            {
                c_PAYMENT_METHOD_BANK_TRANSFERParameter = new ObjectParameter("C_PAYMENT_METHOD_BANK_TRANSFER", c_PAYMENT_METHOD_BANK_TRANSFER);
            }
            else
            {
                c_PAYMENT_METHOD_BANK_TRANSFERParameter = new ObjectParameter("C_PAYMENT_METHOD_BANK_TRANSFER", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_METHOD_CREDIT_CARDParameter;
    
            if (c_PAYMENT_METHOD_CREDIT_CARD != null)
            {
                c_PAYMENT_METHOD_CREDIT_CARDParameter = new ObjectParameter("C_PAYMENT_METHOD_CREDIT_CARD", c_PAYMENT_METHOD_CREDIT_CARD);
            }
            else
            {
                c_PAYMENT_METHOD_CREDIT_CARDParameter = new ObjectParameter("C_PAYMENT_METHOD_CREDIT_CARD", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_METHOD_MESSENGERParameter;
    
            if (c_PAYMENT_METHOD_MESSENGER != null)
            {
                c_PAYMENT_METHOD_MESSENGERParameter = new ObjectParameter("C_PAYMENT_METHOD_MESSENGER", c_PAYMENT_METHOD_MESSENGER);
            }
            else
            {
                c_PAYMENT_METHOD_MESSENGERParameter = new ObjectParameter("C_PAYMENT_METHOD_MESSENGER", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_INV_BANK_COLLECTParameter;
    
            if (c_PAYMENT_STATUS_INV_BANK_COLLECT != null)
            {
                c_PAYMENT_STATUS_INV_BANK_COLLECTParameter = new ObjectParameter("C_PAYMENT_STATUS_INV_BANK_COLLECT", c_PAYMENT_STATUS_INV_BANK_COLLECT);
            }
            else
            {
                c_PAYMENT_STATUS_INV_BANK_COLLECTParameter = new ObjectParameter("C_PAYMENT_STATUS_INV_BANK_COLLECT", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter;
    
            if (c_PAYMENT_STATUS_DETAIL_AUTO_CREDIT != null)
            {
                c_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter = new ObjectParameter("C_PAYMENT_STATUS_DETAIL_AUTO_CREDIT", c_PAYMENT_STATUS_DETAIL_AUTO_CREDIT);
            }
            else
            {
                c_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter = new ObjectParameter("C_PAYMENT_STATUS_DETAIL_AUTO_CREDIT", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_SERVICEParameter;
    
            if (c_BILLING_TYPE_SERVICE != null)
            {
                c_BILLING_TYPE_SERVICEParameter = new ObjectParameter("C_BILLING_TYPE_SERVICE", c_BILLING_TYPE_SERVICE);
            }
            else
            {
                c_BILLING_TYPE_SERVICEParameter = new ObjectParameter("C_BILLING_TYPE_SERVICE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_MAParameter;
    
            if (c_BILLING_TYPE_MA != null)
            {
                c_BILLING_TYPE_MAParameter = new ObjectParameter("C_BILLING_TYPE_MA", c_BILLING_TYPE_MA);
            }
            else
            {
                c_BILLING_TYPE_MAParameter = new ObjectParameter("C_BILLING_TYPE_MA", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_SGParameter;
    
            if (c_BILLING_TYPE_SG != null)
            {
                c_BILLING_TYPE_SGParameter = new ObjectParameter("C_BILLING_TYPE_SG", c_BILLING_TYPE_SG);
            }
            else
            {
                c_BILLING_TYPE_SGParameter = new ObjectParameter("C_BILLING_TYPE_SG", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_DURING_STOP_SERVICEParameter;
    
            if (c_BILLING_TYPE_DURING_STOP_SERVICE != null)
            {
                c_BILLING_TYPE_DURING_STOP_SERVICEParameter = new ObjectParameter("C_BILLING_TYPE_DURING_STOP_SERVICE", c_BILLING_TYPE_DURING_STOP_SERVICE);
            }
            else
            {
                c_BILLING_TYPE_DURING_STOP_SERVICEParameter = new ObjectParameter("C_BILLING_TYPE_DURING_STOP_SERVICE", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_DURING_STOP_MAParameter;
    
            if (c_BILLING_TYPE_DURING_STOP_MA != null)
            {
                c_BILLING_TYPE_DURING_STOP_MAParameter = new ObjectParameter("C_BILLING_TYPE_DURING_STOP_MA", c_BILLING_TYPE_DURING_STOP_MA);
            }
            else
            {
                c_BILLING_TYPE_DURING_STOP_MAParameter = new ObjectParameter("C_BILLING_TYPE_DURING_STOP_MA", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_DURING_STOP_SGParameter;
    
            if (c_BILLING_TYPE_DURING_STOP_SG != null)
            {
                c_BILLING_TYPE_DURING_STOP_SGParameter = new ObjectParameter("C_BILLING_TYPE_DURING_STOP_SG", c_BILLING_TYPE_DURING_STOP_SG);
            }
            else
            {
                c_BILLING_TYPE_DURING_STOP_SGParameter = new ObjectParameter("C_BILLING_TYPE_DURING_STOP_SG", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_GROUP_CONTINUESParameter;
    
            if (c_BILLING_TYPE_GROUP_CONTINUES != null)
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", c_BILLING_TYPE_GROUP_CONTINUES);
            }
            else
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", typeof(string));
            }
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtBillingDetailByProcess>("GetBillingDetailByProcess", c_PAYMENT_METHOD_AUTO_TRANFERParameter, c_PAYMENT_METHOD_BANK_TRANSFERParameter, c_PAYMENT_METHOD_CREDIT_CARDParameter, c_PAYMENT_METHOD_MESSENGERParameter, c_PAYMENT_STATUS_INV_BANK_COLLECTParameter, c_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter, c_BILLING_TYPE_SERVICEParameter, c_BILLING_TYPE_MAParameter, c_BILLING_TYPE_SGParameter, c_BILLING_TYPE_DURING_STOP_SERVICEParameter, c_BILLING_TYPE_DURING_STOP_MAParameter, c_BILLING_TYPE_DURING_STOP_SGParameter, c_BILLING_TYPE_GROUP_CONTINUESParameter, batchDateParameter);
        }
        public ObjectResult<dtViewBillingDetailList> GetViewBillingDetailListByTargetCode(string billingTargetCode)
        {
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingDetailList>("GetViewBillingDetailListByTargetCode", billingTargetCodeParameter);
        }
        public ObjectResult<dtBillingDetailForCreateInvoice> GetBillingDetailForCreateInvoice(string c_CUST_TYPE_JURISTIC, string c_PAYMENT_STATUS_CANCEL, string c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED, string c_PAYMENT_STATUS_NOTE_FAIL, string c_PAYMENT_STATUS_POST_FAIL, string c_SEP_INV_CONTRACT_CODE_ASCE, string c_SEP_INV_SORT_ASCE, string c_SEP_INV_SORT_DESC, string c_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCE, string c_SEP_INV_SAME_TYPE_SORT_ASCE, string c_SEP_INV_SAME_TYPE_SORT_DESC, string c_BILLING_TYPE_GROUP_CONTINUES, string c_BILLING_TYPE_GROUP_DEPOSIT, string c_SEP_INV_EACH_CONTRACT, Nullable<System.DateTime> batchDate)
        {
    
            ObjectParameter c_CUST_TYPE_JURISTICParameter;
    
            if (c_CUST_TYPE_JURISTIC != null)
            {
                c_CUST_TYPE_JURISTICParameter = new ObjectParameter("C_CUST_TYPE_JURISTIC", c_CUST_TYPE_JURISTIC);
            }
            else
            {
                c_CUST_TYPE_JURISTICParameter = new ObjectParameter("C_CUST_TYPE_JURISTIC", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_CANCELParameter;
    
            if (c_PAYMENT_STATUS_CANCEL != null)
            {
                c_PAYMENT_STATUS_CANCELParameter = new ObjectParameter("C_PAYMENT_STATUS_CANCEL", c_PAYMENT_STATUS_CANCEL);
            }
            else
            {
                c_PAYMENT_STATUS_CANCELParameter = new ObjectParameter("C_PAYMENT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter;
    
            if (c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED != null)
            {
                c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter = new ObjectParameter("C_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED", c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED);
            }
            else
            {
                c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter = new ObjectParameter("C_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_NOTE_FAILParameter;
    
            if (c_PAYMENT_STATUS_NOTE_FAIL != null)
            {
                c_PAYMENT_STATUS_NOTE_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_NOTE_FAIL", c_PAYMENT_STATUS_NOTE_FAIL);
            }
            else
            {
                c_PAYMENT_STATUS_NOTE_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_NOTE_FAIL", typeof(string));
            }
    
            ObjectParameter c_PAYMENT_STATUS_POST_FAILParameter;
    
            if (c_PAYMENT_STATUS_POST_FAIL != null)
            {
                c_PAYMENT_STATUS_POST_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_POST_FAIL", c_PAYMENT_STATUS_POST_FAIL);
            }
            else
            {
                c_PAYMENT_STATUS_POST_FAILParameter = new ObjectParameter("C_PAYMENT_STATUS_POST_FAIL", typeof(string));
            }
    
            ObjectParameter c_SEP_INV_CONTRACT_CODE_ASCEParameter;
    
            if (c_SEP_INV_CONTRACT_CODE_ASCE != null)
            {
                c_SEP_INV_CONTRACT_CODE_ASCEParameter = new ObjectParameter("C_SEP_INV_CONTRACT_CODE_ASCE", c_SEP_INV_CONTRACT_CODE_ASCE);
            }
            else
            {
                c_SEP_INV_CONTRACT_CODE_ASCEParameter = new ObjectParameter("C_SEP_INV_CONTRACT_CODE_ASCE", typeof(string));
            }
    
            ObjectParameter c_SEP_INV_SORT_ASCEParameter;
    
            if (c_SEP_INV_SORT_ASCE != null)
            {
                c_SEP_INV_SORT_ASCEParameter = new ObjectParameter("C_SEP_INV_SORT_ASCE", c_SEP_INV_SORT_ASCE);
            }
            else
            {
                c_SEP_INV_SORT_ASCEParameter = new ObjectParameter("C_SEP_INV_SORT_ASCE", typeof(string));
            }
    
            ObjectParameter c_SEP_INV_SORT_DESCParameter;
    
            if (c_SEP_INV_SORT_DESC != null)
            {
                c_SEP_INV_SORT_DESCParameter = new ObjectParameter("C_SEP_INV_SORT_DESC", c_SEP_INV_SORT_DESC);
            }
            else
            {
                c_SEP_INV_SORT_DESCParameter = new ObjectParameter("C_SEP_INV_SORT_DESC", typeof(string));
            }
    
            ObjectParameter c_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCEParameter;
    
            if (c_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCE != null)
            {
                c_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCEParameter = new ObjectParameter("C_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCE", c_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCE);
            }
            else
            {
                c_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCEParameter = new ObjectParameter("C_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCE", typeof(string));
            }
    
            ObjectParameter c_SEP_INV_SAME_TYPE_SORT_ASCEParameter;
    
            if (c_SEP_INV_SAME_TYPE_SORT_ASCE != null)
            {
                c_SEP_INV_SAME_TYPE_SORT_ASCEParameter = new ObjectParameter("C_SEP_INV_SAME_TYPE_SORT_ASCE", c_SEP_INV_SAME_TYPE_SORT_ASCE);
            }
            else
            {
                c_SEP_INV_SAME_TYPE_SORT_ASCEParameter = new ObjectParameter("C_SEP_INV_SAME_TYPE_SORT_ASCE", typeof(string));
            }
    
            ObjectParameter c_SEP_INV_SAME_TYPE_SORT_DESCParameter;
    
            if (c_SEP_INV_SAME_TYPE_SORT_DESC != null)
            {
                c_SEP_INV_SAME_TYPE_SORT_DESCParameter = new ObjectParameter("C_SEP_INV_SAME_TYPE_SORT_DESC", c_SEP_INV_SAME_TYPE_SORT_DESC);
            }
            else
            {
                c_SEP_INV_SAME_TYPE_SORT_DESCParameter = new ObjectParameter("C_SEP_INV_SAME_TYPE_SORT_DESC", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_GROUP_CONTINUESParameter;
    
            if (c_BILLING_TYPE_GROUP_CONTINUES != null)
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", c_BILLING_TYPE_GROUP_CONTINUES);
            }
            else
            {
                c_BILLING_TYPE_GROUP_CONTINUESParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_CONTINUES", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_GROUP_DEPOSITParameter;
    
            if (c_BILLING_TYPE_GROUP_DEPOSIT != null)
            {
                c_BILLING_TYPE_GROUP_DEPOSITParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_DEPOSIT", c_BILLING_TYPE_GROUP_DEPOSIT);
            }
            else
            {
                c_BILLING_TYPE_GROUP_DEPOSITParameter = new ObjectParameter("C_BILLING_TYPE_GROUP_DEPOSIT", typeof(string));
            }
    
            ObjectParameter c_SEP_INV_EACH_CONTRACTParameter;
    
            if (c_SEP_INV_EACH_CONTRACT != null)
            {
                c_SEP_INV_EACH_CONTRACTParameter = new ObjectParameter("C_SEP_INV_EACH_CONTRACT", c_SEP_INV_EACH_CONTRACT);
            }
            else
            {
                c_SEP_INV_EACH_CONTRACTParameter = new ObjectParameter("C_SEP_INV_EACH_CONTRACT", typeof(string));
            }
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtBillingDetailForCreateInvoice>("GetBillingDetailForCreateInvoice", c_CUST_TYPE_JURISTICParameter, c_PAYMENT_STATUS_CANCELParameter, c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLEDParameter, c_PAYMENT_STATUS_NOTE_FAILParameter, c_PAYMENT_STATUS_POST_FAILParameter, c_SEP_INV_CONTRACT_CODE_ASCEParameter, c_SEP_INV_SORT_ASCEParameter, c_SEP_INV_SORT_DESCParameter, c_SEP_INV_SAME_TYPE_CONTRACT_CODE_ASCEParameter, c_SEP_INV_SAME_TYPE_SORT_ASCEParameter, c_SEP_INV_SAME_TYPE_SORT_DESCParameter, c_BILLING_TYPE_GROUP_CONTINUESParameter, c_BILLING_TYPE_GROUP_DEPOSITParameter, c_SEP_INV_EACH_CONTRACTParameter, batchDateParameter);
        }
        public ObjectResult<doInvoice> GetInvoice(string invoiceNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doInvoice>("GetInvoice", invoiceNoParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_TaxInvoice> UpdateReceiptNo(string invoiceNo, Nullable<int> invoiceOCC, string receiptNo, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
    
            ObjectParameter receiptNoParameter;
    
            if (receiptNo != null)
            {
                receiptNoParameter = new ObjectParameter("ReceiptNo", receiptNo);
            }
            else
            {
                receiptNoParameter = new ObjectParameter("ReceiptNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_TaxInvoice>("UpdateReceiptNo", invoiceNoParameter, invoiceOCCParameter, receiptNoParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<tbt_BillingBasic> UpdateBalanceDepositOfBillingBasic(string contractCode, string billingOCC, Nullable<decimal> adjustAmount, string updateBy, Nullable<System.DateTime> updateDate, Nullable<decimal> adjustAmountUsd, string balanceDepositCurrencyType)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter adjustAmountParameter;
    
            if (adjustAmount.HasValue)
            {
                adjustAmountParameter = new ObjectParameter("AdjustAmount", adjustAmount);
            }
            else
            {
                adjustAmountParameter = new ObjectParameter("AdjustAmount", typeof(decimal));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter adjustAmountUsdParameter;
    
            if (adjustAmountUsd.HasValue)
            {
                adjustAmountUsdParameter = new ObjectParameter("AdjustAmountUsd", adjustAmountUsd);
            }
            else
            {
                adjustAmountUsdParameter = new ObjectParameter("AdjustAmountUsd", typeof(decimal));
            }
    
            ObjectParameter balanceDepositCurrencyTypeParameter;
    
            if (balanceDepositCurrencyType != null)
            {
                balanceDepositCurrencyTypeParameter = new ObjectParameter("BalanceDepositCurrencyType", balanceDepositCurrencyType);
            }
            else
            {
                balanceDepositCurrencyTypeParameter = new ObjectParameter("BalanceDepositCurrencyType", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("UpdateBalanceDepositOfBillingBasic", contractCodeParameter, billingOCCParameter, adjustAmountParameter, updateByParameter, updateDateParameter, adjustAmountUsdParameter, balanceDepositCurrencyTypeParameter);
        }
        public ObjectResult<doRefundInfo> GetRefundInfo(string paymentTransNo)
        {
    
            ObjectParameter paymentTransNoParameter;
    
            if (paymentTransNo != null)
            {
                paymentTransNoParameter = new ObjectParameter("paymentTransNo", paymentTransNo);
            }
            else
            {
                paymentTransNoParameter = new ObjectParameter("paymentTransNo", typeof(string));
            }
            return base.ExecuteFunction<doRefundInfo>("GetRefundInfo", paymentTransNoParameter);
        }
        public int UpdateBillingDetailByBatch(string xml_tbt_BillingDetail)
        {
    
            ObjectParameter xml_tbt_BillingDetailParameter;
    
            if (xml_tbt_BillingDetail != null)
            {
                xml_tbt_BillingDetailParameter = new ObjectParameter("xml_tbt_BillingDetail", xml_tbt_BillingDetail);
            }
            else
            {
                xml_tbt_BillingDetailParameter = new ObjectParameter("xml_tbt_BillingDetail", typeof(string));
            }
            return base.ExecuteFunction("UpdateBillingDetailByBatch", xml_tbt_BillingDetailParameter);
        }
        public ObjectResult<dtDownloadAutoTransferBankFile> GetDownloadAutoTransferBankFile(Nullable<int> secomAccountID, Nullable<System.DateTime> autoTransferDateFrom, Nullable<System.DateTime> autoTransferDateTo, Nullable<System.DateTime> generateDateFrom, Nullable<System.DateTime> generateDateTo)
        {
    
            ObjectParameter secomAccountIDParameter;
    
            if (secomAccountID.HasValue)
            {
                secomAccountIDParameter = new ObjectParameter("SecomAccountID", secomAccountID);
            }
            else
            {
                secomAccountIDParameter = new ObjectParameter("SecomAccountID", typeof(int));
            }
    
            ObjectParameter autoTransferDateFromParameter;
    
            if (autoTransferDateFrom.HasValue)
            {
                autoTransferDateFromParameter = new ObjectParameter("AutoTransferDateFrom", autoTransferDateFrom);
            }
            else
            {
                autoTransferDateFromParameter = new ObjectParameter("AutoTransferDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter autoTransferDateToParameter;
    
            if (autoTransferDateTo.HasValue)
            {
                autoTransferDateToParameter = new ObjectParameter("AutoTransferDateTo", autoTransferDateTo);
            }
            else
            {
                autoTransferDateToParameter = new ObjectParameter("AutoTransferDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter generateDateFromParameter;
    
            if (generateDateFrom.HasValue)
            {
                generateDateFromParameter = new ObjectParameter("GenerateDateFrom", generateDateFrom);
            }
            else
            {
                generateDateFromParameter = new ObjectParameter("GenerateDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter generateDateToParameter;
    
            if (generateDateTo.HasValue)
            {
                generateDateToParameter = new ObjectParameter("GenerateDateTo", generateDateTo);
            }
            else
            {
                generateDateToParameter = new ObjectParameter("GenerateDateTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtDownloadAutoTransferBankFile>("GetDownloadAutoTransferBankFile", secomAccountIDParameter, autoTransferDateFromParameter, autoTransferDateToParameter, generateDateFromParameter, generateDateToParameter);
        }
        public ObjectResult<dtBillingContract> GetBillingContract(string contractCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtBillingContract>("GetBillingContract", contractCodeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtBillingBasicForRentalList> GetBillingBasicForRentalList(string contractCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtBillingBasicForRentalList>("GetBillingBasicForRentalList", contractCodeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_BillingBasic> UpdateMonthlyBillingAmount(string xml_doTbtBillingBasic)
        {
    
            ObjectParameter xml_doTbtBillingBasicParameter;
    
            if (xml_doTbtBillingBasic != null)
            {
                xml_doTbtBillingBasicParameter = new ObjectParameter("xml_doTbtBillingBasic", xml_doTbtBillingBasic);
            }
            else
            {
                xml_doTbtBillingBasicParameter = new ObjectParameter("xml_doTbtBillingBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("UpdateMonthlyBillingAmount", xml_doTbtBillingBasicParameter);
        }
        public ObjectResult<dtRptInvoiceHeader> GetRptInvoiceHeader(string invoiceNo, string c_SHOW_DUEDATE, string c_SHOW_DUEDATE_7, string c_SHOW_DUEDATE_30, string c_SHOW_DUEDATE_14, string c_SHOW_DUEDATE_NONE)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATEParameter;
    
            if (c_SHOW_DUEDATE != null)
            {
                c_SHOW_DUEDATEParameter = new ObjectParameter("C_SHOW_DUEDATE", c_SHOW_DUEDATE);
            }
            else
            {
                c_SHOW_DUEDATEParameter = new ObjectParameter("C_SHOW_DUEDATE", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_7Parameter;
    
            if (c_SHOW_DUEDATE_7 != null)
            {
                c_SHOW_DUEDATE_7Parameter = new ObjectParameter("C_SHOW_DUEDATE_7", c_SHOW_DUEDATE_7);
            }
            else
            {
                c_SHOW_DUEDATE_7Parameter = new ObjectParameter("C_SHOW_DUEDATE_7", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_30Parameter;
    
            if (c_SHOW_DUEDATE_30 != null)
            {
                c_SHOW_DUEDATE_30Parameter = new ObjectParameter("C_SHOW_DUEDATE_30", c_SHOW_DUEDATE_30);
            }
            else
            {
                c_SHOW_DUEDATE_30Parameter = new ObjectParameter("C_SHOW_DUEDATE_30", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_14Parameter;
    
            if (c_SHOW_DUEDATE_14 != null)
            {
                c_SHOW_DUEDATE_14Parameter = new ObjectParameter("C_SHOW_DUEDATE_14", c_SHOW_DUEDATE_14);
            }
            else
            {
                c_SHOW_DUEDATE_14Parameter = new ObjectParameter("C_SHOW_DUEDATE_14", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_NONEParameter;
    
            if (c_SHOW_DUEDATE_NONE != null)
            {
                c_SHOW_DUEDATE_NONEParameter = new ObjectParameter("C_SHOW_DUEDATE_NONE", c_SHOW_DUEDATE_NONE);
            }
            else
            {
                c_SHOW_DUEDATE_NONEParameter = new ObjectParameter("C_SHOW_DUEDATE_NONE", typeof(string));
            }
            return base.ExecuteFunction<dtRptInvoiceHeader>("GetRptInvoiceHeader", invoiceNoParameter, c_SHOW_DUEDATEParameter, c_SHOW_DUEDATE_7Parameter, c_SHOW_DUEDATE_30Parameter, c_SHOW_DUEDATE_14Parameter, c_SHOW_DUEDATE_NONEParameter);
        }
        public ObjectResult<dtRptInvoiceDetail> GetRptInvoiceDetail(string invoiceNo)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
            return base.ExecuteFunction<dtRptInvoiceDetail>("GetRptInvoiceDetail", invoiceNoParameter);
        }
        public ObjectResult<dtRptInvoice> GetRptInvoice(string invoiceNo, string c_SHOW_DUEDATE, string c_SHOW_DUEDATE_7, string c_SHOW_DUEDATE_30, string c_SHOW_DUEDATE_14, string c_SHOW_DUEDATE_NONE)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATEParameter;
    
            if (c_SHOW_DUEDATE != null)
            {
                c_SHOW_DUEDATEParameter = new ObjectParameter("C_SHOW_DUEDATE", c_SHOW_DUEDATE);
            }
            else
            {
                c_SHOW_DUEDATEParameter = new ObjectParameter("C_SHOW_DUEDATE", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_7Parameter;
    
            if (c_SHOW_DUEDATE_7 != null)
            {
                c_SHOW_DUEDATE_7Parameter = new ObjectParameter("C_SHOW_DUEDATE_7", c_SHOW_DUEDATE_7);
            }
            else
            {
                c_SHOW_DUEDATE_7Parameter = new ObjectParameter("C_SHOW_DUEDATE_7", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_30Parameter;
    
            if (c_SHOW_DUEDATE_30 != null)
            {
                c_SHOW_DUEDATE_30Parameter = new ObjectParameter("C_SHOW_DUEDATE_30", c_SHOW_DUEDATE_30);
            }
            else
            {
                c_SHOW_DUEDATE_30Parameter = new ObjectParameter("C_SHOW_DUEDATE_30", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_14Parameter;
    
            if (c_SHOW_DUEDATE_14 != null)
            {
                c_SHOW_DUEDATE_14Parameter = new ObjectParameter("C_SHOW_DUEDATE_14", c_SHOW_DUEDATE_14);
            }
            else
            {
                c_SHOW_DUEDATE_14Parameter = new ObjectParameter("C_SHOW_DUEDATE_14", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_NONEParameter;
    
            if (c_SHOW_DUEDATE_NONE != null)
            {
                c_SHOW_DUEDATE_NONEParameter = new ObjectParameter("C_SHOW_DUEDATE_NONE", c_SHOW_DUEDATE_NONE);
            }
            else
            {
                c_SHOW_DUEDATE_NONEParameter = new ObjectParameter("C_SHOW_DUEDATE_NONE", typeof(string));
            }
            return base.ExecuteFunction<dtRptInvoice>("GetRptInvoice", invoiceNoParameter, c_SHOW_DUEDATEParameter, c_SHOW_DUEDATE_7Parameter, c_SHOW_DUEDATE_30Parameter, c_SHOW_DUEDATE_14Parameter, c_SHOW_DUEDATE_NONEParameter);
        }
        public ObjectResult<dtRptTaxInvoice> GetRptTaxInvoice(string taxInvoiceNo, string c_SHOW_DUEDATE, string c_SHOW_DUEDATE_7, string c_SHOW_DUEDATE_30, string c_SHOW_DUEDATE_14, string c_SHOW_DUEDATE_NONE)
        {
    
            ObjectParameter taxInvoiceNoParameter;
    
            if (taxInvoiceNo != null)
            {
                taxInvoiceNoParameter = new ObjectParameter("TaxInvoiceNo", taxInvoiceNo);
            }
            else
            {
                taxInvoiceNoParameter = new ObjectParameter("TaxInvoiceNo", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATEParameter;
    
            if (c_SHOW_DUEDATE != null)
            {
                c_SHOW_DUEDATEParameter = new ObjectParameter("C_SHOW_DUEDATE", c_SHOW_DUEDATE);
            }
            else
            {
                c_SHOW_DUEDATEParameter = new ObjectParameter("C_SHOW_DUEDATE", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_7Parameter;
    
            if (c_SHOW_DUEDATE_7 != null)
            {
                c_SHOW_DUEDATE_7Parameter = new ObjectParameter("C_SHOW_DUEDATE_7", c_SHOW_DUEDATE_7);
            }
            else
            {
                c_SHOW_DUEDATE_7Parameter = new ObjectParameter("C_SHOW_DUEDATE_7", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_30Parameter;
    
            if (c_SHOW_DUEDATE_30 != null)
            {
                c_SHOW_DUEDATE_30Parameter = new ObjectParameter("C_SHOW_DUEDATE_30", c_SHOW_DUEDATE_30);
            }
            else
            {
                c_SHOW_DUEDATE_30Parameter = new ObjectParameter("C_SHOW_DUEDATE_30", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_14Parameter;
    
            if (c_SHOW_DUEDATE_14 != null)
            {
                c_SHOW_DUEDATE_14Parameter = new ObjectParameter("C_SHOW_DUEDATE_14", c_SHOW_DUEDATE_14);
            }
            else
            {
                c_SHOW_DUEDATE_14Parameter = new ObjectParameter("C_SHOW_DUEDATE_14", typeof(string));
            }
    
            ObjectParameter c_SHOW_DUEDATE_NONEParameter;
    
            if (c_SHOW_DUEDATE_NONE != null)
            {
                c_SHOW_DUEDATE_NONEParameter = new ObjectParameter("C_SHOW_DUEDATE_NONE", c_SHOW_DUEDATE_NONE);
            }
            else
            {
                c_SHOW_DUEDATE_NONEParameter = new ObjectParameter("C_SHOW_DUEDATE_NONE", typeof(string));
            }
            return base.ExecuteFunction<dtRptTaxInvoice>("GetRptTaxInvoice", taxInvoiceNoParameter, c_SHOW_DUEDATEParameter, c_SHOW_DUEDATE_7Parameter, c_SHOW_DUEDATE_30Parameter, c_SHOW_DUEDATE_14Parameter, c_SHOW_DUEDATE_NONEParameter);
        }
        public ObjectResult<dtRptPaymentForm> GetRptPaymentForm(string invoiceNo)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
            return base.ExecuteFunction<dtRptPaymentForm>("GetRptPaymentForm", invoiceNoParameter);
        }
        public ObjectResult<tbt_AutoTransferBankAccount> UpdateAutoTransferAccountLastResult(string invoiceNo, string lastestResult, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter lastestResultParameter;
    
            if (lastestResult != null)
            {
                lastestResultParameter = new ObjectParameter("LastestResult", lastestResult);
            }
            else
            {
                lastestResultParameter = new ObjectParameter("LastestResult", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_AutoTransferBankAccount>("UpdateAutoTransferAccountLastResult", invoiceNoParameter, lastestResultParameter, updateByParameter, updateDateParameter);
        }
        public int CheckTaxInvoiceIssued(string invoiceNo, Nullable<int> invoiceOCC, ObjectParameter isIssued)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction("CheckTaxInvoiceIssued", invoiceNoParameter, invoiceOCCParameter, isIssued);
        }
        public ObjectResult<doGetBalanceDepositByBillingCode> GetBalanceDepositByBillingCode(string strContractCode, string strBillingOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strBillingOCCParameter;
    
            if (strBillingOCC != null)
            {
                strBillingOCCParameter = new ObjectParameter("strBillingOCC", strBillingOCC);
            }
            else
            {
                strBillingOCCParameter = new ObjectParameter("strBillingOCC", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doGetBalanceDepositByBillingCode>("GetBalanceDepositByBillingCode", strContractCodeParameter, strBillingOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doGetBillingCodeInfo> GetBillingCodeInfo(string strBillingCode)
        {
    
            ObjectParameter strBillingCodeParameter;
    
            if (strBillingCode != null)
            {
                strBillingCodeParameter = new ObjectParameter("strBillingCode", strBillingCode);
            }
            else
            {
                strBillingCodeParameter = new ObjectParameter("strBillingCode", typeof(string));
            }
            return base.ExecuteFunction<doGetBillingCodeInfo>("GetBillingCodeInfo", strBillingCodeParameter);
        }
        public ObjectResult<tbt_Depositfee> GetLatestDepositFee(string strContracCode, string strBillingOCC)
        {
    
            ObjectParameter strContracCodeParameter;
    
            if (strContracCode != null)
            {
                strContracCodeParameter = new ObjectParameter("strContracCode", strContracCode);
            }
            else
            {
                strContracCodeParameter = new ObjectParameter("strContracCode", typeof(string));
            }
    
            ObjectParameter strBillingOCCParameter;
    
            if (strBillingOCC != null)
            {
                strBillingOCCParameter = new ObjectParameter("strBillingOCC", strBillingOCC);
            }
            else
            {
                strBillingOCCParameter = new ObjectParameter("strBillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_Depositfee>("GetLatestDepositFee", strContracCodeParameter, strBillingOCCParameter);
        }
        public ObjectResult<doGetTaxInvoiceForIC> GetTaxInvoiceForIC(string strTaxInvoiceNo)
        {
    
            ObjectParameter strTaxInvoiceNoParameter;
    
            if (strTaxInvoiceNo != null)
            {
                strTaxInvoiceNoParameter = new ObjectParameter("strTaxInvoiceNo", strTaxInvoiceNo);
            }
            else
            {
                strTaxInvoiceNoParameter = new ObjectParameter("strTaxInvoiceNo", typeof(string));
            }
            return base.ExecuteFunction<doGetTaxInvoiceForIC>("GetTaxInvoiceForIC", strTaxInvoiceNoParameter);
        }
        public ObjectResult<tbt_Depositfee> UpdateReceiptNoDepositFee(string invoiceNo, string receiptNo, string updateBy, Nullable<System.DateTime> updateDate, string c_DEPOSIT_STATUS_PAYMENT)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter receiptNoParameter;
    
            if (receiptNo != null)
            {
                receiptNoParameter = new ObjectParameter("ReceiptNo", receiptNo);
            }
            else
            {
                receiptNoParameter = new ObjectParameter("ReceiptNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter c_DEPOSIT_STATUS_PAYMENTParameter;
    
            if (c_DEPOSIT_STATUS_PAYMENT != null)
            {
                c_DEPOSIT_STATUS_PAYMENTParameter = new ObjectParameter("C_DEPOSIT_STATUS_PAYMENT", c_DEPOSIT_STATUS_PAYMENT);
            }
            else
            {
                c_DEPOSIT_STATUS_PAYMENTParameter = new ObjectParameter("C_DEPOSIT_STATUS_PAYMENT", typeof(string));
            }
            return base.ExecuteFunction<tbt_Depositfee>("UpdateReceiptNoDepositFee", invoiceNoParameter, receiptNoParameter, updateByParameter, updateDateParameter, c_DEPOSIT_STATUS_PAYMENTParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetLastWorkingDay(Nullable<System.DateTime> checkingDate)
        {
    
            ObjectParameter checkingDateParameter;
    
            if (checkingDate.HasValue)
            {
                checkingDateParameter = new ObjectParameter("CheckingDate", checkingDate);
            }
            else
            {
                checkingDateParameter = new ObjectParameter("CheckingDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetLastWorkingDay", checkingDateParameter);
        }
        public ObjectResult<tbt_BillingDetail> RegisterBillingDetailExemption(string invoiceNo, Nullable<int> invoiceOCC, string c_PAYMENT_STATUS_BILLING_EXEMPTION, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
    
            ObjectParameter c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter;
    
            if (c_PAYMENT_STATUS_BILLING_EXEMPTION != null)
            {
                c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter = new ObjectParameter("C_PAYMENT_STATUS_BILLING_EXEMPTION", c_PAYMENT_STATUS_BILLING_EXEMPTION);
            }
            else
            {
                c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter = new ObjectParameter("C_PAYMENT_STATUS_BILLING_EXEMPTION", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("RegisterBillingDetailExemption", invoiceNoParameter, invoiceOCCParameter, c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<tbt_Invoice> RegisterInvoiceExemption(string invoiceNo, Nullable<int> invoiceOCC, string c_PAYMENT_STATUS_BILLING_EXEMPTION, string exemptApproveNo, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
    
            ObjectParameter c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter;
    
            if (c_PAYMENT_STATUS_BILLING_EXEMPTION != null)
            {
                c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter = new ObjectParameter("C_PAYMENT_STATUS_BILLING_EXEMPTION", c_PAYMENT_STATUS_BILLING_EXEMPTION);
            }
            else
            {
                c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter = new ObjectParameter("C_PAYMENT_STATUS_BILLING_EXEMPTION", typeof(string));
            }
    
            ObjectParameter exemptApproveNoParameter;
    
            if (exemptApproveNo != null)
            {
                exemptApproveNoParameter = new ObjectParameter("ExemptApproveNo", exemptApproveNo);
            }
            else
            {
                exemptApproveNoParameter = new ObjectParameter("ExemptApproveNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_Invoice>("RegisterInvoiceExemption", invoiceNoParameter, invoiceOCCParameter, c_PAYMENT_STATUS_BILLING_EXEMPTIONParameter, exemptApproveNoParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<tbt_TaxInvoice> GetTaxInvoiceByInvoiceNo(string invoiceNo, Nullable<int> invoiceOCC)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction<tbt_TaxInvoice>("GetTaxInvoiceByInvoiceNo", invoiceNoParameter, invoiceOCCParameter);
        }
        public ObjectResult<tbt_TaxInvoice> CancelTaxInvoice(string taxInvoiceNo, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter taxInvoiceNoParameter;
    
            if (taxInvoiceNo != null)
            {
                taxInvoiceNoParameter = new ObjectParameter("TaxInvoiceNo", taxInvoiceNo);
            }
            else
            {
                taxInvoiceNoParameter = new ObjectParameter("TaxInvoiceNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_TaxInvoice>("CancelTaxInvoice", taxInvoiceNoParameter, updateByParameter, updateDateParameter);
        }
        public int CheckExistReceiptForInvoice(string invoiceNo, Nullable<int> invoiceOCC, ObjectParameter iS_EXIST)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction("CheckExistReceiptForInvoice", invoiceNoParameter, invoiceOCCParameter, iS_EXIST);
        }
        public int CheckInvoiceIssuedTaxInvoice(string invoiceNo, Nullable<int> invoiceOCC, ObjectParameter iS_ISSUED)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
            return base.ExecuteFunction("CheckInvoiceIssuedTaxInvoice", invoiceNoParameter, invoiceOCCParameter, iS_ISSUED);
        }
        public ObjectResult<tbt_Invoice> UpdateInvoiceCorrectionReason(string invoiceNo, Nullable<int> invoiceOCC, string correctReason, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter invoiceOCCParameter;
    
            if (invoiceOCC.HasValue)
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", invoiceOCC);
            }
            else
            {
                invoiceOCCParameter = new ObjectParameter("InvoiceOCC", typeof(int));
            }
    
            ObjectParameter correctReasonParameter;
    
            if (correctReason != null)
            {
                correctReasonParameter = new ObjectParameter("CorrectReason", correctReason);
            }
            else
            {
                correctReasonParameter = new ObjectParameter("CorrectReason", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_Invoice>("UpdateInvoiceCorrectionReason", invoiceNoParameter, invoiceOCCParameter, correctReasonParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<tbt_BillingDetail> GetBillingDetailAutoTransferList(string contractCode, string billingOCC, string pC_PAYMENT_STATUS_INV_AUTO_CREDIT, string pC_PAYMENT_STATUS_DETAIL_AUTO_CREDIT, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter pC_PAYMENT_STATUS_INV_AUTO_CREDITParameter;
    
            if (pC_PAYMENT_STATUS_INV_AUTO_CREDIT != null)
            {
                pC_PAYMENT_STATUS_INV_AUTO_CREDITParameter = new ObjectParameter("pC_PAYMENT_STATUS_INV_AUTO_CREDIT", pC_PAYMENT_STATUS_INV_AUTO_CREDIT);
            }
            else
            {
                pC_PAYMENT_STATUS_INV_AUTO_CREDITParameter = new ObjectParameter("pC_PAYMENT_STATUS_INV_AUTO_CREDIT", typeof(string));
            }
    
            ObjectParameter pC_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter;
    
            if (pC_PAYMENT_STATUS_DETAIL_AUTO_CREDIT != null)
            {
                pC_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter = new ObjectParameter("pC_PAYMENT_STATUS_DETAIL_AUTO_CREDIT", pC_PAYMENT_STATUS_DETAIL_AUTO_CREDIT);
            }
            else
            {
                pC_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter = new ObjectParameter("pC_PAYMENT_STATUS_DETAIL_AUTO_CREDIT", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingDetail>("GetBillingDetailAutoTransferList", contractCodeParameter, billingOCCParameter, pC_PAYMENT_STATUS_INV_AUTO_CREDITParameter, pC_PAYMENT_STATUS_DETAIL_AUTO_CREDITParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtAutoTransferBankAccountForView> GetAutoTransferBankAccountForView(string contractCode, string billingOCC, string pC_ACCOUNT_TYPE, string pC_SHOW_AUTO_TRANSFER_RESULT)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter pC_ACCOUNT_TYPEParameter;
    
            if (pC_ACCOUNT_TYPE != null)
            {
                pC_ACCOUNT_TYPEParameter = new ObjectParameter("pC_ACCOUNT_TYPE", pC_ACCOUNT_TYPE);
            }
            else
            {
                pC_ACCOUNT_TYPEParameter = new ObjectParameter("pC_ACCOUNT_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SHOW_AUTO_TRANSFER_RESULTParameter;
    
            if (pC_SHOW_AUTO_TRANSFER_RESULT != null)
            {
                pC_SHOW_AUTO_TRANSFER_RESULTParameter = new ObjectParameter("pC_SHOW_AUTO_TRANSFER_RESULT", pC_SHOW_AUTO_TRANSFER_RESULT);
            }
            else
            {
                pC_SHOW_AUTO_TRANSFER_RESULTParameter = new ObjectParameter("pC_SHOW_AUTO_TRANSFER_RESULT", typeof(string));
            }
            return base.ExecuteFunction<dtAutoTransferBankAccountForView>("GetAutoTransferBankAccountForView", contractCodeParameter, billingOCCParameter, pC_ACCOUNT_TYPEParameter, pC_SHOW_AUTO_TRANSFER_RESULTParameter);
        }
        public ObjectResult<dtCreditCardForView> GetCreditCardForView(string contractCode, string billingOCC, string pC_CREDIT_CARD_TYPE)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter pC_CREDIT_CARD_TYPEParameter;
    
            if (pC_CREDIT_CARD_TYPE != null)
            {
                pC_CREDIT_CARD_TYPEParameter = new ObjectParameter("pC_CREDIT_CARD_TYPE", pC_CREDIT_CARD_TYPE);
            }
            else
            {
                pC_CREDIT_CARD_TYPEParameter = new ObjectParameter("pC_CREDIT_CARD_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtCreditCardForView>("GetCreditCardForView", contractCodeParameter, billingOCCParameter, pC_CREDIT_CARD_TYPEParameter);
        }
        public ObjectResult<doBLS050GetBillingBasic> BLS050_GetBillingBasic(string contractCode, string billingOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doBLS050GetBillingBasic>("BLS050_GetBillingBasic", contractCodeParameter, billingOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doBLS050GetBillingDetailForCancelList> BLS050_GetBillingDetailForCancelList(string contractCode, string billingOCC, string paymentStatus, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter paymentStatusParameter;
    
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doBLS050GetBillingDetailForCancelList>("BLS050_GetBillingDetailForCancelList", contractCodeParameter, billingOCCParameter, paymentStatusParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doBLS050GetTbt_BillingTargetForView> BLS050_GetTbt_BillingTargetForView(string billingTargetCode)
        {
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
            return base.ExecuteFunction<doBLS050GetTbt_BillingTargetForView>("BLS050_GetTbt_BillingTargetForView", billingTargetCodeParameter);
        }
        public ObjectResult<tbt_Invoice> UpdateFirstIssue(string strDocumentNo, string documentOCC, Nullable<System.DateTime> batchDate, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter strDocumentNoParameter;
    
            if (strDocumentNo != null)
            {
                strDocumentNoParameter = new ObjectParameter("strDocumentNo", strDocumentNo);
            }
            else
            {
                strDocumentNoParameter = new ObjectParameter("strDocumentNo", typeof(string));
            }
    
            ObjectParameter documentOCCParameter;
    
            if (documentOCC != null)
            {
                documentOCCParameter = new ObjectParameter("DocumentOCC", documentOCC);
            }
            else
            {
                documentOCCParameter = new ObjectParameter("DocumentOCC", typeof(string));
            }
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_Invoice>("UpdateFirstIssue", strDocumentNoParameter, documentOCCParameter, batchDateParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<doGetBillingDetailOfInvoice> GetBillingDetailByKey(string contractCode, string billingOCC, Nullable<int> billingDetailNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter billingDetailNoParameter;
    
            if (billingDetailNo.HasValue)
            {
                billingDetailNoParameter = new ObjectParameter("BillingDetailNo", billingDetailNo);
            }
            else
            {
                billingDetailNoParameter = new ObjectParameter("BillingDetailNo", typeof(int));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doGetBillingDetailOfInvoice>("GetBillingDetailByKey", contractCodeParameter, billingOCCParameter, billingDetailNoParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_AutoTransferBankAccount> GetAutoTransferBankAccountByContract(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_AutoTransferBankAccount>("GetAutoTransferBankAccountByContract", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<tbt_CreditCard> GetCreditCardByContract(string contractCode, string billingOCC)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_CreditCard>("GetCreditCardByContract", contractCodeParameter, billingOCCParameter);
        }
        public ObjectResult<dtViewBillingOccList> GetViewBillingOCCListForDepositFree(string contractCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
            return base.ExecuteFunction<dtViewBillingOccList>("GetViewBillingOCCListForDepositFree", contractCodeParameter);
        }
        public ObjectResult<doVATMaster> GetVATMaster(string billingTypeCode, Nullable<System.DateTime> invoiceDate)
        {
    
            ObjectParameter billingTypeCodeParameter;
    
            if (billingTypeCode != null)
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", billingTypeCode);
            }
            else
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", typeof(string));
            }
    
            ObjectParameter invoiceDateParameter;
    
            if (invoiceDate.HasValue)
            {
                invoiceDateParameter = new ObjectParameter("InvoiceDate", invoiceDate);
            }
            else
            {
                invoiceDateParameter = new ObjectParameter("InvoiceDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doVATMaster>("GetVATMaster", billingTypeCodeParameter, invoiceDateParameter);
        }
        public ObjectResult<tbt_Depositfee> UpdateReceiptNoDepositFeeCancelReceipt(string invoiceNo, string receiptNo, string updateBy, Nullable<System.DateTime> updateDate, string c_DEPOSIT_STATUS_PAYMENT)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
    
            ObjectParameter receiptNoParameter;
    
            if (receiptNo != null)
            {
                receiptNoParameter = new ObjectParameter("ReceiptNo", receiptNo);
            }
            else
            {
                receiptNoParameter = new ObjectParameter("ReceiptNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter c_DEPOSIT_STATUS_PAYMENTParameter;
    
            if (c_DEPOSIT_STATUS_PAYMENT != null)
            {
                c_DEPOSIT_STATUS_PAYMENTParameter = new ObjectParameter("C_DEPOSIT_STATUS_PAYMENT", c_DEPOSIT_STATUS_PAYMENT);
            }
            else
            {
                c_DEPOSIT_STATUS_PAYMENTParameter = new ObjectParameter("C_DEPOSIT_STATUS_PAYMENT", typeof(string));
            }
            return base.ExecuteFunction<tbt_Depositfee>("UpdateReceiptNoDepositFeeCancelReceipt", invoiceNoParameter, receiptNoParameter, updateByParameter, updateDateParameter, c_DEPOSIT_STATUS_PAYMENTParameter);
        }
        public ObjectResult<tbt_BillingBasic> GetBillingBasicByCreditNoteNo(string creditNoteNo)
        {
    
            ObjectParameter creditNoteNoParameter;
    
            if (creditNoteNo != null)
            {
                creditNoteNoParameter = new ObjectParameter("CreditNoteNo", creditNoteNo);
            }
            else
            {
                creditNoteNoParameter = new ObjectParameter("CreditNoteNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("GetBillingBasicByCreditNoteNo", creditNoteNoParameter);
        }
        public ObjectResult<tbt_BillingBasic> UpdateDebtTracingOffice(string billingTargetCode, string billingOfficeCode, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter billingOfficeCodeParameter;
    
            if (billingOfficeCode != null)
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", billingOfficeCode);
            }
            else
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbt_BillingBasic>("UpdateDebtTracingOffice", billingTargetCodeParameter, billingOfficeCodeParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<dtGetRptDocReceipt> sp_BL_GetRptDocReceipt(string invoiceNo)
        {
    
            ObjectParameter invoiceNoParameter;
    
            if (invoiceNo != null)
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", invoiceNo);
            }
            else
            {
                invoiceNoParameter = new ObjectParameter("InvoiceNo", typeof(string));
            }
            return base.ExecuteFunction<dtGetRptDocReceipt>("sp_BL_GetRptDocReceipt", invoiceNoParameter);
        }
        public ObjectResult<tbt_InvoiceIssueList> InsertTbt_InvoiceIssueList(string xmlTbt_InvoiceIssueList)
        {
    
            ObjectParameter xmlTbt_InvoiceIssueListParameter;
    
            if (xmlTbt_InvoiceIssueList != null)
            {
                xmlTbt_InvoiceIssueListParameter = new ObjectParameter("xmlTbt_InvoiceIssueList", xmlTbt_InvoiceIssueList);
            }
            else
            {
                xmlTbt_InvoiceIssueListParameter = new ObjectParameter("xmlTbt_InvoiceIssueList", typeof(string));
            }
            return base.ExecuteFunction<tbt_InvoiceIssueList>("InsertTbt_InvoiceIssueList", xmlTbt_InvoiceIssueListParameter);
        }
        public ObjectResult<doGetRptInvoiceIssueList> GetRptInvoiceIssueList(Nullable<System.DateTime> pdatGenerateDateFrom, Nullable<System.DateTime> pdatGenerateDateTo)
        {
    
            ObjectParameter pdatGenerateDateFromParameter;
    
            if (pdatGenerateDateFrom.HasValue)
            {
                pdatGenerateDateFromParameter = new ObjectParameter("pdatGenerateDateFrom", pdatGenerateDateFrom);
            }
            else
            {
                pdatGenerateDateFromParameter = new ObjectParameter("pdatGenerateDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pdatGenerateDateToParameter;
    
            if (pdatGenerateDateTo.HasValue)
            {
                pdatGenerateDateToParameter = new ObjectParameter("pdatGenerateDateTo", pdatGenerateDateTo);
            }
            else
            {
                pdatGenerateDateToParameter = new ObjectParameter("pdatGenerateDateTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doGetRptInvoiceIssueList>("GetRptInvoiceIssueList", pdatGenerateDateFromParameter, pdatGenerateDateToParameter);
        }

        #endregion

    }
}
