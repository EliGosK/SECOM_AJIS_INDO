//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Master
{
    public partial class MADataEntities : ObjectContext
    {
        public const string ConnectionString = "name=MADataEntities";
        public const string ContainerName = "MADataEntities";
    
        #region Constructors
    
        public MADataEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public MADataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public MADataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<tbm_District> tbm_District
        {
            get { return _tbm_District  ?? (_tbm_District = CreateObjectSet<tbm_District>("tbm_District")); }
        }
        private ObjectSet<tbm_District> _tbm_District;
    
        public ObjectSet<tbm_Province> tbm_Province
        {
            get { return _tbm_Province  ?? (_tbm_Province = CreateObjectSet<tbm_Province>("tbm_Province")); }
        }
        private ObjectSet<tbm_Province> _tbm_Province;
    
        public ObjectSet<tbm_Department> tbm_Department
        {
            get { return _tbm_Department  ?? (_tbm_Department = CreateObjectSet<tbm_Department>("tbm_Department")); }
        }
        private ObjectSet<tbm_Department> _tbm_Department;
    
        public ObjectSet<tbm_Group> tbm_Group
        {
            get { return _tbm_Group  ?? (_tbm_Group = CreateObjectSet<tbm_Group>("tbm_Group")); }
        }
        private ObjectSet<tbm_Group> _tbm_Group;
    
        public ObjectSet<tbm_InstrumentExpansion> tbm_InstrumentExpansion
        {
            get { return _tbm_InstrumentExpansion  ?? (_tbm_InstrumentExpansion = CreateObjectSet<tbm_InstrumentExpansion>("tbm_InstrumentExpansion")); }
        }
        private ObjectSet<tbm_InstrumentExpansion> _tbm_InstrumentExpansion;
    
        public ObjectSet<tbm_BuildingUsage> tbm_BuildingUsage
        {
            get { return _tbm_BuildingUsage  ?? (_tbm_BuildingUsage = CreateObjectSet<tbm_BuildingUsage>("tbm_BuildingUsage")); }
        }
        private ObjectSet<tbm_BuildingUsage> _tbm_BuildingUsage;
    
        public ObjectSet<tbm_BusinessType> tbm_BusinessType
        {
            get { return _tbm_BusinessType  ?? (_tbm_BusinessType = CreateObjectSet<tbm_BusinessType>("tbm_BusinessType")); }
        }
        private ObjectSet<tbm_BusinessType> _tbm_BusinessType;
    
        public ObjectSet<tbm_CompanyType> tbm_CompanyType
        {
            get { return _tbm_CompanyType  ?? (_tbm_CompanyType = CreateObjectSet<tbm_CompanyType>("tbm_CompanyType")); }
        }
        private ObjectSet<tbm_CompanyType> _tbm_CompanyType;
    
        public ObjectSet<tbm_Region> tbm_Region
        {
            get { return _tbm_Region  ?? (_tbm_Region = CreateObjectSet<tbm_Region>("tbm_Region")); }
        }
        private ObjectSet<tbm_Region> _tbm_Region;
    
        public ObjectSet<tbm_Instrument> tbm_Instrument
        {
            get { return _tbm_Instrument  ?? (_tbm_Instrument = CreateObjectSet<tbm_Instrument>("tbm_Instrument")); }
        }
        private ObjectSet<tbm_Instrument> _tbm_Instrument;
    
        public ObjectSet<tbs_MiscellaneousTypeCode> tbs_MiscellaneousTypeCode
        {
            get { return _tbs_MiscellaneousTypeCode  ?? (_tbs_MiscellaneousTypeCode = CreateObjectSet<tbs_MiscellaneousTypeCode>("tbs_MiscellaneousTypeCode")); }
        }
        private ObjectSet<tbs_MiscellaneousTypeCode> _tbs_MiscellaneousTypeCode;
    
        public ObjectSet<tbm_Product> tbm_Product
        {
            get { return _tbm_Product  ?? (_tbm_Product = CreateObjectSet<tbm_Product>("tbm_Product")); }
        }
        private ObjectSet<tbm_Product> _tbm_Product;
    
        public ObjectSet<tbm_Employee> tbm_Employee
        {
            get { return _tbm_Employee  ?? (_tbm_Employee = CreateObjectSet<tbm_Employee>("tbm_Employee")); }
        }
        private ObjectSet<tbm_Employee> _tbm_Employee;
    
        public ObjectSet<tbm_Customer> tbm_Customer
        {
            get { return _tbm_Customer  ?? (_tbm_Customer = CreateObjectSet<tbm_Customer>("tbm_Customer")); }
        }
        private ObjectSet<tbm_Customer> _tbm_Customer;
    
        public ObjectSet<tbm_Position> tbm_Position
        {
            get { return _tbm_Position  ?? (_tbm_Position = CreateObjectSet<tbm_Position>("tbm_Position")); }
        }
        private ObjectSet<tbm_Position> _tbm_Position;
    
        public ObjectSet<tbm_Belonging> tbm_Belonging
        {
            get { return _tbm_Belonging  ?? (_tbm_Belonging = CreateObjectSet<tbm_Belonging>("tbm_Belonging")); }
        }
        private ObjectSet<tbm_Belonging> _tbm_Belonging;
    
        public ObjectSet<tbm_Site> tbm_Site
        {
            get { return _tbm_Site  ?? (_tbm_Site = CreateObjectSet<tbm_Site>("tbm_Site")); }
        }
        private ObjectSet<tbm_Site> _tbm_Site;
    
        public ObjectSet<tbm_CustomerGroup> tbm_CustomerGroup
        {
            get { return _tbm_CustomerGroup  ?? (_tbm_CustomerGroup = CreateObjectSet<tbm_CustomerGroup>("tbm_CustomerGroup")); }
        }
        private ObjectSet<tbm_CustomerGroup> _tbm_CustomerGroup;
    
        public ObjectSet<tbm_Office> tbm_Office
        {
            get { return _tbm_Office  ?? (_tbm_Office = CreateObjectSet<tbm_Office>("tbm_Office")); }
        }
        private ObjectSet<tbm_Office> _tbm_Office;
    
        public ObjectSet<tbm_Object> tbm_Object
        {
            get { return _tbm_Object  ?? (_tbm_Object = CreateObjectSet<tbm_Object>("tbm_Object")); }
        }
        private ObjectSet<tbm_Object> _tbm_Object;
    
        public ObjectSet<tbm_ProductInstrument> tbm_ProductInstrument
        {
            get { return _tbm_ProductInstrument  ?? (_tbm_ProductInstrument = CreateObjectSet<tbm_ProductInstrument>("tbm_ProductInstrument")); }
        }
        private ObjectSet<tbm_ProductInstrument> _tbm_ProductInstrument;
    
        public ObjectSet<tbm_Module> tbm_Module
        {
            get { return _tbm_Module  ?? (_tbm_Module = CreateObjectSet<tbm_Module>("tbm_Module")); }
        }
        private ObjectSet<tbm_Module> _tbm_Module;
    
        public ObjectSet<tbm_PermissionDetail> tbm_PermissionDetail
        {
            get { return _tbm_PermissionDetail  ?? (_tbm_PermissionDetail = CreateObjectSet<tbm_PermissionDetail>("tbm_PermissionDetail")); }
        }
        private ObjectSet<tbm_PermissionDetail> _tbm_PermissionDetail;
    
        public ObjectSet<tbm_PermissionGroup> tbm_PermissionGroup
        {
            get { return _tbm_PermissionGroup  ?? (_tbm_PermissionGroup = CreateObjectSet<tbm_PermissionGroup>("tbm_PermissionGroup")); }
        }
        private ObjectSet<tbm_PermissionGroup> _tbm_PermissionGroup;
    
        public ObjectSet<tbm_PermissionIndividual> tbm_PermissionIndividual
        {
            get { return _tbm_PermissionIndividual  ?? (_tbm_PermissionIndividual = CreateObjectSet<tbm_PermissionIndividual>("tbm_PermissionIndividual")); }
        }
        private ObjectSet<tbm_PermissionIndividual> _tbm_PermissionIndividual;
    
        public ObjectSet<tbm_PermissionIndividualDetail> tbm_PermissionIndividualDetail
        {
            get { return _tbm_PermissionIndividualDetail  ?? (_tbm_PermissionIndividualDetail = CreateObjectSet<tbm_PermissionIndividualDetail>("tbm_PermissionIndividualDetail")); }
        }
        private ObjectSet<tbm_PermissionIndividualDetail> _tbm_PermissionIndividualDetail;
    
        public ObjectSet<tbm_ProductFacility> tbm_ProductFacility
        {
            get { return _tbm_ProductFacility  ?? (_tbm_ProductFacility = CreateObjectSet<tbm_ProductFacility>("tbm_ProductFacility")); }
        }
        private ObjectSet<tbm_ProductFacility> _tbm_ProductFacility;
    
        public ObjectSet<tbm_BillingType> tbm_BillingType
        {
            get { return _tbm_BillingType  ?? (_tbm_BillingType = CreateObjectSet<tbm_BillingType>("tbm_BillingType")); }
        }
        private ObjectSet<tbm_BillingType> _tbm_BillingType;
    
        public ObjectSet<tbm_BillingClient> tbm_BillingClient
        {
            get { return _tbm_BillingClient  ?? (_tbm_BillingClient = CreateObjectSet<tbm_BillingClient>("tbm_BillingClient")); }
        }
        private ObjectSet<tbm_BillingClient> _tbm_BillingClient;
    
        public ObjectSet<tbm_Supplier> tbm_Supplier
        {
            get { return _tbm_Supplier  ?? (_tbm_Supplier = CreateObjectSet<tbm_Supplier>("tbm_Supplier")); }
        }
        private ObjectSet<tbm_Supplier> _tbm_Supplier;
    
        public ObjectSet<tbm_Calendar> tbm_Calendar
        {
            get { return _tbm_Calendar  ?? (_tbm_Calendar = CreateObjectSet<tbm_Calendar>("tbm_Calendar")); }
        }
        private ObjectSet<tbm_Calendar> _tbm_Calendar;
    
        public ObjectSet<tbm_SafetyStock> tbm_SafetyStock
        {
            get { return _tbm_SafetyStock  ?? (_tbm_SafetyStock = CreateObjectSet<tbm_SafetyStock>("tbm_SafetyStock")); }
        }
        private ObjectSet<tbm_SafetyStock> _tbm_SafetyStock;
    
        public ObjectSet<tbm_AutoTransferScheduleList> tbm_AutoTransferScheduleList
        {
            get { return _tbm_AutoTransferScheduleList  ?? (_tbm_AutoTransferScheduleList = CreateObjectSet<tbm_AutoTransferScheduleList>("tbm_AutoTransferScheduleList")); }
        }
        private ObjectSet<tbm_AutoTransferScheduleList> _tbm_AutoTransferScheduleList;
    
        public ObjectSet<tbm_Shelf> tbm_Shelf
        {
            get { return _tbm_Shelf  ?? (_tbm_Shelf = CreateObjectSet<tbm_Shelf>("tbm_Shelf")); }
        }
        private ObjectSet<tbm_Shelf> _tbm_Shelf;
    
        public ObjectSet<tbm_Bank> tbm_Bank
        {
            get { return _tbm_Bank  ?? (_tbm_Bank = CreateObjectSet<tbm_Bank>("tbm_Bank")); }
        }
        private ObjectSet<tbm_Bank> _tbm_Bank;
    
        public ObjectSet<tbm_BankBranch> tbm_BankBranch
        {
            get { return _tbm_BankBranch  ?? (_tbm_BankBranch = CreateObjectSet<tbm_BankBranch>("tbm_BankBranch")); }
        }
        private ObjectSet<tbm_BankBranch> _tbm_BankBranch;
    
        public ObjectSet<tbm_SecomBankAccount> tbm_SecomBankAccount
        {
            get { return _tbm_SecomBankAccount  ?? (_tbm_SecomBankAccount = CreateObjectSet<tbm_SecomBankAccount>("tbm_SecomBankAccount")); }
        }
        private ObjectSet<tbm_SecomBankAccount> _tbm_SecomBankAccount;
    
        public ObjectSet<tbm_CreditCardCompany> tbm_CreditCardCompany
        {
            get { return _tbm_CreditCardCompany  ?? (_tbm_CreditCardCompany = CreateObjectSet<tbm_CreditCardCompany>("tbm_CreditCardCompany")); }
        }
        private ObjectSet<tbm_CreditCardCompany> _tbm_CreditCardCompany;
    
        public ObjectSet<tbm_ObjectFunction> tbm_ObjectFunction
        {
            get { return _tbm_ObjectFunction  ?? (_tbm_ObjectFunction = CreateObjectSet<tbm_ObjectFunction>("tbm_ObjectFunction")); }
        }
        private ObjectSet<tbm_ObjectFunction> _tbm_ObjectFunction;

        #endregion

        #region Function Imports
        public ObjectResult<doCustAddressEN> GetCustAddressEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustAddressEN>("GetCustAddressEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustAddressLC> GetCustAddressLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustAddressLC>("GetCustAddressLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustAlleyEN> GetCustAlleyEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustAlleyEN>("GetCustAlleyEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustAlleyLC> GetCustAlleyLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustAlleyLC>("GetCustAlleyLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustRoadEN> GetCustRoadEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustRoadEN>("GetCustRoadEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustRoadLC> GetCustRoadLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustRoadLC>("GetCustRoadLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustSubDistrictEN> GetCustSubDistrictEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustSubDistrictEN>("GetCustSubDistrictEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustSubDistrictLC> GetCustSubDistrictLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustSubDistrictLC>("GetCustSubDistrictLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doGroupNameDataList> GetGroupNameDataList(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doGroupNameDataList>("GetGroupNameDataList", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<tbm_District> GetTbm_District(string provinceCode)
        {
    
            ObjectParameter provinceCodeParameter;
    
            if (provinceCode != null)
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", provinceCode);
            }
            else
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_District>("GetTbm_District", provinceCodeParameter);
        }
        public ObjectResult<tbm_Province> GetTbm_Province()
        {
            return base.ExecuteFunction<tbm_Province>("GetTbm_Province");
        }
        public ObjectResult<doCustAddress> GetCustAddress(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustAddress>("GetCustAddress", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustAlley> GetCustAlley(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustAlley>("GetCustAlley", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustRoad> GetCustRoad(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustRoad>("GetCustRoad", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doCustSubDistrict> GetCustSubDistrict(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doCustSubDistrict>("GetCustSubDistrict", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtEmailAddress> GetUserEmailAddressDataList(string pchvEmployeeName, string pchvnEmailAddress, string pchvOfficeCode, string pchrDepartmentCode)
        {
    
            ObjectParameter pchvEmployeeNameParameter;
    
            if (pchvEmployeeName != null)
            {
                pchvEmployeeNameParameter = new ObjectParameter("pchvEmployeeName", pchvEmployeeName);
            }
            else
            {
                pchvEmployeeNameParameter = new ObjectParameter("pchvEmployeeName", typeof(string));
            }
    
            ObjectParameter pchvnEmailAddressParameter;
    
            if (pchvnEmailAddress != null)
            {
                pchvnEmailAddressParameter = new ObjectParameter("pchvnEmailAddress", pchvnEmailAddress);
            }
            else
            {
                pchvnEmailAddressParameter = new ObjectParameter("pchvnEmailAddress", typeof(string));
            }
    
            ObjectParameter pchvOfficeCodeParameter;
    
            if (pchvOfficeCode != null)
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", pchvOfficeCode);
            }
            else
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrDepartmentCodeParameter;
    
            if (pchrDepartmentCode != null)
            {
                pchrDepartmentCodeParameter = new ObjectParameter("pchrDepartmentCode", pchrDepartmentCode);
            }
            else
            {
                pchrDepartmentCodeParameter = new ObjectParameter("pchrDepartmentCode", typeof(string));
            }
            return base.ExecuteFunction<dtEmailAddress>("GetUserEmailAddressDataList", pchvEmployeeNameParameter, pchvnEmailAddressParameter, pchvOfficeCodeParameter, pchrDepartmentCodeParameter);
        }
        public ObjectResult<tbm_Office> GetTbm_Office(string pchrOfficeCode)
        {
    
            ObjectParameter pchrOfficeCodeParameter;
    
            if (pchrOfficeCode != null)
            {
                pchrOfficeCodeParameter = new ObjectParameter("pchrOfficeCode", pchrOfficeCode);
            }
            else
            {
                pchrOfficeCodeParameter = new ObjectParameter("pchrOfficeCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Office>("GetTbm_Office", pchrOfficeCodeParameter);
        }
        public ObjectResult<tbm_Department> GetTbm_Department()
        {
            return base.ExecuteFunction<tbm_Department>("GetTbm_Department");
        }
        public ObjectResult<tbm_Group> InsertGroup(string pchrGroupCode, string pchvnGroupNameEN, string pchnvGroupNameLC, string pchnvMemo, string pchnvGroupOffice, string pchnvGroupEmpNo, Nullable<bool> pbitDeleteFlag, Nullable<System.DateTime> pdtmCreateDate, string pchnvCreateBy, Nullable<System.DateTime> pdtmUpdateDate, string pchnvUpdateBy)
        {
    
            ObjectParameter pchrGroupCodeParameter;
    
            if (pchrGroupCode != null)
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", pchrGroupCode);
            }
            else
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", typeof(string));
            }
    
            ObjectParameter pchvnGroupNameENParameter;
    
            if (pchvnGroupNameEN != null)
            {
                pchvnGroupNameENParameter = new ObjectParameter("pchvnGroupNameEN", pchvnGroupNameEN);
            }
            else
            {
                pchvnGroupNameENParameter = new ObjectParameter("pchvnGroupNameEN", typeof(string));
            }
    
            ObjectParameter pchnvGroupNameLCParameter;
    
            if (pchnvGroupNameLC != null)
            {
                pchnvGroupNameLCParameter = new ObjectParameter("pchnvGroupNameLC", pchnvGroupNameLC);
            }
            else
            {
                pchnvGroupNameLCParameter = new ObjectParameter("pchnvGroupNameLC", typeof(string));
            }
    
            ObjectParameter pchnvMemoParameter;
    
            if (pchnvMemo != null)
            {
                pchnvMemoParameter = new ObjectParameter("pchnvMemo", pchnvMemo);
            }
            else
            {
                pchnvMemoParameter = new ObjectParameter("pchnvMemo", typeof(string));
            }
    
            ObjectParameter pchnvGroupOfficeParameter;
    
            if (pchnvGroupOffice != null)
            {
                pchnvGroupOfficeParameter = new ObjectParameter("pchnvGroupOffice", pchnvGroupOffice);
            }
            else
            {
                pchnvGroupOfficeParameter = new ObjectParameter("pchnvGroupOffice", typeof(string));
            }
    
            ObjectParameter pchnvGroupEmpNoParameter;
    
            if (pchnvGroupEmpNo != null)
            {
                pchnvGroupEmpNoParameter = new ObjectParameter("pchnvGroupEmpNo", pchnvGroupEmpNo);
            }
            else
            {
                pchnvGroupEmpNoParameter = new ObjectParameter("pchnvGroupEmpNo", typeof(string));
            }
    
            ObjectParameter pbitDeleteFlagParameter;
    
            if (pbitDeleteFlag.HasValue)
            {
                pbitDeleteFlagParameter = new ObjectParameter("pbitDeleteFlag", pbitDeleteFlag);
            }
            else
            {
                pbitDeleteFlagParameter = new ObjectParameter("pbitDeleteFlag", typeof(bool));
            }
    
            ObjectParameter pdtmCreateDateParameter;
    
            if (pdtmCreateDate.HasValue)
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", pdtmCreateDate);
            }
            else
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchnvCreateByParameter;
    
            if (pchnvCreateBy != null)
            {
                pchnvCreateByParameter = new ObjectParameter("pchnvCreateBy", pchnvCreateBy);
            }
            else
            {
                pchnvCreateByParameter = new ObjectParameter("pchnvCreateBy", typeof(string));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchnvUpdateByParameter;
    
            if (pchnvUpdateBy != null)
            {
                pchnvUpdateByParameter = new ObjectParameter("pchnvUpdateBy", pchnvUpdateBy);
            }
            else
            {
                pchnvUpdateByParameter = new ObjectParameter("pchnvUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_Group>("InsertGroup", pchrGroupCodeParameter, pchvnGroupNameENParameter, pchnvGroupNameLCParameter, pchnvMemoParameter, pchnvGroupOfficeParameter, pchnvGroupEmpNoParameter, pbitDeleteFlagParameter, pdtmCreateDateParameter, pchnvCreateByParameter, pdtmUpdateDateParameter, pchnvUpdateByParameter);
        }
        public ObjectResult<Nullable<int>> IsUsedGroup(string pchvnstrGroupCode)
        {
    
            ObjectParameter pchvnstrGroupCodeParameter;
    
            if (pchvnstrGroupCode != null)
            {
                pchvnstrGroupCodeParameter = new ObjectParameter("pchvnstrGroupCode", pchvnstrGroupCode);
            }
            else
            {
                pchvnstrGroupCodeParameter = new ObjectParameter("pchvnstrGroupCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("IsUsedGroup", pchvnstrGroupCodeParameter);
        }
        public ObjectResult<tbm_Group> UpdateGroup(string pchrGroupCode, string pchvnGroupNameEN, string pchnvGroupNameLC, string pchnvMemo, string pchnvGroupOffice, string pchnvGroupEmpNo, Nullable<bool> pbitDeleteFlag, Nullable<System.DateTime> pdtmUpdateDate, string pchnvUpdateBy)
        {
    
            ObjectParameter pchrGroupCodeParameter;
    
            if (pchrGroupCode != null)
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", pchrGroupCode);
            }
            else
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", typeof(string));
            }
    
            ObjectParameter pchvnGroupNameENParameter;
    
            if (pchvnGroupNameEN != null)
            {
                pchvnGroupNameENParameter = new ObjectParameter("pchvnGroupNameEN", pchvnGroupNameEN);
            }
            else
            {
                pchvnGroupNameENParameter = new ObjectParameter("pchvnGroupNameEN", typeof(string));
            }
    
            ObjectParameter pchnvGroupNameLCParameter;
    
            if (pchnvGroupNameLC != null)
            {
                pchnvGroupNameLCParameter = new ObjectParameter("pchnvGroupNameLC", pchnvGroupNameLC);
            }
            else
            {
                pchnvGroupNameLCParameter = new ObjectParameter("pchnvGroupNameLC", typeof(string));
            }
    
            ObjectParameter pchnvMemoParameter;
    
            if (pchnvMemo != null)
            {
                pchnvMemoParameter = new ObjectParameter("pchnvMemo", pchnvMemo);
            }
            else
            {
                pchnvMemoParameter = new ObjectParameter("pchnvMemo", typeof(string));
            }
    
            ObjectParameter pchnvGroupOfficeParameter;
    
            if (pchnvGroupOffice != null)
            {
                pchnvGroupOfficeParameter = new ObjectParameter("pchnvGroupOffice", pchnvGroupOffice);
            }
            else
            {
                pchnvGroupOfficeParameter = new ObjectParameter("pchnvGroupOffice", typeof(string));
            }
    
            ObjectParameter pchnvGroupEmpNoParameter;
    
            if (pchnvGroupEmpNo != null)
            {
                pchnvGroupEmpNoParameter = new ObjectParameter("pchnvGroupEmpNo", pchnvGroupEmpNo);
            }
            else
            {
                pchnvGroupEmpNoParameter = new ObjectParameter("pchnvGroupEmpNo", typeof(string));
            }
    
            ObjectParameter pbitDeleteFlagParameter;
    
            if (pbitDeleteFlag.HasValue)
            {
                pbitDeleteFlagParameter = new ObjectParameter("pbitDeleteFlag", pbitDeleteFlag);
            }
            else
            {
                pbitDeleteFlagParameter = new ObjectParameter("pbitDeleteFlag", typeof(bool));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchnvUpdateByParameter;
    
            if (pchnvUpdateBy != null)
            {
                pchnvUpdateByParameter = new ObjectParameter("pchnvUpdateBy", pchnvUpdateBy);
            }
            else
            {
                pchnvUpdateByParameter = new ObjectParameter("pchnvUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_Group>("UpdateGroup", pchrGroupCodeParameter, pchvnGroupNameENParameter, pchnvGroupNameLCParameter, pchnvMemoParameter, pchnvGroupOfficeParameter, pchnvGroupEmpNoParameter, pbitDeleteFlagParameter, pdtmUpdateDateParameter, pchnvUpdateByParameter);
        }
        public ObjectResult<doSite> GetSite(string siteCode, string custCode)
        {
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
            return base.ExecuteFunction<doSite>("GetSite", siteCodeParameter, custCodeParameter);
        }
        public ObjectResult<doGroup> GetGroup(string pchvnGroupCode, string pchvnGroupName)
        {
    
            ObjectParameter pchvnGroupCodeParameter;
    
            if (pchvnGroupCode != null)
            {
                pchvnGroupCodeParameter = new ObjectParameter("pchvnGroupCode", pchvnGroupCode);
            }
            else
            {
                pchvnGroupCodeParameter = new ObjectParameter("pchvnGroupCode", typeof(string));
            }
    
            ObjectParameter pchvnGroupNameParameter;
    
            if (pchvnGroupName != null)
            {
                pchvnGroupNameParameter = new ObjectParameter("pchvnGroupName", pchvnGroupName);
            }
            else
            {
                pchvnGroupNameParameter = new ObjectParameter("pchvnGroupName", typeof(string));
            }
            return base.ExecuteFunction<doGroup>("GetGroup", pchvnGroupCodeParameter, pchvnGroupNameParameter);
        }
        public ObjectResult<doInstrumentExpansion> GetChildInstrument(string pchvnChildInstrumentCode, string c_LINE_UP_TYPE, string c_EXPANSION_TYPE_CHILD)
        {
    
            ObjectParameter pchvnChildInstrumentCodeParameter;
    
            if (pchvnChildInstrumentCode != null)
            {
                pchvnChildInstrumentCodeParameter = new ObjectParameter("pchvnChildInstrumentCode", pchvnChildInstrumentCode);
            }
            else
            {
                pchvnChildInstrumentCodeParameter = new ObjectParameter("pchvnChildInstrumentCode", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPEParameter;
    
            if (c_LINE_UP_TYPE != null)
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", c_LINE_UP_TYPE);
            }
            else
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", typeof(string));
            }
    
            ObjectParameter c_EXPANSION_TYPE_CHILDParameter;
    
            if (c_EXPANSION_TYPE_CHILD != null)
            {
                c_EXPANSION_TYPE_CHILDParameter = new ObjectParameter("C_EXPANSION_TYPE_CHILD", c_EXPANSION_TYPE_CHILD);
            }
            else
            {
                c_EXPANSION_TYPE_CHILDParameter = new ObjectParameter("C_EXPANSION_TYPE_CHILD", typeof(string));
            }
            return base.ExecuteFunction<doInstrumentExpansion>("GetChildInstrument", pchvnChildInstrumentCodeParameter, c_LINE_UP_TYPEParameter, c_EXPANSION_TYPE_CHILDParameter);
        }
        public ObjectResult<tbm_InstrumentExpansion> DeleteInstrumentExpansion(string pchvnChildInstrumentCode, string pchvnInstrumentCode)
        {
    
            ObjectParameter pchvnChildInstrumentCodeParameter;
    
            if (pchvnChildInstrumentCode != null)
            {
                pchvnChildInstrumentCodeParameter = new ObjectParameter("pchvnChildInstrumentCode", pchvnChildInstrumentCode);
            }
            else
            {
                pchvnChildInstrumentCodeParameter = new ObjectParameter("pchvnChildInstrumentCode", typeof(string));
            }
    
            ObjectParameter pchvnInstrumentCodeParameter;
    
            if (pchvnInstrumentCode != null)
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", pchvnInstrumentCode);
            }
            else
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_InstrumentExpansion>("DeleteInstrumentExpansion", pchvnChildInstrumentCodeParameter, pchvnInstrumentCodeParameter);
        }
        public ObjectResult<tbm_InstrumentExpansion> InsertInstrumentExpansion(string pchnvInstrumentCode, string pchnvChildInstrumentCode, Nullable<System.DateTime> pdtmCreateDate, string pchnvCreateBy, Nullable<System.DateTime> pdtmUpdateDate, string pchnvUpdateBy)
        {
    
            ObjectParameter pchnvInstrumentCodeParameter;
    
            if (pchnvInstrumentCode != null)
            {
                pchnvInstrumentCodeParameter = new ObjectParameter("pchnvInstrumentCode", pchnvInstrumentCode);
            }
            else
            {
                pchnvInstrumentCodeParameter = new ObjectParameter("pchnvInstrumentCode", typeof(string));
            }
    
            ObjectParameter pchnvChildInstrumentCodeParameter;
    
            if (pchnvChildInstrumentCode != null)
            {
                pchnvChildInstrumentCodeParameter = new ObjectParameter("pchnvChildInstrumentCode", pchnvChildInstrumentCode);
            }
            else
            {
                pchnvChildInstrumentCodeParameter = new ObjectParameter("pchnvChildInstrumentCode", typeof(string));
            }
    
            ObjectParameter pdtmCreateDateParameter;
    
            if (pdtmCreateDate.HasValue)
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", pdtmCreateDate);
            }
            else
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchnvCreateByParameter;
    
            if (pchnvCreateBy != null)
            {
                pchnvCreateByParameter = new ObjectParameter("pchnvCreateBy", pchnvCreateBy);
            }
            else
            {
                pchnvCreateByParameter = new ObjectParameter("pchnvCreateBy", typeof(string));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchnvUpdateByParameter;
    
            if (pchnvUpdateBy != null)
            {
                pchnvUpdateByParameter = new ObjectParameter("pchnvUpdateBy", pchnvUpdateBy);
            }
            else
            {
                pchnvUpdateByParameter = new ObjectParameter("pchnvUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_InstrumentExpansion>("InsertInstrumentExpansion", pchnvInstrumentCodeParameter, pchnvChildInstrumentCodeParameter, pdtmCreateDateParameter, pchnvCreateByParameter, pdtmUpdateDateParameter, pchnvUpdateByParameter);
        }
        public int DeleteAllInstrument(string instrumentCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction("DeleteAllInstrument", instrumentCodeParameter);
        }
        public ObjectResult<tbm_BuildingUsage> GetTbm_BiuldingUsage()
        {
            return base.ExecuteFunction<tbm_BuildingUsage>("GetTbm_BiuldingUsage");
        }
        public ObjectResult<tbm_BusinessType> GetTbm_BusinessType()
        {
            return base.ExecuteFunction<tbm_BusinessType>("GetTbm_BusinessType");
        }
        public ObjectResult<tbm_CompanyType> GetTbm_CompanyType()
        {
            return base.ExecuteFunction<tbm_CompanyType>("GetTbm_CompanyType");
        }
        public ObjectResult<tbm_Region> GetTbm_Region()
        {
            return base.ExecuteFunction<tbm_Region>("GetTbm_Region");
        }
        public ObjectResult<dtCustomeGroupData> GetCustomeGroupData(string pchrCustomerCode, string chvnGroupName)
        {
    
            ObjectParameter pchrCustomerCodeParameter;
    
            if (pchrCustomerCode != null)
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", pchrCustomerCode);
            }
            else
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", typeof(string));
            }
    
            ObjectParameter chvnGroupNameParameter;
    
            if (chvnGroupName != null)
            {
                chvnGroupNameParameter = new ObjectParameter("chvnGroupName", chvnGroupName);
            }
            else
            {
                chvnGroupNameParameter = new ObjectParameter("chvnGroupName", typeof(string));
            }
            return base.ExecuteFunction<dtCustomeGroupData>("GetCustomeGroupData", pchrCustomerCodeParameter, chvnGroupNameParameter);
        }
        public ObjectResult<dtSiteData> GetSiteDataForSearch(string pC_CUST_STATUS, string pCustomerCode, string pCustomerName, string pSiteCode, string pSiteName, string pBuildingUsageCode, string pAddress, string pAlley, string pRoad, string pSubDistrict, string pDistrictCode, string pProvinceCode, string pZipCode, string pXmlCustStatus)
        {
    
            ObjectParameter pC_CUST_STATUSParameter;
    
            if (pC_CUST_STATUS != null)
            {
                pC_CUST_STATUSParameter = new ObjectParameter("pC_CUST_STATUS", pC_CUST_STATUS);
            }
            else
            {
                pC_CUST_STATUSParameter = new ObjectParameter("pC_CUST_STATUS", typeof(string));
            }
    
            ObjectParameter pCustomerCodeParameter;
    
            if (pCustomerCode != null)
            {
                pCustomerCodeParameter = new ObjectParameter("pCustomerCode", pCustomerCode);
            }
            else
            {
                pCustomerCodeParameter = new ObjectParameter("pCustomerCode", typeof(string));
            }
    
            ObjectParameter pCustomerNameParameter;
    
            if (pCustomerName != null)
            {
                pCustomerNameParameter = new ObjectParameter("pCustomerName", pCustomerName);
            }
            else
            {
                pCustomerNameParameter = new ObjectParameter("pCustomerName", typeof(string));
            }
    
            ObjectParameter pSiteCodeParameter;
    
            if (pSiteCode != null)
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", pSiteCode);
            }
            else
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", typeof(string));
            }
    
            ObjectParameter pSiteNameParameter;
    
            if (pSiteName != null)
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", pSiteName);
            }
            else
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", typeof(string));
            }
    
            ObjectParameter pBuildingUsageCodeParameter;
    
            if (pBuildingUsageCode != null)
            {
                pBuildingUsageCodeParameter = new ObjectParameter("pBuildingUsageCode", pBuildingUsageCode);
            }
            else
            {
                pBuildingUsageCodeParameter = new ObjectParameter("pBuildingUsageCode", typeof(string));
            }
    
            ObjectParameter pAddressParameter;
    
            if (pAddress != null)
            {
                pAddressParameter = new ObjectParameter("pAddress", pAddress);
            }
            else
            {
                pAddressParameter = new ObjectParameter("pAddress", typeof(string));
            }
    
            ObjectParameter pAlleyParameter;
    
            if (pAlley != null)
            {
                pAlleyParameter = new ObjectParameter("pAlley", pAlley);
            }
            else
            {
                pAlleyParameter = new ObjectParameter("pAlley", typeof(string));
            }
    
            ObjectParameter pRoadParameter;
    
            if (pRoad != null)
            {
                pRoadParameter = new ObjectParameter("pRoad", pRoad);
            }
            else
            {
                pRoadParameter = new ObjectParameter("pRoad", typeof(string));
            }
    
            ObjectParameter pSubDistrictParameter;
    
            if (pSubDistrict != null)
            {
                pSubDistrictParameter = new ObjectParameter("pSubDistrict", pSubDistrict);
            }
            else
            {
                pSubDistrictParameter = new ObjectParameter("pSubDistrict", typeof(string));
            }
    
            ObjectParameter pDistrictCodeParameter;
    
            if (pDistrictCode != null)
            {
                pDistrictCodeParameter = new ObjectParameter("pDistrictCode", pDistrictCode);
            }
            else
            {
                pDistrictCodeParameter = new ObjectParameter("pDistrictCode", typeof(string));
            }
    
            ObjectParameter pProvinceCodeParameter;
    
            if (pProvinceCode != null)
            {
                pProvinceCodeParameter = new ObjectParameter("pProvinceCode", pProvinceCode);
            }
            else
            {
                pProvinceCodeParameter = new ObjectParameter("pProvinceCode", typeof(string));
            }
    
            ObjectParameter pZipCodeParameter;
    
            if (pZipCode != null)
            {
                pZipCodeParameter = new ObjectParameter("pZipCode", pZipCode);
            }
            else
            {
                pZipCodeParameter = new ObjectParameter("pZipCode", typeof(string));
            }
    
            ObjectParameter pXmlCustStatusParameter;
    
            if (pXmlCustStatus != null)
            {
                pXmlCustStatusParameter = new ObjectParameter("pXmlCustStatus", pXmlCustStatus);
            }
            else
            {
                pXmlCustStatusParameter = new ObjectParameter("pXmlCustStatus", typeof(string));
            }
            return base.ExecuteFunction<dtSiteData>("GetSiteDataForSearch", pC_CUST_STATUSParameter, pCustomerCodeParameter, pCustomerNameParameter, pSiteCodeParameter, pSiteNameParameter, pBuildingUsageCodeParameter, pAddressParameter, pAlleyParameter, pRoadParameter, pSubDistrictParameter, pDistrictCodeParameter, pProvinceCodeParameter, pZipCodeParameter, pXmlCustStatusParameter);
        }
        public ObjectResult<dtCustomerForView> GetCustomerForView(string chrCustCode, string pC_CUST_STATUS, string pC_CUST_TYPE, string pC_FINANCIAL_MARKET_TYPE)
        {
    
            ObjectParameter chrCustCodeParameter;
    
            if (chrCustCode != null)
            {
                chrCustCodeParameter = new ObjectParameter("chrCustCode", chrCustCode);
            }
            else
            {
                chrCustCodeParameter = new ObjectParameter("chrCustCode", typeof(string));
            }
    
            ObjectParameter pC_CUST_STATUSParameter;
    
            if (pC_CUST_STATUS != null)
            {
                pC_CUST_STATUSParameter = new ObjectParameter("pC_CUST_STATUS", pC_CUST_STATUS);
            }
            else
            {
                pC_CUST_STATUSParameter = new ObjectParameter("pC_CUST_STATUS", typeof(string));
            }
    
            ObjectParameter pC_CUST_TYPEParameter;
    
            if (pC_CUST_TYPE != null)
            {
                pC_CUST_TYPEParameter = new ObjectParameter("pC_CUST_TYPE", pC_CUST_TYPE);
            }
            else
            {
                pC_CUST_TYPEParameter = new ObjectParameter("pC_CUST_TYPE", typeof(string));
            }
    
            ObjectParameter pC_FINANCIAL_MARKET_TYPEParameter;
    
            if (pC_FINANCIAL_MARKET_TYPE != null)
            {
                pC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pC_FINANCIAL_MARKET_TYPE", pC_FINANCIAL_MARKET_TYPE);
            }
            else
            {
                pC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pC_FINANCIAL_MARKET_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerForView>("GetCustomerForView", chrCustCodeParameter, pC_CUST_STATUSParameter, pC_CUST_TYPEParameter, pC_FINANCIAL_MARKET_TYPEParameter);
        }
        public ObjectResult<tbm_Instrument> UpdateInstrument(string xmlInstrument)
        {
    
            ObjectParameter xmlInstrumentParameter;
    
            if (xmlInstrument != null)
            {
                xmlInstrumentParameter = new ObjectParameter("xmlInstrument", xmlInstrument);
            }
            else
            {
                xmlInstrumentParameter = new ObjectParameter("xmlInstrument", typeof(string));
            }
            return base.ExecuteFunction<tbm_Instrument>("UpdateInstrument", xmlInstrumentParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistInstrument(string pchvInstrumentCode)
        {
    
            ObjectParameter pchvInstrumentCodeParameter;
    
            if (pchvInstrumentCode != null)
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode);
            }
            else
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistInstrument", pchvInstrumentCodeParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistParentChild(string pchvInstrumentCode)
        {
    
            ObjectParameter pchvInstrumentCodeParameter;
    
            if (pchvInstrumentCode != null)
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode);
            }
            else
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistParentChild", pchvInstrumentCodeParameter);
        }
        public ObjectResult<dtInstrument> GetInstrument(string pchvInstrumentCode, string pchvInstrumentName, string pchrLineUpTypeCode, string pchvFieldName)
        {
    
            ObjectParameter pchvInstrumentCodeParameter;
    
            if (pchvInstrumentCode != null)
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode);
            }
            else
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", typeof(string));
            }
    
            ObjectParameter pchvInstrumentNameParameter;
    
            if (pchvInstrumentName != null)
            {
                pchvInstrumentNameParameter = new ObjectParameter("pchvInstrumentName", pchvInstrumentName);
            }
            else
            {
                pchvInstrumentNameParameter = new ObjectParameter("pchvInstrumentName", typeof(string));
            }
    
            ObjectParameter pchrLineUpTypeCodeParameter;
    
            if (pchrLineUpTypeCode != null)
            {
                pchrLineUpTypeCodeParameter = new ObjectParameter("pchrLineUpTypeCode", pchrLineUpTypeCode);
            }
            else
            {
                pchrLineUpTypeCodeParameter = new ObjectParameter("pchrLineUpTypeCode", typeof(string));
            }
    
            ObjectParameter pchvFieldNameParameter;
    
            if (pchvFieldName != null)
            {
                pchvFieldNameParameter = new ObjectParameter("pchvFieldName", pchvFieldName);
            }
            else
            {
                pchvFieldNameParameter = new ObjectParameter("pchvFieldName", typeof(string));
            }
            return base.ExecuteFunction<dtInstrument>("GetInstrument", pchvInstrumentCodeParameter, pchvInstrumentNameParameter, pchrLineUpTypeCodeParameter, pchvFieldNameParameter);
        }
        public ObjectResult<dtInstrumentDetail> GetInstrumentDetail(string pchvInstrumentCode, string pchvFieldName, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter pchvInstrumentCodeParameter;
    
            if (pchvInstrumentCode != null)
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode);
            }
            else
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", typeof(string));
            }
    
            ObjectParameter pchvFieldNameParameter;
    
            if (pchvFieldName != null)
            {
                pchvFieldNameParameter = new ObjectParameter("pchvFieldName", pchvFieldName);
            }
            else
            {
                pchvFieldNameParameter = new ObjectParameter("pchvFieldName", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtInstrumentDetail>("GetInstrumentDetail", pchvInstrumentCodeParameter, pchvFieldNameParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbm_Instrument> InsertInstrument(string xmlInstrument)
        {
    
            ObjectParameter xmlInstrumentParameter;
    
            if (xmlInstrument != null)
            {
                xmlInstrumentParameter = new ObjectParameter("xmlInstrument", xmlInstrument);
            }
            else
            {
                xmlInstrumentParameter = new ObjectParameter("xmlInstrument", typeof(string));
            }
            return base.ExecuteFunction<tbm_Instrument>("InsertInstrument", xmlInstrumentParameter);
        }
        public ObjectResult<tbs_MiscellaneousTypeCode> GetTbs_MiscellaneousTypeCode(string c_CUST_TYPE)
        {
    
            ObjectParameter c_CUST_TYPEParameter;
    
            if (c_CUST_TYPE != null)
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", c_CUST_TYPE);
            }
            else
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", typeof(string));
            }
            return base.ExecuteFunction<tbs_MiscellaneousTypeCode>("GetTbs_MiscellaneousTypeCode", c_CUST_TYPEParameter);
        }
        public ObjectResult<doBillingNameEN> GetBillingNameEn(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doBillingNameEN>("GetBillingNameEn", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doGetBillingNameLC> GetBillingNameLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doGetBillingNameLC>("GetBillingNameLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doBillingBranchNameEN> GetBillingBranchNameEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doBillingBranchNameEN>("GetBillingBranchNameEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doBillingBranchNameLC> GetBillingBranchNameLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doBillingBranchNameLC>("GetBillingBranchNameLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doBillingAddressNameEN> GetBillingAddressNameEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doBillingAddressNameEN>("GetBillingAddressNameEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<doBillingAddressNameLC> GetBillingAddressNameLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<doBillingAddressNameLC>("GetBillingAddressNameLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtBillingClientDataForSearch> GetBillingClientDataForSearch(string pC_CUST_TYPE, string pchrBillingClientCode, string pchvnBillingClientName, string pchrCompanyTypeCode, string pchrRegionCode, string pchrBusinessTypeCode, string pchvnAddress, string pchvnPhoneNo, string xmlCustomerTypeCode)
        {
    
            ObjectParameter pC_CUST_TYPEParameter;
    
            if (pC_CUST_TYPE != null)
            {
                pC_CUST_TYPEParameter = new ObjectParameter("pC_CUST_TYPE", pC_CUST_TYPE);
            }
            else
            {
                pC_CUST_TYPEParameter = new ObjectParameter("pC_CUST_TYPE", typeof(string));
            }
    
            ObjectParameter pchrBillingClientCodeParameter;
    
            if (pchrBillingClientCode != null)
            {
                pchrBillingClientCodeParameter = new ObjectParameter("pchrBillingClientCode", pchrBillingClientCode);
            }
            else
            {
                pchrBillingClientCodeParameter = new ObjectParameter("pchrBillingClientCode", typeof(string));
            }
    
            ObjectParameter pchvnBillingClientNameParameter;
    
            if (pchvnBillingClientName != null)
            {
                pchvnBillingClientNameParameter = new ObjectParameter("pchvnBillingClientName", pchvnBillingClientName);
            }
            else
            {
                pchvnBillingClientNameParameter = new ObjectParameter("pchvnBillingClientName", typeof(string));
            }
    
            ObjectParameter pchrCompanyTypeCodeParameter;
    
            if (pchrCompanyTypeCode != null)
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", pchrCompanyTypeCode);
            }
            else
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", typeof(string));
            }
    
            ObjectParameter pchrRegionCodeParameter;
    
            if (pchrRegionCode != null)
            {
                pchrRegionCodeParameter = new ObjectParameter("pchrRegionCode", pchrRegionCode);
            }
            else
            {
                pchrRegionCodeParameter = new ObjectParameter("pchrRegionCode", typeof(string));
            }
    
            ObjectParameter pchrBusinessTypeCodeParameter;
    
            if (pchrBusinessTypeCode != null)
            {
                pchrBusinessTypeCodeParameter = new ObjectParameter("pchrBusinessTypeCode", pchrBusinessTypeCode);
            }
            else
            {
                pchrBusinessTypeCodeParameter = new ObjectParameter("pchrBusinessTypeCode", typeof(string));
            }
    
            ObjectParameter pchvnAddressParameter;
    
            if (pchvnAddress != null)
            {
                pchvnAddressParameter = new ObjectParameter("pchvnAddress", pchvnAddress);
            }
            else
            {
                pchvnAddressParameter = new ObjectParameter("pchvnAddress", typeof(string));
            }
    
            ObjectParameter pchvnPhoneNoParameter;
    
            if (pchvnPhoneNo != null)
            {
                pchvnPhoneNoParameter = new ObjectParameter("pchvnPhoneNo", pchvnPhoneNo);
            }
            else
            {
                pchvnPhoneNoParameter = new ObjectParameter("pchvnPhoneNo", typeof(string));
            }
    
            ObjectParameter xmlCustomerTypeCodeParameter;
    
            if (xmlCustomerTypeCode != null)
            {
                xmlCustomerTypeCodeParameter = new ObjectParameter("xmlCustomerTypeCode", xmlCustomerTypeCode);
            }
            else
            {
                xmlCustomerTypeCodeParameter = new ObjectParameter("xmlCustomerTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtBillingClientDataForSearch>("GetBillingClientDataForSearch", pC_CUST_TYPEParameter, pchrBillingClientCodeParameter, pchvnBillingClientNameParameter, pchrCompanyTypeCodeParameter, pchrRegionCodeParameter, pchrBusinessTypeCodeParameter, pchvnAddressParameter, pchvnPhoneNoParameter, xmlCustomerTypeCodeParameter);
        }
        public ObjectResult<dtCustName> GetCustName(string pLiveSearch)
        {
    
            ObjectParameter pLiveSearchParameter;
    
            if (pLiveSearch != null)
            {
                pLiveSearchParameter = new ObjectParameter("pLiveSearch", pLiveSearch);
            }
            else
            {
                pLiveSearchParameter = new ObjectParameter("pLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<dtCustName>("GetCustName", pLiveSearchParameter);
        }
        public ObjectResult<dtSiteName> GetSiteName(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteName>("GetSiteName", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteAddress> GetSiteAddress(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteAddress>("GetSiteAddress", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteAlley> GetSiteAlley(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteAlley>("GetSiteAlley", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteRoad> GetSiteRoad(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteRoad>("GetSiteRoad", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteSubDistrict> GetSiteSubDistrict(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteSubDistrict>("GetSiteSubDistrict", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtBillingClientName> GetBillingClientName(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtBillingClientName>("GetBillingClientName", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtBillingClientAddress> GetBillingClientAddress(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtBillingClientAddress>("GetBillingClientAddress", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtOffice> GetFunctionQuotaion(string pchrC_FUNC_QUATATION_NO)
        {
    
            ObjectParameter pchrC_FUNC_QUATATION_NOParameter;
    
            if (pchrC_FUNC_QUATATION_NO != null)
            {
                pchrC_FUNC_QUATATION_NOParameter = new ObjectParameter("pchrC_FUNC_QUATATION_NO", pchrC_FUNC_QUATATION_NO);
            }
            else
            {
                pchrC_FUNC_QUATATION_NOParameter = new ObjectParameter("pchrC_FUNC_QUATATION_NO", typeof(string));
            }
            return base.ExecuteFunction<dtOffice>("GetFunctionQuotaion", pchrC_FUNC_QUATATION_NOParameter);
        }
        public ObjectResult<dtOffice> GetFunctionSecurity(string pchrC_FUNC_SECURITY_NO)
        {
    
            ObjectParameter pchrC_FUNC_SECURITY_NOParameter;
    
            if (pchrC_FUNC_SECURITY_NO != null)
            {
                pchrC_FUNC_SECURITY_NOParameter = new ObjectParameter("pchrC_FUNC_SECURITY_NO", pchrC_FUNC_SECURITY_NO);
            }
            else
            {
                pchrC_FUNC_SECURITY_NOParameter = new ObjectParameter("pchrC_FUNC_SECURITY_NO", typeof(string));
            }
            return base.ExecuteFunction<dtOffice>("GetFunctionSecurity", pchrC_FUNC_SECURITY_NOParameter);
        }
        public ObjectResult<tbm_Product> GetTbm_Product(string pchrProductCode, string pcharProductTypeCode)
        {
    
            ObjectParameter pchrProductCodeParameter;
    
            if (pchrProductCode != null)
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", pchrProductCode);
            }
            else
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", typeof(string));
            }
    
            ObjectParameter pcharProductTypeCodeParameter;
    
            if (pcharProductTypeCode != null)
            {
                pcharProductTypeCodeParameter = new ObjectParameter("pcharProductTypeCode", pcharProductTypeCode);
            }
            else
            {
                pcharProductTypeCodeParameter = new ObjectParameter("pcharProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Product>("GetTbm_Product", pchrProductCodeParameter, pcharProductTypeCodeParameter);
        }
        public ObjectResult<tbm_Employee> GetEmployeeList(string xml0)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
            return base.ExecuteFunction<tbm_Employee>("GetEmployeeList", xml0Parameter);
        }
        public ObjectResult<dtSiteRoadEN> SiteRoadEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteRoadEN>("SiteRoadEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteAddressEN> GetSiteAddressEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteAddressEN>("GetSiteAddressEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteAddressLC> GetSiteAddressLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteAddressLC>("GetSiteAddressLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteAlleyEN> GetSiteAlleyEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteAlleyEN>("GetSiteAlleyEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteAlleyLC> GetSiteAlleyLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteAlleyLC>("GetSiteAlleyLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteNameEN> GetSiteNameEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteNameEN>("GetSiteNameEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteNameLC> GetSiteNameLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteNameLC>("GetSiteNameLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteRoadEN> GetSiteRoadEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteRoadEN>("GetSiteRoadEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteRoadLC> GetSiteRoadLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteRoadLC>("GetSiteRoadLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteSubDistrictEN> GetSiteSubDistrictEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteSubDistrictEN>("GetSiteSubDistrictEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtSiteSubDistrictLC> GetSiteSubDistrictLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtSiteSubDistrictLC>("GetSiteSubDistrictLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<tbm_Instrument> GetIntrumentList(string xml_dtIntrumentCode)
        {
    
            ObjectParameter xml_dtIntrumentCodeParameter;
    
            if (xml_dtIntrumentCode != null)
            {
                xml_dtIntrumentCodeParameter = new ObjectParameter("xml_dtIntrumentCode", xml_dtIntrumentCode);
            }
            else
            {
                xml_dtIntrumentCodeParameter = new ObjectParameter("xml_dtIntrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Instrument>("GetIntrumentList", xml_dtIntrumentCodeParameter);
        }
        public ObjectResult<doInstrumentName> GetInstrumentName(string pchvInstrumentName)
        {
    
            ObjectParameter pchvInstrumentNameParameter;
    
            if (pchvInstrumentName != null)
            {
                pchvInstrumentNameParameter = new ObjectParameter("pchvInstrumentName", pchvInstrumentName);
            }
            else
            {
                pchvInstrumentNameParameter = new ObjectParameter("pchvInstrumentName", typeof(string));
            }
            return base.ExecuteFunction<doInstrumentName>("GetInstrumentName", pchvInstrumentNameParameter);
        }
        public ObjectResult<dtCustomerData> GetCustomerDataForSearch(string pchrCustomerCode, string chvnCustomerName, string pchrCompanyTypeCode, string chvnIDNo, Nullable<bool> bitDummyIDFlag, string chrRegionCode, string chrBusinessTypeCode, string chvnAddress, string chvnAlley, string chvnRoad, string chvnSubDistrict, string chrDistrictCode, string chrProvinceCode, string chrZipCode, string chvnPhoneNo, string chvnGroupName, string pC_CUST_STATUS, string pC_CUST_TYPE, string pC_FINANCIAL_MARKET_TYPE, string xmlCustStatus, string xmlCustTypeCode)
        {
    
            ObjectParameter pchrCustomerCodeParameter;
    
            if (pchrCustomerCode != null)
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", pchrCustomerCode);
            }
            else
            {
                pchrCustomerCodeParameter = new ObjectParameter("pchrCustomerCode", typeof(string));
            }
    
            ObjectParameter chvnCustomerNameParameter;
    
            if (chvnCustomerName != null)
            {
                chvnCustomerNameParameter = new ObjectParameter("chvnCustomerName", chvnCustomerName);
            }
            else
            {
                chvnCustomerNameParameter = new ObjectParameter("chvnCustomerName", typeof(string));
            }
    
            ObjectParameter pchrCompanyTypeCodeParameter;
    
            if (pchrCompanyTypeCode != null)
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", pchrCompanyTypeCode);
            }
            else
            {
                pchrCompanyTypeCodeParameter = new ObjectParameter("pchrCompanyTypeCode", typeof(string));
            }
    
            ObjectParameter chvnIDNoParameter;
    
            if (chvnIDNo != null)
            {
                chvnIDNoParameter = new ObjectParameter("chvnIDNo", chvnIDNo);
            }
            else
            {
                chvnIDNoParameter = new ObjectParameter("chvnIDNo", typeof(string));
            }
    
            ObjectParameter bitDummyIDFlagParameter;
    
            if (bitDummyIDFlag.HasValue)
            {
                bitDummyIDFlagParameter = new ObjectParameter("bitDummyIDFlag", bitDummyIDFlag);
            }
            else
            {
                bitDummyIDFlagParameter = new ObjectParameter("bitDummyIDFlag", typeof(bool));
            }
    
            ObjectParameter chrRegionCodeParameter;
    
            if (chrRegionCode != null)
            {
                chrRegionCodeParameter = new ObjectParameter("chrRegionCode", chrRegionCode);
            }
            else
            {
                chrRegionCodeParameter = new ObjectParameter("chrRegionCode", typeof(string));
            }
    
            ObjectParameter chrBusinessTypeCodeParameter;
    
            if (chrBusinessTypeCode != null)
            {
                chrBusinessTypeCodeParameter = new ObjectParameter("chrBusinessTypeCode", chrBusinessTypeCode);
            }
            else
            {
                chrBusinessTypeCodeParameter = new ObjectParameter("chrBusinessTypeCode", typeof(string));
            }
    
            ObjectParameter chvnAddressParameter;
    
            if (chvnAddress != null)
            {
                chvnAddressParameter = new ObjectParameter("chvnAddress", chvnAddress);
            }
            else
            {
                chvnAddressParameter = new ObjectParameter("chvnAddress", typeof(string));
            }
    
            ObjectParameter chvnAlleyParameter;
    
            if (chvnAlley != null)
            {
                chvnAlleyParameter = new ObjectParameter("chvnAlley", chvnAlley);
            }
            else
            {
                chvnAlleyParameter = new ObjectParameter("chvnAlley", typeof(string));
            }
    
            ObjectParameter chvnRoadParameter;
    
            if (chvnRoad != null)
            {
                chvnRoadParameter = new ObjectParameter("chvnRoad", chvnRoad);
            }
            else
            {
                chvnRoadParameter = new ObjectParameter("chvnRoad", typeof(string));
            }
    
            ObjectParameter chvnSubDistrictParameter;
    
            if (chvnSubDistrict != null)
            {
                chvnSubDistrictParameter = new ObjectParameter("chvnSubDistrict", chvnSubDistrict);
            }
            else
            {
                chvnSubDistrictParameter = new ObjectParameter("chvnSubDistrict", typeof(string));
            }
    
            ObjectParameter chrDistrictCodeParameter;
    
            if (chrDistrictCode != null)
            {
                chrDistrictCodeParameter = new ObjectParameter("chrDistrictCode", chrDistrictCode);
            }
            else
            {
                chrDistrictCodeParameter = new ObjectParameter("chrDistrictCode", typeof(string));
            }
    
            ObjectParameter chrProvinceCodeParameter;
    
            if (chrProvinceCode != null)
            {
                chrProvinceCodeParameter = new ObjectParameter("chrProvinceCode", chrProvinceCode);
            }
            else
            {
                chrProvinceCodeParameter = new ObjectParameter("chrProvinceCode", typeof(string));
            }
    
            ObjectParameter chrZipCodeParameter;
    
            if (chrZipCode != null)
            {
                chrZipCodeParameter = new ObjectParameter("chrZipCode", chrZipCode);
            }
            else
            {
                chrZipCodeParameter = new ObjectParameter("chrZipCode", typeof(string));
            }
    
            ObjectParameter chvnPhoneNoParameter;
    
            if (chvnPhoneNo != null)
            {
                chvnPhoneNoParameter = new ObjectParameter("chvnPhoneNo", chvnPhoneNo);
            }
            else
            {
                chvnPhoneNoParameter = new ObjectParameter("chvnPhoneNo", typeof(string));
            }
    
            ObjectParameter chvnGroupNameParameter;
    
            if (chvnGroupName != null)
            {
                chvnGroupNameParameter = new ObjectParameter("chvnGroupName", chvnGroupName);
            }
            else
            {
                chvnGroupNameParameter = new ObjectParameter("chvnGroupName", typeof(string));
            }
    
            ObjectParameter pC_CUST_STATUSParameter;
    
            if (pC_CUST_STATUS != null)
            {
                pC_CUST_STATUSParameter = new ObjectParameter("pC_CUST_STATUS", pC_CUST_STATUS);
            }
            else
            {
                pC_CUST_STATUSParameter = new ObjectParameter("pC_CUST_STATUS", typeof(string));
            }
    
            ObjectParameter pC_CUST_TYPEParameter;
    
            if (pC_CUST_TYPE != null)
            {
                pC_CUST_TYPEParameter = new ObjectParameter("pC_CUST_TYPE", pC_CUST_TYPE);
            }
            else
            {
                pC_CUST_TYPEParameter = new ObjectParameter("pC_CUST_TYPE", typeof(string));
            }
    
            ObjectParameter pC_FINANCIAL_MARKET_TYPEParameter;
    
            if (pC_FINANCIAL_MARKET_TYPE != null)
            {
                pC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pC_FINANCIAL_MARKET_TYPE", pC_FINANCIAL_MARKET_TYPE);
            }
            else
            {
                pC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pC_FINANCIAL_MARKET_TYPE", typeof(string));
            }
    
            ObjectParameter xmlCustStatusParameter;
    
            if (xmlCustStatus != null)
            {
                xmlCustStatusParameter = new ObjectParameter("xmlCustStatus", xmlCustStatus);
            }
            else
            {
                xmlCustStatusParameter = new ObjectParameter("xmlCustStatus", typeof(string));
            }
    
            ObjectParameter xmlCustTypeCodeParameter;
    
            if (xmlCustTypeCode != null)
            {
                xmlCustTypeCodeParameter = new ObjectParameter("xmlCustTypeCode", xmlCustTypeCode);
            }
            else
            {
                xmlCustTypeCodeParameter = new ObjectParameter("xmlCustTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerData>("GetCustomerDataForSearch", pchrCustomerCodeParameter, chvnCustomerNameParameter, pchrCompanyTypeCodeParameter, chvnIDNoParameter, bitDummyIDFlagParameter, chrRegionCodeParameter, chrBusinessTypeCodeParameter, chvnAddressParameter, chvnAlleyParameter, chvnRoadParameter, chvnSubDistrictParameter, chrDistrictCodeParameter, chrProvinceCodeParameter, chrZipCodeParameter, chvnPhoneNoParameter, chvnGroupNameParameter, pC_CUST_STATUSParameter, pC_CUST_TYPEParameter, pC_FINANCIAL_MARKET_TYPEParameter, xmlCustStatusParameter, xmlCustTypeCodeParameter);
        }
        public ObjectResult<tbm_Group> GetTbm_Group(string pGroupCode)
        {
    
            ObjectParameter pGroupCodeParameter;
    
            if (pGroupCode != null)
            {
                pGroupCodeParameter = new ObjectParameter("pGroupCode", pGroupCode);
            }
            else
            {
                pGroupCodeParameter = new ObjectParameter("pGroupCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Group>("GetTbm_Group", pGroupCodeParameter);
        }
        public ObjectResult<Nullable<int>> CheckExistCustomerGroup(string pchnvGroupCode, string pchnvCustCode)
        {
    
            ObjectParameter pchnvGroupCodeParameter;
    
            if (pchnvGroupCode != null)
            {
                pchnvGroupCodeParameter = new ObjectParameter("pchnvGroupCode", pchnvGroupCode);
            }
            else
            {
                pchnvGroupCodeParameter = new ObjectParameter("pchnvGroupCode", typeof(string));
            }
    
            ObjectParameter pchnvCustCodeParameter;
    
            if (pchnvCustCode != null)
            {
                pchnvCustCodeParameter = new ObjectParameter("pchnvCustCode", pchnvCustCode);
            }
            else
            {
                pchnvCustCodeParameter = new ObjectParameter("pchnvCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckExistCustomerGroup", pchnvGroupCodeParameter, pchnvCustCodeParameter);
        }
        public ObjectResult<dtManageCustomerInformation> ManageCustomerInformation(string pchvnstrCustCode, string c_CUST_STATUS_NEW_CUSTOMER)
        {
    
            ObjectParameter pchvnstrCustCodeParameter;
    
            if (pchvnstrCustCode != null)
            {
                pchvnstrCustCodeParameter = new ObjectParameter("pchvnstrCustCode", pchvnstrCustCode);
            }
            else
            {
                pchvnstrCustCodeParameter = new ObjectParameter("pchvnstrCustCode", typeof(string));
            }
    
            ObjectParameter c_CUST_STATUS_NEW_CUSTOMERParameter;
    
            if (c_CUST_STATUS_NEW_CUSTOMER != null)
            {
                c_CUST_STATUS_NEW_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_NEW_CUSTOMER", c_CUST_STATUS_NEW_CUSTOMER);
            }
            else
            {
                c_CUST_STATUS_NEW_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_NEW_CUSTOMER", typeof(string));
            }
            return base.ExecuteFunction<dtManageCustomerInformation>("ManageCustomerInformation", pchvnstrCustCodeParameter, c_CUST_STATUS_NEW_CUSTOMERParameter);
        }
        public ObjectResult<Nullable<int>> CheckDuplicateCustomer(string c_CUST_STATUS_EXISTING_CUSTOMER, string pchrCustCode, string pchrIDNo, string pchrCustNameLC)
        {
    
            ObjectParameter c_CUST_STATUS_EXISTING_CUSTOMERParameter;
    
            if (c_CUST_STATUS_EXISTING_CUSTOMER != null)
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", c_CUST_STATUS_EXISTING_CUSTOMER);
            }
            else
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", typeof(string));
            }
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
    
            ObjectParameter pchrIDNoParameter;
    
            if (pchrIDNo != null)
            {
                pchrIDNoParameter = new ObjectParameter("pchrIDNo", pchrIDNo);
            }
            else
            {
                pchrIDNoParameter = new ObjectParameter("pchrIDNo", typeof(string));
            }
    
            ObjectParameter pchrCustNameLCParameter;
    
            if (pchrCustNameLC != null)
            {
                pchrCustNameLCParameter = new ObjectParameter("pchrCustNameLC", pchrCustNameLC);
            }
            else
            {
                pchrCustNameLCParameter = new ObjectParameter("pchrCustNameLC", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckDuplicateCustomer", c_CUST_STATUS_EXISTING_CUSTOMERParameter, pchrCustCodeParameter, pchrIDNoParameter, pchrCustNameLCParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistBelonging(string pchvOfficeCode, string pchrDepartmentCode, string pchvEmpNo, Nullable<int> pintBelongingID)
        {
    
            ObjectParameter pchvOfficeCodeParameter;
    
            if (pchvOfficeCode != null)
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", pchvOfficeCode);
            }
            else
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrDepartmentCodeParameter;
    
            if (pchrDepartmentCode != null)
            {
                pchrDepartmentCodeParameter = new ObjectParameter("pchrDepartmentCode", pchrDepartmentCode);
            }
            else
            {
                pchrDepartmentCodeParameter = new ObjectParameter("pchrDepartmentCode", typeof(string));
            }
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
    
            ObjectParameter pintBelongingIDParameter;
    
            if (pintBelongingID.HasValue)
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", pintBelongingID);
            }
            else
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistBelonging", pchvOfficeCodeParameter, pchrDepartmentCodeParameter, pchvEmpNoParameter, pintBelongingIDParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistEmployee(string pchvEmpNo)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistEmployee", pchvEmpNoParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistMainDepartmentFlag(string pchvEmpNo, Nullable<int> pintBelongingID)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
    
            ObjectParameter pintBelongingIDParameter;
    
            if (pintBelongingID.HasValue)
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", pintBelongingID);
            }
            else
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistMainDepartmentFlag", pchvEmpNoParameter, pintBelongingIDParameter);
        }
        public ObjectResult<dtEmployeeName> GetEmployeeName(string pchrnEmpFirstNameEN)
        {
    
            ObjectParameter pchrnEmpFirstNameENParameter;
    
            if (pchrnEmpFirstNameEN != null)
            {
                pchrnEmpFirstNameENParameter = new ObjectParameter("pchrnEmpFirstNameEN", pchrnEmpFirstNameEN);
            }
            else
            {
                pchrnEmpFirstNameENParameter = new ObjectParameter("pchrnEmpFirstNameEN", typeof(string));
            }
            return base.ExecuteFunction<dtEmployeeName>("GetEmployeeName", pchrnEmpFirstNameENParameter);
        }
        public ObjectResult<dtEmployeeDetail> GetEmployeeDetail(string pchvEmpNo)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
            return base.ExecuteFunction<dtEmployeeDetail>("GetEmployeeDetail", pchvEmpNoParameter);
        }
        public ObjectResult<tbm_Belonging> InsertBelonging(string xmlBelonging)
        {
    
            ObjectParameter xmlBelongingParameter;
    
            if (xmlBelonging != null)
            {
                xmlBelongingParameter = new ObjectParameter("xmlBelonging", xmlBelonging);
            }
            else
            {
                xmlBelongingParameter = new ObjectParameter("xmlBelonging", typeof(string));
            }
            return base.ExecuteFunction<tbm_Belonging>("InsertBelonging", xmlBelongingParameter);
        }
        public ObjectResult<tbm_Employee> InsertEmployee(string xmlEmployee)
        {
    
            ObjectParameter xmlEmployeeParameter;
    
            if (xmlEmployee != null)
            {
                xmlEmployeeParameter = new ObjectParameter("xmlEmployee", xmlEmployee);
            }
            else
            {
                xmlEmployeeParameter = new ObjectParameter("xmlEmployee", typeof(string));
            }
            return base.ExecuteFunction<tbm_Employee>("InsertEmployee", xmlEmployeeParameter);
        }
        public ObjectResult<tbm_Belonging> UpdateBelonging(string xmlBelonging, Nullable<int> pintBelongingID)
        {
    
            ObjectParameter xmlBelongingParameter;
    
            if (xmlBelonging != null)
            {
                xmlBelongingParameter = new ObjectParameter("xmlBelonging", xmlBelonging);
            }
            else
            {
                xmlBelongingParameter = new ObjectParameter("xmlBelonging", typeof(string));
            }
    
            ObjectParameter pintBelongingIDParameter;
    
            if (pintBelongingID.HasValue)
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", pintBelongingID);
            }
            else
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", typeof(int));
            }
            return base.ExecuteFunction<tbm_Belonging>("UpdateBelonging", xmlBelongingParameter, pintBelongingIDParameter);
        }
        public ObjectResult<tbm_Employee> UpdateEmployee(string xmlEmployee)
        {
    
            ObjectParameter xmlEmployeeParameter;
    
            if (xmlEmployee != null)
            {
                xmlEmployeeParameter = new ObjectParameter("xmlEmployee", xmlEmployee);
            }
            else
            {
                xmlEmployeeParameter = new ObjectParameter("xmlEmployee", typeof(string));
            }
            return base.ExecuteFunction<tbm_Employee>("UpdateEmployee", xmlEmployeeParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetBelongingUpdateDate(Nullable<int> pintBelongingID)
        {
    
            ObjectParameter pintBelongingIDParameter;
    
            if (pintBelongingID.HasValue)
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", pintBelongingID);
            }
            else
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetBelongingUpdateDate", pintBelongingIDParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetEmployeeUpdateDate(string pchvEmpNo)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetEmployeeUpdateDate", pchvEmpNoParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetInstrumentUpdateDate(string pchvInstrumentCode)
        {
    
            ObjectParameter pchvInstrumentCodeParameter;
    
            if (pchvInstrumentCode != null)
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode);
            }
            else
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetInstrumentUpdateDate", pchvInstrumentCodeParameter);
        }
        public ObjectResult<CheckUpdateDate> CheckUpdateDate(string siteCode)
        {
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
            return base.ExecuteFunction<CheckUpdateDate>("CheckUpdateDate", siteCodeParameter);
        }
        public ObjectResult<tbm_Site> UpdateSite(string siteCode, string custCode, string siteNo, string siteNameEN, string siteNameLC, string sECOMContactPerson, string personInCharge, string phoneNo, string buildingUsageCode, string addressEN, string alleyEN, string roadEN, string subDistrictEN, string addressFullEN, string addressLC, string alleyLC, string roadLC, string subDistrictLC, string addressFullLC, string districtCode, string provinceCode, string zipCode, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
    
            ObjectParameter siteNoParameter;
    
            if (siteNo != null)
            {
                siteNoParameter = new ObjectParameter("SiteNo", siteNo);
            }
            else
            {
                siteNoParameter = new ObjectParameter("SiteNo", typeof(string));
            }
    
            ObjectParameter siteNameENParameter;
    
            if (siteNameEN != null)
            {
                siteNameENParameter = new ObjectParameter("SiteNameEN", siteNameEN);
            }
            else
            {
                siteNameENParameter = new ObjectParameter("SiteNameEN", typeof(string));
            }
    
            ObjectParameter siteNameLCParameter;
    
            if (siteNameLC != null)
            {
                siteNameLCParameter = new ObjectParameter("SiteNameLC", siteNameLC);
            }
            else
            {
                siteNameLCParameter = new ObjectParameter("SiteNameLC", typeof(string));
            }
    
            ObjectParameter sECOMContactPersonParameter;
    
            if (sECOMContactPerson != null)
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", sECOMContactPerson);
            }
            else
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", typeof(string));
            }
    
            ObjectParameter personInChargeParameter;
    
            if (personInCharge != null)
            {
                personInChargeParameter = new ObjectParameter("PersonInCharge", personInCharge);
            }
            else
            {
                personInChargeParameter = new ObjectParameter("PersonInCharge", typeof(string));
            }
    
            ObjectParameter phoneNoParameter;
    
            if (phoneNo != null)
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", phoneNo);
            }
            else
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", typeof(string));
            }
    
            ObjectParameter buildingUsageCodeParameter;
    
            if (buildingUsageCode != null)
            {
                buildingUsageCodeParameter = new ObjectParameter("BuildingUsageCode", buildingUsageCode);
            }
            else
            {
                buildingUsageCodeParameter = new ObjectParameter("BuildingUsageCode", typeof(string));
            }
    
            ObjectParameter addressENParameter;
    
            if (addressEN != null)
            {
                addressENParameter = new ObjectParameter("AddressEN", addressEN);
            }
            else
            {
                addressENParameter = new ObjectParameter("AddressEN", typeof(string));
            }
    
            ObjectParameter alleyENParameter;
    
            if (alleyEN != null)
            {
                alleyENParameter = new ObjectParameter("AlleyEN", alleyEN);
            }
            else
            {
                alleyENParameter = new ObjectParameter("AlleyEN", typeof(string));
            }
    
            ObjectParameter roadENParameter;
    
            if (roadEN != null)
            {
                roadENParameter = new ObjectParameter("RoadEN", roadEN);
            }
            else
            {
                roadENParameter = new ObjectParameter("RoadEN", typeof(string));
            }
    
            ObjectParameter subDistrictENParameter;
    
            if (subDistrictEN != null)
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", subDistrictEN);
            }
            else
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", typeof(string));
            }
    
            ObjectParameter addressFullENParameter;
    
            if (addressFullEN != null)
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", addressFullEN);
            }
            else
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", typeof(string));
            }
    
            ObjectParameter addressLCParameter;
    
            if (addressLC != null)
            {
                addressLCParameter = new ObjectParameter("AddressLC", addressLC);
            }
            else
            {
                addressLCParameter = new ObjectParameter("AddressLC", typeof(string));
            }
    
            ObjectParameter alleyLCParameter;
    
            if (alleyLC != null)
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", alleyLC);
            }
            else
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", typeof(string));
            }
    
            ObjectParameter roadLCParameter;
    
            if (roadLC != null)
            {
                roadLCParameter = new ObjectParameter("RoadLC", roadLC);
            }
            else
            {
                roadLCParameter = new ObjectParameter("RoadLC", typeof(string));
            }
    
            ObjectParameter subDistrictLCParameter;
    
            if (subDistrictLC != null)
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", subDistrictLC);
            }
            else
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", typeof(string));
            }
    
            ObjectParameter addressFullLCParameter;
    
            if (addressFullLC != null)
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", addressFullLC);
            }
            else
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", typeof(string));
            }
    
            ObjectParameter districtCodeParameter;
    
            if (districtCode != null)
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", districtCode);
            }
            else
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", typeof(string));
            }
    
            ObjectParameter provinceCodeParameter;
    
            if (provinceCode != null)
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", provinceCode);
            }
            else
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", typeof(string));
            }
    
            ObjectParameter zipCodeParameter;
    
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_Site>("UpdateSite", siteCodeParameter, custCodeParameter, siteNoParameter, siteNameENParameter, siteNameLCParameter, sECOMContactPersonParameter, personInChargeParameter, phoneNoParameter, buildingUsageCodeParameter, addressENParameter, alleyENParameter, roadENParameter, subDistrictENParameter, addressFullENParameter, addressLCParameter, alleyLCParameter, roadLCParameter, subDistrictLCParameter, addressFullLCParameter, districtCodeParameter, provinceCodeParameter, zipCodeParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbm_Customer> GetTbm_Customer(string custCode)
        {
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Customer>("GetTbm_Customer", custCodeParameter);
        }
        public ObjectResult<tbm_Customer> InsertCustomer(string custCode, string custStatus, Nullable<bool> importantFlag, string custNameEN, string custNameLC, string custFullNameEN, string custFullNameLC, string repPersonName, string contactPersonName, string sECOMContactPerson, string custTypeCode, string companyTypeCode, string financialMarketTypeCode, string businessTypeCode, string phoneNo, string faxNo, string iDNo, Nullable<bool> dummyIDFlag, string regionCode, string uRL, string memo, string alleyEN, string addressEN, string roadEN, string subDistrictEN, string addressFullEN, string addressLC, string alleyLC, string roadLC, string subDistrictLC, string addressFullLC, string districtCode, string provinceCode, string zipCode, Nullable<bool> deleteFlag, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
    
            ObjectParameter custStatusParameter;
    
            if (custStatus != null)
            {
                custStatusParameter = new ObjectParameter("CustStatus", custStatus);
            }
            else
            {
                custStatusParameter = new ObjectParameter("CustStatus", typeof(string));
            }
    
            ObjectParameter importantFlagParameter;
    
            if (importantFlag.HasValue)
            {
                importantFlagParameter = new ObjectParameter("ImportantFlag", importantFlag);
            }
            else
            {
                importantFlagParameter = new ObjectParameter("ImportantFlag", typeof(bool));
            }
    
            ObjectParameter custNameENParameter;
    
            if (custNameEN != null)
            {
                custNameENParameter = new ObjectParameter("CustNameEN", custNameEN);
            }
            else
            {
                custNameENParameter = new ObjectParameter("CustNameEN", typeof(string));
            }
    
            ObjectParameter custNameLCParameter;
    
            if (custNameLC != null)
            {
                custNameLCParameter = new ObjectParameter("CustNameLC", custNameLC);
            }
            else
            {
                custNameLCParameter = new ObjectParameter("CustNameLC", typeof(string));
            }
    
            ObjectParameter custFullNameENParameter;
    
            if (custFullNameEN != null)
            {
                custFullNameENParameter = new ObjectParameter("CustFullNameEN", custFullNameEN);
            }
            else
            {
                custFullNameENParameter = new ObjectParameter("CustFullNameEN", typeof(string));
            }
    
            ObjectParameter custFullNameLCParameter;
    
            if (custFullNameLC != null)
            {
                custFullNameLCParameter = new ObjectParameter("CustFullNameLC", custFullNameLC);
            }
            else
            {
                custFullNameLCParameter = new ObjectParameter("CustFullNameLC", typeof(string));
            }
    
            ObjectParameter repPersonNameParameter;
    
            if (repPersonName != null)
            {
                repPersonNameParameter = new ObjectParameter("RepPersonName", repPersonName);
            }
            else
            {
                repPersonNameParameter = new ObjectParameter("RepPersonName", typeof(string));
            }
    
            ObjectParameter contactPersonNameParameter;
    
            if (contactPersonName != null)
            {
                contactPersonNameParameter = new ObjectParameter("ContactPersonName", contactPersonName);
            }
            else
            {
                contactPersonNameParameter = new ObjectParameter("ContactPersonName", typeof(string));
            }
    
            ObjectParameter sECOMContactPersonParameter;
    
            if (sECOMContactPerson != null)
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", sECOMContactPerson);
            }
            else
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", typeof(string));
            }
    
            ObjectParameter custTypeCodeParameter;
    
            if (custTypeCode != null)
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", custTypeCode);
            }
            else
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", typeof(string));
            }
    
            ObjectParameter companyTypeCodeParameter;
    
            if (companyTypeCode != null)
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", companyTypeCode);
            }
            else
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", typeof(string));
            }
    
            ObjectParameter financialMarketTypeCodeParameter;
    
            if (financialMarketTypeCode != null)
            {
                financialMarketTypeCodeParameter = new ObjectParameter("FinancialMarketTypeCode", financialMarketTypeCode);
            }
            else
            {
                financialMarketTypeCodeParameter = new ObjectParameter("FinancialMarketTypeCode", typeof(string));
            }
    
            ObjectParameter businessTypeCodeParameter;
    
            if (businessTypeCode != null)
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", businessTypeCode);
            }
            else
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", typeof(string));
            }
    
            ObjectParameter phoneNoParameter;
    
            if (phoneNo != null)
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", phoneNo);
            }
            else
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", typeof(string));
            }
    
            ObjectParameter faxNoParameter;
    
            if (faxNo != null)
            {
                faxNoParameter = new ObjectParameter("FaxNo", faxNo);
            }
            else
            {
                faxNoParameter = new ObjectParameter("FaxNo", typeof(string));
            }
    
            ObjectParameter iDNoParameter;
    
            if (iDNo != null)
            {
                iDNoParameter = new ObjectParameter("IDNo", iDNo);
            }
            else
            {
                iDNoParameter = new ObjectParameter("IDNo", typeof(string));
            }
    
            ObjectParameter dummyIDFlagParameter;
    
            if (dummyIDFlag.HasValue)
            {
                dummyIDFlagParameter = new ObjectParameter("DummyIDFlag", dummyIDFlag);
            }
            else
            {
                dummyIDFlagParameter = new ObjectParameter("DummyIDFlag", typeof(bool));
            }
    
            ObjectParameter regionCodeParameter;
    
            if (regionCode != null)
            {
                regionCodeParameter = new ObjectParameter("RegionCode", regionCode);
            }
            else
            {
                regionCodeParameter = new ObjectParameter("RegionCode", typeof(string));
            }
    
            ObjectParameter uRLParameter;
    
            if (uRL != null)
            {
                uRLParameter = new ObjectParameter("URL", uRL);
            }
            else
            {
                uRLParameter = new ObjectParameter("URL", typeof(string));
            }
    
            ObjectParameter memoParameter;
    
            if (memo != null)
            {
                memoParameter = new ObjectParameter("Memo", memo);
            }
            else
            {
                memoParameter = new ObjectParameter("Memo", typeof(string));
            }
    
            ObjectParameter alleyENParameter;
    
            if (alleyEN != null)
            {
                alleyENParameter = new ObjectParameter("AlleyEN", alleyEN);
            }
            else
            {
                alleyENParameter = new ObjectParameter("AlleyEN", typeof(string));
            }
    
            ObjectParameter addressENParameter;
    
            if (addressEN != null)
            {
                addressENParameter = new ObjectParameter("AddressEN", addressEN);
            }
            else
            {
                addressENParameter = new ObjectParameter("AddressEN", typeof(string));
            }
    
            ObjectParameter roadENParameter;
    
            if (roadEN != null)
            {
                roadENParameter = new ObjectParameter("RoadEN", roadEN);
            }
            else
            {
                roadENParameter = new ObjectParameter("RoadEN", typeof(string));
            }
    
            ObjectParameter subDistrictENParameter;
    
            if (subDistrictEN != null)
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", subDistrictEN);
            }
            else
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", typeof(string));
            }
    
            ObjectParameter addressFullENParameter;
    
            if (addressFullEN != null)
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", addressFullEN);
            }
            else
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", typeof(string));
            }
    
            ObjectParameter addressLCParameter;
    
            if (addressLC != null)
            {
                addressLCParameter = new ObjectParameter("AddressLC", addressLC);
            }
            else
            {
                addressLCParameter = new ObjectParameter("AddressLC", typeof(string));
            }
    
            ObjectParameter alleyLCParameter;
    
            if (alleyLC != null)
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", alleyLC);
            }
            else
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", typeof(string));
            }
    
            ObjectParameter roadLCParameter;
    
            if (roadLC != null)
            {
                roadLCParameter = new ObjectParameter("RoadLC", roadLC);
            }
            else
            {
                roadLCParameter = new ObjectParameter("RoadLC", typeof(string));
            }
    
            ObjectParameter subDistrictLCParameter;
    
            if (subDistrictLC != null)
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", subDistrictLC);
            }
            else
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", typeof(string));
            }
    
            ObjectParameter addressFullLCParameter;
    
            if (addressFullLC != null)
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", addressFullLC);
            }
            else
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", typeof(string));
            }
    
            ObjectParameter districtCodeParameter;
    
            if (districtCode != null)
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", districtCode);
            }
            else
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", typeof(string));
            }
    
            ObjectParameter provinceCodeParameter;
    
            if (provinceCode != null)
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", provinceCode);
            }
            else
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", typeof(string));
            }
    
            ObjectParameter zipCodeParameter;
    
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(string));
            }
    
            ObjectParameter deleteFlagParameter;
    
            if (deleteFlag.HasValue)
            {
                deleteFlagParameter = new ObjectParameter("DeleteFlag", deleteFlag);
            }
            else
            {
                deleteFlagParameter = new ObjectParameter("DeleteFlag", typeof(bool));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_Customer>("InsertCustomer", custCodeParameter, custStatusParameter, importantFlagParameter, custNameENParameter, custNameLCParameter, custFullNameENParameter, custFullNameLCParameter, repPersonNameParameter, contactPersonNameParameter, sECOMContactPersonParameter, custTypeCodeParameter, companyTypeCodeParameter, financialMarketTypeCodeParameter, businessTypeCodeParameter, phoneNoParameter, faxNoParameter, iDNoParameter, dummyIDFlagParameter, regionCodeParameter, uRLParameter, memoParameter, alleyENParameter, addressENParameter, roadENParameter, subDistrictENParameter, addressFullENParameter, addressLCParameter, alleyLCParameter, roadLCParameter, subDistrictLCParameter, addressFullLCParameter, districtCodeParameter, provinceCodeParameter, zipCodeParameter, deleteFlagParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbm_Customer> CheckCustomer(string pchnvCustCode)
        {
    
            ObjectParameter pchnvCustCodeParameter;
    
            if (pchnvCustCode != null)
            {
                pchnvCustCodeParameter = new ObjectParameter("pchnvCustCode", pchnvCustCode);
            }
            else
            {
                pchnvCustCodeParameter = new ObjectParameter("pchnvCustCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Customer>("CheckCustomer", pchnvCustCodeParameter);
        }
        public ObjectResult<tbm_Customer> UpdateCustomer(string custCode, string custStatus, Nullable<bool> importantFlag, string custNameEN, string custNameLC, string custFullNameEN, string custFullNameLC, string repPersonName, string contactPersonName, string sECOMContactPerson, string custTypeCode, string companyTypeCode, string financialMarketTypeCode, string businessTypeCode, string phoneNo, string faxNo, string iDNo, Nullable<bool> dummyIDFlag, string regionCode, string uRL, string memo, string alleyEN, string addressEN, string roadEN, string subDistrictEN, string addressFullEN, string addressLC, string alleyLC, string roadLC, string subDistrictLC, string addressFullLC, string districtCode, string provinceCode, string zipCode, Nullable<bool> deleteFlag, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
    
            ObjectParameter custStatusParameter;
    
            if (custStatus != null)
            {
                custStatusParameter = new ObjectParameter("CustStatus", custStatus);
            }
            else
            {
                custStatusParameter = new ObjectParameter("CustStatus", typeof(string));
            }
    
            ObjectParameter importantFlagParameter;
    
            if (importantFlag.HasValue)
            {
                importantFlagParameter = new ObjectParameter("ImportantFlag", importantFlag);
            }
            else
            {
                importantFlagParameter = new ObjectParameter("ImportantFlag", typeof(bool));
            }
    
            ObjectParameter custNameENParameter;
    
            if (custNameEN != null)
            {
                custNameENParameter = new ObjectParameter("CustNameEN", custNameEN);
            }
            else
            {
                custNameENParameter = new ObjectParameter("CustNameEN", typeof(string));
            }
    
            ObjectParameter custNameLCParameter;
    
            if (custNameLC != null)
            {
                custNameLCParameter = new ObjectParameter("CustNameLC", custNameLC);
            }
            else
            {
                custNameLCParameter = new ObjectParameter("CustNameLC", typeof(string));
            }
    
            ObjectParameter custFullNameENParameter;
    
            if (custFullNameEN != null)
            {
                custFullNameENParameter = new ObjectParameter("CustFullNameEN", custFullNameEN);
            }
            else
            {
                custFullNameENParameter = new ObjectParameter("CustFullNameEN", typeof(string));
            }
    
            ObjectParameter custFullNameLCParameter;
    
            if (custFullNameLC != null)
            {
                custFullNameLCParameter = new ObjectParameter("CustFullNameLC", custFullNameLC);
            }
            else
            {
                custFullNameLCParameter = new ObjectParameter("CustFullNameLC", typeof(string));
            }
    
            ObjectParameter repPersonNameParameter;
    
            if (repPersonName != null)
            {
                repPersonNameParameter = new ObjectParameter("RepPersonName", repPersonName);
            }
            else
            {
                repPersonNameParameter = new ObjectParameter("RepPersonName", typeof(string));
            }
    
            ObjectParameter contactPersonNameParameter;
    
            if (contactPersonName != null)
            {
                contactPersonNameParameter = new ObjectParameter("ContactPersonName", contactPersonName);
            }
            else
            {
                contactPersonNameParameter = new ObjectParameter("ContactPersonName", typeof(string));
            }
    
            ObjectParameter sECOMContactPersonParameter;
    
            if (sECOMContactPerson != null)
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", sECOMContactPerson);
            }
            else
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", typeof(string));
            }
    
            ObjectParameter custTypeCodeParameter;
    
            if (custTypeCode != null)
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", custTypeCode);
            }
            else
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", typeof(string));
            }
    
            ObjectParameter companyTypeCodeParameter;
    
            if (companyTypeCode != null)
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", companyTypeCode);
            }
            else
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", typeof(string));
            }
    
            ObjectParameter financialMarketTypeCodeParameter;
    
            if (financialMarketTypeCode != null)
            {
                financialMarketTypeCodeParameter = new ObjectParameter("FinancialMarketTypeCode", financialMarketTypeCode);
            }
            else
            {
                financialMarketTypeCodeParameter = new ObjectParameter("FinancialMarketTypeCode", typeof(string));
            }
    
            ObjectParameter businessTypeCodeParameter;
    
            if (businessTypeCode != null)
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", businessTypeCode);
            }
            else
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", typeof(string));
            }
    
            ObjectParameter phoneNoParameter;
    
            if (phoneNo != null)
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", phoneNo);
            }
            else
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", typeof(string));
            }
    
            ObjectParameter faxNoParameter;
    
            if (faxNo != null)
            {
                faxNoParameter = new ObjectParameter("FaxNo", faxNo);
            }
            else
            {
                faxNoParameter = new ObjectParameter("FaxNo", typeof(string));
            }
    
            ObjectParameter iDNoParameter;
    
            if (iDNo != null)
            {
                iDNoParameter = new ObjectParameter("IDNo", iDNo);
            }
            else
            {
                iDNoParameter = new ObjectParameter("IDNo", typeof(string));
            }
    
            ObjectParameter dummyIDFlagParameter;
    
            if (dummyIDFlag.HasValue)
            {
                dummyIDFlagParameter = new ObjectParameter("DummyIDFlag", dummyIDFlag);
            }
            else
            {
                dummyIDFlagParameter = new ObjectParameter("DummyIDFlag", typeof(bool));
            }
    
            ObjectParameter regionCodeParameter;
    
            if (regionCode != null)
            {
                regionCodeParameter = new ObjectParameter("RegionCode", regionCode);
            }
            else
            {
                regionCodeParameter = new ObjectParameter("RegionCode", typeof(string));
            }
    
            ObjectParameter uRLParameter;
    
            if (uRL != null)
            {
                uRLParameter = new ObjectParameter("URL", uRL);
            }
            else
            {
                uRLParameter = new ObjectParameter("URL", typeof(string));
            }
    
            ObjectParameter memoParameter;
    
            if (memo != null)
            {
                memoParameter = new ObjectParameter("Memo", memo);
            }
            else
            {
                memoParameter = new ObjectParameter("Memo", typeof(string));
            }
    
            ObjectParameter alleyENParameter;
    
            if (alleyEN != null)
            {
                alleyENParameter = new ObjectParameter("AlleyEN", alleyEN);
            }
            else
            {
                alleyENParameter = new ObjectParameter("AlleyEN", typeof(string));
            }
    
            ObjectParameter addressENParameter;
    
            if (addressEN != null)
            {
                addressENParameter = new ObjectParameter("AddressEN", addressEN);
            }
            else
            {
                addressENParameter = new ObjectParameter("AddressEN", typeof(string));
            }
    
            ObjectParameter roadENParameter;
    
            if (roadEN != null)
            {
                roadENParameter = new ObjectParameter("RoadEN", roadEN);
            }
            else
            {
                roadENParameter = new ObjectParameter("RoadEN", typeof(string));
            }
    
            ObjectParameter subDistrictENParameter;
    
            if (subDistrictEN != null)
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", subDistrictEN);
            }
            else
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", typeof(string));
            }
    
            ObjectParameter addressFullENParameter;
    
            if (addressFullEN != null)
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", addressFullEN);
            }
            else
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", typeof(string));
            }
    
            ObjectParameter addressLCParameter;
    
            if (addressLC != null)
            {
                addressLCParameter = new ObjectParameter("AddressLC", addressLC);
            }
            else
            {
                addressLCParameter = new ObjectParameter("AddressLC", typeof(string));
            }
    
            ObjectParameter alleyLCParameter;
    
            if (alleyLC != null)
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", alleyLC);
            }
            else
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", typeof(string));
            }
    
            ObjectParameter roadLCParameter;
    
            if (roadLC != null)
            {
                roadLCParameter = new ObjectParameter("RoadLC", roadLC);
            }
            else
            {
                roadLCParameter = new ObjectParameter("RoadLC", typeof(string));
            }
    
            ObjectParameter subDistrictLCParameter;
    
            if (subDistrictLC != null)
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", subDistrictLC);
            }
            else
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", typeof(string));
            }
    
            ObjectParameter addressFullLCParameter;
    
            if (addressFullLC != null)
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", addressFullLC);
            }
            else
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", typeof(string));
            }
    
            ObjectParameter districtCodeParameter;
    
            if (districtCode != null)
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", districtCode);
            }
            else
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", typeof(string));
            }
    
            ObjectParameter provinceCodeParameter;
    
            if (provinceCode != null)
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", provinceCode);
            }
            else
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", typeof(string));
            }
    
            ObjectParameter zipCodeParameter;
    
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(string));
            }
    
            ObjectParameter deleteFlagParameter;
    
            if (deleteFlag.HasValue)
            {
                deleteFlagParameter = new ObjectParameter("DeleteFlag", deleteFlag);
            }
            else
            {
                deleteFlagParameter = new ObjectParameter("DeleteFlag", typeof(bool));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_Customer>("UpdateCustomer", custCodeParameter, custStatusParameter, importantFlagParameter, custNameENParameter, custNameLCParameter, custFullNameENParameter, custFullNameLCParameter, repPersonNameParameter, contactPersonNameParameter, sECOMContactPersonParameter, custTypeCodeParameter, companyTypeCodeParameter, financialMarketTypeCodeParameter, businessTypeCodeParameter, phoneNoParameter, faxNoParameter, iDNoParameter, dummyIDFlagParameter, regionCodeParameter, uRLParameter, memoParameter, alleyENParameter, addressENParameter, roadENParameter, subDistrictENParameter, addressFullENParameter, addressLCParameter, alleyLCParameter, roadLCParameter, subDistrictLCParameter, addressFullLCParameter, districtCodeParameter, provinceCodeParameter, zipCodeParameter, deleteFlagParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbm_CustomerGroup> DeleteCustomerGroup(string xml_dtCustomerGroup)
        {
    
            ObjectParameter xml_dtCustomerGroupParameter;
    
            if (xml_dtCustomerGroup != null)
            {
                xml_dtCustomerGroupParameter = new ObjectParameter("xml_dtCustomerGroup", xml_dtCustomerGroup);
            }
            else
            {
                xml_dtCustomerGroupParameter = new ObjectParameter("xml_dtCustomerGroup", typeof(string));
            }
            return base.ExecuteFunction<tbm_CustomerGroup>("DeleteCustomerGroup", xml_dtCustomerGroupParameter);
        }
        public ObjectResult<tbm_Site> InsertSite(string siteCode, string custCode, string siteNo, string siteNameEN, string siteNameLC, string sECOMContactPerson, string personInCharge, string phoneNo, string buildingUsageCode, string addressEN, string alleyEN, string roadEN, string subDistrictEN, string addressFullEN, string addressLC, string alleyLC, string roadLC, string subDistrictLC, string addressFullLC, string districtCode, string provinceCode, string zipCode, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
    
            ObjectParameter siteNoParameter;
    
            if (siteNo != null)
            {
                siteNoParameter = new ObjectParameter("SiteNo", siteNo);
            }
            else
            {
                siteNoParameter = new ObjectParameter("SiteNo", typeof(string));
            }
    
            ObjectParameter siteNameENParameter;
    
            if (siteNameEN != null)
            {
                siteNameENParameter = new ObjectParameter("SiteNameEN", siteNameEN);
            }
            else
            {
                siteNameENParameter = new ObjectParameter("SiteNameEN", typeof(string));
            }
    
            ObjectParameter siteNameLCParameter;
    
            if (siteNameLC != null)
            {
                siteNameLCParameter = new ObjectParameter("SiteNameLC", siteNameLC);
            }
            else
            {
                siteNameLCParameter = new ObjectParameter("SiteNameLC", typeof(string));
            }
    
            ObjectParameter sECOMContactPersonParameter;
    
            if (sECOMContactPerson != null)
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", sECOMContactPerson);
            }
            else
            {
                sECOMContactPersonParameter = new ObjectParameter("SECOMContactPerson", typeof(string));
            }
    
            ObjectParameter personInChargeParameter;
    
            if (personInCharge != null)
            {
                personInChargeParameter = new ObjectParameter("PersonInCharge", personInCharge);
            }
            else
            {
                personInChargeParameter = new ObjectParameter("PersonInCharge", typeof(string));
            }
    
            ObjectParameter phoneNoParameter;
    
            if (phoneNo != null)
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", phoneNo);
            }
            else
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", typeof(string));
            }
    
            ObjectParameter buildingUsageCodeParameter;
    
            if (buildingUsageCode != null)
            {
                buildingUsageCodeParameter = new ObjectParameter("BuildingUsageCode", buildingUsageCode);
            }
            else
            {
                buildingUsageCodeParameter = new ObjectParameter("BuildingUsageCode", typeof(string));
            }
    
            ObjectParameter addressENParameter;
    
            if (addressEN != null)
            {
                addressENParameter = new ObjectParameter("AddressEN", addressEN);
            }
            else
            {
                addressENParameter = new ObjectParameter("AddressEN", typeof(string));
            }
    
            ObjectParameter alleyENParameter;
    
            if (alleyEN != null)
            {
                alleyENParameter = new ObjectParameter("AlleyEN", alleyEN);
            }
            else
            {
                alleyENParameter = new ObjectParameter("AlleyEN", typeof(string));
            }
    
            ObjectParameter roadENParameter;
    
            if (roadEN != null)
            {
                roadENParameter = new ObjectParameter("RoadEN", roadEN);
            }
            else
            {
                roadENParameter = new ObjectParameter("RoadEN", typeof(string));
            }
    
            ObjectParameter subDistrictENParameter;
    
            if (subDistrictEN != null)
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", subDistrictEN);
            }
            else
            {
                subDistrictENParameter = new ObjectParameter("SubDistrictEN", typeof(string));
            }
    
            ObjectParameter addressFullENParameter;
    
            if (addressFullEN != null)
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", addressFullEN);
            }
            else
            {
                addressFullENParameter = new ObjectParameter("AddressFullEN", typeof(string));
            }
    
            ObjectParameter addressLCParameter;
    
            if (addressLC != null)
            {
                addressLCParameter = new ObjectParameter("AddressLC", addressLC);
            }
            else
            {
                addressLCParameter = new ObjectParameter("AddressLC", typeof(string));
            }
    
            ObjectParameter alleyLCParameter;
    
            if (alleyLC != null)
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", alleyLC);
            }
            else
            {
                alleyLCParameter = new ObjectParameter("AlleyLC", typeof(string));
            }
    
            ObjectParameter roadLCParameter;
    
            if (roadLC != null)
            {
                roadLCParameter = new ObjectParameter("RoadLC", roadLC);
            }
            else
            {
                roadLCParameter = new ObjectParameter("RoadLC", typeof(string));
            }
    
            ObjectParameter subDistrictLCParameter;
    
            if (subDistrictLC != null)
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", subDistrictLC);
            }
            else
            {
                subDistrictLCParameter = new ObjectParameter("SubDistrictLC", typeof(string));
            }
    
            ObjectParameter addressFullLCParameter;
    
            if (addressFullLC != null)
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", addressFullLC);
            }
            else
            {
                addressFullLCParameter = new ObjectParameter("AddressFullLC", typeof(string));
            }
    
            ObjectParameter districtCodeParameter;
    
            if (districtCode != null)
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", districtCode);
            }
            else
            {
                districtCodeParameter = new ObjectParameter("DistrictCode", typeof(string));
            }
    
            ObjectParameter provinceCodeParameter;
    
            if (provinceCode != null)
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", provinceCode);
            }
            else
            {
                provinceCodeParameter = new ObjectParameter("ProvinceCode", typeof(string));
            }
    
            ObjectParameter zipCodeParameter;
    
            if (zipCode != null)
            {
                zipCodeParameter = new ObjectParameter("ZipCode", zipCode);
            }
            else
            {
                zipCodeParameter = new ObjectParameter("ZipCode", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_Site>("InsertSite", siteCodeParameter, custCodeParameter, siteNoParameter, siteNameENParameter, siteNameLCParameter, sECOMContactPersonParameter, personInChargeParameter, phoneNoParameter, buildingUsageCodeParameter, addressENParameter, alleyENParameter, roadENParameter, subDistrictENParameter, addressFullENParameter, addressLCParameter, alleyLCParameter, roadLCParameter, subDistrictLCParameter, addressFullLCParameter, districtCodeParameter, provinceCodeParameter, zipCodeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<doCustomer> GetCustomer(string pchrCustCode, string pcharC_CUST_STATUS, string pcharC_CUST_TYPE, string pcharC_FINANCIAL_MARKET_TYPE)
        {
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
    
            ObjectParameter pcharC_CUST_STATUSParameter;
    
            if (pcharC_CUST_STATUS != null)
            {
                pcharC_CUST_STATUSParameter = new ObjectParameter("pcharC_CUST_STATUS", pcharC_CUST_STATUS);
            }
            else
            {
                pcharC_CUST_STATUSParameter = new ObjectParameter("pcharC_CUST_STATUS", typeof(string));
            }
    
            ObjectParameter pcharC_CUST_TYPEParameter;
    
            if (pcharC_CUST_TYPE != null)
            {
                pcharC_CUST_TYPEParameter = new ObjectParameter("pcharC_CUST_TYPE", pcharC_CUST_TYPE);
            }
            else
            {
                pcharC_CUST_TYPEParameter = new ObjectParameter("pcharC_CUST_TYPE", typeof(string));
            }
    
            ObjectParameter pcharC_FINANCIAL_MARKET_TYPEParameter;
    
            if (pcharC_FINANCIAL_MARKET_TYPE != null)
            {
                pcharC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pcharC_FINANCIAL_MARKET_TYPE", pcharC_FINANCIAL_MARKET_TYPE);
            }
            else
            {
                pcharC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pcharC_FINANCIAL_MARKET_TYPE", typeof(string));
            }
            return base.ExecuteFunction<doCustomer>("GetCustomer", pchrCustCodeParameter, pcharC_CUST_STATUSParameter, pcharC_CUST_TYPEParameter, pcharC_FINANCIAL_MARKET_TYPEParameter);
        }
        public ObjectResult<tbm_Employee> DeleteEmployee(string pchvEmpNo, Nullable<bool> pbitDeleteFlag, string pchvUpdateBy, Nullable<System.DateTime> pdtmUpdateDate)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
    
            ObjectParameter pbitDeleteFlagParameter;
    
            if (pbitDeleteFlag.HasValue)
            {
                pbitDeleteFlagParameter = new ObjectParameter("pbitDeleteFlag", pbitDeleteFlag);
            }
            else
            {
                pbitDeleteFlagParameter = new ObjectParameter("pbitDeleteFlag", typeof(bool));
            }
    
            ObjectParameter pchvUpdateByParameter;
    
            if (pchvUpdateBy != null)
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", pchvUpdateBy);
            }
            else
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", typeof(string));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbm_Employee>("DeleteEmployee", pchvEmpNoParameter, pbitDeleteFlagParameter, pchvUpdateByParameter, pdtmUpdateDateParameter);
        }
        public ObjectResult<doGetTbm_Site> GetTbm_Site(string pchrSiteCode)
        {
    
            ObjectParameter pchrSiteCodeParameter;
    
            if (pchrSiteCode != null)
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", pchrSiteCode);
            }
            else
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", typeof(string));
            }
            return base.ExecuteFunction<doGetTbm_Site>("GetTbm_Site", pchrSiteCodeParameter);
        }
        public ObjectResult<tbm_Belonging> DeleteBelonging(Nullable<int> pintBelongingID)
        {
    
            ObjectParameter pintBelongingIDParameter;
    
            if (pintBelongingID.HasValue)
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", pintBelongingID);
            }
            else
            {
                pintBelongingIDParameter = new ObjectParameter("pintBelongingID", typeof(int));
            }
            return base.ExecuteFunction<tbm_Belonging>("DeleteBelonging", pintBelongingIDParameter);
        }
        public ObjectResult<dtCustomerGroupForView> GetCustomerGroup(string pchrGroupCode, string pchrCustCode)
        {
    
            ObjectParameter pchrGroupCodeParameter;
    
            if (pchrGroupCode != null)
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", pchrGroupCode);
            }
            else
            {
                pchrGroupCodeParameter = new ObjectParameter("pchrGroupCode", typeof(string));
            }
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
            return base.ExecuteFunction<dtCustomerGroupForView>("GetCustomerGroup", pchrGroupCodeParameter, pchrCustCodeParameter);
        }
        public ObjectResult<Nullable<int>> CheckExistCustomer(string pchrCustCode)
        {
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckExistCustomer", pchrCustCodeParameter);
        }
        public ObjectResult<Nullable<int>> CheckExistSite(string pchrSiteCode, string pchrCustCode)
        {
    
            ObjectParameter pchrSiteCodeParameter;
    
            if (pchrSiteCode != null)
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", pchrSiteCode);
            }
            else
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", typeof(string));
            }
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckExistSite", pchrSiteCodeParameter, pchrCustCodeParameter);
        }
        public ObjectResult<dtUserBelonging> getBelongingByEmpNo(string pchvEmpNo)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
            return base.ExecuteFunction<dtUserBelonging>("getBelongingByEmpNo", pchvEmpNoParameter);
        }
        public ObjectResult<doCompanyType> GetCompanyType(string pchrstrCompanyTypeCode)
        {
    
            ObjectParameter pchrstrCompanyTypeCodeParameter;
    
            if (pchrstrCompanyTypeCode != null)
            {
                pchrstrCompanyTypeCodeParameter = new ObjectParameter("pchrstrCompanyTypeCode", pchrstrCompanyTypeCode);
            }
            else
            {
                pchrstrCompanyTypeCodeParameter = new ObjectParameter("pchrstrCompanyTypeCode", typeof(string));
            }
            return base.ExecuteFunction<doCompanyType>("GetCompanyType", pchrstrCompanyTypeCodeParameter);
        }
        public ObjectResult<Nullable<int>> CheckExistActiveEmployee(string pchvEmpNo)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckExistActiveEmployee", pchvEmpNoParameter);
        }
        public ObjectResult<dtEmployeeData> GetUserData(string pchvEmpNo)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
            return base.ExecuteFunction<dtEmployeeData>("GetUserData", pchvEmpNoParameter);
        }
        public ObjectResult<dtAuthorizeOffice> GetAuthorizeOffice(string xml_dtBelonging)
        {
    
            ObjectParameter xml_dtBelongingParameter;
    
            if (xml_dtBelonging != null)
            {
                xml_dtBelongingParameter = new ObjectParameter("xml_dtBelonging", xml_dtBelonging);
            }
            else
            {
                xml_dtBelongingParameter = new ObjectParameter("xml_dtBelonging", typeof(string));
            }
            return base.ExecuteFunction<dtAuthorizeOffice>("GetAuthorizeOffice", xml_dtBelongingParameter);
        }
        public ObjectResult<tbm_Object> GetTbm_Object()
        {
            return base.ExecuteFunction<tbm_Object>("GetTbm_Object");
        }
        public ObjectResult<dtGetInstrumentMaker> GetInstrumentMaker(string pchnvStrAuto)
        {
    
            ObjectParameter pchnvStrAutoParameter;
    
            if (pchnvStrAuto != null)
            {
                pchnvStrAutoParameter = new ObjectParameter("pchnvStrAuto", pchnvStrAuto);
            }
            else
            {
                pchnvStrAutoParameter = new ObjectParameter("pchnvStrAuto", typeof(string));
            }
            return base.ExecuteFunction<dtGetInstrumentMaker>("GetInstrumentMaker", pchnvStrAutoParameter);
        }
        public ObjectResult<doInstrumentData> GetInstrumentDataForSearch(string phvInstrumentCode, string phnvInstrumentName, string phnvMaker, string pchrSupplierCode, string pchrLineUpTypeCode, Nullable<int> instrumentFlag_1, Nullable<int> instrumentFlag_2, string expansionType_1, string expansionType_2, Nullable<int> saleFlag, Nullable<int> rentalFlag, string instrumentType_1, string instrumentType_2, string instrumentType_3, string c_LINE_UP_TYPE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter phvInstrumentCodeParameter;
    
            if (phvInstrumentCode != null)
            {
                phvInstrumentCodeParameter = new ObjectParameter("phvInstrumentCode", phvInstrumentCode);
            }
            else
            {
                phvInstrumentCodeParameter = new ObjectParameter("phvInstrumentCode", typeof(string));
            }
    
            ObjectParameter phnvInstrumentNameParameter;
    
            if (phnvInstrumentName != null)
            {
                phnvInstrumentNameParameter = new ObjectParameter("phnvInstrumentName", phnvInstrumentName);
            }
            else
            {
                phnvInstrumentNameParameter = new ObjectParameter("phnvInstrumentName", typeof(string));
            }
    
            ObjectParameter phnvMakerParameter;
    
            if (phnvMaker != null)
            {
                phnvMakerParameter = new ObjectParameter("phnvMaker", phnvMaker);
            }
            else
            {
                phnvMakerParameter = new ObjectParameter("phnvMaker", typeof(string));
            }
    
            ObjectParameter pchrSupplierCodeParameter;
    
            if (pchrSupplierCode != null)
            {
                pchrSupplierCodeParameter = new ObjectParameter("pchrSupplierCode", pchrSupplierCode);
            }
            else
            {
                pchrSupplierCodeParameter = new ObjectParameter("pchrSupplierCode", typeof(string));
            }
    
            ObjectParameter pchrLineUpTypeCodeParameter;
    
            if (pchrLineUpTypeCode != null)
            {
                pchrLineUpTypeCodeParameter = new ObjectParameter("pchrLineUpTypeCode", pchrLineUpTypeCode);
            }
            else
            {
                pchrLineUpTypeCodeParameter = new ObjectParameter("pchrLineUpTypeCode", typeof(string));
            }
    
            ObjectParameter instrumentFlag_1Parameter;
    
            if (instrumentFlag_1.HasValue)
            {
                instrumentFlag_1Parameter = new ObjectParameter("InstrumentFlag_1", instrumentFlag_1);
            }
            else
            {
                instrumentFlag_1Parameter = new ObjectParameter("InstrumentFlag_1", typeof(int));
            }
    
            ObjectParameter instrumentFlag_2Parameter;
    
            if (instrumentFlag_2.HasValue)
            {
                instrumentFlag_2Parameter = new ObjectParameter("InstrumentFlag_2", instrumentFlag_2);
            }
            else
            {
                instrumentFlag_2Parameter = new ObjectParameter("InstrumentFlag_2", typeof(int));
            }
    
            ObjectParameter expansionType_1Parameter;
    
            if (expansionType_1 != null)
            {
                expansionType_1Parameter = new ObjectParameter("ExpansionType_1", expansionType_1);
            }
            else
            {
                expansionType_1Parameter = new ObjectParameter("ExpansionType_1", typeof(string));
            }
    
            ObjectParameter expansionType_2Parameter;
    
            if (expansionType_2 != null)
            {
                expansionType_2Parameter = new ObjectParameter("ExpansionType_2", expansionType_2);
            }
            else
            {
                expansionType_2Parameter = new ObjectParameter("ExpansionType_2", typeof(string));
            }
    
            ObjectParameter saleFlagParameter;
    
            if (saleFlag.HasValue)
            {
                saleFlagParameter = new ObjectParameter("SaleFlag", saleFlag);
            }
            else
            {
                saleFlagParameter = new ObjectParameter("SaleFlag", typeof(int));
            }
    
            ObjectParameter rentalFlagParameter;
    
            if (rentalFlag.HasValue)
            {
                rentalFlagParameter = new ObjectParameter("RentalFlag", rentalFlag);
            }
            else
            {
                rentalFlagParameter = new ObjectParameter("RentalFlag", typeof(int));
            }
    
            ObjectParameter instrumentType_1Parameter;
    
            if (instrumentType_1 != null)
            {
                instrumentType_1Parameter = new ObjectParameter("InstrumentType_1", instrumentType_1);
            }
            else
            {
                instrumentType_1Parameter = new ObjectParameter("InstrumentType_1", typeof(string));
            }
    
            ObjectParameter instrumentType_2Parameter;
    
            if (instrumentType_2 != null)
            {
                instrumentType_2Parameter = new ObjectParameter("InstrumentType_2", instrumentType_2);
            }
            else
            {
                instrumentType_2Parameter = new ObjectParameter("InstrumentType_2", typeof(string));
            }
    
            ObjectParameter instrumentType_3Parameter;
    
            if (instrumentType_3 != null)
            {
                instrumentType_3Parameter = new ObjectParameter("InstrumentType_3", instrumentType_3);
            }
            else
            {
                instrumentType_3Parameter = new ObjectParameter("InstrumentType_3", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPEParameter;
    
            if (c_LINE_UP_TYPE != null)
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", c_LINE_UP_TYPE);
            }
            else
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doInstrumentData>("GetInstrumentDataForSearch", phvInstrumentCodeParameter, phnvInstrumentNameParameter, phnvMakerParameter, pchrSupplierCodeParameter, pchrLineUpTypeCodeParameter, instrumentFlag_1Parameter, instrumentFlag_2Parameter, expansionType_1Parameter, expansionType_2Parameter, saleFlagParameter, rentalFlagParameter, instrumentType_1Parameter, instrumentType_2Parameter, instrumentType_3Parameter, c_LINE_UP_TYPEParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbm_Product> GetActiveProduct(string pcharProductCode, string pcharProductTypeCode)
        {
    
            ObjectParameter pcharProductCodeParameter;
    
            if (pcharProductCode != null)
            {
                pcharProductCodeParameter = new ObjectParameter("pcharProductCode", pcharProductCode);
            }
            else
            {
                pcharProductCodeParameter = new ObjectParameter("pcharProductCode", typeof(string));
            }
    
            ObjectParameter pcharProductTypeCodeParameter;
    
            if (pcharProductTypeCode != null)
            {
                pcharProductTypeCodeParameter = new ObjectParameter("pcharProductTypeCode", pcharProductTypeCode);
            }
            else
            {
                pcharProductTypeCodeParameter = new ObjectParameter("pcharProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Product>("GetActiveProduct", pcharProductCodeParameter, pcharProductTypeCodeParameter);
        }
        public ObjectResult<doOfficeList> GetOfficeList(string xml0)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
            return base.ExecuteFunction<doOfficeList>("GetOfficeList", xml0Parameter);
        }
        public ObjectResult<doCustomerList> GetCustomerList(string xml0)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
            return base.ExecuteFunction<doCustomerList>("GetCustomerList", xml0Parameter);
        }
        public ObjectResult<dtObjectFunction> GetObjectFunction(Nullable<int> moduleID)
        {
    
            ObjectParameter moduleIDParameter;
    
            if (moduleID.HasValue)
            {
                moduleIDParameter = new ObjectParameter("moduleID", moduleID);
            }
            else
            {
                moduleIDParameter = new ObjectParameter("moduleID", typeof(int));
            }
            return base.ExecuteFunction<dtObjectFunction>("GetObjectFunction", moduleIDParameter);
        }
        public ObjectResult<tbm_ProductInstrument> GetTbm_ProductInstrument(string pchrProductCode)
        {
    
            ObjectParameter pchrProductCodeParameter;
    
            if (pchrProductCode != null)
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", pchrProductCode);
            }
            else
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_ProductInstrument>("GetTbm_ProductInstrument", pchrProductCodeParameter);
        }
        public ObjectResult<doActiveEmployeeList> GetActiveEmployeeList(string xml0)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
            return base.ExecuteFunction<doActiveEmployeeList>("GetActiveEmployeeList", xml0Parameter);
        }
        public ObjectResult<tbm_Module> GetTbm_Module()
        {
            return base.ExecuteFunction<tbm_Module>("GetTbm_Module");
        }
        public ObjectResult<Nullable<bool>> CheckExistEmpNo(string officeCode, string departmentCode, string positionCode, string empNo)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter departmentCodeParameter;
    
            if (departmentCode != null)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(string));
            }
    
            ObjectParameter positionCodeParameter;
    
            if (positionCode != null)
            {
                positionCodeParameter = new ObjectParameter("PositionCode", positionCode);
            }
            else
            {
                positionCodeParameter = new ObjectParameter("PositionCode", typeof(string));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistEmpNo", officeCodeParameter, departmentCodeParameter, positionCodeParameter, empNoParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistPermission(string officeCode, string departmentCode, string positionCode)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter departmentCodeParameter;
    
            if (departmentCode != null)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(string));
            }
    
            ObjectParameter positionCodeParameter;
    
            if (positionCode != null)
            {
                positionCodeParameter = new ObjectParameter("PositionCode", positionCode);
            }
            else
            {
                positionCodeParameter = new ObjectParameter("PositionCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistPermission", officeCodeParameter, departmentCodeParameter, positionCodeParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetPermissionGroupUpdateDate(string permissionGroupCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetPermissionGroupUpdateDate", permissionGroupCodeParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetPermissionIndividualUpdateDate(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetPermissionIndividualUpdateDate", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<tbm_PermissionIndividualDetail> DeletePermissionIndividualDetail(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionIndividualDetail>("DeletePermissionIndividualDetail", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<tbm_PermissionIndividual> DeletePermissionIndividual(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionIndividual>("DeletePermissionIndividual", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<tbm_PermissionDetail> DeletePermissionDetail(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionDetail>("DeletePermissionDetail", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<tbm_PermissionGroup> DeletePermissionGroup(string permissionGroupCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionGroup>("DeletePermissionGroup", permissionGroupCodeParameter);
        }
        public ObjectResult<tbm_PermissionGroup> InsertPermissionGroup(string permissionGroupCode, string permissionGroupName, string officeCode, string departmentCode, string positionCode, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionGroupNameParameter;
    
            if (permissionGroupName != null)
            {
                permissionGroupNameParameter = new ObjectParameter("PermissionGroupName", permissionGroupName);
            }
            else
            {
                permissionGroupNameParameter = new ObjectParameter("PermissionGroupName", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter departmentCodeParameter;
    
            if (departmentCode != null)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(string));
            }
    
            ObjectParameter positionCodeParameter;
    
            if (positionCode != null)
            {
                positionCodeParameter = new ObjectParameter("PositionCode", positionCode);
            }
            else
            {
                positionCodeParameter = new ObjectParameter("PositionCode", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionGroup>("InsertPermissionGroup", permissionGroupCodeParameter, permissionGroupNameParameter, officeCodeParameter, departmentCodeParameter, positionCodeParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<string> GeneratePermissionGroupCode()
        {
            return base.ExecuteFunction<string>("GeneratePermissionGroupCode");
        }
        public ObjectResult<tbm_PermissionIndividual> InsertPermissionIndividual(string permissionGroupCode, string permissionIndividualCode, string permissionIndividualName, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualNameParameter;
    
            if (permissionIndividualName != null)
            {
                permissionIndividualNameParameter = new ObjectParameter("PermissionIndividualName", permissionIndividualName);
            }
            else
            {
                permissionIndividualNameParameter = new ObjectParameter("PermissionIndividualName", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionIndividual>("InsertPermissionIndividual", permissionGroupCodeParameter, permissionIndividualCodeParameter, permissionIndividualNameParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<tbm_PermissionIndividualDetail> InsertPermissionIndividualDetail(string permissionGroupCode, string permissionIndividualCode, string empNo, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionIndividualDetail>("InsertPermissionIndividualDetail", permissionGroupCodeParameter, permissionIndividualCodeParameter, empNoParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<tbm_Site> DeleteSite(string pchnvSiteCode)
        {
    
            ObjectParameter pchnvSiteCodeParameter;
    
            if (pchnvSiteCode != null)
            {
                pchnvSiteCodeParameter = new ObjectParameter("pchnvSiteCode", pchnvSiteCode);
            }
            else
            {
                pchnvSiteCodeParameter = new ObjectParameter("pchnvSiteCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Site>("DeleteSite", pchnvSiteCodeParameter);
        }
        public ObjectResult<dtFunction> GetFunction(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<dtFunction>("GetFunction", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<dtEmpNo> GetEmpNo(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<dtEmpNo>("GetEmpNo", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<tbm_ProductFacility> GetTbm_ProductFacility(string pchrProductCode)
        {
    
            ObjectParameter pchrProductCodeParameter;
    
            if (pchrProductCode != null)
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", pchrProductCode);
            }
            else
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_ProductFacility>("GetTbm_ProductFacility", pchrProductCodeParameter);
        }
        public ObjectResult<tbm_Position> GetTbm_Position()
        {
            return base.ExecuteFunction<tbm_Position>("GetTbm_Position");
        }
        public ObjectResult<Nullable<System.DateTime>> GetPermissionDetailUpdateDate(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetPermissionDetailUpdateDate", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<tbm_PermissionGroup> UpdatePermissionGroup(string permissionGroupCode, string permissionGroupName, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionGroupNameParameter;
    
            if (permissionGroupName != null)
            {
                permissionGroupNameParameter = new ObjectParameter("PermissionGroupName", permissionGroupName);
            }
            else
            {
                permissionGroupNameParameter = new ObjectParameter("PermissionGroupName", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionGroup>("UpdatePermissionGroup", permissionGroupCodeParameter, permissionGroupNameParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbm_PermissionIndividual> UpdatePermissionIndividual(string permissionGroupCode, string permissionIndividualCode, string permissionIndividualName, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualNameParameter;
    
            if (permissionIndividualName != null)
            {
                permissionIndividualNameParameter = new ObjectParameter("PermissionIndividualName", permissionIndividualName);
            }
            else
            {
                permissionIndividualNameParameter = new ObjectParameter("PermissionIndividualName", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionIndividual>("UpdatePermissionIndividual", permissionGroupCodeParameter, permissionIndividualCodeParameter, permissionIndividualNameParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetPermissionIndividualDetailUpdateDate(string permissionGroupCode, string permissionIndividualCode)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetPermissionIndividualDetailUpdateDate", permissionGroupCodeParameter, permissionIndividualCodeParameter);
        }
        public ObjectResult<tbm_PermissionIndividualDetail> InsertPermissionIndividualDetailByEmpNo(string permissionGroupCode, string permissionIndividualCode, string empNoList, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
    
            ObjectParameter empNoListParameter;
    
            if (empNoList != null)
            {
                empNoListParameter = new ObjectParameter("EmpNoList", empNoList);
            }
            else
            {
                empNoListParameter = new ObjectParameter("EmpNoList", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionIndividualDetail>("InsertPermissionIndividualDetailByEmpNo", permissionGroupCodeParameter, permissionIndividualCodeParameter, empNoListParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<tbm_PermissionIndividualDetail> DeletePermissionIndividualDetailByEmpNo(string permissionGroupCode, string permissionIndividualCode, string empNoList)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
    
            ObjectParameter empNoListParameter;
    
            if (empNoList != null)
            {
                empNoListParameter = new ObjectParameter("EmpNoList", empNoList);
            }
            else
            {
                empNoListParameter = new ObjectParameter("EmpNoList", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionIndividualDetail>("DeletePermissionIndividualDetailByEmpNo", permissionGroupCodeParameter, permissionIndividualCodeParameter, empNoListParameter);
        }
        public ObjectResult<dtEmpNo> GetEmployeeNameByEmpNo(string empNo)
        {
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
            return base.ExecuteFunction<dtEmpNo>("GetEmployeeNameByEmpNo", empNoParameter);
        }
        public ObjectResult<string> GeneratePermissionIndividualCode()
        {
            return base.ExecuteFunction<string>("GeneratePermissionIndividualCode");
        }
        public ObjectResult<tbm_PermissionDetail> InsertPermissionDetailFromSelectedFunction(string permissionGroupCode, string objectFunction, string permissionIndividualCode, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter objectFunctionParameter;
    
            if (objectFunction != null)
            {
                objectFunctionParameter = new ObjectParameter("ObjectFunction", objectFunction);
            }
            else
            {
                objectFunctionParameter = new ObjectParameter("ObjectFunction", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionDetail>("InsertPermissionDetailFromSelectedFunction", permissionGroupCodeParameter, objectFunctionParameter, permissionIndividualCodeParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<tbm_Employee> GetTbm_Employee(string pEmpNo)
        {
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbm_Employee>("GetTbm_Employee", pEmpNoParameter);
        }
        public ObjectResult<doParentGeneralInstrument> GetParentGeneralInstrumentList(string xml0, string c_LINE_UP_TYPE, string c_INSTRUMENT_TYPE_GENERAL, string c_EXPANSION_TYPE_PARENT, string c_LINE_UP_TYPE_STOP_SALE, string c_LINE_UP_TYPE_LOGICAL_DELETE)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPEParameter;
    
            if (c_LINE_UP_TYPE != null)
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", c_LINE_UP_TYPE);
            }
            else
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", typeof(string));
            }
    
            ObjectParameter c_INSTRUMENT_TYPE_GENERALParameter;
    
            if (c_INSTRUMENT_TYPE_GENERAL != null)
            {
                c_INSTRUMENT_TYPE_GENERALParameter = new ObjectParameter("C_INSTRUMENT_TYPE_GENERAL", c_INSTRUMENT_TYPE_GENERAL);
            }
            else
            {
                c_INSTRUMENT_TYPE_GENERALParameter = new ObjectParameter("C_INSTRUMENT_TYPE_GENERAL", typeof(string));
            }
    
            ObjectParameter c_EXPANSION_TYPE_PARENTParameter;
    
            if (c_EXPANSION_TYPE_PARENT != null)
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", c_EXPANSION_TYPE_PARENT);
            }
            else
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPE_STOP_SALEParameter;
    
            if (c_LINE_UP_TYPE_STOP_SALE != null)
            {
                c_LINE_UP_TYPE_STOP_SALEParameter = new ObjectParameter("C_LINE_UP_TYPE_STOP_SALE", c_LINE_UP_TYPE_STOP_SALE);
            }
            else
            {
                c_LINE_UP_TYPE_STOP_SALEParameter = new ObjectParameter("C_LINE_UP_TYPE_STOP_SALE", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPE_LOGICAL_DELETEParameter;
    
            if (c_LINE_UP_TYPE_LOGICAL_DELETE != null)
            {
                c_LINE_UP_TYPE_LOGICAL_DELETEParameter = new ObjectParameter("C_LINE_UP_TYPE_LOGICAL_DELETE", c_LINE_UP_TYPE_LOGICAL_DELETE);
            }
            else
            {
                c_LINE_UP_TYPE_LOGICAL_DELETEParameter = new ObjectParameter("C_LINE_UP_TYPE_LOGICAL_DELETE", typeof(string));
            }
            return base.ExecuteFunction<doParentGeneralInstrument>("GetParentGeneralInstrumentList", xml0Parameter, c_LINE_UP_TYPEParameter, c_INSTRUMENT_TYPE_GENERALParameter, c_EXPANSION_TYPE_PARENTParameter, c_LINE_UP_TYPE_STOP_SALEParameter, c_LINE_UP_TYPE_LOGICAL_DELETEParameter);
        }
        public ObjectResult<tbm_Employee> GetActiveEmployee(string strEmpNo)
        {
    
            ObjectParameter strEmpNoParameter;
    
            if (strEmpNo != null)
            {
                strEmpNoParameter = new ObjectParameter("strEmpNo", strEmpNo);
            }
            else
            {
                strEmpNoParameter = new ObjectParameter("strEmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbm_Employee>("GetActiveEmployee", strEmpNoParameter);
        }
        public ObjectResult<doMonitoringInstrument> GetMonitoringInstrumentList(string xml0, string c_LINE_UP_TYPE, string c_INSTRUMENT_TYPE_MONITORING)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPEParameter;
    
            if (c_LINE_UP_TYPE != null)
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", c_LINE_UP_TYPE);
            }
            else
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", typeof(string));
            }
    
            ObjectParameter c_INSTRUMENT_TYPE_MONITORINGParameter;
    
            if (c_INSTRUMENT_TYPE_MONITORING != null)
            {
                c_INSTRUMENT_TYPE_MONITORINGParameter = new ObjectParameter("C_INSTRUMENT_TYPE_MONITORING", c_INSTRUMENT_TYPE_MONITORING);
            }
            else
            {
                c_INSTRUMENT_TYPE_MONITORINGParameter = new ObjectParameter("C_INSTRUMENT_TYPE_MONITORING", typeof(string));
            }
            return base.ExecuteFunction<doMonitoringInstrument>("GetMonitoringInstrumentList", xml0Parameter, c_LINE_UP_TYPEParameter, c_INSTRUMENT_TYPE_MONITORINGParameter);
        }
        public ObjectResult<dtBillingClientData> GetBillingClient(string c_CUST_TYPE, string strBillingClientCode)
        {
    
            ObjectParameter c_CUST_TYPEParameter;
    
            if (c_CUST_TYPE != null)
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", c_CUST_TYPE);
            }
            else
            {
                c_CUST_TYPEParameter = new ObjectParameter("C_CUST_TYPE", typeof(string));
            }
    
            ObjectParameter strBillingClientCodeParameter;
    
            if (strBillingClientCode != null)
            {
                strBillingClientCodeParameter = new ObjectParameter("strBillingClientCode", strBillingClientCode);
            }
            else
            {
                strBillingClientCodeParameter = new ObjectParameter("strBillingClientCode", typeof(string));
            }
            return base.ExecuteFunction<dtBillingClientData>("GetBillingClient", c_CUST_TYPEParameter, strBillingClientCodeParameter);
        }
        public ObjectResult<dtProductName> GetProductName(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtProductName>("GetProductName", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtEmployee> GetEmployee(string pchvEmpNo, string pchrnEmpFirstNameEN, Nullable<bool> pbitMainDepartmentFlag)
        {
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
    
            ObjectParameter pchrnEmpFirstNameENParameter;
    
            if (pchrnEmpFirstNameEN != null)
            {
                pchrnEmpFirstNameENParameter = new ObjectParameter("pchrnEmpFirstNameEN", pchrnEmpFirstNameEN);
            }
            else
            {
                pchrnEmpFirstNameENParameter = new ObjectParameter("pchrnEmpFirstNameEN", typeof(string));
            }
    
            ObjectParameter pbitMainDepartmentFlagParameter;
    
            if (pbitMainDepartmentFlag.HasValue)
            {
                pbitMainDepartmentFlagParameter = new ObjectParameter("pbitMainDepartmentFlag", pbitMainDepartmentFlag);
            }
            else
            {
                pbitMainDepartmentFlagParameter = new ObjectParameter("pbitMainDepartmentFlag", typeof(bool));
            }
            return base.ExecuteFunction<dtEmployee>("GetEmployee", pchvEmpNoParameter, pchrnEmpFirstNameENParameter, pbitMainDepartmentFlagParameter);
        }
        public ObjectResult<dtCustNameEN> GetCustNameEN(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtCustNameEN>("GetCustNameEN", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<dtCustNameLC> GetCustNameLC(string pchvnstrAutoComplete)
        {
    
            ObjectParameter pchvnstrAutoCompleteParameter;
    
            if (pchvnstrAutoComplete != null)
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", pchvnstrAutoComplete);
            }
            else
            {
                pchvnstrAutoCompleteParameter = new ObjectParameter("pchvnstrAutoComplete", typeof(string));
            }
            return base.ExecuteFunction<dtCustNameLC>("GetCustNameLC", pchvnstrAutoCompleteParameter);
        }
        public ObjectResult<tbm_BillingType> GetTbm_BillingType(string billingTypeCode)
        {
    
            ObjectParameter billingTypeCodeParameter;
    
            if (billingTypeCode != null)
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", billingTypeCode);
            }
            else
            {
                billingTypeCodeParameter = new ObjectParameter("BillingTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_BillingType>("GetTbm_BillingType", billingTypeCodeParameter);
        }
        public ObjectResult<dtBelongingOffice> GetBelongingOfficeList(string pEmpNo)
        {
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction<dtBelongingOffice>("GetBelongingOfficeList", pEmpNoParameter);
        }
        public ObjectResult<dtGetEmailAddress> GetEmailAddress(string pcharEmpFirstNameEN, string pcharEmailAddress, string pcharOfficeCode, string pcharDepartmentCode)
        {
    
            ObjectParameter pcharEmpFirstNameENParameter;
    
            if (pcharEmpFirstNameEN != null)
            {
                pcharEmpFirstNameENParameter = new ObjectParameter("pcharEmpFirstNameEN", pcharEmpFirstNameEN);
            }
            else
            {
                pcharEmpFirstNameENParameter = new ObjectParameter("pcharEmpFirstNameEN", typeof(string));
            }
    
            ObjectParameter pcharEmailAddressParameter;
    
            if (pcharEmailAddress != null)
            {
                pcharEmailAddressParameter = new ObjectParameter("pcharEmailAddress", pcharEmailAddress);
            }
            else
            {
                pcharEmailAddressParameter = new ObjectParameter("pcharEmailAddress", typeof(string));
            }
    
            ObjectParameter pcharOfficeCodeParameter;
    
            if (pcharOfficeCode != null)
            {
                pcharOfficeCodeParameter = new ObjectParameter("pcharOfficeCode", pcharOfficeCode);
            }
            else
            {
                pcharOfficeCodeParameter = new ObjectParameter("pcharOfficeCode", typeof(string));
            }
    
            ObjectParameter pcharDepartmentCodeParameter;
    
            if (pcharDepartmentCode != null)
            {
                pcharDepartmentCodeParameter = new ObjectParameter("pcharDepartmentCode", pcharDepartmentCode);
            }
            else
            {
                pcharDepartmentCodeParameter = new ObjectParameter("pcharDepartmentCode", typeof(string));
            }
            return base.ExecuteFunction<dtGetEmailAddress>("GetEmailAddress", pcharEmpFirstNameENParameter, pcharEmailAddressParameter, pcharOfficeCodeParameter, pcharDepartmentCodeParameter);
        }
        public ObjectResult<dtEmailAddressForIncident> GetEmailAddressForIncident(Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtEmailAddressForIncident>("GetEmailAddressForIncident", c_FLAG_ONParameter);
        }
        public ObjectResult<doBelongingData> GetMainBelongingByEmpNo(string strEmpNo)
        {
    
            ObjectParameter strEmpNoParameter;
    
            if (strEmpNo != null)
            {
                strEmpNoParameter = new ObjectParameter("strEmpNo", strEmpNo);
            }
            else
            {
                strEmpNoParameter = new ObjectParameter("strEmpNo", typeof(string));
            }
            return base.ExecuteFunction<doBelongingData>("GetMainBelongingByEmpNo", strEmpNoParameter);
        }
        public ObjectResult<Nullable<int>> CheckDuplicateGroup(string pGroupNameLC, string pGroupCode, Nullable<bool> pC_FLAG_OFF)
        {
    
            ObjectParameter pGroupNameLCParameter;
    
            if (pGroupNameLC != null)
            {
                pGroupNameLCParameter = new ObjectParameter("pGroupNameLC", pGroupNameLC);
            }
            else
            {
                pGroupNameLCParameter = new ObjectParameter("pGroupNameLC", typeof(string));
            }
    
            ObjectParameter pGroupCodeParameter;
    
            if (pGroupCode != null)
            {
                pGroupCodeParameter = new ObjectParameter("pGroupCode", pGroupCode);
            }
            else
            {
                pGroupCodeParameter = new ObjectParameter("pGroupCode", typeof(string));
            }
    
            ObjectParameter pC_FLAG_OFFParameter;
    
            if (pC_FLAG_OFF.HasValue)
            {
                pC_FLAG_OFFParameter = new ObjectParameter("pC_FLAG_OFF", pC_FLAG_OFF);
            }
            else
            {
                pC_FLAG_OFFParameter = new ObjectParameter("pC_FLAG_OFF", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckDuplicateGroup", pGroupNameLCParameter, pGroupCodeParameter, pC_FLAG_OFFParameter);
        }
        public ObjectResult<Nullable<int>> IsUsedCustomer(string pcharCustCode)
        {
    
            ObjectParameter pcharCustCodeParameter;
    
            if (pcharCustCode != null)
            {
                pcharCustCodeParameter = new ObjectParameter("pcharCustCode", pcharCustCode);
            }
            else
            {
                pcharCustCodeParameter = new ObjectParameter("pcharCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("IsUsedCustomer", pcharCustCodeParameter);
        }
        public ObjectResult<tbm_CustomerGroup> InsertCustomerGroup(string xml_dtCustomerGroup)
        {
    
            ObjectParameter xml_dtCustomerGroupParameter;
    
            if (xml_dtCustomerGroup != null)
            {
                xml_dtCustomerGroupParameter = new ObjectParameter("xml_dtCustomerGroup", xml_dtCustomerGroup);
            }
            else
            {
                xml_dtCustomerGroupParameter = new ObjectParameter("xml_dtCustomerGroup", typeof(string));
            }
            return base.ExecuteFunction<tbm_CustomerGroup>("InsertCustomerGroup", xml_dtCustomerGroupParameter);
        }
        public ObjectResult<Nullable<int>> GenerateSiteCode(string pcharCustCode)
        {
    
            ObjectParameter pcharCustCodeParameter;
    
            if (pcharCustCode != null)
            {
                pcharCustCodeParameter = new ObjectParameter("pcharCustCode", pcharCustCode);
            }
            else
            {
                pcharCustCodeParameter = new ObjectParameter("pcharCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("GenerateSiteCode", pcharCustCodeParameter);
        }
        public ObjectResult<tbm_InstrumentExpansion> CheckExistInstrumentExpansion(string pchvParentInstrumentCode, string pchvChildInstrumentCode)
        {
    
            ObjectParameter pchvParentInstrumentCodeParameter;
    
            if (pchvParentInstrumentCode != null)
            {
                pchvParentInstrumentCodeParameter = new ObjectParameter("pchvParentInstrumentCode", pchvParentInstrumentCode);
            }
            else
            {
                pchvParentInstrumentCodeParameter = new ObjectParameter("pchvParentInstrumentCode", typeof(string));
            }
    
            ObjectParameter pchvChildInstrumentCodeParameter;
    
            if (pchvChildInstrumentCode != null)
            {
                pchvChildInstrumentCodeParameter = new ObjectParameter("pchvChildInstrumentCode", pchvChildInstrumentCode);
            }
            else
            {
                pchvChildInstrumentCodeParameter = new ObjectParameter("pchvChildInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_InstrumentExpansion>("CheckExistInstrumentExpansion", pchvParentInstrumentCodeParameter, pchvChildInstrumentCodeParameter);
        }
        public ObjectResult<tbm_InstrumentExpansion> GetTbm_InstrumentExpansion(string pInstrumentCode, string pChildInstrumentCode)
        {
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
    
            ObjectParameter pChildInstrumentCodeParameter;
    
            if (pChildInstrumentCode != null)
            {
                pChildInstrumentCodeParameter = new ObjectParameter("pChildInstrumentCode", pChildInstrumentCode);
            }
            else
            {
                pChildInstrumentCodeParameter = new ObjectParameter("pChildInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_InstrumentExpansion>("GetTbm_InstrumentExpansion", pInstrumentCodeParameter, pChildInstrumentCodeParameter);
        }
        public ObjectResult<doInstrumentExpansion> GetInstrumentExpansion(string pchvnInstrumentCode, string c_LINE_UP_TYPE)
        {
    
            ObjectParameter pchvnInstrumentCodeParameter;
    
            if (pchvnInstrumentCode != null)
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", pchvnInstrumentCode);
            }
            else
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPEParameter;
    
            if (c_LINE_UP_TYPE != null)
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", c_LINE_UP_TYPE);
            }
            else
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", typeof(string));
            }
            return base.ExecuteFunction<doInstrumentExpansion>("GetInstrumentExpansion", pchvnInstrumentCodeParameter, c_LINE_UP_TYPEParameter);
        }
        public ObjectResult<tbm_BillingClient> InsertBillingClient(string billingClientCode, string nameEN, string nameLC, string fullNameEN, string fullNameLC, string branchNo, string branchNameEN, string branchNameLC, string custTypeCode, string companyTypeCode, string businessTypeCode, string phoneNo, string iDNo, string regionCode, string addressEN, string addressLC, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<bool> deleteFlag)
        {
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
    
            ObjectParameter nameENParameter;
    
            if (nameEN != null)
            {
                nameENParameter = new ObjectParameter("NameEN", nameEN);
            }
            else
            {
                nameENParameter = new ObjectParameter("NameEN", typeof(string));
            }
    
            ObjectParameter nameLCParameter;
    
            if (nameLC != null)
            {
                nameLCParameter = new ObjectParameter("NameLC", nameLC);
            }
            else
            {
                nameLCParameter = new ObjectParameter("NameLC", typeof(string));
            }
    
            ObjectParameter fullNameENParameter;
    
            if (fullNameEN != null)
            {
                fullNameENParameter = new ObjectParameter("FullNameEN", fullNameEN);
            }
            else
            {
                fullNameENParameter = new ObjectParameter("FullNameEN", typeof(string));
            }
    
            ObjectParameter fullNameLCParameter;
    
            if (fullNameLC != null)
            {
                fullNameLCParameter = new ObjectParameter("FullNameLC", fullNameLC);
            }
            else
            {
                fullNameLCParameter = new ObjectParameter("FullNameLC", typeof(string));
            }
    
            ObjectParameter branchNoParameter;
    
            if (branchNo != null)
            {
                branchNoParameter = new ObjectParameter("BranchNo", branchNo);
            }
            else
            {
                branchNoParameter = new ObjectParameter("BranchNo", typeof(string));
            }
    
            ObjectParameter branchNameENParameter;
    
            if (branchNameEN != null)
            {
                branchNameENParameter = new ObjectParameter("BranchNameEN", branchNameEN);
            }
            else
            {
                branchNameENParameter = new ObjectParameter("BranchNameEN", typeof(string));
            }
    
            ObjectParameter branchNameLCParameter;
    
            if (branchNameLC != null)
            {
                branchNameLCParameter = new ObjectParameter("BranchNameLC", branchNameLC);
            }
            else
            {
                branchNameLCParameter = new ObjectParameter("BranchNameLC", typeof(string));
            }
    
            ObjectParameter custTypeCodeParameter;
    
            if (custTypeCode != null)
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", custTypeCode);
            }
            else
            {
                custTypeCodeParameter = new ObjectParameter("CustTypeCode", typeof(string));
            }
    
            ObjectParameter companyTypeCodeParameter;
    
            if (companyTypeCode != null)
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", companyTypeCode);
            }
            else
            {
                companyTypeCodeParameter = new ObjectParameter("CompanyTypeCode", typeof(string));
            }
    
            ObjectParameter businessTypeCodeParameter;
    
            if (businessTypeCode != null)
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", businessTypeCode);
            }
            else
            {
                businessTypeCodeParameter = new ObjectParameter("BusinessTypeCode", typeof(string));
            }
    
            ObjectParameter phoneNoParameter;
    
            if (phoneNo != null)
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", phoneNo);
            }
            else
            {
                phoneNoParameter = new ObjectParameter("PhoneNo", typeof(string));
            }
    
            ObjectParameter iDNoParameter;
    
            if (iDNo != null)
            {
                iDNoParameter = new ObjectParameter("IDNo", iDNo);
            }
            else
            {
                iDNoParameter = new ObjectParameter("IDNo", typeof(string));
            }
    
            ObjectParameter regionCodeParameter;
    
            if (regionCode != null)
            {
                regionCodeParameter = new ObjectParameter("RegionCode", regionCode);
            }
            else
            {
                regionCodeParameter = new ObjectParameter("RegionCode", typeof(string));
            }
    
            ObjectParameter addressENParameter;
    
            if (addressEN != null)
            {
                addressENParameter = new ObjectParameter("AddressEN", addressEN);
            }
            else
            {
                addressENParameter = new ObjectParameter("AddressEN", typeof(string));
            }
    
            ObjectParameter addressLCParameter;
    
            if (addressLC != null)
            {
                addressLCParameter = new ObjectParameter("AddressLC", addressLC);
            }
            else
            {
                addressLCParameter = new ObjectParameter("AddressLC", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter deleteFlagParameter;
    
            if (deleteFlag.HasValue)
            {
                deleteFlagParameter = new ObjectParameter("DeleteFlag", deleteFlag);
            }
            else
            {
                deleteFlagParameter = new ObjectParameter("DeleteFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbm_BillingClient>("InsertBillingClient", billingClientCodeParameter, nameENParameter, nameLCParameter, fullNameENParameter, fullNameLCParameter, branchNoParameter, branchNameENParameter, branchNameLCParameter, custTypeCodeParameter, companyTypeCodeParameter, businessTypeCodeParameter, phoneNoParameter, iDNoParameter, regionCodeParameter, addressENParameter, addressLCParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, deleteFlagParameter);
        }
        public ObjectResult<Nullable<int>> CheckDuplicateSite(string pSiteCode, string pCustCode, string pSiteNameLC, string pAddressFullLC)
        {
    
            ObjectParameter pSiteCodeParameter;
    
            if (pSiteCode != null)
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", pSiteCode);
            }
            else
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", typeof(string));
            }
    
            ObjectParameter pCustCodeParameter;
    
            if (pCustCode != null)
            {
                pCustCodeParameter = new ObjectParameter("pCustCode", pCustCode);
            }
            else
            {
                pCustCodeParameter = new ObjectParameter("pCustCode", typeof(string));
            }
    
            ObjectParameter pSiteNameLCParameter;
    
            if (pSiteNameLC != null)
            {
                pSiteNameLCParameter = new ObjectParameter("pSiteNameLC", pSiteNameLC);
            }
            else
            {
                pSiteNameLCParameter = new ObjectParameter("pSiteNameLC", typeof(string));
            }
    
            ObjectParameter pAddressFullLCParameter;
    
            if (pAddressFullLC != null)
            {
                pAddressFullLCParameter = new ObjectParameter("pAddressFullLC", pAddressFullLC);
            }
            else
            {
                pAddressFullLCParameter = new ObjectParameter("pAddressFullLC", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckDuplicateSite", pSiteCodeParameter, pCustCodeParameter, pSiteNameLCParameter, pAddressFullLCParameter);
        }
        public ObjectResult<Nullable<int>> CheckExistParentInstrument(string pchvnInstrumentCode, string c_EXPANSION_TYPE_PARENT)
        {
    
            ObjectParameter pchvnInstrumentCodeParameter;
    
            if (pchvnInstrumentCode != null)
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", pchvnInstrumentCode);
            }
            else
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", typeof(string));
            }
    
            ObjectParameter c_EXPANSION_TYPE_PARENTParameter;
    
            if (c_EXPANSION_TYPE_PARENT != null)
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", c_EXPANSION_TYPE_PARENT);
            }
            else
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckExistParentInstrument", pchvnInstrumentCodeParameter, c_EXPANSION_TYPE_PARENTParameter);
        }
        public ObjectResult<doParentInstrument> GetParentInstrument(string pchvnInstrumentCode, string c_EXPANSION_TYPE_PARENT)
        {
    
            ObjectParameter pchvnInstrumentCodeParameter;
    
            if (pchvnInstrumentCode != null)
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", pchvnInstrumentCode);
            }
            else
            {
                pchvnInstrumentCodeParameter = new ObjectParameter("pchvnInstrumentCode", typeof(string));
            }
    
            ObjectParameter c_EXPANSION_TYPE_PARENTParameter;
    
            if (c_EXPANSION_TYPE_PARENT != null)
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", c_EXPANSION_TYPE_PARENT);
            }
            else
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", typeof(string));
            }
            return base.ExecuteFunction<doParentInstrument>("GetParentInstrument", pchvnInstrumentCodeParameter, c_EXPANSION_TYPE_PARENTParameter);
        }
        public ObjectResult<dtBelonging> GetBelonging(string pchvOfficeCode, string pchrDepartmentCode, string pchrPositionCode, string pchvEmpNo)
        {
    
            ObjectParameter pchvOfficeCodeParameter;
    
            if (pchvOfficeCode != null)
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", pchvOfficeCode);
            }
            else
            {
                pchvOfficeCodeParameter = new ObjectParameter("pchvOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrDepartmentCodeParameter;
    
            if (pchrDepartmentCode != null)
            {
                pchrDepartmentCodeParameter = new ObjectParameter("pchrDepartmentCode", pchrDepartmentCode);
            }
            else
            {
                pchrDepartmentCodeParameter = new ObjectParameter("pchrDepartmentCode", typeof(string));
            }
    
            ObjectParameter pchrPositionCodeParameter;
    
            if (pchrPositionCode != null)
            {
                pchrPositionCodeParameter = new ObjectParameter("pchrPositionCode", pchrPositionCode);
            }
            else
            {
                pchrPositionCodeParameter = new ObjectParameter("pchrPositionCode", typeof(string));
            }
    
            ObjectParameter pchvEmpNoParameter;
    
            if (pchvEmpNo != null)
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", pchvEmpNo);
            }
            else
            {
                pchvEmpNoParameter = new ObjectParameter("pchvEmpNo", typeof(string));
            }
            return base.ExecuteFunction<dtBelonging>("GetBelonging", pchvOfficeCodeParameter, pchrDepartmentCodeParameter, pchrPositionCodeParameter, pchvEmpNoParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistMainDepartmentPersonInCharge(string officeCode, string departmentCode, Nullable<int> belongingID)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter departmentCodeParameter;
    
            if (departmentCode != null)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(string));
            }
    
            ObjectParameter belongingIDParameter;
    
            if (belongingID.HasValue)
            {
                belongingIDParameter = new ObjectParameter("BelongingID", belongingID);
            }
            else
            {
                belongingIDParameter = new ObjectParameter("BelongingID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistMainDepartmentPersonInCharge", officeCodeParameter, departmentCodeParameter, belongingIDParameter);
        }
        public ObjectResult<Nullable<int>> CheckDuplicateCustomer_CustNameLC(string c_CUST_STATUS_EXISTING_CUSTOMER, string pchrCustCode, string pchrCustNameLC)
        {
    
            ObjectParameter c_CUST_STATUS_EXISTING_CUSTOMERParameter;
    
            if (c_CUST_STATUS_EXISTING_CUSTOMER != null)
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", c_CUST_STATUS_EXISTING_CUSTOMER);
            }
            else
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", typeof(string));
            }
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
    
            ObjectParameter pchrCustNameLCParameter;
    
            if (pchrCustNameLC != null)
            {
                pchrCustNameLCParameter = new ObjectParameter("pchrCustNameLC", pchrCustNameLC);
            }
            else
            {
                pchrCustNameLCParameter = new ObjectParameter("pchrCustNameLC", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckDuplicateCustomer_CustNameLC", c_CUST_STATUS_EXISTING_CUSTOMERParameter, pchrCustCodeParameter, pchrCustNameLCParameter);
        }
        public ObjectResult<Nullable<int>> CheckDuplicateCustomer_IDNo(string c_CUST_STATUS_EXISTING_CUSTOMER, string pchrCustCode, string pchrIDNo)
        {
    
            ObjectParameter c_CUST_STATUS_EXISTING_CUSTOMERParameter;
    
            if (c_CUST_STATUS_EXISTING_CUSTOMER != null)
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", c_CUST_STATUS_EXISTING_CUSTOMER);
            }
            else
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", typeof(string));
            }
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
    
            ObjectParameter pchrIDNoParameter;
    
            if (pchrIDNo != null)
            {
                pchrIDNoParameter = new ObjectParameter("pchrIDNo", pchrIDNo);
            }
            else
            {
                pchrIDNoParameter = new ObjectParameter("pchrIDNo", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckDuplicateCustomer_IDNo", c_CUST_STATUS_EXISTING_CUSTOMERParameter, pchrCustCodeParameter, pchrIDNoParameter);
        }
        public ObjectResult<dtBelongingEmpNo> GetBelongingEmpNoByOffice(string officeCode)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
            return base.ExecuteFunction<dtBelongingEmpNo>("GetBelongingEmpNoByOffice", officeCodeParameter);
        }
        public ObjectResult<Nullable<int>> CheckActiveCustomer(string pcharCustCode)
        {
    
            ObjectParameter pcharCustCodeParameter;
    
            if (pcharCustCode != null)
            {
                pcharCustCodeParameter = new ObjectParameter("pcharCustCode", pcharCustCode);
            }
            else
            {
                pcharCustCodeParameter = new ObjectParameter("pcharCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckActiveCustomer", pcharCustCodeParameter);
        }
        public int UpdateCustomerStatus(string c_CUST_STATUS_EXISTING_CUSTOMER, string c_CUST_STATUS_NEW_CUSTOMER, string pchnvstrCustCode, string updateBy, Nullable<System.DateTime> updateDate)
        {
    
            ObjectParameter c_CUST_STATUS_EXISTING_CUSTOMERParameter;
    
            if (c_CUST_STATUS_EXISTING_CUSTOMER != null)
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", c_CUST_STATUS_EXISTING_CUSTOMER);
            }
            else
            {
                c_CUST_STATUS_EXISTING_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_EXISTING_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_CUST_STATUS_NEW_CUSTOMERParameter;
    
            if (c_CUST_STATUS_NEW_CUSTOMER != null)
            {
                c_CUST_STATUS_NEW_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_NEW_CUSTOMER", c_CUST_STATUS_NEW_CUSTOMER);
            }
            else
            {
                c_CUST_STATUS_NEW_CUSTOMERParameter = new ObjectParameter("C_CUST_STATUS_NEW_CUSTOMER", typeof(string));
            }
    
            ObjectParameter pchnvstrCustCodeParameter;
    
            if (pchnvstrCustCode != null)
            {
                pchnvstrCustCodeParameter = new ObjectParameter("pchnvstrCustCode", pchnvstrCustCode);
            }
            else
            {
                pchnvstrCustCodeParameter = new ObjectParameter("pchnvstrCustCode", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction("UpdateCustomerStatus", c_CUST_STATUS_EXISTING_CUSTOMERParameter, c_CUST_STATUS_NEW_CUSTOMERParameter, pchnvstrCustCodeParameter, updateByParameter, updateDateParameter);
        }
        public ObjectResult<tbm_CustomerGroup> ClearAllCustomerGroup(string custCode)
        {
    
            ObjectParameter custCodeParameter;
    
            if (custCode != null)
            {
                custCodeParameter = new ObjectParameter("CustCode", custCode);
            }
            else
            {
                custCodeParameter = new ObjectParameter("CustCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_CustomerGroup>("ClearAllCustomerGroup", custCodeParameter);
        }
        public ObjectResult<dtOffice> GetFunctionSale(string pchrC_FUNC_SALE_NO)
        {
    
            ObjectParameter pchrC_FUNC_SALE_NOParameter;
    
            if (pchrC_FUNC_SALE_NO != null)
            {
                pchrC_FUNC_SALE_NOParameter = new ObjectParameter("pchrC_FUNC_SALE_NO", pchrC_FUNC_SALE_NO);
            }
            else
            {
                pchrC_FUNC_SALE_NOParameter = new ObjectParameter("pchrC_FUNC_SALE_NO", typeof(string));
            }
            return base.ExecuteFunction<dtOffice>("GetFunctionSale", pchrC_FUNC_SALE_NOParameter);
        }
        public ObjectResult<doCustomer> GetCustomerAll(string pchrCustCode, string pcharC_CUST_STATUS, string pcharC_CUST_TYPE, string pcharC_FINANCIAL_MARKET_TYPE)
        {
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
    
            ObjectParameter pcharC_CUST_STATUSParameter;
    
            if (pcharC_CUST_STATUS != null)
            {
                pcharC_CUST_STATUSParameter = new ObjectParameter("pcharC_CUST_STATUS", pcharC_CUST_STATUS);
            }
            else
            {
                pcharC_CUST_STATUSParameter = new ObjectParameter("pcharC_CUST_STATUS", typeof(string));
            }
    
            ObjectParameter pcharC_CUST_TYPEParameter;
    
            if (pcharC_CUST_TYPE != null)
            {
                pcharC_CUST_TYPEParameter = new ObjectParameter("pcharC_CUST_TYPE", pcharC_CUST_TYPE);
            }
            else
            {
                pcharC_CUST_TYPEParameter = new ObjectParameter("pcharC_CUST_TYPE", typeof(string));
            }
    
            ObjectParameter pcharC_FINANCIAL_MARKET_TYPEParameter;
    
            if (pcharC_FINANCIAL_MARKET_TYPE != null)
            {
                pcharC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pcharC_FINANCIAL_MARKET_TYPE", pcharC_FINANCIAL_MARKET_TYPE);
            }
            else
            {
                pcharC_FINANCIAL_MARKET_TYPEParameter = new ObjectParameter("pcharC_FINANCIAL_MARKET_TYPE", typeof(string));
            }
            return base.ExecuteFunction<doCustomer>("GetCustomerAll", pchrCustCodeParameter, pcharC_CUST_STATUSParameter, pcharC_CUST_TYPEParameter, pcharC_FINANCIAL_MARKET_TYPEParameter);
        }
        public ObjectResult<string> GetPositionCodeAtMaxPositionLevel()
        {
            return base.ExecuteFunction<string>("GetPositionCodeAtMaxPositionLevel");
        }
        public ObjectResult<dtPermissionHeader> GetPermission(Nullable<bool> typeOffice, Nullable<bool> typeIndividual, string permissionGroupName, string officeCode, string department, string positionCode, string dtScreenFunction, string empNo, string c_PERMISSION_TYPE, string c_PERMISSION_TYPE_OFFICE, string c_PERMISSION_TYPE_INDIVIDUAL)
        {
    
            ObjectParameter typeOfficeParameter;
    
            if (typeOffice.HasValue)
            {
                typeOfficeParameter = new ObjectParameter("TypeOffice", typeOffice);
            }
            else
            {
                typeOfficeParameter = new ObjectParameter("TypeOffice", typeof(bool));
            }
    
            ObjectParameter typeIndividualParameter;
    
            if (typeIndividual.HasValue)
            {
                typeIndividualParameter = new ObjectParameter("TypeIndividual", typeIndividual);
            }
            else
            {
                typeIndividualParameter = new ObjectParameter("TypeIndividual", typeof(bool));
            }
    
            ObjectParameter permissionGroupNameParameter;
    
            if (permissionGroupName != null)
            {
                permissionGroupNameParameter = new ObjectParameter("PermissionGroupName", permissionGroupName);
            }
            else
            {
                permissionGroupNameParameter = new ObjectParameter("PermissionGroupName", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter departmentParameter;
    
            if (department != null)
            {
                departmentParameter = new ObjectParameter("Department", department);
            }
            else
            {
                departmentParameter = new ObjectParameter("Department", typeof(string));
            }
    
            ObjectParameter positionCodeParameter;
    
            if (positionCode != null)
            {
                positionCodeParameter = new ObjectParameter("PositionCode", positionCode);
            }
            else
            {
                positionCodeParameter = new ObjectParameter("PositionCode", typeof(string));
            }
    
            ObjectParameter dtScreenFunctionParameter;
    
            if (dtScreenFunction != null)
            {
                dtScreenFunctionParameter = new ObjectParameter("dtScreenFunction", dtScreenFunction);
            }
            else
            {
                dtScreenFunctionParameter = new ObjectParameter("dtScreenFunction", typeof(string));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
    
            ObjectParameter c_PERMISSION_TYPEParameter;
    
            if (c_PERMISSION_TYPE != null)
            {
                c_PERMISSION_TYPEParameter = new ObjectParameter("C_PERMISSION_TYPE", c_PERMISSION_TYPE);
            }
            else
            {
                c_PERMISSION_TYPEParameter = new ObjectParameter("C_PERMISSION_TYPE", typeof(string));
            }
    
            ObjectParameter c_PERMISSION_TYPE_OFFICEParameter;
    
            if (c_PERMISSION_TYPE_OFFICE != null)
            {
                c_PERMISSION_TYPE_OFFICEParameter = new ObjectParameter("C_PERMISSION_TYPE_OFFICE", c_PERMISSION_TYPE_OFFICE);
            }
            else
            {
                c_PERMISSION_TYPE_OFFICEParameter = new ObjectParameter("C_PERMISSION_TYPE_OFFICE", typeof(string));
            }
    
            ObjectParameter c_PERMISSION_TYPE_INDIVIDUALParameter;
    
            if (c_PERMISSION_TYPE_INDIVIDUAL != null)
            {
                c_PERMISSION_TYPE_INDIVIDUALParameter = new ObjectParameter("C_PERMISSION_TYPE_INDIVIDUAL", c_PERMISSION_TYPE_INDIVIDUAL);
            }
            else
            {
                c_PERMISSION_TYPE_INDIVIDUALParameter = new ObjectParameter("C_PERMISSION_TYPE_INDIVIDUAL", typeof(string));
            }
            return base.ExecuteFunction<dtPermissionHeader>("GetPermission", typeOfficeParameter, typeIndividualParameter, permissionGroupNameParameter, officeCodeParameter, departmentParameter, positionCodeParameter, dtScreenFunctionParameter, empNoParameter, c_PERMISSION_TYPEParameter, c_PERMISSION_TYPE_OFFICEParameter, c_PERMISSION_TYPE_INDIVIDUALParameter);
        }
        public ObjectResult<dtEmployeeBelonging> GetBelongingEmpList(string strOfficeCode, string strDepartmentCode, Nullable<bool> bChiefFlag, Nullable<bool> bApproverFlag, Nullable<bool> bCorrespondentFlag, string strEmpNoChief, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strDepartmentCodeParameter;
    
            if (strDepartmentCode != null)
            {
                strDepartmentCodeParameter = new ObjectParameter("strDepartmentCode", strDepartmentCode);
            }
            else
            {
                strDepartmentCodeParameter = new ObjectParameter("strDepartmentCode", typeof(string));
            }
    
            ObjectParameter bChiefFlagParameter;
    
            if (bChiefFlag.HasValue)
            {
                bChiefFlagParameter = new ObjectParameter("bChiefFlag", bChiefFlag);
            }
            else
            {
                bChiefFlagParameter = new ObjectParameter("bChiefFlag", typeof(bool));
            }
    
            ObjectParameter bApproverFlagParameter;
    
            if (bApproverFlag.HasValue)
            {
                bApproverFlagParameter = new ObjectParameter("bApproverFlag", bApproverFlag);
            }
            else
            {
                bApproverFlagParameter = new ObjectParameter("bApproverFlag", typeof(bool));
            }
    
            ObjectParameter bCorrespondentFlagParameter;
    
            if (bCorrespondentFlag.HasValue)
            {
                bCorrespondentFlagParameter = new ObjectParameter("bCorrespondentFlag", bCorrespondentFlag);
            }
            else
            {
                bCorrespondentFlagParameter = new ObjectParameter("bCorrespondentFlag", typeof(bool));
            }
    
            ObjectParameter strEmpNoChiefParameter;
    
            if (strEmpNoChief != null)
            {
                strEmpNoChiefParameter = new ObjectParameter("strEmpNoChief", strEmpNoChief);
            }
            else
            {
                strEmpNoChiefParameter = new ObjectParameter("strEmpNoChief", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtEmployeeBelonging>("GetBelongingEmpList", strOfficeCodeParameter, strDepartmentCodeParameter, bChiefFlagParameter, bApproverFlagParameter, bCorrespondentFlagParameter, strEmpNoChiefParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<dtDepartment> GetBelongingDepartmentList(string strOfficeCode, string strDepCode)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strDepCodeParameter;
    
            if (strDepCode != null)
            {
                strDepCodeParameter = new ObjectParameter("strDepCode", strDepCode);
            }
            else
            {
                strDepCodeParameter = new ObjectParameter("strDepCode", typeof(string));
            }
            return base.ExecuteFunction<dtDepartment>("GetBelongingDepartmentList", strOfficeCodeParameter, strDepCodeParameter);
        }
        public ObjectResult<string> GetPermissionGroupName(string empFirstNameEN)
        {
    
            ObjectParameter empFirstNameENParameter;
    
            if (empFirstNameEN != null)
            {
                empFirstNameENParameter = new ObjectParameter("EmpFirstNameEN", empFirstNameEN);
            }
            else
            {
                empFirstNameENParameter = new ObjectParameter("EmpFirstNameEN", typeof(string));
            }
            return base.ExecuteFunction<string>("GetPermissionGroupName", empFirstNameENParameter);
        }
        public ObjectResult<string> GetEmployeeCode(string empNo)
        {
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
            return base.ExecuteFunction<string>("GetEmployeeCode", empNoParameter);
        }
        public ObjectResult<CheckHeadOffice_Result> CheckHeadOffice(string strOfficeCode, string c_OFFICELEVEL_HEAD)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter c_OFFICELEVEL_HEADParameter;
    
            if (c_OFFICELEVEL_HEAD != null)
            {
                c_OFFICELEVEL_HEADParameter = new ObjectParameter("C_OFFICELEVEL_HEAD", c_OFFICELEVEL_HEAD);
            }
            else
            {
                c_OFFICELEVEL_HEADParameter = new ObjectParameter("C_OFFICELEVEL_HEAD", typeof(string));
            }
            return base.ExecuteFunction<CheckHeadOffice_Result>("CheckHeadOffice", strOfficeCodeParameter, c_OFFICELEVEL_HEADParameter);
        }
        public ObjectResult<dtOfficeChief> GetOfficeChiefList(string strOfficeCode, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtOfficeChief>("GetOfficeChiefList", strOfficeCodeParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<doFunctionBilling> GetFunctionBilling(string pchrC_FUNC_BILLING_NO)
        {
    
            ObjectParameter pchrC_FUNC_BILLING_NOParameter;
    
            if (pchrC_FUNC_BILLING_NO != null)
            {
                pchrC_FUNC_BILLING_NOParameter = new ObjectParameter("pchrC_FUNC_BILLING_NO", pchrC_FUNC_BILLING_NO);
            }
            else
            {
                pchrC_FUNC_BILLING_NOParameter = new ObjectParameter("pchrC_FUNC_BILLING_NO", typeof(string));
            }
            return base.ExecuteFunction<doFunctionBilling>("GetFunctionBilling", pchrC_FUNC_BILLING_NOParameter);
        }
        public ObjectResult<dtOffice> GetFunctionLogistic(string c_FUNC_LOGISTIC_NO)
        {
    
            ObjectParameter c_FUNC_LOGISTIC_NOParameter;
    
            if (c_FUNC_LOGISTIC_NO != null)
            {
                c_FUNC_LOGISTIC_NOParameter = new ObjectParameter("C_FUNC_LOGISTIC_NO", c_FUNC_LOGISTIC_NO);
            }
            else
            {
                c_FUNC_LOGISTIC_NOParameter = new ObjectParameter("C_FUNC_LOGISTIC_NO", typeof(string));
            }
            return base.ExecuteFunction<dtOffice>("GetFunctionLogistic", c_FUNC_LOGISTIC_NOParameter);
        }
        public ObjectResult<dtEmployeeOffice> GetEmployeeOffice(string strEmpNo, Nullable<bool> blnMainDepartmentFlag)
        {
    
            ObjectParameter strEmpNoParameter;
    
            if (strEmpNo != null)
            {
                strEmpNoParameter = new ObjectParameter("strEmpNo", strEmpNo);
            }
            else
            {
                strEmpNoParameter = new ObjectParameter("strEmpNo", typeof(string));
            }
    
            ObjectParameter blnMainDepartmentFlagParameter;
    
            if (blnMainDepartmentFlag.HasValue)
            {
                blnMainDepartmentFlagParameter = new ObjectParameter("blnMainDepartmentFlag", blnMainDepartmentFlag);
            }
            else
            {
                blnMainDepartmentFlagParameter = new ObjectParameter("blnMainDepartmentFlag", typeof(bool));
            }
            return base.ExecuteFunction<dtEmployeeOffice>("GetEmployeeOffice", strEmpNoParameter, blnMainDepartmentFlagParameter);
        }
        public ObjectResult<tbm_Office> GetIncidentOffice()
        {
            return base.ExecuteFunction<tbm_Office>("GetIncidentOffice");
        }
        public ObjectResult<tbm_Office> GetAROffice()
        {
            return base.ExecuteFunction<tbm_Office>("GetAROffice");
        }
        public ObjectResult<tbm_Instrument> GetTbm_Instrument(string instrumentCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_Instrument>("GetTbm_Instrument", instrumentCodeParameter);
        }
        public ObjectResult<dtDocumentTemplateByDocumentCode> GetDocumentTemplateByDocumentCode(string pDocumentCode)
        {
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
            return base.ExecuteFunction<dtDocumentTemplateByDocumentCode>("GetDocumentTemplateByDocumentCode", pDocumentCodeParameter);
        }
        public ObjectResult<string> GetSupplierName(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<string>("GetSupplierName", strLiveSearchParameter);
        }
        public ObjectResult<tbm_Supplier> GetSupplier(string strSupplierCode, string strSupplierName)
        {
    
            ObjectParameter strSupplierCodeParameter;
    
            if (strSupplierCode != null)
            {
                strSupplierCodeParameter = new ObjectParameter("strSupplierCode", strSupplierCode);
            }
            else
            {
                strSupplierCodeParameter = new ObjectParameter("strSupplierCode", typeof(string));
            }
    
            ObjectParameter strSupplierNameParameter;
    
            if (strSupplierName != null)
            {
                strSupplierNameParameter = new ObjectParameter("strSupplierName", strSupplierName);
            }
            else
            {
                strSupplierNameParameter = new ObjectParameter("strSupplierName", typeof(string));
            }
            return base.ExecuteFunction<tbm_Supplier>("GetSupplier", strSupplierCodeParameter, strSupplierNameParameter);
        }
        public ObjectResult<doSubcontractor> GetSubcontractor(string subcontractorCode, string coCompanyCode, string installationTeam, string subcontractorName)
        {
    
            ObjectParameter subcontractorCodeParameter;
    
            if (subcontractorCode != null)
            {
                subcontractorCodeParameter = new ObjectParameter("SubcontractorCode", subcontractorCode);
            }
            else
            {
                subcontractorCodeParameter = new ObjectParameter("SubcontractorCode", typeof(string));
            }
    
            ObjectParameter coCompanyCodeParameter;
    
            if (coCompanyCode != null)
            {
                coCompanyCodeParameter = new ObjectParameter("CoCompanyCode", coCompanyCode);
            }
            else
            {
                coCompanyCodeParameter = new ObjectParameter("CoCompanyCode", typeof(string));
            }
    
            ObjectParameter installationTeamParameter;
    
            if (installationTeam != null)
            {
                installationTeamParameter = new ObjectParameter("InstallationTeam", installationTeam);
            }
            else
            {
                installationTeamParameter = new ObjectParameter("InstallationTeam", typeof(string));
            }
    
            ObjectParameter subcontractorNameParameter;
    
            if (subcontractorName != null)
            {
                subcontractorNameParameter = new ObjectParameter("SubcontractorName", subcontractorName);
            }
            else
            {
                subcontractorNameParameter = new ObjectParameter("SubcontractorName", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractor>("GetSubcontractor", subcontractorCodeParameter, coCompanyCodeParameter, installationTeamParameter, subcontractorNameParameter);
        }
        public ObjectResult<tbm_Belonging> DeleteAllBelonging(string pEmpNo)
        {
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbm_Belonging>("DeleteAllBelonging", pEmpNoParameter);
        }
        public ObjectResult<doSubcontractor> GetSubcontractorDetail(string subcontractorCode)
        {
    
            ObjectParameter subcontractorCodeParameter;
    
            if (subcontractorCode != null)
            {
                subcontractorCodeParameter = new ObjectParameter("SubcontractorCode", subcontractorCode);
            }
            else
            {
                subcontractorCodeParameter = new ObjectParameter("SubcontractorCode", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractor>("GetSubcontractorDetail", subcontractorCodeParameter);
        }
        public ObjectResult<doSubcontractor> InsertSubcontractor(string xmlSubcontractor)
        {
    
            ObjectParameter xmlSubcontractorParameter;
    
            if (xmlSubcontractor != null)
            {
                xmlSubcontractorParameter = new ObjectParameter("xmlSubcontractor", xmlSubcontractor);
            }
            else
            {
                xmlSubcontractorParameter = new ObjectParameter("xmlSubcontractor", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractor>("InsertSubcontractor", xmlSubcontractorParameter);
        }
        public ObjectResult<doSubcontractor> UpdateSubcontractor(string xmlSubcontractor)
        {
    
            ObjectParameter xmlSubcontractorParameter;
    
            if (xmlSubcontractor != null)
            {
                xmlSubcontractorParameter = new ObjectParameter("xmlSubcontractor", xmlSubcontractor);
            }
            else
            {
                xmlSubcontractorParameter = new ObjectParameter("xmlSubcontractor", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractor>("UpdateSubcontractor", xmlSubcontractorParameter);
        }
        public ObjectResult<tbm_Calendar> GetTbm_Calendar(Nullable<System.DateTime> onDate)
        {
    
            ObjectParameter onDateParameter;
    
            if (onDate.HasValue)
            {
                onDateParameter = new ObjectParameter("OnDate", onDate);
            }
            else
            {
                onDateParameter = new ObjectParameter("OnDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbm_Calendar>("GetTbm_Calendar", onDateParameter);
        }
        public ObjectResult<Nullable<int>> CheckInventoryHeadOffice(string officeCode, string c_FUNC_LOGISTIC_HQ)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter c_FUNC_LOGISTIC_HQParameter;
    
            if (c_FUNC_LOGISTIC_HQ != null)
            {
                c_FUNC_LOGISTIC_HQParameter = new ObjectParameter("C_FUNC_LOGISTIC_HQ", c_FUNC_LOGISTIC_HQ);
            }
            else
            {
                c_FUNC_LOGISTIC_HQParameter = new ObjectParameter("C_FUNC_LOGISTIC_HQ", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckInventoryHeadOffice", officeCodeParameter, c_FUNC_LOGISTIC_HQParameter);
        }
        public ObjectResult<doSubcontractorName> GetSubcontractorName(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractorName>("GetSubcontractorName", strLiveSearchParameter);
        }
        public ObjectResult<doSubcontractorNameEN> GetSubcontractorNameEN(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractorNameEN>("GetSubcontractorNameEN", strLiveSearchParameter);
        }
        public ObjectResult<doSubcontractorNameLC> GetSubcontractorNameLC(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractorNameLC>("GetSubcontractorNameLC", strLiveSearchParameter);
        }
        public ObjectResult<doSubcontractorAddress> GetSubcontractorAddress(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractorAddress>("GetSubcontractorAddress", strLiveSearchParameter);
        }
        public ObjectResult<doSubcontractorAddressEN> GetSubcontractorAddressEN(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractorAddressEN>("GetSubcontractorAddressEN", strLiveSearchParameter);
        }
        public ObjectResult<doSubcontractorAddressLC> GetSubcontractorAddressLC(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<doSubcontractorAddressLC>("GetSubcontractorAddressLC", strLiveSearchParameter);
        }
        public ObjectResult<doSafetyStock> GetSafetyStock(string instrumentCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<doSafetyStock>("GetSafetyStock", instrumentCodeParameter);
        }
        public ObjectResult<tbm_SafetyStock> InsertSafetyStock(string xmlSafetyStock)
        {
    
            ObjectParameter xmlSafetyStockParameter;
    
            if (xmlSafetyStock != null)
            {
                xmlSafetyStockParameter = new ObjectParameter("xmlSafetyStock", xmlSafetyStock);
            }
            else
            {
                xmlSafetyStockParameter = new ObjectParameter("xmlSafetyStock", typeof(string));
            }
            return base.ExecuteFunction<tbm_SafetyStock>("InsertSafetyStock", xmlSafetyStockParameter);
        }
        public ObjectResult<tbm_SafetyStock> UpdateSafetyStock(string xmlSafetyStock)
        {
    
            ObjectParameter xmlSafetyStockParameter;
    
            if (xmlSafetyStock != null)
            {
                xmlSafetyStockParameter = new ObjectParameter("xmlSafetyStock", xmlSafetyStock);
            }
            else
            {
                xmlSafetyStockParameter = new ObjectParameter("xmlSafetyStock", typeof(string));
            }
            return base.ExecuteFunction<tbm_SafetyStock>("UpdateSafetyStock", xmlSafetyStockParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetAutoTransferDate(string bankCode, string autoTransferDate)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
    
            ObjectParameter autoTransferDateParameter;
    
            if (autoTransferDate != null)
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", autoTransferDate);
            }
            else
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetAutoTransferDate", bankCodeParameter, autoTransferDateParameter);
        }
        public ObjectResult<tbm_Shelf> CheckDuplicateShelf(string pShelfNo)
        {
    
            ObjectParameter pShelfNoParameter;
    
            if (pShelfNo != null)
            {
                pShelfNoParameter = new ObjectParameter("pShelfNo", pShelfNo);
            }
            else
            {
                pShelfNoParameter = new ObjectParameter("pShelfNo", typeof(string));
            }
            return base.ExecuteFunction<tbm_Shelf>("CheckDuplicateShelf", pShelfNoParameter);
        }
        public ObjectResult<doShelf> GetShelf(string shelfNo, string shelfName, string shelfTypeCode, string areaCode)
        {
    
            ObjectParameter shelfNoParameter;
    
            if (shelfNo != null)
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", shelfNo);
            }
            else
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", typeof(string));
            }
    
            ObjectParameter shelfNameParameter;
    
            if (shelfName != null)
            {
                shelfNameParameter = new ObjectParameter("ShelfName", shelfName);
            }
            else
            {
                shelfNameParameter = new ObjectParameter("ShelfName", typeof(string));
            }
    
            ObjectParameter shelfTypeCodeParameter;
    
            if (shelfTypeCode != null)
            {
                shelfTypeCodeParameter = new ObjectParameter("ShelfTypeCode", shelfTypeCode);
            }
            else
            {
                shelfTypeCodeParameter = new ObjectParameter("ShelfTypeCode", typeof(string));
            }
    
            ObjectParameter areaCodeParameter;
    
            if (areaCode != null)
            {
                areaCodeParameter = new ObjectParameter("AreaCode", areaCode);
            }
            else
            {
                areaCodeParameter = new ObjectParameter("AreaCode", typeof(string));
            }
            return base.ExecuteFunction<doShelf>("GetShelf", shelfNoParameter, shelfNameParameter, shelfTypeCodeParameter, areaCodeParameter);
        }
        public ObjectResult<tbm_Shelf> InsertShelf(string xmlShelf)
        {
    
            ObjectParameter xmlShelfParameter;
    
            if (xmlShelf != null)
            {
                xmlShelfParameter = new ObjectParameter("xmlShelf", xmlShelf);
            }
            else
            {
                xmlShelfParameter = new ObjectParameter("xmlShelf", typeof(string));
            }
            return base.ExecuteFunction<tbm_Shelf>("InsertShelf", xmlShelfParameter);
        }
        public ObjectResult<tbm_Shelf> UpdateShelf(string xmlShelf)
        {
    
            ObjectParameter xmlShelfParameter;
    
            if (xmlShelf != null)
            {
                xmlShelfParameter = new ObjectParameter("xmlShelf", xmlShelf);
            }
            else
            {
                xmlShelfParameter = new ObjectParameter("xmlShelf", typeof(string));
            }
            return base.ExecuteFunction<tbm_Shelf>("UpdateShelf", xmlShelfParameter);
        }
        public ObjectResult<doShelfName> GetShelfName(string strLiveSearch)
        {
    
            ObjectParameter strLiveSearchParameter;
    
            if (strLiveSearch != null)
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", strLiveSearch);
            }
            else
            {
                strLiveSearchParameter = new ObjectParameter("strLiveSearch", typeof(string));
            }
            return base.ExecuteFunction<doShelfName>("GetShelfName", strLiveSearchParameter);
        }
        public ObjectResult<Nullable<int>> CheckShelfDuplicateArea(string strInstrumentCode, string strAreaCode, string c_INV_SHELF_TYPE_NORMAL, Nullable<bool> c_FLAG_NO)
        {
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter strAreaCodeParameter;
    
            if (strAreaCode != null)
            {
                strAreaCodeParameter = new ObjectParameter("strAreaCode", strAreaCode);
            }
            else
            {
                strAreaCodeParameter = new ObjectParameter("strAreaCode", typeof(string));
            }
    
            ObjectParameter c_INV_SHELF_TYPE_NORMALParameter;
    
            if (c_INV_SHELF_TYPE_NORMAL != null)
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", c_INV_SHELF_TYPE_NORMAL);
            }
            else
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", typeof(string));
            }
    
            ObjectParameter c_FLAG_NOParameter;
    
            if (c_FLAG_NO.HasValue)
            {
                c_FLAG_NOParameter = new ObjectParameter("C_FLAG_NO", c_FLAG_NO);
            }
            else
            {
                c_FLAG_NOParameter = new ObjectParameter("C_FLAG_NO", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckShelfDuplicateArea", strInstrumentCodeParameter, strAreaCodeParameter, c_INV_SHELF_TYPE_NORMALParameter, c_FLAG_NOParameter);
        }
        public ObjectResult<tbm_BillingClient> GetTbm_BillingClient(string billingClientCode)
        {
    
            ObjectParameter billingClientCodeParameter;
    
            if (billingClientCode != null)
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", billingClientCode);
            }
            else
            {
                billingClientCodeParameter = new ObjectParameter("BillingClientCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_BillingClient>("GetTbm_BillingClient", billingClientCodeParameter);
        }
        public ObjectResult<tbm_BillingClient> UpdateBillingClient(string xmlBillingClient)
        {
    
            ObjectParameter xmlBillingClientParameter;
    
            if (xmlBillingClient != null)
            {
                xmlBillingClientParameter = new ObjectParameter("xmlBillingClient", xmlBillingClient);
            }
            else
            {
                xmlBillingClientParameter = new ObjectParameter("xmlBillingClient", typeof(string));
            }
            return base.ExecuteFunction<tbm_BillingClient>("UpdateBillingClient", xmlBillingClientParameter);
        }
        public ObjectResult<tbm_Bank> GetTbm_Bank()
        {
            return base.ExecuteFunction<tbm_Bank>("GetTbm_Bank");
        }
        public ObjectResult<tbm_BankBranch> GetTbm_BankBranch(string bankCode)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_BankBranch>("GetTbm_BankBranch", bankCodeParameter);
        }
        public ObjectResult<tbm_BillingType> GetBillingTypeOneTimeList(string billingServiceTypeCode)
        {
    
            ObjectParameter billingServiceTypeCodeParameter;
    
            if (billingServiceTypeCode != null)
            {
                billingServiceTypeCodeParameter = new ObjectParameter("BillingServiceTypeCode", billingServiceTypeCode);
            }
            else
            {
                billingServiceTypeCodeParameter = new ObjectParameter("BillingServiceTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_BillingType>("GetBillingTypeOneTimeList", billingServiceTypeCodeParameter);
        }
        public ObjectResult<tbm_Shelf> GetTbm_Shelf(string pShelfNo)
        {
    
            ObjectParameter pShelfNoParameter;
    
            if (pShelfNo != null)
            {
                pShelfNoParameter = new ObjectParameter("pShelfNo", pShelfNo);
            }
            else
            {
                pShelfNoParameter = new ObjectParameter("pShelfNo", typeof(string));
            }
            return base.ExecuteFunction<tbm_Shelf>("GetTbm_Shelf", pShelfNoParameter);
        }
        public ObjectResult<tbm_SecomBankAccount> GetTbm_SecomBankAccount(Nullable<int> secomAccountID)
        {
    
            ObjectParameter secomAccountIDParameter;
    
            if (secomAccountID.HasValue)
            {
                secomAccountIDParameter = new ObjectParameter("SecomAccountID", secomAccountID);
            }
            else
            {
                secomAccountIDParameter = new ObjectParameter("SecomAccountID", typeof(int));
            }
            return base.ExecuteFunction<tbm_SecomBankAccount>("GetTbm_SecomBankAccount", secomAccountIDParameter);
        }
        public ObjectResult<tbm_CreditCardCompany> GetTbm_CreditCardCompany()
        {
            return base.ExecuteFunction<tbm_CreditCardCompany>("GetTbm_CreditCardCompany");
        }
        public ObjectResult<tbm_PermissionDetail> CopyPermissionFromGroupToIndividual(string permissionGroupCode, string permissionIndividualCode, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter permissionGroupCodeParameter;
    
            if (permissionGroupCode != null)
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", permissionGroupCode);
            }
            else
            {
                permissionGroupCodeParameter = new ObjectParameter("PermissionGroupCode", typeof(string));
            }
    
            ObjectParameter permissionIndividualCodeParameter;
    
            if (permissionIndividualCode != null)
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", permissionIndividualCode);
            }
            else
            {
                permissionIndividualCodeParameter = new ObjectParameter("PermissionIndividualCode", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<tbm_PermissionDetail>("CopyPermissionFromGroupToIndividual", permissionGroupCodeParameter, permissionIndividualCodeParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<tbm_CustomerGroup> DeleteTbm_CustomerGroup(string pGroupCode, string pCustCode)
        {
    
            ObjectParameter pGroupCodeParameter;
    
            if (pGroupCode != null)
            {
                pGroupCodeParameter = new ObjectParameter("pGroupCode", pGroupCode);
            }
            else
            {
                pGroupCodeParameter = new ObjectParameter("pGroupCode", typeof(string));
            }
    
            ObjectParameter pCustCodeParameter;
    
            if (pCustCode != null)
            {
                pCustCodeParameter = new ObjectParameter("pCustCode", pCustCode);
            }
            else
            {
                pCustCodeParameter = new ObjectParameter("pCustCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_CustomerGroup>("DeleteTbm_CustomerGroup", pGroupCodeParameter, pCustCodeParameter);
        }
        public ObjectResult<tbm_AutoTransferScheduleList> GetTbm_AutoTransferScheduleList(string bankCode, string autoTransferDate)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
    
            ObjectParameter autoTransferDateParameter;
    
            if (autoTransferDate != null)
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", autoTransferDate);
            }
            else
            {
                autoTransferDateParameter = new ObjectParameter("AutoTransferDate", typeof(string));
            }
            return base.ExecuteFunction<tbm_AutoTransferScheduleList>("GetTbm_AutoTransferScheduleList", bankCodeParameter, autoTransferDateParameter);
        }
        public ObjectResult<tbm_SecomBankAccount> GetSecomBankAccountForAutoTransfer(string bankCode)
        {
    
            ObjectParameter bankCodeParameter;
    
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_SecomBankAccount>("GetSecomBankAccountForAutoTransfer", bankCodeParameter);
        }
        public ObjectResult<dtBankBranch> GetBankBranch()
        {
            return base.ExecuteFunction<dtBankBranch>("GetBankBranch");
        }
        public ObjectResult<doInstrumentData> GetInstrumentListForView(string xml0, string c_LINE_UP_TYPE, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPEParameter;
    
            if (c_LINE_UP_TYPE != null)
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", c_LINE_UP_TYPE);
            }
            else
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doInstrumentData>("GetInstrumentListForView", xml0Parameter, c_LINE_UP_TYPEParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbm_BillingType> GetBillingTypeList(string billingServiceTypeCode)
        {
    
            ObjectParameter billingServiceTypeCodeParameter;
    
            if (billingServiceTypeCode != null)
            {
                billingServiceTypeCodeParameter = new ObjectParameter("BillingServiceTypeCode", billingServiceTypeCode);
            }
            else
            {
                billingServiceTypeCodeParameter = new ObjectParameter("BillingServiceTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_BillingType>("GetBillingTypeList", billingServiceTypeCodeParameter);
        }
        public ObjectResult<tbm_Bank> GetAutoTransferBank()
        {
            return base.ExecuteFunction<tbm_Bank>("GetAutoTransferBank");
        }
        public ObjectResult<doSECOMAccount> GetSECOMAccountAutoTransfer()
        {
            return base.ExecuteFunction<doSECOMAccount>("GetSECOMAccountAutoTransfer");
        }
        public ObjectResult<doSECOMAccount> GetSECOMAccountBankTransfer()
        {
            return base.ExecuteFunction<doSECOMAccount>("GetSECOMAccountBankTransfer");
        }
        public ObjectResult<doSECOMAccount> GetSECOMAccountDummyTransfer()
        {
            return base.ExecuteFunction<doSECOMAccount>("GetSECOMAccountDummyTransfer");
        }
        public ObjectResult<doSECOMAccount> GetSECOMAccount()
        {
            return base.ExecuteFunction<doSECOMAccount>("GetSECOMAccount");
        }
        public ObjectResult<string> GetShelfNoDuplicateArea(string strInstrumentCode, string strAreaCode, string c_INV_SHELF_TYPE_NORMAL, Nullable<bool> c_FLAG_NO)
        {
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter strAreaCodeParameter;
    
            if (strAreaCode != null)
            {
                strAreaCodeParameter = new ObjectParameter("strAreaCode", strAreaCode);
            }
            else
            {
                strAreaCodeParameter = new ObjectParameter("strAreaCode", typeof(string));
            }
    
            ObjectParameter c_INV_SHELF_TYPE_NORMALParameter;
    
            if (c_INV_SHELF_TYPE_NORMAL != null)
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", c_INV_SHELF_TYPE_NORMAL);
            }
            else
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", typeof(string));
            }
    
            ObjectParameter c_FLAG_NOParameter;
    
            if (c_FLAG_NO.HasValue)
            {
                c_FLAG_NOParameter = new ObjectParameter("C_FLAG_NO", c_FLAG_NO);
            }
            else
            {
                c_FLAG_NOParameter = new ObjectParameter("C_FLAG_NO", typeof(bool));
            }
            return base.ExecuteFunction<string>("GetShelfNoDuplicateArea", strInstrumentCodeParameter, strAreaCodeParameter, c_INV_SHELF_TYPE_NORMALParameter, c_FLAG_NOParameter);
        }
        public ObjectResult<string> GetInstrumentCode(string instrumentCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetInstrumentCode", instrumentCodeParameter);
        }
        public ObjectResult<string> GetInstrumentCodeAll(string instrumentCode, string expansionTypeCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter expansionTypeCodeParameter;
    
            if (expansionTypeCode != null)
            {
                expansionTypeCodeParameter = new ObjectParameter("ExpansionTypeCode", expansionTypeCode);
            }
            else
            {
                expansionTypeCodeParameter = new ObjectParameter("ExpansionTypeCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetInstrumentCodeAll", instrumentCodeParameter, expansionTypeCodeParameter);
        }
        public ObjectResult<tbm_Employee> GetEmployeeByEmpNo(string empNo)
        {
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbm_Employee>("GetEmployeeByEmpNo", empNoParameter);
        }

        #endregion

    }
}
