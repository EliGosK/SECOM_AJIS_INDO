//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Inventory
{
    public partial class BizIVDataEntities
    {
        #region Methods
    		public virtual List<doOffice> GetInventoryHeadOffice(string pC_OFFICE_LOGISTIC_HEAD)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventoryHeadOffice(pC_OFFICE_LOGISTIC_HEAD).ToList();
    		}
    		public virtual List<tbt_InventorySlip> InsertTbt_InventorySlip(string xmlTbt_InventorySlilp)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventorySlip(xmlTbt_InventorySlilp).ToList();
    		}
    		public virtual List<doPurchaseOrder> GetPurchaserOrderForMaintain(string c_PURCHASE_ORDER_STATUS, string c_TRANSPORT_TYPE, string purchaseOrderNo, string purchaseOrderStatus, string supplierCode, string transportType, string supplierName, Nullable<System.DateTime> poIssueDateFrom, Nullable<System.DateTime> poIssueDateTo, Nullable<System.DateTime> expectedDeliveryDateFrom, Nullable<System.DateTime> expectedDeliveryDateTo, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetPurchaserOrderForMaintain(c_PURCHASE_ORDER_STATUS, c_TRANSPORT_TYPE, purchaseOrderNo, purchaseOrderStatus, supplierCode, transportType, supplierName, poIssueDateFrom, poIssueDateTo, expectedDeliveryDateFrom, expectedDeliveryDateTo, instrumentCode).ToList();
    		}
    		public virtual List<doPurchaseOrderDetail> GetPurchaseOrderDetailForRegisterStockIn(string strPurchaseOrderNo, string c_CURRENCY_TYPE, string c_PURCHASE_ORDER_STATUS, string c_TRANSPORT_TYPE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetPurchaseOrderDetailForRegisterStockIn(strPurchaseOrderNo, c_CURRENCY_TYPE, c_PURCHASE_ORDER_STATUS, c_TRANSPORT_TYPE).ToList();
    		}
    		public virtual List<tbs_InventoryRunningSlipNo> GetTbs_InventorySlipRunningNo(string month, string year, string officeCode, string slipid)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbs_InventorySlipRunningNo(month, year, officeCode, slipid).ToList();
    		}
    		public virtual List<tbs_InventoryRunningSlipNo> UpdateTbs_InventorySlipRunningNo(string month, string year, string officeCode, string slipid, string runningNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbs_InventorySlipRunningNo(month, year, officeCode, slipid, runningNo).ToList();
    		}
    		public virtual List<tbs_InventoryRunningSlipNo> InsertTbs_InventorySlipRunningNo(string runningNo, string month, string year, string officeCode, string slipid)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbs_InventorySlipRunningNo(runningNo, month, year, officeCode, slipid).ToList();
    		}
    		public virtual List<tbt_InventorySlipDetail> InsertTbt_InventorySlipDetail(string xmlTbt_InventorySlipDetail)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventorySlipDetail(xmlTbt_InventorySlipDetail).ToList();
    		}
    		public virtual List<tbt_PurchaseOrderDetail> UpdateTbt_PurchaseOrderDetail(string xmlPurchasOrderDetail)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_PurchaseOrderDetail(xmlPurchasOrderDetail).ToList();
    		}
    		public virtual List<tbt_PurchaseOrder> UpdateTbt_PurchaseOrder(string xmlPurchaseOrder)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_PurchaseOrder(xmlPurchaseOrder).ToList();
    		}
    		public virtual List<tbt_PurchaseOrder> GetTbt_PurchaseOrder(string purchaseOrderNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_PurchaseOrder(purchaseOrderNo).ToList();
    		}
    		public virtual List<tbt_PurchaseOrderDetail> GetTbt_PurchaseOrderDetail(string purchaseOrderNo, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_PurchaseOrderDetail(purchaseOrderNo, instrumentCode).ToList();
    		}
    		public virtual List<tbt_InventoryCurrent> GetTbt_InventoryCurrent(string officeCode, string locationCode, string areaCode, string shelfNo, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventoryCurrent(officeCode, locationCode, areaCode, shelfNo, instrumentCode).ToList();
    		}
    		public virtual List<tbt_InventoryCurrent> UpdateTbt_InventoryCurrent(string xmlTbt_InventoryCurrent)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventoryCurrent(xmlTbt_InventoryCurrent).ToList();
    		}
    		public virtual List<doInventorySlipDetailList> GetInventorySlipDetailForSearch(string slipNo, string c_INV_STOCKIN_TYPE, string c_INV_REGISTER_ASSET, string c_INV_AREA, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventorySlipDetailForSearch(slipNo, c_INV_STOCKIN_TYPE, c_INV_REGISTER_ASSET, c_INV_AREA, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doInventorySlipList> GetInventorySlipForSearch(string slipNo, string purchaseOrderNo, string stockInFlag, string deliveryOrderNo, Nullable<System.DateTime> stockInDateFrom, Nullable<System.DateTime> stockInDateTo, string registerAssetFlag, string memo, string c_INV_STOCKIN_TYPE, string c_INV_REGISTER_ASSET, string c_INV_STOCKIN_TYPE_PURCHASE, string c_INV_STOCKIN_TYPE_SPECIAL)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventorySlipForSearch(slipNo, purchaseOrderNo, stockInFlag, deliveryOrderNo, stockInDateFrom, stockInDateTo, registerAssetFlag, memo, c_INV_STOCKIN_TYPE, c_INV_REGISTER_ASSET, c_INV_STOCKIN_TYPE_PURCHASE, c_INV_STOCKIN_TYPE_SPECIAL).ToList();
    		}
    		public virtual List<tbt_InventorySlip> GetTbt_InventorySlip(string slipNo, string installationSlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventorySlip(slipNo, installationSlipNo).ToList();
    		}
    		public virtual List<tbt_InventorySlipDetail> DeleteTbt_InventorySlipDetail(string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.DeleteTbt_InventorySlipDetail(slipNo).ToList();
    		}
    		public virtual List<tbt_InventorySlip> DeleteTbt_InventorySlip(string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.DeleteTbt_InventorySlip(slipNo).ToList();
    		}
    		public virtual List<doInventorySlipDetailList> GetInventorySlipDetailForRegister(string slipNo, string c_INV_STOCKIN_TYPE, string c_INV_REGISTER_ASSET, string c_INV_AREA, string c_INV_REGISTER_ASSET_UNREGISTER, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventorySlipDetailForRegister(slipNo, c_INV_STOCKIN_TYPE, c_INV_REGISTER_ASSET, c_INV_AREA, c_INV_REGISTER_ASSET_UNREGISTER, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<tbt_InventoryCurrent> InsertTbt_InventoryCurrent(string xmlTbt_InventoryCurrent)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryCurrent(xmlTbt_InventoryCurrent).ToList();
    		}
    		public virtual List<tbt_AccountSampleInprocess> UpdateTbt_AccountSampleInProcess(string xmlTbt_AccountSampleInProcess)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_AccountSampleInProcess(xmlTbt_AccountSampleInProcess).ToList();
    		}
    		public virtual List<tbt_AccountSampleInprocess> GetTbt_AccountSampleInProcess(string locationCode, string contractCode, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_AccountSampleInProcess(locationCode, contractCode, instrumentCode).ToList();
    		}
    		public virtual List<tbt_AccountSampleInstock> UpdateTbt_AccountSampleInStock(string xmlTbt_AccountSampleInStock)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_AccountSampleInStock(xmlTbt_AccountSampleInStock).ToList();
    		}
    		public virtual List<tbt_AccountSampleInstock> GetTbt_AccountSampleInStock(string instrumentCode, string locationCode, string officeCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_AccountSampleInStock(instrumentCode, locationCode, officeCode).ToList();
    		}
    		public virtual List<tbt_AccountSampleInprocess> InsertTbt_AccountSampleInProcess(string xmlTbt_AccountSampleInProcess)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_AccountSampleInProcess(xmlTbt_AccountSampleInProcess).ToList();
    		}
    		public virtual List<tbt_AccountInstalled> GetTbt_AccountInstalled(string officeCode, string locationCode, string instrumentCode, string lotNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_AccountInstalled(officeCode, locationCode, instrumentCode, lotNo).ToList();
    		}
    		public virtual List<tbt_AccountInprocess> InsertTbt_AccountInProcess(string xmlTbt_AccountInProcess)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_AccountInProcess(xmlTbt_AccountInProcess).ToList();
    		}
    		public virtual List<tbt_AccountSampleInstock> InsertTbt_AccountSampleInStock(string xmlTbt_AccountSampleInStock)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_AccountSampleInStock(xmlTbt_AccountSampleInStock).ToList();
    		}
    		public virtual List<tbt_AccountInstock> GetTbt_AccountInStock(string instrumentCode, string locationCode, string officecode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_AccountInStock(instrumentCode, locationCode, officecode).ToList();
    		}
    		public virtual List<doCalPriceCondition> GetMovingAveragePriceCondition(string strOfficeCode, string strContractCode, string strProjectCode, string strInstrumentCode, string strArrayLocationCode, string strLotNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetMovingAveragePriceCondition(strOfficeCode, strContractCode, strProjectCode, strInstrumentCode, strArrayLocationCode, strLotNo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<tbt_AccountInprocess> GetTbt_AccountInProcess(string locationCode, string contractCode, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_AccountInProcess(locationCode, contractCode, instrumentCode).ToList();
    		}
    		public virtual List<tbt_AccountInprocess> UpdateTbt_AccountInProcess(string xmlTbt_AccountInProcess)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_AccountInProcess(xmlTbt_AccountInProcess).ToList();
    		}
    		public virtual List<tbt_AccountInstock> UpdateTbt_AccountInStock(string xmlTbt_AccountInStock)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_AccountInStock(xmlTbt_AccountInStock).ToList();
    		}
    		public virtual List<tbt_AccountInstock> InsertTbt_AccountInStock(string xmlTbt_AccountInStock)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_AccountInStock(xmlTbt_AccountInStock).ToList();
    		}
    		public virtual List<tbt_AccountInstock> UpdateMovingAveragePriceForInStockGroup(Nullable<decimal> decMovingAveragePrice, string c_INV_LOC_INSTOCK, string c_INV_LOC_TRANSFER, string strInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateMovingAveragePriceForInStockGroup(decMovingAveragePrice, c_INV_LOC_INSTOCK, c_INV_LOC_TRANSFER, strInstrumentCode).ToList();
    		}
    		public virtual List<tbt_AccountInstock> UpdateMovingAveragePriceForRepairingGroup(string c_INV_LOC_REPAIR_REQUEST, string c_INV_LOC_REPAIRING, string c_INV_LOC_REPAIR_RETURN, Nullable<decimal> decMovingAveragePrice, string strOfficeCode, string strInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateMovingAveragePriceForRepairingGroup(c_INV_LOC_REPAIR_REQUEST, c_INV_LOC_REPAIRING, c_INV_LOC_REPAIR_RETURN, decMovingAveragePrice, strOfficeCode, strInstrumentCode).ToList();
    		}
    		public virtual List<tbt_AccountInprocess> UpdateMovingAveragePriceForWIPGroup(string strProjectCode, Nullable<decimal> decMovingAveragePrice, string strInstrumentCode, string strContractCode, string c_INV_LOC_PARTIAL, string c_INV_LOC_PROJECT_WIP, string c_INV_LOC_WIP, string c_INV_LOC_UNOPERATED_WIP)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateMovingAveragePriceForWIPGroup(strProjectCode, decMovingAveragePrice, strInstrumentCode, strContractCode, c_INV_LOC_PARTIAL, c_INV_LOC_PROJECT_WIP, c_INV_LOC_WIP, c_INV_LOC_UNOPERATED_WIP).ToList();
    		}
    		public virtual List<tbs_PurchaseOrderRunningNo> GetTbs_PurchaseOrderRunningNo(string yearCode, string monthCode, string nationCodeCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbs_PurchaseOrderRunningNo(yearCode, monthCode, nationCodeCode).ToList();
    		}
    		public virtual List<tbs_PurchaseOrderRunningNo> UpdateTbs_PurchaseOrderRunningNo(string yearCode, string monthCode, string nationCodeCode, string strRunningNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbs_PurchaseOrderRunningNo(yearCode, monthCode, nationCodeCode, strRunningNo).ToList();
    		}
    		public virtual List<tbs_PurchaseOrderRunningNo> InsertTbs_PurchaseOrderRunningNo(string yearCode, string monthCode, string nationCodeCode, string runningNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbs_PurchaseOrderRunningNo(yearCode, monthCode, nationCodeCode, runningNo).ToList();
    		}
    		public virtual List<tbt_PurchaseOrder> InsertTbt_PurchaseOrder(string xml_Tbt_PurchaseOrder)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_PurchaseOrder(xml_Tbt_PurchaseOrder).ToList();
    		}
    		public virtual List<tbt_PurchaseOrderDetail> InsertTbt_PurchaseOrderDetail(string xml_Tbt_PurchaseOrderDetail)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_PurchaseOrderDetail(xml_Tbt_PurchaseOrderDetail).ToList();
    		}
    		public virtual List<doFIFOInstrumentPrice> GetFIFOInstrumentPrice(Nullable<int> intTransferQty, string strOfficeCode, string strLocationCode, string strInstrumentCode, Nullable<int> intPrevInstrumentQty, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetFIFOInstrumentPrice(intTransferQty, strOfficeCode, strLocationCode, strInstrumentCode, intPrevInstrumentQty, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<Nullable<int>> CheckNewInstrument(string slipNo, string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_DEMO)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckNewInstrument(slipNo, c_INV_AREA_NEW_SALE, c_INV_AREA_NEW_RENTAL, c_INV_AREA_NEW_DEMO).ToList();
    		}
    		public virtual List<doGroupNewInstrument> GetGroupNewInstrument(string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_DEMO, string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetGroupNewInstrument(c_INV_AREA_NEW_SALE, c_INV_AREA_NEW_RENTAL, c_INV_AREA_NEW_DEMO, slipNo).ToList();
    		}
    		public virtual List<Nullable<int>> CheckSecondhandInstrument(string strInventorySlipNo, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_LENDING_DEMO, string c_INV_AREA_SE_HANDLING_DEMO)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckSecondhandInstrument(strInventorySlipNo, c_INV_AREA_SE_RENTAL, c_INV_AREA_SE_LENDING_DEMO, c_INV_AREA_SE_HANDLING_DEMO).ToList();
    		}
    		public virtual List<doGroupSecondhandInstrument> GetGroupSecondhandInstrument(string strInventorySlipNo, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_HANDLING_DEMO, string c_INV_AREA_SE_LENDING_DEMO)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetGroupSecondhandInstrument(strInventorySlipNo, c_INV_AREA_SE_RENTAL, c_INV_AREA_SE_HANDLING_DEMO, c_INV_AREA_SE_LENDING_DEMO).ToList();
    		}
    		public virtual List<doFIFOInstrument> GetFIFOInstrument(string strOfficeCode, string strLocationCode, string strInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetFIFOInstrument(strOfficeCode, strLocationCode, strInstrumentCode).ToList();
    		}
    		public virtual List<tbt_AccountInstalled> UpdateTbt_AccountInstalled(string xmltbt_AccountInstalled)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_AccountInstalled(xmltbt_AccountInstalled).ToList();
    		}
    		public virtual List<tbt_AccountInstalled> InsertTbt_AccountInstalled(string xmltbt_AccountInstalled)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_AccountInstalled(xmltbt_AccountInstalled).ToList();
    		}
    		public virtual List<Nullable<int>> CheckSampleInstrument(string strInventorySlipNo, string c_INV_AREA_NEW_SAMPLE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckSampleInstrument(strInventorySlipNo, c_INV_AREA_NEW_SAMPLE).ToList();
    		}
    		public virtual List<doGroupSampleInstrument> GetGroupSampleInstrument(string strInventorySlipNo, string c_INV_AREA_NEW_SAMPLE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetGroupSampleInstrument(strInventorySlipNo, c_INV_AREA_NEW_SAMPLE).ToList();
    		}
    		public virtual List<tbt_AccountStockMoving> InsertAccountStockMoving(string xmlTbt_AccountStockMoving)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertAccountStockMoving(xmlTbt_AccountStockMoving).ToList();
    		}
    		public virtual List<doOffice> GetInventoryOffice(string c_OFFICELOGISTIC_NONE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventoryOffice(c_OFFICELOGISTIC_NONE).ToList();
    		}
    		public virtual List<Nullable<bool>> CheckExistSummaryAsset(string strYearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckExistSummaryAsset(strYearMonth).ToList();
    		}
    		public virtual List<doInventorySlip> SearchInventorySlip(string c_INV_LOC, string inventorySlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.SearchInventorySlip(c_INV_LOC, inventorySlipNo).ToList();
    		}
    		public virtual List<doInventorySlipDetail> SearchInventorySlipDetail(string c_INV_AREA, string inventorySlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.SearchInventorySlipDetail(c_INV_AREA, inventorySlipNo).ToList();
    		}
    		public virtual List<Nullable<bool>> CheckExistSummaryInOutHeadOffice(Nullable<System.DateTime> checkDate)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckExistSummaryInOutHeadOffice(checkDate).ToList();
    		}
    		public virtual List<tbt_InventorySlipDetail> GetTbt_InventorySlipDetail(string slipNo, Nullable<int> runningNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventorySlipDetail(slipNo, runningNo).ToList();
    		}
    		public virtual int UpdateTbt_InventoryCurrentByLocation(string sourceOfficeCode, string destinationOfficeCode, string sourceLocationCode, string destinationLocationCode, string sourceAreaCode, string destinationAreaCode, string sourceShelfNo, string destinationShelfNo, string instrumentCode, Nullable<int> transferQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventoryCurrentByLocation(sourceOfficeCode, destinationOfficeCode, sourceLocationCode, destinationLocationCode, sourceAreaCode, destinationAreaCode, sourceShelfNo, destinationShelfNo, instrumentCode, transferQty, createDate, createBy, updateDate, updateBy);
    		}
    		public virtual List<tbt_InventorySlip> UpdateTbt_InventorySlip(string xmlTbt_InventorySlip)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventorySlip(xmlTbt_InventorySlip).ToList();
    		}
    		public virtual List<dtBatchProcessResult> GenerateSummaryInventoryInOutReport(Nullable<System.DateTime> tRANSFERMONTH, Nullable<System.DateTime> dateBatchDate, string c_INV_LOC_BUFFER, string c_INV_LOC_INSTOCK, string c_INV_LOC_PRE_ELIMINATION, string c_INV_LOC_REPAIR_REQUEST, string c_INV_LOC_REPAIR_RETURN, string c_INV_LOC_RETURN_WIP, string c_INV_LOC_RETURNED, string c_INV_LOC_SPECIAL, string c_INV_LOC_TRANSFER, string c_INV_LOC_UNOPERATED_WIP, string c_INV_LOC_USER, string c_INV_LOC_WAITING_RETURN, string c_INV_LOC_WIP, string c_INV_SLIP_STATUS_COMPLETE, string c_INV_TRANSFERTYPE_CANCEL_INSTALLATION, string c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION, string c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, string c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, string c_INV_TRANSFERTYPE_COMPLETE_PROJECT, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_TRANSFERTYPE_FIX_ADJUSTMENT, string c_INV_TRANSFERTYPE_PRE_ELIMINATION, string c_INV_TRANSFERTYPE_RECEIVE_RETURNED, string c_INV_TRANSFERTYPE_REPAIR_REQUEST, string c_INV_TRANSFERTYPE_REPAIR_RETURN, string c_INV_TRANSFERTYPE_START_SERVICE, string c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PROJECT, string c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string c_INV_TRANSFERTYPE_TRANSFER_BUFFER, string c_INV_TRANSFERTYPE_TRANSFER_OFFICE, string c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW, string c_RENTAL_INSTALL_TYPE_NEW, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, Nullable<bool> c_FLAG_OFF, Nullable<bool> c_FLAG_ON, string c_INV_LOC_PROJECT_WIP, string c_INV_LOC_PARTIAL_OUT, string c_INV_LOC_REPAIRING, string c_INV_LOC_ELIMINATION)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GenerateSummaryInventoryInOutReport(tRANSFERMONTH, dateBatchDate, c_INV_LOC_BUFFER, c_INV_LOC_INSTOCK, c_INV_LOC_PRE_ELIMINATION, c_INV_LOC_REPAIR_REQUEST, c_INV_LOC_REPAIR_RETURN, c_INV_LOC_RETURN_WIP, c_INV_LOC_RETURNED, c_INV_LOC_SPECIAL, c_INV_LOC_TRANSFER, c_INV_LOC_UNOPERATED_WIP, c_INV_LOC_USER, c_INV_LOC_WAITING_RETURN, c_INV_LOC_WIP, c_INV_SLIP_STATUS_COMPLETE, c_INV_TRANSFERTYPE_CANCEL_INSTALLATION, c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION, c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, c_INV_TRANSFERTYPE_COMPLETE_PROJECT, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, c_INV_TRANSFERTYPE_FIX_ADJUSTMENT, c_INV_TRANSFERTYPE_PRE_ELIMINATION, c_INV_TRANSFERTYPE_RECEIVE_RETURNED, c_INV_TRANSFERTYPE_REPAIR_REQUEST, c_INV_TRANSFERTYPE_REPAIR_RETURN, c_INV_TRANSFERTYPE_START_SERVICE, c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, c_INV_TRANSFERTYPE_STOCKOUT_PROJECT, c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, c_INV_TRANSFERTYPE_TRANSFER_BUFFER, c_INV_TRANSFERTYPE_TRANSFER_OFFICE, c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW, c_RENTAL_INSTALL_TYPE_NEW, c_RENTAL_INSTALL_TYPE_REMOVE_ALL, c_SALE_INSTALL_TYPE_REMOVE_ALL, c_FLAG_OFF, c_FLAG_ON, c_INV_LOC_PROJECT_WIP, c_INV_LOC_PARTIAL_OUT, c_INV_LOC_REPAIRING, c_INV_LOC_ELIMINATION).ToList();
    		}
    		public virtual List<Nullable<int>> CheckFreezedData()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckFreezedData().ToList();
    		}
    		public virtual List<Nullable<int>> CheckStartedStockChecking()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckStartedStockChecking().ToList();
    		}
    		public virtual List<dtBatchProcessResult> GenerateInventorySummaryAsset(string strYearMonth, string c_FUNC_LOGISTIC_HQ, string c_INV_OFFICE_SNR, string c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string c_INV_TRANSFERTYPE_TRANSFER_OFFICE, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_DEMO, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_LENDING_DEMO, string c_INV_AREA_SE_HANDLING_DEMO, string c_INV_SLIP_STATUS_COMPLETE, string c_INV_SLIP_STATUS_TRANSFER, string c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, string c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, string c_INV_TRANSFERTYPE_COMPLETE_MK30, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string c_INV_TRANSFERTYPE_START_SERVICE, string c_INV_TRANSFERTYPE_PRE_ELIMINATION, string c_INV_TRANSFERTYPE_CANCEL_INSTALLATION, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_TRANSFERTYPE_CHECKING_RETURNED, string c_INV_TRANSFERTYPE_REPAIR_REQUEST, string c_INV_TRANSFERTYPE_REPAIR_RETURN, string c_INV_TRANSFERTYPE_TRANSFER_BUFFER, string c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION, string c_SALE_INSTALL_TYPE_ADD, string c_SALE_INSTALL_TYPE_NEW, string c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW, string c_RENTAL_INSTALL_TYPE_NEW, string c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEW, string c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE, string c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP, string c_INV_LOC_WAITING_RETURN, string c_INV_LOC_RETURNED, string c_INV_LOC_INSTOCK, string c_INV_LOC_REPAIRING, string c_INV_LOC_BUFFER, string c_INV_LOC_USER, string c_INV_LOC_PROJECT_WIP, string c_INV_LOC_UNOPERATED_WIP, string c_INV_LOC_WIP, Nullable<bool> c_FLAG_OFF, Nullable<bool> c_FLAG_ON)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GenerateInventorySummaryAsset(strYearMonth, c_FUNC_LOGISTIC_HQ, c_INV_OFFICE_SNR, c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, c_INV_TRANSFERTYPE_TRANSFER_OFFICE, c_INV_AREA_NEW_SAMPLE, c_INV_AREA_NEW_SALE, c_INV_AREA_NEW_RENTAL, c_INV_AREA_NEW_DEMO, c_INV_AREA_SE_RENTAL, c_INV_AREA_SE_LENDING_DEMO, c_INV_AREA_SE_HANDLING_DEMO, c_INV_SLIP_STATUS_COMPLETE, c_INV_SLIP_STATUS_TRANSFER, c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, c_INV_TRANSFERTYPE_COMPLETE_MK30, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, c_INV_TRANSFERTYPE_START_SERVICE, c_INV_TRANSFERTYPE_PRE_ELIMINATION, c_INV_TRANSFERTYPE_CANCEL_INSTALLATION, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, c_INV_TRANSFERTYPE_CHECKING_RETURNED, c_INV_TRANSFERTYPE_REPAIR_REQUEST, c_INV_TRANSFERTYPE_REPAIR_RETURN, c_INV_TRANSFERTYPE_TRANSFER_BUFFER, c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION, c_SALE_INSTALL_TYPE_ADD, c_SALE_INSTALL_TYPE_NEW, c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE, c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW, c_RENTAL_INSTALL_TYPE_NEW, c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEW, c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE, c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE, c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP, c_INV_LOC_WAITING_RETURN, c_INV_LOC_RETURNED, c_INV_LOC_INSTOCK, c_INV_LOC_REPAIRING, c_INV_LOC_BUFFER, c_INV_LOC_USER, c_INV_LOC_PROJECT_WIP, c_INV_LOC_UNOPERATED_WIP, c_INV_LOC_WIP, c_FLAG_OFF, c_FLAG_ON).ToList();
    		}
    		public virtual List<string> GetLotRunningNo(string instrumentCode, string depreciationPeriodForContract, string startYearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetLotRunningNo(instrumentCode, depreciationPeriodForContract, startYearMonth).ToList();
    		}
    		public virtual List<string> GetMaxLotRunningNo(string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetMaxLotRunningNo(instrumentCode).ToList();
    		}
    		public virtual int InsertTbs_LotRunningNo(string instrumentCode, string depreciationPeriodForContract, string startYearMonth, string lotRunningNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbs_LotRunningNo(instrumentCode, depreciationPeriodForContract, startYearMonth, lotRunningNo);
    		}
    		public virtual List<doCompleteStockoutInstrument> GetCompleteStockoutInstrument(string strContractCode, string strInstrumentCode, Nullable<int> intTotalStockoutQty, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_SE_RENTAL, string c_INV_LOC_WIP)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetCompleteStockoutInstrument(strContractCode, strInstrumentCode, intTotalStockoutQty, c_INV_AREA_NEW_RENTAL, c_INV_AREA_NEW_SAMPLE, c_INV_AREA_SE_RENTAL, c_INV_LOC_WIP).ToList();
    		}
    		public virtual List<doDepreciationData> GetDepreciationData(string strInstrumentCode, string strStartYearMonth, Nullable<int> intDepreciationPeriod, string startType, string contractCode, string oCC)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetDepreciationData(strInstrumentCode, strStartYearMonth, intDepreciationPeriod, startType, contractCode, oCC).ToList();
    		}
    		public virtual List<Nullable<bool>> CheckExistLotRunningNumber(string instrumentCode, string depreciationPeriodForContract, string startYearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckExistLotRunningNumber(instrumentCode, depreciationPeriodForContract, startYearMonth).ToList();
    		}
    		public virtual int UpdateMovingAveragePriceForInstalled(Nullable<decimal> decMovingAveragePrice, string strInstrumentCode, string strLotNo, string c_CONFIG_SCRAP_VALUE, Nullable<System.DateTime> updateDate, string updateBy, string pGUID, string pScreenID)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateMovingAveragePriceForInstalled(decMovingAveragePrice, strInstrumentCode, strLotNo, c_CONFIG_SCRAP_VALUE, updateDate, updateBy, pGUID, pScreenID);
    		}
    		public virtual int InsertTbt_InventoryDepreciation(string lotNo, string instrumentCode, Nullable<decimal> accquisitionCost, string startDepreciationYearMonth, Nullable<int> totalNumDepreciation, Nullable<int> lastNumDepreciation, string lastDepreciationYearMonth, Nullable<decimal> accumulateDepreciationAmount, Nullable<decimal> monthlyDepreciationAmount, Nullable<decimal> lastDepreciationAmount, Nullable<int> totalNumDepreciationRevenue, Nullable<int> lastNumDepreciationRevenue, string lastDepreciationYearMonthRevenue, Nullable<decimal> accumulateDepreciationAmountRevenue, Nullable<decimal> monthlyDepreciationAmountRevenue, Nullable<decimal> lastDepreciationAmountRevenue, Nullable<System.DateTime> createDate, string createBy)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryDepreciation(lotNo, instrumentCode, accquisitionCost, startDepreciationYearMonth, totalNumDepreciation, lastNumDepreciation, lastDepreciationYearMonth, accumulateDepreciationAmount, monthlyDepreciationAmount, lastDepreciationAmount, totalNumDepreciationRevenue, lastNumDepreciationRevenue, lastDepreciationYearMonthRevenue, accumulateDepreciationAmountRevenue, monthlyDepreciationAmountRevenue, lastDepreciationAmountRevenue, createDate, createBy);
    		}
    		public virtual List<Nullable<int>> GetMovingNo()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetMovingNo().ToList();
    		}
    		public virtual List<doResultGetReturnSlip> GetReturnedSlip(string strInstallationSlipNo, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_SLIP_STATUS_WAIT_FOR_RETURN)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetReturnedSlip(strInstallationSlipNo, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE, c_SLIP_STATUS_WAIT_FOR_RETURN).ToList();
    		}
    		public virtual List<doResultReturnInstrument> GetReturnInstrumentByInstallationSlip(string strInstallationSlipNo, string c_INV_RETURNED, string c_INV_LOC_ELIMINATION, string c_INV_SLIP_STATUS_TRANSFER, string c_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetReturnInstrumentByInstallationSlip(strInstallationSlipNo, c_INV_RETURNED, c_INV_LOC_ELIMINATION, c_INV_SLIP_STATUS_TRANSFER, c_INV_AREA).ToList();
    		}
    		public virtual List<doCompleteRemoveInstrument> GetCompleteRemoveInstrument(string strContractCode, string strInstrumentCode, Nullable<int> intTotalStockoutQty, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_SE_RENTAL, string c_INV_LOC_UNOPERATED_WIP)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetCompleteRemoveInstrument(strContractCode, strInstrumentCode, intTotalStockoutQty, c_INV_AREA_NEW_RENTAL, c_INV_AREA_NEW_SAMPLE, c_INV_AREA_SE_RENTAL, c_INV_LOC_UNOPERATED_WIP).ToList();
    		}
    		public virtual List<doTbt_InventorySlipDetailForView> GetTbt_InventorySlipDetailForView(string strInventorySlipNo, string c_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventorySlipDetailForView(strInventorySlipNo, c_INV_AREA).ToList();
    		}
    		public virtual List<doPurchaseOrderDetail> GetPurchaseOrderDetailForMaintain(string c_CURRENCY_TYPE, string c_PURCHASE_ORDER_STATUS, string c_TRANSPORT_TYPE, string strPurchaseOrder)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetPurchaseOrderDetailForMaintain(c_CURRENCY_TYPE, c_PURCHASE_ORDER_STATUS, c_TRANSPORT_TYPE, strPurchaseOrder).ToList();
    		}
    		public virtual List<tbt_InventorySlip> GetTbt_InventorySlipForReceiveReturn(string strInstallationSlipNo, string c_INV_LOC_RETURNED, string c_INV_SLIP_STATUS_COMPLETE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventorySlipForReceiveReturn(strInstallationSlipNo, c_INV_LOC_RETURNED, c_INV_SLIP_STATUS_COMPLETE).ToList();
    		}
    		public virtual List<tbt_PurchaseOrderDetail> DeleteTbt_PurchaseOrderDetail(string purchaseOrderNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.DeleteTbt_PurchaseOrderDetail(purchaseOrderNo).ToList();
    		}
    		public virtual List<tbt_InventoryProjectWIP> GetProjectWIPInstrument(string strProjectCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetProjectWIPInstrument(strProjectCode).ToList();
    		}
    		public virtual List<doContractUnoperatedInstrument> GetContractUnoperatedInstrument(string strContractCode, string c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, string pC_INV_LOC_WIP, string pC_INV_LOC_UNOPERATED_WIP, string pC_INV_LOC_WAITING_RETURN, string pC_INV_LOC_RETURNED)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetContractUnoperatedInstrument(strContractCode, c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, pC_INV_LOC_WIP, pC_INV_LOC_UNOPERATED_WIP, pC_INV_LOC_WAITING_RETURN, pC_INV_LOC_RETURNED).ToList();
    		}
    		public virtual List<tbt_PurchaseOrder> DeleteTbt_PurchaseOrder(string purchaseOrderNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.DeleteTbt_PurchaseOrder(purchaseOrderNo).ToList();
    		}
    		public virtual List<tbt_InventoryProjectWIP> UpdateTbt_InventoryProjectWIP(string projectCode, string areaCode, string instrumentCode, Nullable<int> addToInstrumentQty)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventoryProjectWIP(projectCode, areaCode, instrumentCode, addToInstrumentQty).ToList();
    		}
    		public virtual List<Nullable<bool>> CheckUpdatedCancelInstallation(string strInstallationSlipNo, string c_INV_TRANSFERTYPE_CANCEL_INSTALLATION)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckUpdatedCancelInstallation(strInstallationSlipNo, c_INV_TRANSFERTYPE_CANCEL_INSTALLATION).ToList();
    		}
    		public virtual List<Nullable<bool>> CheckUpdatedUserAcceptance(string strContractCode, Nullable<System.DateTime> dtpAcceptanceDate, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckUpdatedUserAcceptance(strContractCode, dtpAcceptanceDate, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE).ToList();
    		}
    		public virtual List<doSaleInstrument> GetSaleInstrument(string strContractCode, string strOCC, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetSaleInstrument(strContractCode, strOCC, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29).ToList();
    		}
    		public virtual List<doResultIVS200> GetIVS200(string officeCode, string c_INV_LOC_INSTOCK, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_SALE, string instrumentCode, string instrumentName, string c_CONFIG_WILDCARD, Nullable<bool> haveOrderQty, Nullable<bool> belowSafety, Nullable<bool> minus)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVS200(officeCode, c_INV_LOC_INSTOCK, c_INV_AREA_NEW_SAMPLE, c_INV_AREA_NEW_RENTAL, c_INV_AREA_NEW_SALE, instrumentCode, instrumentName, c_CONFIG_WILDCARD, haveOrderQty, belowSafety, minus).ToList();
    		}
    		public virtual List<tbt_AccountStockMoving> InsertTbt_AccountStockMoving(string xmltbt_AccountStockMoving)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_AccountStockMoving(xmltbt_AccountStockMoving).ToList();
    		}
    		public virtual List<doResultInstallationSlipForStockOut> GetInstallationSlipForStockOut(string pC_RENTAL_INSTALL_TYPE, string pC_SALE_INSTALL_TYPE, string pC_SLIP_STATUS_NOT_STOCK_OUT, string pC_CONFIG_WILDCARD, string pInstallationSlipNo, string pProjectCode, string pContractCode, string pContractTargerName, string pSiteName, Nullable<System.DateTime> pExpectedStockOutDateFrom, Nullable<System.DateTime> pExpectedStockOutDateTo, string pOfficeCode, string pInstallationType)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInstallationSlipForStockOut(pC_RENTAL_INSTALL_TYPE, pC_SALE_INSTALL_TYPE, pC_SLIP_STATUS_NOT_STOCK_OUT, pC_CONFIG_WILDCARD, pInstallationSlipNo, pProjectCode, pContractCode, pContractTargerName, pSiteName, pExpectedStockOutDateFrom, pExpectedStockOutDateTo, pOfficeCode, pInstallationType).ToList();
    		}
    		public virtual List<doContractWIPInstrument> GetContractWIPInstrument(string strInstallationSlipNo, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetContractWIPInstrument(strInstallationSlipNo, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29).ToList();
    		}
    		public virtual List<Nullable<bool>> CheckExistInstrument(string strInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckExistInstrument(strInstrumentCode).ToList();
    		}
    		public virtual List<doResultInstallationDetailForStockOut> GetInstallationDetailForStockOut(string pC_INV_AREA_NEW_SALE, string pC_INV_AREA_NEW_RENTAL, string pC_INV_AREA_NEW_SAMPLE, string pC_INV_AREA_SE_RENTAL, string pC_INST_TYPE_GENERAL, string pSlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInstallationDetailForStockOut(pC_INV_AREA_NEW_SALE, pC_INV_AREA_NEW_RENTAL, pC_INV_AREA_NEW_SAMPLE, pC_INV_AREA_SE_RENTAL, pC_INST_TYPE_GENERAL, pSlipNo).ToList();
    		}
    		public virtual List<doOffice> GetInventorySrinakarinOffice(string office_Code)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventorySrinakarinOffice(office_Code).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingSchedule> GetLastCheckingSchedule()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetLastCheckingSchedule().ToList();
    		}
    		public virtual List<dtCheckingStatusList> GetCheckingStatusList(string pCheckingYear, string pC_INV_CHECKING_STATUS)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetCheckingStatusList(pCheckingYear, pC_INV_CHECKING_STATUS).ToList();
    		}
    		public virtual List<dtOfficeCheckingList> GetOfficeCheckingList(string pC_INV_LOC)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetOfficeCheckingList(pC_INV_LOC).ToList();
    		}
    		public virtual List<dtCheckingYear> GetCheckingYear()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetCheckingYear().ToList();
    		}
    		public virtual List<tbt_AccountInstalled> GetOldestLot(string strOfficeCode, string strLocationCode, string strInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetOldestLot(strOfficeCode, strLocationCode, strInstrumentCode).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingSchedule> GetTbt_InventoryCheckingSchedule(string strYearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventoryCheckingSchedule(strYearMonth).ToList();
    		}
    		public virtual List<doShelfCurrentData> GetShelfCurrentData(string officeCode, string locationCode, string shelfNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetShelfCurrentData(officeCode, locationCode, shelfNo).ToList();
    		}
    		public virtual List<doResultInstallationStockOutForChecking> GetInstallationStockOutForChecking(string pC_FUNC_LOGISTIC_HQ, string pC_INV_AREA_NEW_SALE, string pC_INV_AREA_NEW_RENTAL, string pC_INV_AREA_NEW_SAMPLE, string pC_INV_AREA_SE_RENTAL, string pC_INV_LOC_INSTOCK, string pC_INV_LOC_PROJECT_WIP, string pOfficeCode, string pSlipNo, string pProjectCode, string pInstrumentCode, string pSaleShelfNo, string pRentalShelfNo, string pSampleShelfNo, string pSecondShelfNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInstallationStockOutForChecking(pC_FUNC_LOGISTIC_HQ, pC_INV_AREA_NEW_SALE, pC_INV_AREA_NEW_RENTAL, pC_INV_AREA_NEW_SAMPLE, pC_INV_AREA_SE_RENTAL, pC_INV_LOC_INSTOCK, pC_INV_LOC_PROJECT_WIP, pOfficeCode, pSlipNo, pProjectCode, pInstrumentCode, pSaleShelfNo, pRentalShelfNo, pSampleShelfNo, pSecondShelfNo).ToList();
    		}
    		public virtual List<tbt_InventoryBooking> GetTbt_InventoryBooking(string pContractCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventoryBooking(pContractCode).ToList();
    		}
    		public virtual List<tbt_InventoryBookingDetail> UpdateTbt_InventoryBookingDetail(string xml_doTbt_InventoryBookingDetails)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventoryBookingDetail(xml_doTbt_InventoryBookingDetails).ToList();
    		}
    		public virtual List<tbt_InventoryBookingDetail> GetTbt_InventoryBookingDetail(string pContractCode, string pInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventoryBookingDetail(pContractCode, pInstrumentCode).ToList();
    		}
    		public virtual List<tbt_InventoryBooking> DeleteTbt_InventoryBooking(string pContractCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.DeleteTbt_InventoryBooking(pContractCode).ToList();
    		}
    		public virtual List<tbt_InventoryBookingDetail> DeleteTbt_InventoryBookingDetail(string pContractCode, string pInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.DeleteTbt_InventoryBookingDetail(pContractCode, pInstrumentCode).ToList();
    		}
    		public virtual List<dtSearchInstrumentListResult> SearchInventoryInstrumentListAllShelf(string officeCode, string locationCode, string areaCode, string startShelfNo, string endShelfNo, string instrumentCode, string instrumentName, string c_INV_AREA, string c_CONFIG_WILDCARD, string c_INV_SHELF_NO_NOT_PRICE, string c_INV_AREA_SE_LENDING_DEMO)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.SearchInventoryInstrumentListAllShelf(officeCode, locationCode, areaCode, startShelfNo, endShelfNo, instrumentCode, instrumentName, c_INV_AREA, c_CONFIG_WILDCARD, c_INV_SHELF_NO_NOT_PRICE, c_INV_AREA_SE_LENDING_DEMO).ToList();
    		}
    		public virtual List<doIVR> GetIVR(string pC_INV_STOCKIN_TYPE, string pC_INV_LOC, string pC_INV_AREA, string pInventorySlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR(pC_INV_STOCKIN_TYPE, pC_INV_LOC, pC_INV_AREA, pInventorySlipNo).ToList();
    		}
    		public virtual List<doResultInstallationSlipForStockOut> GetInstallationSlipForPartialStockOutList(string pC_RENTAL_INSTALL_TYPE, string pC_SALE_INSTALL_TYPE, string pC_SLIP_STATUS_NOT_STOCK_OUT, string pC_CONFIG_WILDCARD, string pC_SLIP_STATUS_PARTIAL_STOCK_OUT, string pInstallationSlipNo, string pContractCode, string pContractTargerName, string pSiteName, Nullable<System.DateTime> pExpectedStockOutDateFrom, Nullable<System.DateTime> pExpectedStockOutDateTo, string pOfficeCode, string pInstallationType)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInstallationSlipForPartialStockOutList(pC_RENTAL_INSTALL_TYPE, pC_SALE_INSTALL_TYPE, pC_SLIP_STATUS_NOT_STOCK_OUT, pC_CONFIG_WILDCARD, pC_SLIP_STATUS_PARTIAL_STOCK_OUT, pInstallationSlipNo, pContractCode, pContractTargerName, pSiteName, pExpectedStockOutDateFrom, pExpectedStockOutDateTo, pOfficeCode, pInstallationType).ToList();
    		}
    		public virtual List<doGetShelfOfArea> GetShelfOfArea(string areaCode, string instrumentCode, string c_INV_SHELF_TYPE_NORMAL)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetShelfOfArea(areaCode, instrumentCode, c_INV_SHELF_TYPE_NORMAL).ToList();
    		}
    		public virtual List<doResultGetSumPartialStockOutList> GetSumPartialStockOutList(string pC_INV_SLIP_STATUS_PARTIAL, string pContractCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetSumPartialStockOutList(pC_INV_SLIP_STATUS_PARTIAL, pContractCode).ToList();
    		}
    		public virtual List<tbt_InventoryBooking> InsertTbt_InventoryBooking(string xml_doTbt_InventoryBookings)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryBooking(xml_doTbt_InventoryBookings).ToList();
    		}
    		public virtual List<tbt_InventoryBooking> UpdateTbt_InventoryBooking(string xml_doTbt_InventoryBookings)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventoryBooking(xml_doTbt_InventoryBookings).ToList();
    		}
    		public virtual List<dtCheckingDetailList> GetCheckingDetailList(string pCheckingYearMonth, string pOfficeCode, string pLocationCode, string pAreaCode, string pC_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetCheckingDetailList(pCheckingYearMonth, pOfficeCode, pLocationCode, pAreaCode, pC_INV_AREA).ToList();
    		}
    		public virtual List<dtStockCheckingList> GetStockCheckingList(string pAreaCode, string pCheckingYearMonth, string pInstrumentCode, string pInstrumentName, string pLocationCode, string pOfficeCode, string pShelfNoFrom, string pShelfNoTo, string pC_INV_AREA, string pC_INV_LOC)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockCheckingList(pAreaCode, pCheckingYearMonth, pInstrumentCode, pInstrumentName, pLocationCode, pOfficeCode, pShelfNoFrom, pShelfNoTo, pC_INV_AREA, pC_INV_LOC).ToList();
    		}
    		public virtual List<tbt_InventoryBookingDetail> InsertTbt_InventoryBookingDetail(string xml_doTbt_InventoryBookingDetails)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryBookingDetail(xml_doTbt_InventoryBookingDetails).ToList();
    		}
    		public virtual List<Nullable<System.DateTime>> GetLastBusinessDate_(Nullable<System.DateTime> date)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetLastBusinessDate_(date).ToList();
    		}
    		public virtual int UpdateCalculateDepreciation(Nullable<System.DateTime> pProcessDate, string pEmpNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateCalculateDepreciation(pProcessDate, pEmpNo);
    		}
    		public virtual int FreezeInstrumentDataForStockCheckingProcess(string pCheckingYearMonth, string pC_INV_LOC_INSTOCK, string pC_INV_LOC_PRE_ELIMINATION, string pC_INV_LOC_REPAIRING, Nullable<bool> pC_FLAG_OFF, string pC_INV_CHECKING_STATUS_PREPARING, string pC_INV_SHELF_NO_NOT_PRICE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.FreezeInstrumentDataForStockCheckingProcess(pCheckingYearMonth, pC_INV_LOC_INSTOCK, pC_INV_LOC_PRE_ELIMINATION, pC_INV_LOC_REPAIRING, pC_FLAG_OFF, pC_INV_CHECKING_STATUS_PREPARING, pC_INV_SHELF_NO_NOT_PRICE);
    		}
    		public virtual List<tbt_InventoryCheckingSlip> GetTbt_InventoryCheckingSlip(string pSlipNo, string pCheckingYearMonth, string pLocationCode, string pOfficeCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventoryCheckingSlip(pSlipNo, pCheckingYearMonth, pLocationCode, pOfficeCode).ToList();
    		}
    		public virtual List<doCheckingTempForGenSlip> GetCheckingTempForGenSlip(string pCheckingYearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetCheckingTempForGenSlip(pCheckingYearMonth).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingSlip> InsertTbt_InventoryCheckingSlip(string xml_doTbt_InventoryCheckingSlips)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryCheckingSlip(xml_doTbt_InventoryCheckingSlips).ToList();
    		}
    		public virtual List<doIVR100> GetIVR100(string pC_INV_LOC, string pC_INV_AREA, string pC_CONFIG_SUSPENDFLAG, string pInventorySlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR100(pC_INV_LOC, pC_INV_AREA, pC_CONFIG_SUSPENDFLAG, pInventorySlipNo).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingTemp> GetTbt_InventoryCheckingTemp(string pCheckingYearMonth, string pLocationCode, string pOfficeCode, string pShelfNo, string pAreaCode, string pInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventoryCheckingTemp(pCheckingYearMonth, pLocationCode, pOfficeCode, pShelfNo, pAreaCode, pInstrumentCode).ToList();
    		}
    		public virtual List<RPTdoIVR140> GetIVR140(string strInventorySlipNo, string c_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR140(strInventorySlipNo, c_INV_AREA).ToList();
    		}
    		public virtual List<RPTdoIVR141> GetIVR141(string strInventorySlipNo, string c_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR141(strInventorySlipNo, c_INV_AREA).ToList();
    		}
    		public virtual List<RPTdoIVR142> GetIVR142(string strInventorySlipNo, string c_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR142(strInventorySlipNo, c_INV_AREA).ToList();
    		}
    		public virtual List<RPTdoIVR143> GetIVR143(string strInventorySlipNo, string c_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR143(strInventorySlipNo, c_INV_AREA).ToList();
    		}
    		public virtual List<RPTdoIVR150> GetIVR150(string strYearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR150(strYearMonth).ToList();
    		}
    		public virtual List<doCSVassetAmountAcc> GetExportAssetAmountAcc(string pC_INV_ACCOUNT_CODE_SALE, string pC_INV_ACCOUNT_CODE_SPECIAL, string pC_INV_ACCOUNT_CODE_INSTOCK, string pC_INV_ACCOUNT_CODE_INSTALLED, string pC_INV_ACCOUNT_CODE_ELIMINATE, string pC_INV_ACCOUNT_CODE_ADJUST)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetExportAssetAmountAcc(pC_INV_ACCOUNT_CODE_SALE, pC_INV_ACCOUNT_CODE_SPECIAL, pC_INV_ACCOUNT_CODE_INSTOCK, pC_INV_ACCOUNT_CODE_INSTALLED, pC_INV_ACCOUNT_CODE_ELIMINATE, pC_INV_ACCOUNT_CODE_ADJUST).ToList();
    		}
    		public virtual List<doCSVInvDepreciationAcc> GetExportInvDepreciationAcc(Nullable<System.DateTime> pDateGenerate)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetExportInvDepreciationAcc(pDateGenerate).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingSlipDetail> InsertTbt_InventoryCheckingSlipDetail(string xml_doTbt_InventoryCheckingSlipDetails)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryCheckingSlipDetail(xml_doTbt_InventoryCheckingSlipDetails).ToList();
    		}
    		public virtual List<doIVR110> GetIVR110(string pC_INV_LOC, string pC_INV_AREA, string pC_CONFIG_SUSPENDFLAG, string pInventorySlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR110(pC_INV_LOC, pC_INV_AREA, pC_CONFIG_SUSPENDFLAG, pInventorySlipNo).ToList();
    		}
    		public virtual List<doIVR170> GetIVR170(string pickingListNo, string c_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR170(pickingListNo, c_INV_AREA).ToList();
    		}
    		public virtual List<doIVR190> GetIVR190(string purchaseOrderNo, string c_OFFICELEVEL_HEAD, string c_DEPT_PURCHASE, Nullable<bool> c_FLAG_ON, string c_CURRENCY_TYPE_THB, string c_CURRENCY_TYPE_USD, string c_CURRENCY_TYPE_EUR, string c_CURRENCY_TYPE_YEN)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR190(purchaseOrderNo, c_OFFICELEVEL_HEAD, c_DEPT_PURCHASE, c_FLAG_ON, c_CURRENCY_TYPE_THB, c_CURRENCY_TYPE_USD, c_CURRENCY_TYPE_EUR, c_CURRENCY_TYPE_YEN).ToList();
    		}
    		public virtual List<doIVR191> GetIVR191(string purchaseOrderNo, string c_VAT_THB, string c_UNIT_PCS, string c_OFFICELEVEL_HEAD, string c_DEPT_PURCHASE, Nullable<bool> c_FLAG_ON)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR191(purchaseOrderNo, c_VAT_THB, c_UNIT_PCS, c_OFFICELEVEL_HEAD, c_DEPT_PURCHASE, c_FLAG_ON).ToList();
    		}
    		public virtual List<doResultIVS201> GetIVS201(string pC_INV_LOC, string pC_INV_AREA, string pC_INV_AREA_SHORT, string pC_CONFIG_WILDCARD, string pOfficeCode, string pLocationCode, string pAreaCode, string pShelfNoFrom, string pShelfNoTo, string pInstrumentCode, string pInstrumentName)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVS201(pC_INV_LOC, pC_INV_AREA, pC_INV_AREA_SHORT, pC_CONFIG_WILDCARD, pOfficeCode, pLocationCode, pAreaCode, pShelfNoFrom, pShelfNoTo, pInstrumentCode, pInstrumentName).ToList();
    		}
    		public virtual List<dtResultIVS220> GetIVS220(string pC_INV_AREA, string pC_INV_AREA_SHORT, string pC_INV_SLIP_PREFIX, string pC_INV_TRANSFERTYPE_TRANSFER_AREA, string pC_INV_TRANSFERTYPE_TRANSFER_SHELF, string pC_CONFIG_WILDCARD, string pC_INV_LOC_WAITING_RETURN, string pC_INV_LOC_PROJECT_WIP, string pC_INV_LOC_WIP, string pC_INV_LOC_UNOPERATED_WIP, string pC_INV_LOC_RETURNED, string pC_INV_LOC_RETURN_WIP, string pC_INV_LOC_USER, string pC_INV_LOC_TRANSFER, string pC_INV_LOC_INSTOCK, string pC_INV_LOC_REPAIR_REQUEST, string pC_INV_LOC_REPAIRING, string pC_INV_LOC_REPAIR_RETURN, string pC_INV_SLIP_STATUS_COMPLETE, string pC_INV_SLIP_STATUS_TRANSFER, string pOfficeCode, string pLocationCode, Nullable<System.DateTime> pDateFrom, Nullable<System.DateTime> pDateTo, string pInstrumentCode, string pInstrumentName, string pInventorySlipNo, string pAreaCode, string contractCode, string supplierName, string transferTypeCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVS220(pC_INV_AREA, pC_INV_AREA_SHORT, pC_INV_SLIP_PREFIX, pC_INV_TRANSFERTYPE_TRANSFER_AREA, pC_INV_TRANSFERTYPE_TRANSFER_SHELF, pC_CONFIG_WILDCARD, pC_INV_LOC_WAITING_RETURN, pC_INV_LOC_PROJECT_WIP, pC_INV_LOC_WIP, pC_INV_LOC_UNOPERATED_WIP, pC_INV_LOC_RETURNED, pC_INV_LOC_RETURN_WIP, pC_INV_LOC_USER, pC_INV_LOC_TRANSFER, pC_INV_LOC_INSTOCK, pC_INV_LOC_REPAIR_REQUEST, pC_INV_LOC_REPAIRING, pC_INV_LOC_REPAIR_RETURN, pC_INV_SLIP_STATUS_COMPLETE, pC_INV_SLIP_STATUS_TRANSFER, pOfficeCode, pLocationCode, pDateFrom, pDateTo, pInstrumentCode, pInstrumentName, pInventorySlipNo, pAreaCode, contractCode, supplierName, transferTypeCode).ToList();
    		}
    		public virtual List<dtResultInventorySlipIVS230> GetInventorySlipIVS230(string pC_INV_LOC, string pC_INV_TRANSFERTYPE, string pC_INV_SLIP_STATUS, string pC_INV_TRANSFERTYPE_TRANSFER_AREA, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string pInventorySlipNo, string pSlipStatus, string pOfficeCode, Nullable<System.DateTime> pDateFrom, Nullable<System.DateTime> pDateTo, string pEmpNo, string pProjectCode, string pStockOutType, string contractCode, string instrumentCode, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventorySlipIVS230(pC_INV_LOC, pC_INV_TRANSFERTYPE, pC_INV_SLIP_STATUS, pC_INV_TRANSFERTYPE_TRANSFER_AREA, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, pInventorySlipNo, pSlipStatus, pOfficeCode, pDateFrom, pDateTo, pEmpNo, pProjectCode, pStockOutType, contractCode, instrumentCode, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29).ToList();
    		}
    		public virtual List<dtResultInventorySlipDetail> GetInventorySlipDetail(string pC_INV_AREA, string pInventorySlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInventorySlipDetail(pC_INV_AREA, pInventorySlipNo).ToList();
    		}
    		public virtual List<dtSearchInstallationSlipResult> SearchInstallationSlip(string pC_CONFIG_WILDCARD, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string pInstallationSlipNo, Nullable<System.DateTime> pExpectedStockOutDateFrom, Nullable<System.DateTime> pExpectedStockOutDateTo, string pContractCode, string pProjectCode, string pOperationOfficeCode, string pSubContractorName)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.SearchInstallationSlip(pC_CONFIG_WILDCARD, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, pInstallationSlipNo, pExpectedStockOutDateFrom, pExpectedStockOutDateTo, pContractCode, pProjectCode, pOperationOfficeCode, pSubContractorName).ToList();
    		}
    		public virtual List<dtStockOutByInstallationSlipResult> GetStockOutByInstallationSlip(string pC_INV_AREA, string pInstallSlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockOutByInstallationSlip(pC_INV_AREA, pInstallSlipNo).ToList();
    		}
    		public virtual List<string> GeneratePickingListNo(Nullable<int> pC_INV_PICKING_NO_MINIMUM, Nullable<int> pC_INV_PICKING_NO_MAXIMUM)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GeneratePickingListNo(pC_INV_PICKING_NO_MINIMUM, pC_INV_PICKING_NO_MAXIMUM).ToList();
    		}
    		public virtual List<doIsEmptyShelfResult> IsEmptyShelf(string strShelfNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.IsEmptyShelf(strShelfNo).ToList();
    		}
    		public virtual List<doProjectInformation> GetProjectInformation(string pProjectCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetProjectInformation(pProjectCode).ToList();
    		}
    		public virtual List<string> GenerateInventorySlipNo(Nullable<int> c_INV_SLIP_NO_MAXIMUM, Nullable<int> c_INV_SLIP_NO_MINIMUM, string officeCode, string slipid)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GenerateInventorySlipNo(c_INV_SLIP_NO_MAXIMUM, c_INV_SLIP_NO_MINIMUM, officeCode, slipid).ToList();
    		}
    		public virtual List<string> GeneratePurchaseOrderNo(Nullable<int> c_INV_SLIP_NO_MAXIMUM, Nullable<int> c_INV_SLIP_NO_MINIMUM, string nationCodeCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GeneratePurchaseOrderNo(c_INV_SLIP_NO_MAXIMUM, c_INV_SLIP_NO_MINIMUM, nationCodeCode).ToList();
    		}
    		public virtual List<string> GenerateLotNo(Nullable<int> c_INV_LOT_NO_MAXIMUM, Nullable<int> c_INV_LOT_NO_MINIMUM, string instrumentCode, string depreciationPeriodForContract, string startYearMonth, string startType)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GenerateLotNo(c_INV_LOT_NO_MAXIMUM, c_INV_LOT_NO_MINIMUM, instrumentCode, depreciationPeriodForContract, startYearMonth, startType).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingSchedule> UpdateTbt_InventoryCheckingSchedule(string xml)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventoryCheckingSchedule(xml).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingSchedule> InsertTbt_InventoryCheckingSchedule(string xml)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryCheckingSchedule(xml).ToList();
    		}
    		public virtual List<string> ValidateFreezeInstrumentIVP050()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.ValidateFreezeInstrumentIVP050().ToList();
    		}
    		public virtual List<tbt_InventoryProjectWIP> InsertTbt_InventoryProjectWIP(string xml_doTbt_InventoryProjectWIPs)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryProjectWIP(xml_doTbt_InventoryProjectWIPs).ToList();
    		}
    		public virtual List<tbt_InventoryProjectWIP> GetTbt_InventoryProjectWIP(string pProjectCode, string pAreaCode, string pInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbt_InventoryProjectWIP(pProjectCode, pAreaCode, pInstrumentCode).ToList();
    		}
    		public virtual List<doCSVMovingAssetAcc> ExportMovingAssetAcc(string pC_INV_ACCOUNT_CODE, Nullable<System.DateTime> pDateGenerate)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.ExportMovingAssetAcc(pC_INV_ACCOUNT_CODE, pDateGenerate).ToList();
    		}
    		public virtual List<doCSVOtherFinancialAcc> OtherFinancialAcc(string pC_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string pC_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string pC_INV_TRANSFERTYPE_ELIMINATION, string pC_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string pC_INV_TRANSFERTYPE_FIX_ADJUSTMENT, Nullable<System.DateTime> pDateGenerate)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.OtherFinancialAcc(pC_INV_TRANSFERTYPE_STOCKIN_PURCHASE, pC_INV_TRANSFERTYPE_STOCKIN_SPECIAL, pC_INV_TRANSFERTYPE_ELIMINATION, pC_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, pC_INV_TRANSFERTYPE_FIX_ADJUSTMENT, pDateGenerate).ToList();
    		}
    		public virtual List<doOffice> GetAuthorityOffice(string empNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetAuthorityOffice(empNo).ToList();
    		}
    		public virtual List<tbt_InventorySlipDetail> UpdateTbt_InventorySlipDetail(string xmlTbt_InventorySlipDetail)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventorySlipDetail(xmlTbt_InventorySlipDetail).ToList();
    		}
    		public virtual List<doShelfCurrentData> GetShelfForChecking(string officeCode, string locationCode, string areaCode, string shelfNo, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetShelfForChecking(officeCode, locationCode, areaCode, shelfNo, instrumentCode).ToList();
    		}
    		public virtual List<dtSearchInstrumentListResult> SearchInventoryInstrumentListIVS190(string c_INV_AREA, string c_INV_AREA_SHORT, string officeCode, string locationCode, string areaCodeStr, string shelfType, string startShelfNo, string endShelfNo, string instrumentName, string instrumentCode, string sH_NO_NOT_MOVE_SH, string sH_NO_NOT_PRICE, string transferType, string c_CONFIG_WILDCARD, string c_INV_AREA_SE_LENDING_DEMO)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.SearchInventoryInstrumentListIVS190(c_INV_AREA, c_INV_AREA_SHORT, officeCode, locationCode, areaCodeStr, shelfType, startShelfNo, endShelfNo, instrumentName, instrumentCode, sH_NO_NOT_MOVE_SH, sH_NO_NOT_PRICE, transferType, c_CONFIG_WILDCARD, c_INV_AREA_SE_LENDING_DEMO).ToList();
    		}
    		public virtual List<Nullable<int>> CheckImplementStockChecking()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckImplementStockChecking().ToList();
    		}
    		public virtual List<tbt_InventoryCurrent> DeleteTbt_InventoryCurrent(string officeCode, string locationCode, string areaCode, string shelfNo, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.DeleteTbt_InventoryCurrent(officeCode, locationCode, areaCode, shelfNo, instrumentCode).ToList();
    		}
    		public virtual List<doFIFOInstrument> GetFIFOInstrumentAbsoluteQty(string strOfficeCode, string strLocationCode, string strInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetFIFOInstrumentAbsoluteQty(strOfficeCode, strLocationCode, strInstrumentCode).ToList();
    		}
    		public virtual List<tbt_AccountInstalled> ClearQtyInAllLot(string officeCode, string locationCode, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.ClearQtyInAllLot(officeCode, locationCode, instrumentCode).ToList();
    		}
    		public virtual List<doFIFOInstrument> GetLIFOInstrument(string strOfficeCode, string strLocationCode, string strInstrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetLIFOInstrument(strOfficeCode, strLocationCode, strInstrumentCode).ToList();
    		}
    		public virtual List<Nullable<int>> CheckTransferFromBuffer(string locationCode, string instrumentCode, string c_INV_LOC_BUFFER, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_HANDLING_DEMO, string c_INV_AREA_SE_LENDLING_DEMO)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckTransferFromBuffer(locationCode, instrumentCode, c_INV_LOC_BUFFER, c_INV_AREA_SE_RENTAL, c_INV_AREA_SE_HANDLING_DEMO, c_INV_AREA_SE_LENDLING_DEMO).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingTemp> InsertTbt_InventoryCheckingTemp(string xml_doTbt_InventoryCheckingTemp)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.InsertTbt_InventoryCheckingTemp(xml_doTbt_InventoryCheckingTemp).ToList();
    		}
    		public virtual List<tbt_InventoryCheckingTemp> UpdateTbt_InventoryCheckingTemp(string xml_InventoryCheckingTemp)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateTbt_InventoryCheckingTemp(xml_InventoryCheckingTemp).ToList();
    		}
    		public virtual List<doNormalShelfExistCurrent> GetNormalShelfExistCurrent(string strShelfNo, string c_INV_SHELF_TYPE_NORMAL)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetNormalShelfExistCurrent(strShelfNo, c_INV_SHELF_TYPE_NORMAL).ToList();
    		}
    		public virtual List<doLIFOInstrumentPrice> GetLIFOInstrumentPrice(string strOfficeCode, string strLocationCode, string strInstrumentCode, Nullable<int> intTransferQty, Nullable<int> intPrevInstrumentQty, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetLIFOInstrumentPrice(strOfficeCode, strLocationCode, strInstrumentCode, intTransferQty, intPrevInstrumentQty, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doInstrumentMASale> GetInstrumentForCompleteMASale(string pC_INV_AREA_NEW_SALE, string pC_INV_AREA_NEW_SAMPLE, string pC_INV_LOC_WIP, string pContractCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetInstrumentForCompleteMASale(pC_INV_AREA_NEW_SALE, pC_INV_AREA_NEW_SAMPLE, pC_INV_LOC_WIP, pContractCode).ToList();
    		}
    		public virtual List<tbt_InventorySlip> UpdatePartialToCompleteStatus(string pC_INV_SLIP_STATUS_COMPLETE, string pC_INV_SLIP_STATUS_PARTIAL, string pContractCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdatePartialToCompleteStatus(pC_INV_SLIP_STATUS_COMPLETE, pC_INV_SLIP_STATUS_PARTIAL, pContractCode).ToList();
    		}
    		public virtual List<dtSearchInstrumentListResult> SearchInventoryInstrumentList(string c_INV_AREA, string officeCode, string locationCode, string areaCodeStr, string shelfType, string endShelfNo, string instrumentName, string instrumentCode, string startShelfNo, string c_INV_AREA_SHORT, string c_INV_SHELF_NO_NOT_MOVE_SHELF, string c_INV_SHELF_NO_NOT_PRICE, string excludeAreaCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.SearchInventoryInstrumentList(c_INV_AREA, officeCode, locationCode, areaCodeStr, shelfType, endShelfNo, instrumentName, instrumentCode, startShelfNo, c_INV_AREA_SHORT, c_INV_SHELF_NO_NOT_MOVE_SHELF, c_INV_SHELF_NO_NOT_PRICE, excludeAreaCode).ToList();
    		}
    		public virtual List<Nullable<bool>> CheckExistReturnSaleInstrument(string strInstallationSlipNo, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_LOC_RETURNED)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.CheckExistReturnSaleInstrument(strInstallationSlipNo, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, c_INV_LOC_RETURNED).ToList();
    		}
    		public virtual List<doIVR180> GetIVR180(string pInventorySlipNo, string pC_INV_LOC, string pC_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR180(pInventorySlipNo, pC_INV_LOC, pC_INV_AREA).ToList();
    		}
    		public virtual List<dtInReportHeader> GetStockReport_InReport_Header(string reportType, string slipNoStart, string slipNoEnd, Nullable<System.DateTime> stockInDateStart, Nullable<System.DateTime> stockInDateEnd)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_InReport_Header(reportType, slipNoStart, slipNoEnd, stockInDateStart, stockInDateEnd).ToList();
    		}
    		public virtual List<dtInReportDetail> GetStockReport_InReport_Detail(string reportType, string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_InReport_Detail(reportType, slipNo).ToList();
    		}
    		public virtual List<dtOutReportDetail> GetStockReport_OutReport_Detail(string reportType, string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_OutReport_Detail(reportType, slipNo).ToList();
    		}
    		public virtual List<dtOutReportHeader> GetStockReport_OutReport_Header(string reportType, string slipNoStart, string slipNoEnd, Nullable<System.DateTime> stockOutDateStart, Nullable<System.DateTime> stockOutDateEnd, string contractCode, Nullable<System.DateTime> operateDateStart, Nullable<System.DateTime> operateDateEnd, string custName)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_OutReport_Header(reportType, slipNoStart, slipNoEnd, stockOutDateStart, stockOutDateEnd, contractCode, operateDateStart, operateDateEnd, custName).ToList();
    		}
    		public virtual List<dtReturnReportDetail> GetStockReport_ReturnReport_Detail(string reportType, string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_ReturnReport_Detail(reportType, slipNo).ToList();
    		}
    		public virtual List<dtReturnReportHeader> GetStockReport_ReturnReport_Header(string reportType, string slipNoStart, string slipNoEnd, Nullable<System.DateTime> stockReturnDateStart, Nullable<System.DateTime> stockReturnDateEnd, string contractCode, Nullable<System.DateTime> operateDateStart, Nullable<System.DateTime> operateDateEnd, string custName)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_ReturnReport_Header(reportType, slipNoStart, slipNoEnd, stockReturnDateStart, stockReturnDateEnd, contractCode, operateDateStart, operateDateEnd, custName).ToList();
    		}
    		public virtual List<dtInprocessToInstallReport> GetStockReport_InprocessToInstall(string reportType, string contractCode, string yearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_InprocessToInstall(reportType, contractCode, yearMonth).ToList();
    		}
    		public virtual List<dtPhysicalReport> GetStockReport_Physical(string reportType, string instrumentCode, string yearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_Physical(reportType, instrumentCode, yearMonth).ToList();
    		}
    		public virtual List<dtStockListReport> GetStockReport_StockList(string reportType, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_StockList(reportType, instrumentCode).ToList();
    		}
    		public virtual List<dtInProcessReport> GetStockReport_InProcess(string reportType, string contractCode, string yearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_InProcess(reportType, contractCode, yearMonth).ToList();
    		}
    		public virtual List<dtInstrumentForMovementReport> GetStockReport_Instrument(string reportType, string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_Instrument(reportType, instrumentCode).ToList();
    		}
    		public virtual List<dtMovementReport> GetStockReport_Movement(string reportType, string instrumentCode, string yearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_Movement(reportType, instrumentCode, yearMonth).ToList();
    		}
    		public virtual List<doIVR181> GetIVR181(string pInventorySlipNo, string pC_INV_LOC, string pC_INV_AREA)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR181(pInventorySlipNo, pC_INV_LOC, pC_INV_AREA).ToList();
    		}
    		public virtual List<doIVR192> GetIVR192(string purchaseOrderNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR192(purchaseOrderNo).ToList();
    		}
    		public virtual List<doIVR010> GetIVR010(string pC_INV_STOCKIN_TYPE, string pC_INV_LOC, string pC_INV_AREA, string pC_PURCHASE_ORDER_STATUS, string pC_TRANSPORT_TYPE, string pC_CURRENCY_TYPE, string pInventorySlipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR010(pC_INV_STOCKIN_TYPE, pC_INV_LOC, pC_INV_AREA, pC_PURCHASE_ORDER_STATUS, pC_TRANSPORT_TYPE, pC_CURRENCY_TYPE, pInventorySlipNo).ToList();
    		}
    		public virtual List<string> GenerateVoucherID(Nullable<System.DateTime> stockInDate)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GenerateVoucherID(stockInDate).ToList();
    		}
    		public virtual List<doSearchReceiveSlipResult> SearchReceiveSlip(string contractCode, Nullable<System.DateTime> completeDateStart, Nullable<System.DateTime> completeDateEnd, string installationSlipNo, string subContractorName, string projectCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.SearchReceiveSlip(contractCode, completeDateStart, completeDateEnd, installationSlipNo, subContractorName, projectCode).ToList();
    		}
    		public virtual List<dtChangeAreaReportDetail> GetStockReport_ChangeArea_Detail(string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_ChangeArea_Detail(slipNo).ToList();
    		}
    		public virtual List<dtChangeAreaReportHeader> GetStockReport_ChangeArea_Header(string inventorySlipNoStart, string inventorySlipNoEnd, string contractCode, Nullable<System.DateTime> transferDateStart, Nullable<System.DateTime> transferDateEnd, string sourceAreaCode, string destinationAreaCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_ChangeArea_Header(inventorySlipNoStart, inventorySlipNoEnd, contractCode, transferDateStart, transferDateEnd, sourceAreaCode, destinationAreaCode).ToList();
    		}
    		public virtual List<dtEliminateReportDetail> GetStockReport_Eliminate_Detail(string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_Eliminate_Detail(slipNo).ToList();
    		}
    		public virtual List<dtEliminateReportHeader> GetStockReport_Eliminate_Header(string inventorySlipNoStart, string inventorySlipNoEnd, Nullable<System.DateTime> transferDateStart, Nullable<System.DateTime> transferDateEnd, string transferType)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_Eliminate_Header(inventorySlipNoStart, inventorySlipNoEnd, transferDateStart, transferDateEnd, transferType).ToList();
    		}
    		public virtual List<dtBufferLossReportDetail> GetStockReport_BufferLoss_Detail(string slipNo)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_BufferLoss_Detail(slipNo).ToList();
    		}
    		public virtual List<dtBufferLossReportHeader> GetStockReport_BufferLoss_Header(string inventorySlipNoStart, string inventorySlipNoEnd, Nullable<System.DateTime> transferDateStart, Nullable<System.DateTime> transferDateEnd)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_BufferLoss_Header(inventorySlipNoStart, inventorySlipNoEnd, transferDateStart, transferDateEnd).ToList();
    		}
    		public virtual List<doMonthlyAveragePrice> GetMonthlyAveragePrice(string instrumentCode, Nullable<System.DateTime> yearMonth, string accountCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetMonthlyAveragePrice(instrumentCode, yearMonth, accountCode, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual int UpdateMonthlyAveragePrice(Nullable<System.DateTime> batchDate, Nullable<System.DateTime> updateDate, string updateBy, string c_INV_ACCOUNT_CODE_INSTOCK, string c_INV_ACCOUNT_CODE_INPROCESS, string c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_NEW_DEMO, string c_INV_AREA_SE_DEMO, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PROJECT, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, string c_INV_TRANSFERTYPE_START_SERVICE, string c_INV_TRANSFERTYPE_ELIMINATION, string c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string c_INV_TRANSFERTYPE_TRANSFER_BUFFER, string c_INV_TRANSFERTYPE_TRANSFER_AREA, string c_INV_SLIP_STATUS_COMPLETE, string c_INV_LOC_RETURNED, string c_INV_LOC_SOLD, string c_INV_LOC_USER, string c_INV_LOC_INSTOCK, string c_INV_LOC_PRE_ELIMINATION, string c_CONFIG_SCRAP_VALUE)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.UpdateMonthlyAveragePrice(batchDate, updateDate, updateBy, c_INV_ACCOUNT_CODE_INSTOCK, c_INV_ACCOUNT_CODE_INPROCESS, c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, c_INV_AREA_NEW_SAMPLE, c_INV_AREA_NEW_SALE, c_INV_AREA_NEW_RENTAL, c_INV_AREA_SE_RENTAL, c_INV_AREA_NEW_DEMO, c_INV_AREA_SE_DEMO, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, c_INV_TRANSFERTYPE_STOCKOUT_PROJECT, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, c_INV_TRANSFERTYPE_START_SERVICE, c_INV_TRANSFERTYPE_ELIMINATION, c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, c_INV_TRANSFERTYPE_TRANSFER_BUFFER, c_INV_TRANSFERTYPE_TRANSFER_AREA, c_INV_SLIP_STATUS_COMPLETE, c_INV_LOC_RETURNED, c_INV_LOC_SOLD, c_INV_LOC_USER, c_INV_LOC_INSTOCK, c_INV_LOC_PRE_ELIMINATION, c_CONFIG_SCRAP_VALUE);
    		}
    		public virtual List<string> GetStockReport_InProcessPeriod()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_InProcessPeriod().ToList();
    		}
    		public virtual int FreezeInprocess(Nullable<System.DateTime> batchDate, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.FreezeInprocess(batchDate, updateDate, updateBy);
    		}
    		public virtual List<string> GetStockReport_PhysicalPeriod()
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_PhysicalPeriod().ToList();
    		}
    		public virtual List<Nullable<System.DateTime>> GetBusinessDateByOffset(Nullable<System.DateTime> date, Nullable<int> offset)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetBusinessDateByOffset(date, offset).ToList();
    		}
    		public virtual List<dtInProcessReportDetail> GetStockReport_InProcess_Detail(string reportType, string contractCode, string yearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_InProcess_Detail(reportType, contractCode, yearMonth).ToList();
    		}
    		public virtual List<dtInprocessToInstallReportDetail> GetStockReport_InprocessToInstall_Detail(string reportType, string contractCodeWithOCC, string yearMonth)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetStockReport_InprocessToInstall_Detail(reportType, contractCodeWithOCC, yearMonth).ToList();
    		}
    		public virtual List<doIVR210> GetIVR210(string pInventorySlipNo, string pC_INV_LOC)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetIVR210(pInventorySlipNo, pC_INV_LOC).ToList();
    		}
    		public virtual List<Nullable<System.DateTime>> GetDepreciationStartDate(string pContractCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetDepreciationStartDate(pContractCode).ToList();
    		}
    		public virtual List<doContractWIPInstrumentPartial> GetContractWIPInstrumentPartial(string strInstallationSlipNo, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetContractWIPInstrumentPartial(strInstallationSlipNo, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29).ToList();
    		}
    		public virtual List<doInventoryBookingDetail> GetTbtInventoryBookingDetailForIV200(string instrumentCode)
    		{
    			IVDataEntities context = new IVDataEntities();
    			return context.GetTbtInventoryBookingDetailForIV200(instrumentCode).ToList();
    		}

        #endregion

    }
}
