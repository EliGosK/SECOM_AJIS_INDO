//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Inventory
{
    public partial class IVDataEntities : ObjectContext
    {
        public const string ConnectionString = "name=IVDataEntities";
        public const string ContainerName = "IVDataEntities";
    
        #region Constructors
    
        public IVDataEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public IVDataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public IVDataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<tbt_InventoryBooking> tbt_InventoryBooking
        {
            get { return _tbt_InventoryBooking  ?? (_tbt_InventoryBooking = CreateObjectSet<tbt_InventoryBooking>("tbt_InventoryBooking")); }
        }
        private ObjectSet<tbt_InventoryBooking> _tbt_InventoryBooking;
    
        public ObjectSet<tbt_InventoryBookingDetail> tbt_InventoryBookingDetail
        {
            get { return _tbt_InventoryBookingDetail  ?? (_tbt_InventoryBookingDetail = CreateObjectSet<tbt_InventoryBookingDetail>("tbt_InventoryBookingDetail")); }
        }
        private ObjectSet<tbt_InventoryBookingDetail> _tbt_InventoryBookingDetail;
    
        public ObjectSet<tbt_InventoryCheckingSchedule> tbt_InventoryCheckingSchedule
        {
            get { return _tbt_InventoryCheckingSchedule  ?? (_tbt_InventoryCheckingSchedule = CreateObjectSet<tbt_InventoryCheckingSchedule>("tbt_InventoryCheckingSchedule")); }
        }
        private ObjectSet<tbt_InventoryCheckingSchedule> _tbt_InventoryCheckingSchedule;
    
        public ObjectSet<tbt_InventoryCheckingSlip> tbt_InventoryCheckingSlip
        {
            get { return _tbt_InventoryCheckingSlip  ?? (_tbt_InventoryCheckingSlip = CreateObjectSet<tbt_InventoryCheckingSlip>("tbt_InventoryCheckingSlip")); }
        }
        private ObjectSet<tbt_InventoryCheckingSlip> _tbt_InventoryCheckingSlip;
    
        public ObjectSet<tbt_InventoryCheckingSlipDetail> tbt_InventoryCheckingSlipDetail
        {
            get { return _tbt_InventoryCheckingSlipDetail  ?? (_tbt_InventoryCheckingSlipDetail = CreateObjectSet<tbt_InventoryCheckingSlipDetail>("tbt_InventoryCheckingSlipDetail")); }
        }
        private ObjectSet<tbt_InventoryCheckingSlipDetail> _tbt_InventoryCheckingSlipDetail;
    
        public ObjectSet<tbt_InventoryCheckingTemp> tbt_InventoryCheckingTemp
        {
            get { return _tbt_InventoryCheckingTemp  ?? (_tbt_InventoryCheckingTemp = CreateObjectSet<tbt_InventoryCheckingTemp>("tbt_InventoryCheckingTemp")); }
        }
        private ObjectSet<tbt_InventoryCheckingTemp> _tbt_InventoryCheckingTemp;
    
        public ObjectSet<tbt_InventoryCurrent> tbt_InventoryCurrent
        {
            get { return _tbt_InventoryCurrent  ?? (_tbt_InventoryCurrent = CreateObjectSet<tbt_InventoryCurrent>("tbt_InventoryCurrent")); }
        }
        private ObjectSet<tbt_InventoryCurrent> _tbt_InventoryCurrent;
    
        public ObjectSet<tbt_InventoryCurrentChina> tbt_InventoryCurrentChina
        {
            get { return _tbt_InventoryCurrentChina  ?? (_tbt_InventoryCurrentChina = CreateObjectSet<tbt_InventoryCurrentChina>("tbt_InventoryCurrentChina")); }
        }
        private ObjectSet<tbt_InventoryCurrentChina> _tbt_InventoryCurrentChina;
    
        public ObjectSet<tbt_InventorySlip> tbt_InventorySlip
        {
            get { return _tbt_InventorySlip  ?? (_tbt_InventorySlip = CreateObjectSet<tbt_InventorySlip>("tbt_InventorySlip")); }
        }
        private ObjectSet<tbt_InventorySlip> _tbt_InventorySlip;
    
        public ObjectSet<tbt_InventorySlipDetail> tbt_InventorySlipDetail
        {
            get { return _tbt_InventorySlipDetail  ?? (_tbt_InventorySlipDetail = CreateObjectSet<tbt_InventorySlipDetail>("tbt_InventorySlipDetail")); }
        }
        private ObjectSet<tbt_InventorySlipDetail> _tbt_InventorySlipDetail;
    
        public ObjectSet<tbs_InventoryRunningSlipNo> tbs_InventoryRunningSlipNo
        {
            get { return _tbs_InventoryRunningSlipNo  ?? (_tbs_InventoryRunningSlipNo = CreateObjectSet<tbs_InventoryRunningSlipNo>("tbs_InventoryRunningSlipNo")); }
        }
        private ObjectSet<tbs_InventoryRunningSlipNo> _tbs_InventoryRunningSlipNo;
    
        public ObjectSet<tbt_PurchaseOrder> tbt_PurchaseOrder
        {
            get { return _tbt_PurchaseOrder  ?? (_tbt_PurchaseOrder = CreateObjectSet<tbt_PurchaseOrder>("tbt_PurchaseOrder")); }
        }
        private ObjectSet<tbt_PurchaseOrder> _tbt_PurchaseOrder;
    
        public ObjectSet<tbt_PurchaseOrderDetail> tbt_PurchaseOrderDetail
        {
            get { return _tbt_PurchaseOrderDetail  ?? (_tbt_PurchaseOrderDetail = CreateObjectSet<tbt_PurchaseOrderDetail>("tbt_PurchaseOrderDetail")); }
        }
        private ObjectSet<tbt_PurchaseOrderDetail> _tbt_PurchaseOrderDetail;
    
        public ObjectSet<tbt_AccountSampleInprocess> tbt_AccountSampleInprocess
        {
            get { return _tbt_AccountSampleInprocess  ?? (_tbt_AccountSampleInprocess = CreateObjectSet<tbt_AccountSampleInprocess>("tbt_AccountSampleInprocess")); }
        }
        private ObjectSet<tbt_AccountSampleInprocess> _tbt_AccountSampleInprocess;
    
        public ObjectSet<tbt_AccountSampleInstock> tbt_AccountSampleInstock
        {
            get { return _tbt_AccountSampleInstock  ?? (_tbt_AccountSampleInstock = CreateObjectSet<tbt_AccountSampleInstock>("tbt_AccountSampleInstock")); }
        }
        private ObjectSet<tbt_AccountSampleInstock> _tbt_AccountSampleInstock;
    
        public ObjectSet<tbt_AccountInstalled> tbt_AccountInstalled
        {
            get { return _tbt_AccountInstalled  ?? (_tbt_AccountInstalled = CreateObjectSet<tbt_AccountInstalled>("tbt_AccountInstalled")); }
        }
        private ObjectSet<tbt_AccountInstalled> _tbt_AccountInstalled;
    
        public ObjectSet<tbt_AccountInprocess> tbt_AccountInprocess
        {
            get { return _tbt_AccountInprocess  ?? (_tbt_AccountInprocess = CreateObjectSet<tbt_AccountInprocess>("tbt_AccountInprocess")); }
        }
        private ObjectSet<tbt_AccountInprocess> _tbt_AccountInprocess;
    
        public ObjectSet<tbt_AccountInstock> tbt_AccountInstock
        {
            get { return _tbt_AccountInstock  ?? (_tbt_AccountInstock = CreateObjectSet<tbt_AccountInstock>("tbt_AccountInstock")); }
        }
        private ObjectSet<tbt_AccountInstock> _tbt_AccountInstock;
    
        public ObjectSet<tbs_PurchaseOrderRunningNo> tbs_PurchaseOrderRunningNo
        {
            get { return _tbs_PurchaseOrderRunningNo  ?? (_tbs_PurchaseOrderRunningNo = CreateObjectSet<tbs_PurchaseOrderRunningNo>("tbs_PurchaseOrderRunningNo")); }
        }
        private ObjectSet<tbs_PurchaseOrderRunningNo> _tbs_PurchaseOrderRunningNo;
    
        public ObjectSet<tbt_AccountStockMoving> tbt_AccountStockMoving
        {
            get { return _tbt_AccountStockMoving  ?? (_tbt_AccountStockMoving = CreateObjectSet<tbt_AccountStockMoving>("tbt_AccountStockMoving")); }
        }
        private ObjectSet<tbt_AccountStockMoving> _tbt_AccountStockMoving;
    
        public ObjectSet<tbt_InventoryDepreciation> tbt_InventoryDepreciation
        {
            get { return _tbt_InventoryDepreciation  ?? (_tbt_InventoryDepreciation = CreateObjectSet<tbt_InventoryDepreciation>("tbt_InventoryDepreciation")); }
        }
        private ObjectSet<tbt_InventoryDepreciation> _tbt_InventoryDepreciation;
    
        public ObjectSet<tbs_LotRunningNo> tbs_LotRunningNo
        {
            get { return _tbs_LotRunningNo  ?? (_tbs_LotRunningNo = CreateObjectSet<tbs_LotRunningNo>("tbs_LotRunningNo")); }
        }
        private ObjectSet<tbs_LotRunningNo> _tbs_LotRunningNo;
    
        public ObjectSet<tbt_InventoryProjectWIP> tbt_InventoryProjectWIP
        {
            get { return _tbt_InventoryProjectWIP  ?? (_tbt_InventoryProjectWIP = CreateObjectSet<tbt_InventoryProjectWIP>("tbt_InventoryProjectWIP")); }
        }
        private ObjectSet<tbt_InventoryProjectWIP> _tbt_InventoryProjectWIP;

        #endregion

        #region Function Imports
        public ObjectResult<doOffice> GetInventoryHeadOffice(string pC_OFFICE_LOGISTIC_HEAD)
        {
    
            ObjectParameter pC_OFFICE_LOGISTIC_HEADParameter;
    
            if (pC_OFFICE_LOGISTIC_HEAD != null)
            {
                pC_OFFICE_LOGISTIC_HEADParameter = new ObjectParameter("pC_OFFICE_LOGISTIC_HEAD", pC_OFFICE_LOGISTIC_HEAD);
            }
            else
            {
                pC_OFFICE_LOGISTIC_HEADParameter = new ObjectParameter("pC_OFFICE_LOGISTIC_HEAD", typeof(string));
            }
            return base.ExecuteFunction<doOffice>("GetInventoryHeadOffice", pC_OFFICE_LOGISTIC_HEADParameter);
        }
        public ObjectResult<tbt_InventorySlip> InsertTbt_InventorySlip(string xmlTbt_InventorySlilp)
        {
    
            ObjectParameter xmlTbt_InventorySlilpParameter;
    
            if (xmlTbt_InventorySlilp != null)
            {
                xmlTbt_InventorySlilpParameter = new ObjectParameter("xmlTbt_InventorySlilp", xmlTbt_InventorySlilp);
            }
            else
            {
                xmlTbt_InventorySlilpParameter = new ObjectParameter("xmlTbt_InventorySlilp", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlip>("InsertTbt_InventorySlip", xmlTbt_InventorySlilpParameter);
        }
        public ObjectResult<doPurchaseOrder> GetPurchaserOrderForMaintain(string c_PURCHASE_ORDER_STATUS, string c_TRANSPORT_TYPE, string purchaseOrderNo, string purchaseOrderStatus, string supplierCode, string transportType, string supplierName, Nullable<System.DateTime> poIssueDateFrom, Nullable<System.DateTime> poIssueDateTo, Nullable<System.DateTime> expectedDeliveryDateFrom, Nullable<System.DateTime> expectedDeliveryDateTo, string instrumentCode)
        {
    
            ObjectParameter c_PURCHASE_ORDER_STATUSParameter;
    
            if (c_PURCHASE_ORDER_STATUS != null)
            {
                c_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("C_PURCHASE_ORDER_STATUS", c_PURCHASE_ORDER_STATUS);
            }
            else
            {
                c_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("C_PURCHASE_ORDER_STATUS", typeof(string));
            }
    
            ObjectParameter c_TRANSPORT_TYPEParameter;
    
            if (c_TRANSPORT_TYPE != null)
            {
                c_TRANSPORT_TYPEParameter = new ObjectParameter("C_TRANSPORT_TYPE", c_TRANSPORT_TYPE);
            }
            else
            {
                c_TRANSPORT_TYPEParameter = new ObjectParameter("C_TRANSPORT_TYPE", typeof(string));
            }
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
    
            ObjectParameter purchaseOrderStatusParameter;
    
            if (purchaseOrderStatus != null)
            {
                purchaseOrderStatusParameter = new ObjectParameter("PurchaseOrderStatus", purchaseOrderStatus);
            }
            else
            {
                purchaseOrderStatusParameter = new ObjectParameter("PurchaseOrderStatus", typeof(string));
            }
    
            ObjectParameter supplierCodeParameter;
    
            if (supplierCode != null)
            {
                supplierCodeParameter = new ObjectParameter("SupplierCode", supplierCode);
            }
            else
            {
                supplierCodeParameter = new ObjectParameter("SupplierCode", typeof(string));
            }
    
            ObjectParameter transportTypeParameter;
    
            if (transportType != null)
            {
                transportTypeParameter = new ObjectParameter("TransportType", transportType);
            }
            else
            {
                transportTypeParameter = new ObjectParameter("TransportType", typeof(string));
            }
    
            ObjectParameter supplierNameParameter;
    
            if (supplierName != null)
            {
                supplierNameParameter = new ObjectParameter("SupplierName", supplierName);
            }
            else
            {
                supplierNameParameter = new ObjectParameter("SupplierName", typeof(string));
            }
    
            ObjectParameter poIssueDateFromParameter;
    
            if (poIssueDateFrom.HasValue)
            {
                poIssueDateFromParameter = new ObjectParameter("PoIssueDateFrom", poIssueDateFrom);
            }
            else
            {
                poIssueDateFromParameter = new ObjectParameter("PoIssueDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter poIssueDateToParameter;
    
            if (poIssueDateTo.HasValue)
            {
                poIssueDateToParameter = new ObjectParameter("PoIssueDateTo", poIssueDateTo);
            }
            else
            {
                poIssueDateToParameter = new ObjectParameter("PoIssueDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter expectedDeliveryDateFromParameter;
    
            if (expectedDeliveryDateFrom.HasValue)
            {
                expectedDeliveryDateFromParameter = new ObjectParameter("ExpectedDeliveryDateFrom", expectedDeliveryDateFrom);
            }
            else
            {
                expectedDeliveryDateFromParameter = new ObjectParameter("ExpectedDeliveryDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter expectedDeliveryDateToParameter;
    
            if (expectedDeliveryDateTo.HasValue)
            {
                expectedDeliveryDateToParameter = new ObjectParameter("ExpectedDeliveryDateTo", expectedDeliveryDateTo);
            }
            else
            {
                expectedDeliveryDateToParameter = new ObjectParameter("ExpectedDeliveryDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<doPurchaseOrder>("GetPurchaserOrderForMaintain", c_PURCHASE_ORDER_STATUSParameter, c_TRANSPORT_TYPEParameter, purchaseOrderNoParameter, purchaseOrderStatusParameter, supplierCodeParameter, transportTypeParameter, supplierNameParameter, poIssueDateFromParameter, poIssueDateToParameter, expectedDeliveryDateFromParameter, expectedDeliveryDateToParameter, instrumentCodeParameter);
        }
        public ObjectResult<doPurchaseOrderDetail> GetPurchaseOrderDetailForRegisterStockIn(string strPurchaseOrderNo, string c_CURRENCY_TYPE, string c_PURCHASE_ORDER_STATUS, string c_TRANSPORT_TYPE)
        {
    
            ObjectParameter strPurchaseOrderNoParameter;
    
            if (strPurchaseOrderNo != null)
            {
                strPurchaseOrderNoParameter = new ObjectParameter("strPurchaseOrderNo", strPurchaseOrderNo);
            }
            else
            {
                strPurchaseOrderNoParameter = new ObjectParameter("strPurchaseOrderNo", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_TYPEParameter;
    
            if (c_CURRENCY_TYPE != null)
            {
                c_CURRENCY_TYPEParameter = new ObjectParameter("C_CURRENCY_TYPE", c_CURRENCY_TYPE);
            }
            else
            {
                c_CURRENCY_TYPEParameter = new ObjectParameter("C_CURRENCY_TYPE", typeof(string));
            }
    
            ObjectParameter c_PURCHASE_ORDER_STATUSParameter;
    
            if (c_PURCHASE_ORDER_STATUS != null)
            {
                c_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("C_PURCHASE_ORDER_STATUS", c_PURCHASE_ORDER_STATUS);
            }
            else
            {
                c_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("C_PURCHASE_ORDER_STATUS", typeof(string));
            }
    
            ObjectParameter c_TRANSPORT_TYPEParameter;
    
            if (c_TRANSPORT_TYPE != null)
            {
                c_TRANSPORT_TYPEParameter = new ObjectParameter("C_TRANSPORT_TYPE", c_TRANSPORT_TYPE);
            }
            else
            {
                c_TRANSPORT_TYPEParameter = new ObjectParameter("C_TRANSPORT_TYPE", typeof(string));
            }
            return base.ExecuteFunction<doPurchaseOrderDetail>("GetPurchaseOrderDetailForRegisterStockIn", strPurchaseOrderNoParameter, c_CURRENCY_TYPEParameter, c_PURCHASE_ORDER_STATUSParameter, c_TRANSPORT_TYPEParameter);
        }
        public ObjectResult<tbs_InventoryRunningSlipNo> GetTbs_InventorySlipRunningNo(string month, string year, string officeCode, string slipid)
        {
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("month", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("year", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("officeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("officeCode", typeof(string));
            }
    
            ObjectParameter slipidParameter;
    
            if (slipid != null)
            {
                slipidParameter = new ObjectParameter("slipid", slipid);
            }
            else
            {
                slipidParameter = new ObjectParameter("slipid", typeof(string));
            }
            return base.ExecuteFunction<tbs_InventoryRunningSlipNo>("GetTbs_InventorySlipRunningNo", monthParameter, yearParameter, officeCodeParameter, slipidParameter);
        }
        public ObjectResult<tbs_InventoryRunningSlipNo> UpdateTbs_InventorySlipRunningNo(string month, string year, string officeCode, string slipid, string runningNo)
        {
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("month", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("year", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("officeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("officeCode", typeof(string));
            }
    
            ObjectParameter slipidParameter;
    
            if (slipid != null)
            {
                slipidParameter = new ObjectParameter("slipid", slipid);
            }
            else
            {
                slipidParameter = new ObjectParameter("slipid", typeof(string));
            }
    
            ObjectParameter runningNoParameter;
    
            if (runningNo != null)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(string));
            }
            return base.ExecuteFunction<tbs_InventoryRunningSlipNo>("UpdateTbs_InventorySlipRunningNo", monthParameter, yearParameter, officeCodeParameter, slipidParameter, runningNoParameter);
        }
        public ObjectResult<tbs_InventoryRunningSlipNo> InsertTbs_InventorySlipRunningNo(string runningNo, string month, string year, string officeCode, string slipid)
        {
    
            ObjectParameter runningNoParameter;
    
            if (runningNo != null)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(string));
            }
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("month", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("year", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("officeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("officeCode", typeof(string));
            }
    
            ObjectParameter slipidParameter;
    
            if (slipid != null)
            {
                slipidParameter = new ObjectParameter("slipid", slipid);
            }
            else
            {
                slipidParameter = new ObjectParameter("slipid", typeof(string));
            }
            return base.ExecuteFunction<tbs_InventoryRunningSlipNo>("InsertTbs_InventorySlipRunningNo", runningNoParameter, monthParameter, yearParameter, officeCodeParameter, slipidParameter);
        }
        public ObjectResult<tbt_InventorySlipDetail> InsertTbt_InventorySlipDetail(string xmlTbt_InventorySlipDetail)
        {
    
            ObjectParameter xmlTbt_InventorySlipDetailParameter;
    
            if (xmlTbt_InventorySlipDetail != null)
            {
                xmlTbt_InventorySlipDetailParameter = new ObjectParameter("xmlTbt_InventorySlipDetail", xmlTbt_InventorySlipDetail);
            }
            else
            {
                xmlTbt_InventorySlipDetailParameter = new ObjectParameter("xmlTbt_InventorySlipDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlipDetail>("InsertTbt_InventorySlipDetail", xmlTbt_InventorySlipDetailParameter);
        }
        public ObjectResult<tbt_PurchaseOrderDetail> UpdateTbt_PurchaseOrderDetail(string xmlPurchasOrderDetail)
        {
    
            ObjectParameter xmlPurchasOrderDetailParameter;
    
            if (xmlPurchasOrderDetail != null)
            {
                xmlPurchasOrderDetailParameter = new ObjectParameter("xmlPurchasOrderDetail", xmlPurchasOrderDetail);
            }
            else
            {
                xmlPurchasOrderDetailParameter = new ObjectParameter("xmlPurchasOrderDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrderDetail>("UpdateTbt_PurchaseOrderDetail", xmlPurchasOrderDetailParameter);
        }
        public ObjectResult<tbt_PurchaseOrder> UpdateTbt_PurchaseOrder(string xmlPurchaseOrder)
        {
    
            ObjectParameter xmlPurchaseOrderParameter;
    
            if (xmlPurchaseOrder != null)
            {
                xmlPurchaseOrderParameter = new ObjectParameter("xmlPurchaseOrder", xmlPurchaseOrder);
            }
            else
            {
                xmlPurchaseOrderParameter = new ObjectParameter("xmlPurchaseOrder", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrder>("UpdateTbt_PurchaseOrder", xmlPurchaseOrderParameter);
        }
        public ObjectResult<tbt_PurchaseOrder> GetTbt_PurchaseOrder(string purchaseOrderNo)
        {
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrder>("GetTbt_PurchaseOrder", purchaseOrderNoParameter);
        }
        public ObjectResult<tbt_PurchaseOrderDetail> GetTbt_PurchaseOrderDetail(string purchaseOrderNo, string instrumentCode)
        {
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrderDetail>("GetTbt_PurchaseOrderDetail", purchaseOrderNoParameter, instrumentCodeParameter);
        }
        public ObjectResult<tbt_InventoryCurrent> GetTbt_InventoryCurrent(string officeCode, string locationCode, string areaCode, string shelfNo, string instrumentCode)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter areaCodeParameter;
    
            if (areaCode != null)
            {
                areaCodeParameter = new ObjectParameter("AreaCode", areaCode);
            }
            else
            {
                areaCodeParameter = new ObjectParameter("AreaCode", typeof(string));
            }
    
            ObjectParameter shelfNoParameter;
    
            if (shelfNo != null)
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", shelfNo);
            }
            else
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCurrent>("GetTbt_InventoryCurrent", officeCodeParameter, locationCodeParameter, areaCodeParameter, shelfNoParameter, instrumentCodeParameter);
        }
        public ObjectResult<tbt_InventoryCurrent> UpdateTbt_InventoryCurrent(string xmlTbt_InventoryCurrent)
        {
    
            ObjectParameter xmlTbt_InventoryCurrentParameter;
    
            if (xmlTbt_InventoryCurrent != null)
            {
                xmlTbt_InventoryCurrentParameter = new ObjectParameter("xmlTbt_InventoryCurrent", xmlTbt_InventoryCurrent);
            }
            else
            {
                xmlTbt_InventoryCurrentParameter = new ObjectParameter("xmlTbt_InventoryCurrent", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCurrent>("UpdateTbt_InventoryCurrent", xmlTbt_InventoryCurrentParameter);
        }
        public ObjectResult<doInventorySlipDetailList> GetInventorySlipDetailForSearch(string slipNo, string c_INV_STOCKIN_TYPE, string c_INV_REGISTER_ASSET, string c_INV_AREA, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("slipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("slipNo", typeof(string));
            }
    
            ObjectParameter c_INV_STOCKIN_TYPEParameter;
    
            if (c_INV_STOCKIN_TYPE != null)
            {
                c_INV_STOCKIN_TYPEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE", c_INV_STOCKIN_TYPE);
            }
            else
            {
                c_INV_STOCKIN_TYPEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE", typeof(string));
            }
    
            ObjectParameter c_INV_REGISTER_ASSETParameter;
    
            if (c_INV_REGISTER_ASSET != null)
            {
                c_INV_REGISTER_ASSETParameter = new ObjectParameter("C_INV_REGISTER_ASSET", c_INV_REGISTER_ASSET);
            }
            else
            {
                c_INV_REGISTER_ASSETParameter = new ObjectParameter("C_INV_REGISTER_ASSET", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doInventorySlipDetailList>("GetInventorySlipDetailForSearch", slipNoParameter, c_INV_STOCKIN_TYPEParameter, c_INV_REGISTER_ASSETParameter, c_INV_AREAParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doInventorySlipList> GetInventorySlipForSearch(string slipNo, string purchaseOrderNo, string stockInFlag, string deliveryOrderNo, Nullable<System.DateTime> stockInDateFrom, Nullable<System.DateTime> stockInDateTo, string registerAssetFlag, string memo, string c_INV_STOCKIN_TYPE, string c_INV_REGISTER_ASSET, string c_INV_STOCKIN_TYPE_PURCHASE, string c_INV_STOCKIN_TYPE_SPECIAL)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
    
            ObjectParameter stockInFlagParameter;
    
            if (stockInFlag != null)
            {
                stockInFlagParameter = new ObjectParameter("StockInFlag", stockInFlag);
            }
            else
            {
                stockInFlagParameter = new ObjectParameter("StockInFlag", typeof(string));
            }
    
            ObjectParameter deliveryOrderNoParameter;
    
            if (deliveryOrderNo != null)
            {
                deliveryOrderNoParameter = new ObjectParameter("DeliveryOrderNo", deliveryOrderNo);
            }
            else
            {
                deliveryOrderNoParameter = new ObjectParameter("DeliveryOrderNo", typeof(string));
            }
    
            ObjectParameter stockInDateFromParameter;
    
            if (stockInDateFrom.HasValue)
            {
                stockInDateFromParameter = new ObjectParameter("StockInDateFrom", stockInDateFrom);
            }
            else
            {
                stockInDateFromParameter = new ObjectParameter("StockInDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter stockInDateToParameter;
    
            if (stockInDateTo.HasValue)
            {
                stockInDateToParameter = new ObjectParameter("StockInDateTo", stockInDateTo);
            }
            else
            {
                stockInDateToParameter = new ObjectParameter("StockInDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter registerAssetFlagParameter;
    
            if (registerAssetFlag != null)
            {
                registerAssetFlagParameter = new ObjectParameter("RegisterAssetFlag", registerAssetFlag);
            }
            else
            {
                registerAssetFlagParameter = new ObjectParameter("RegisterAssetFlag", typeof(string));
            }
    
            ObjectParameter memoParameter;
    
            if (memo != null)
            {
                memoParameter = new ObjectParameter("Memo", memo);
            }
            else
            {
                memoParameter = new ObjectParameter("Memo", typeof(string));
            }
    
            ObjectParameter c_INV_STOCKIN_TYPEParameter;
    
            if (c_INV_STOCKIN_TYPE != null)
            {
                c_INV_STOCKIN_TYPEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE", c_INV_STOCKIN_TYPE);
            }
            else
            {
                c_INV_STOCKIN_TYPEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE", typeof(string));
            }
    
            ObjectParameter c_INV_REGISTER_ASSETParameter;
    
            if (c_INV_REGISTER_ASSET != null)
            {
                c_INV_REGISTER_ASSETParameter = new ObjectParameter("C_INV_REGISTER_ASSET", c_INV_REGISTER_ASSET);
            }
            else
            {
                c_INV_REGISTER_ASSETParameter = new ObjectParameter("C_INV_REGISTER_ASSET", typeof(string));
            }
    
            ObjectParameter c_INV_STOCKIN_TYPE_PURCHASEParameter;
    
            if (c_INV_STOCKIN_TYPE_PURCHASE != null)
            {
                c_INV_STOCKIN_TYPE_PURCHASEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE_PURCHASE", c_INV_STOCKIN_TYPE_PURCHASE);
            }
            else
            {
                c_INV_STOCKIN_TYPE_PURCHASEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE_PURCHASE", typeof(string));
            }
    
            ObjectParameter c_INV_STOCKIN_TYPE_SPECIALParameter;
    
            if (c_INV_STOCKIN_TYPE_SPECIAL != null)
            {
                c_INV_STOCKIN_TYPE_SPECIALParameter = new ObjectParameter("C_INV_STOCKIN_TYPE_SPECIAL", c_INV_STOCKIN_TYPE_SPECIAL);
            }
            else
            {
                c_INV_STOCKIN_TYPE_SPECIALParameter = new ObjectParameter("C_INV_STOCKIN_TYPE_SPECIAL", typeof(string));
            }
            return base.ExecuteFunction<doInventorySlipList>("GetInventorySlipForSearch", slipNoParameter, purchaseOrderNoParameter, stockInFlagParameter, deliveryOrderNoParameter, stockInDateFromParameter, stockInDateToParameter, registerAssetFlagParameter, memoParameter, c_INV_STOCKIN_TYPEParameter, c_INV_REGISTER_ASSETParameter, c_INV_STOCKIN_TYPE_PURCHASEParameter, c_INV_STOCKIN_TYPE_SPECIALParameter);
        }
        public ObjectResult<tbt_InventorySlip> GetTbt_InventorySlip(string slipNo, string installationSlipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("slipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("slipNo", typeof(string));
            }
    
            ObjectParameter installationSlipNoParameter;
    
            if (installationSlipNo != null)
            {
                installationSlipNoParameter = new ObjectParameter("InstallationSlipNo", installationSlipNo);
            }
            else
            {
                installationSlipNoParameter = new ObjectParameter("InstallationSlipNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlip>("GetTbt_InventorySlip", slipNoParameter, installationSlipNoParameter);
        }
        public ObjectResult<tbt_InventorySlipDetail> DeleteTbt_InventorySlipDetail(string slipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("slipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("slipNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlipDetail>("DeleteTbt_InventorySlipDetail", slipNoParameter);
        }
        public ObjectResult<tbt_InventorySlip> DeleteTbt_InventorySlip(string slipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("slipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("slipNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlip>("DeleteTbt_InventorySlip", slipNoParameter);
        }
        public ObjectResult<doInventorySlipDetailList> GetInventorySlipDetailForRegister(string slipNo, string c_INV_STOCKIN_TYPE, string c_INV_REGISTER_ASSET, string c_INV_AREA, string c_INV_REGISTER_ASSET_UNREGISTER, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("slipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("slipNo", typeof(string));
            }
    
            ObjectParameter c_INV_STOCKIN_TYPEParameter;
    
            if (c_INV_STOCKIN_TYPE != null)
            {
                c_INV_STOCKIN_TYPEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE", c_INV_STOCKIN_TYPE);
            }
            else
            {
                c_INV_STOCKIN_TYPEParameter = new ObjectParameter("C_INV_STOCKIN_TYPE", typeof(string));
            }
    
            ObjectParameter c_INV_REGISTER_ASSETParameter;
    
            if (c_INV_REGISTER_ASSET != null)
            {
                c_INV_REGISTER_ASSETParameter = new ObjectParameter("C_INV_REGISTER_ASSET", c_INV_REGISTER_ASSET);
            }
            else
            {
                c_INV_REGISTER_ASSETParameter = new ObjectParameter("C_INV_REGISTER_ASSET", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
    
            ObjectParameter c_INV_REGISTER_ASSET_UNREGISTERParameter;
    
            if (c_INV_REGISTER_ASSET_UNREGISTER != null)
            {
                c_INV_REGISTER_ASSET_UNREGISTERParameter = new ObjectParameter("C_INV_REGISTER_ASSET_UNREGISTER", c_INV_REGISTER_ASSET_UNREGISTER);
            }
            else
            {
                c_INV_REGISTER_ASSET_UNREGISTERParameter = new ObjectParameter("C_INV_REGISTER_ASSET_UNREGISTER", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doInventorySlipDetailList>("GetInventorySlipDetailForRegister", slipNoParameter, c_INV_STOCKIN_TYPEParameter, c_INV_REGISTER_ASSETParameter, c_INV_AREAParameter, c_INV_REGISTER_ASSET_UNREGISTERParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_InventoryCurrent> InsertTbt_InventoryCurrent(string xmlTbt_InventoryCurrent)
        {
    
            ObjectParameter xmlTbt_InventoryCurrentParameter;
    
            if (xmlTbt_InventoryCurrent != null)
            {
                xmlTbt_InventoryCurrentParameter = new ObjectParameter("xmlTbt_InventoryCurrent", xmlTbt_InventoryCurrent);
            }
            else
            {
                xmlTbt_InventoryCurrentParameter = new ObjectParameter("xmlTbt_InventoryCurrent", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCurrent>("InsertTbt_InventoryCurrent", xmlTbt_InventoryCurrentParameter);
        }
        public ObjectResult<tbt_AccountSampleInprocess> UpdateTbt_AccountSampleInProcess(string xmlTbt_AccountSampleInProcess)
        {
    
            ObjectParameter xmlTbt_AccountSampleInProcessParameter;
    
            if (xmlTbt_AccountSampleInProcess != null)
            {
                xmlTbt_AccountSampleInProcessParameter = new ObjectParameter("xmlTbt_AccountSampleInProcess", xmlTbt_AccountSampleInProcess);
            }
            else
            {
                xmlTbt_AccountSampleInProcessParameter = new ObjectParameter("xmlTbt_AccountSampleInProcess", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountSampleInprocess>("UpdateTbt_AccountSampleInProcess", xmlTbt_AccountSampleInProcessParameter);
        }
        public ObjectResult<tbt_AccountSampleInprocess> GetTbt_AccountSampleInProcess(string locationCode, string contractCode, string instrumentCode)
        {
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountSampleInprocess>("GetTbt_AccountSampleInProcess", locationCodeParameter, contractCodeParameter, instrumentCodeParameter);
        }
        public ObjectResult<tbt_AccountSampleInstock> UpdateTbt_AccountSampleInStock(string xmlTbt_AccountSampleInStock)
        {
    
            ObjectParameter xmlTbt_AccountSampleInStockParameter;
    
            if (xmlTbt_AccountSampleInStock != null)
            {
                xmlTbt_AccountSampleInStockParameter = new ObjectParameter("xmlTbt_AccountSampleInStock", xmlTbt_AccountSampleInStock);
            }
            else
            {
                xmlTbt_AccountSampleInStockParameter = new ObjectParameter("xmlTbt_AccountSampleInStock", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountSampleInstock>("UpdateTbt_AccountSampleInStock", xmlTbt_AccountSampleInStockParameter);
        }
        public ObjectResult<tbt_AccountSampleInstock> GetTbt_AccountSampleInStock(string instrumentCode, string locationCode, string officeCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("instrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("instrumentCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("locationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("locationCode", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("officeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("officeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountSampleInstock>("GetTbt_AccountSampleInStock", instrumentCodeParameter, locationCodeParameter, officeCodeParameter);
        }
        public ObjectResult<tbt_AccountSampleInprocess> InsertTbt_AccountSampleInProcess(string xmlTbt_AccountSampleInProcess)
        {
    
            ObjectParameter xmlTbt_AccountSampleInProcessParameter;
    
            if (xmlTbt_AccountSampleInProcess != null)
            {
                xmlTbt_AccountSampleInProcessParameter = new ObjectParameter("xmlTbt_AccountSampleInProcess", xmlTbt_AccountSampleInProcess);
            }
            else
            {
                xmlTbt_AccountSampleInProcessParameter = new ObjectParameter("xmlTbt_AccountSampleInProcess", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountSampleInprocess>("InsertTbt_AccountSampleInProcess", xmlTbt_AccountSampleInProcessParameter);
        }
        public ObjectResult<tbt_AccountInstalled> GetTbt_AccountInstalled(string officeCode, string locationCode, string instrumentCode, string lotNo)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter lotNoParameter;
    
            if (lotNo != null)
            {
                lotNoParameter = new ObjectParameter("LotNo", lotNo);
            }
            else
            {
                lotNoParameter = new ObjectParameter("LotNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstalled>("GetTbt_AccountInstalled", officeCodeParameter, locationCodeParameter, instrumentCodeParameter, lotNoParameter);
        }
        public ObjectResult<tbt_AccountInprocess> InsertTbt_AccountInProcess(string xmlTbt_AccountInProcess)
        {
    
            ObjectParameter xmlTbt_AccountInProcessParameter;
    
            if (xmlTbt_AccountInProcess != null)
            {
                xmlTbt_AccountInProcessParameter = new ObjectParameter("xmlTbt_AccountInProcess", xmlTbt_AccountInProcess);
            }
            else
            {
                xmlTbt_AccountInProcessParameter = new ObjectParameter("xmlTbt_AccountInProcess", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInprocess>("InsertTbt_AccountInProcess", xmlTbt_AccountInProcessParameter);
        }
        public ObjectResult<tbt_AccountSampleInstock> InsertTbt_AccountSampleInStock(string xmlTbt_AccountSampleInStock)
        {
    
            ObjectParameter xmlTbt_AccountSampleInStockParameter;
    
            if (xmlTbt_AccountSampleInStock != null)
            {
                xmlTbt_AccountSampleInStockParameter = new ObjectParameter("xmlTbt_AccountSampleInStock", xmlTbt_AccountSampleInStock);
            }
            else
            {
                xmlTbt_AccountSampleInStockParameter = new ObjectParameter("xmlTbt_AccountSampleInStock", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountSampleInstock>("InsertTbt_AccountSampleInStock", xmlTbt_AccountSampleInStockParameter);
        }
        public ObjectResult<tbt_AccountInstock> GetTbt_AccountInStock(string instrumentCode, string locationCode, string officecode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter officecodeParameter;
    
            if (officecode != null)
            {
                officecodeParameter = new ObjectParameter("officecode", officecode);
            }
            else
            {
                officecodeParameter = new ObjectParameter("officecode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstock>("GetTbt_AccountInStock", instrumentCodeParameter, locationCodeParameter, officecodeParameter);
        }
        public ObjectResult<doCalPriceCondition> GetMovingAveragePriceCondition(string strOfficeCode, string strContractCode, string strProjectCode, string strInstrumentCode, string strArrayLocationCode, string strLotNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter strArrayLocationCodeParameter;
    
            if (strArrayLocationCode != null)
            {
                strArrayLocationCodeParameter = new ObjectParameter("strArrayLocationCode", strArrayLocationCode);
            }
            else
            {
                strArrayLocationCodeParameter = new ObjectParameter("strArrayLocationCode", typeof(string));
            }
    
            ObjectParameter strLotNoParameter;
    
            if (strLotNo != null)
            {
                strLotNoParameter = new ObjectParameter("strLotNo", strLotNo);
            }
            else
            {
                strLotNoParameter = new ObjectParameter("strLotNo", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doCalPriceCondition>("GetMovingAveragePriceCondition", strOfficeCodeParameter, strContractCodeParameter, strProjectCodeParameter, strInstrumentCodeParameter, strArrayLocationCodeParameter, strLotNoParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<tbt_AccountInprocess> GetTbt_AccountInProcess(string locationCode, string contractCode, string instrumentCode)
        {
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInprocess>("GetTbt_AccountInProcess", locationCodeParameter, contractCodeParameter, instrumentCodeParameter);
        }
        public ObjectResult<tbt_AccountInprocess> UpdateTbt_AccountInProcess(string xmlTbt_AccountInProcess)
        {
    
            ObjectParameter xmlTbt_AccountInProcessParameter;
    
            if (xmlTbt_AccountInProcess != null)
            {
                xmlTbt_AccountInProcessParameter = new ObjectParameter("xmlTbt_AccountInProcess", xmlTbt_AccountInProcess);
            }
            else
            {
                xmlTbt_AccountInProcessParameter = new ObjectParameter("xmlTbt_AccountInProcess", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInprocess>("UpdateTbt_AccountInProcess", xmlTbt_AccountInProcessParameter);
        }
        public ObjectResult<tbt_AccountInstock> UpdateTbt_AccountInStock(string xmlTbt_AccountInStock)
        {
    
            ObjectParameter xmlTbt_AccountInStockParameter;
    
            if (xmlTbt_AccountInStock != null)
            {
                xmlTbt_AccountInStockParameter = new ObjectParameter("xmlTbt_AccountInStock", xmlTbt_AccountInStock);
            }
            else
            {
                xmlTbt_AccountInStockParameter = new ObjectParameter("xmlTbt_AccountInStock", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstock>("UpdateTbt_AccountInStock", xmlTbt_AccountInStockParameter);
        }
        public ObjectResult<tbt_AccountInstock> InsertTbt_AccountInStock(string xmlTbt_AccountInStock)
        {
    
            ObjectParameter xmlTbt_AccountInStockParameter;
    
            if (xmlTbt_AccountInStock != null)
            {
                xmlTbt_AccountInStockParameter = new ObjectParameter("xmlTbt_AccountInStock", xmlTbt_AccountInStock);
            }
            else
            {
                xmlTbt_AccountInStockParameter = new ObjectParameter("xmlTbt_AccountInStock", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstock>("InsertTbt_AccountInStock", xmlTbt_AccountInStockParameter);
        }
        public ObjectResult<tbt_AccountInstock> UpdateMovingAveragePriceForInStockGroup(Nullable<decimal> decMovingAveragePrice, string c_INV_LOC_INSTOCK, string c_INV_LOC_TRANSFER, string strInstrumentCode)
        {
    
            ObjectParameter decMovingAveragePriceParameter;
    
            if (decMovingAveragePrice.HasValue)
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", decMovingAveragePrice);
            }
            else
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", typeof(decimal));
            }
    
            ObjectParameter c_INV_LOC_INSTOCKParameter;
    
            if (c_INV_LOC_INSTOCK != null)
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", c_INV_LOC_INSTOCK);
            }
            else
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_TRANSFERParameter;
    
            if (c_INV_LOC_TRANSFER != null)
            {
                c_INV_LOC_TRANSFERParameter = new ObjectParameter("C_INV_LOC_TRANSFER", c_INV_LOC_TRANSFER);
            }
            else
            {
                c_INV_LOC_TRANSFERParameter = new ObjectParameter("C_INV_LOC_TRANSFER", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstock>("UpdateMovingAveragePriceForInStockGroup", decMovingAveragePriceParameter, c_INV_LOC_INSTOCKParameter, c_INV_LOC_TRANSFERParameter, strInstrumentCodeParameter);
        }
        public ObjectResult<tbt_AccountInstock> UpdateMovingAveragePriceForRepairingGroup(string c_INV_LOC_REPAIR_REQUEST, string c_INV_LOC_REPAIRING, string c_INV_LOC_REPAIR_RETURN, Nullable<decimal> decMovingAveragePrice, string strOfficeCode, string strInstrumentCode)
        {
    
            ObjectParameter c_INV_LOC_REPAIR_REQUESTParameter;
    
            if (c_INV_LOC_REPAIR_REQUEST != null)
            {
                c_INV_LOC_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_LOC_REPAIR_REQUEST", c_INV_LOC_REPAIR_REQUEST);
            }
            else
            {
                c_INV_LOC_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_LOC_REPAIR_REQUEST", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_REPAIRINGParameter;
    
            if (c_INV_LOC_REPAIRING != null)
            {
                c_INV_LOC_REPAIRINGParameter = new ObjectParameter("C_INV_LOC_REPAIRING", c_INV_LOC_REPAIRING);
            }
            else
            {
                c_INV_LOC_REPAIRINGParameter = new ObjectParameter("C_INV_LOC_REPAIRING", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_REPAIR_RETURNParameter;
    
            if (c_INV_LOC_REPAIR_RETURN != null)
            {
                c_INV_LOC_REPAIR_RETURNParameter = new ObjectParameter("C_INV_LOC_REPAIR_RETURN", c_INV_LOC_REPAIR_RETURN);
            }
            else
            {
                c_INV_LOC_REPAIR_RETURNParameter = new ObjectParameter("C_INV_LOC_REPAIR_RETURN", typeof(string));
            }
    
            ObjectParameter decMovingAveragePriceParameter;
    
            if (decMovingAveragePrice.HasValue)
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", decMovingAveragePrice);
            }
            else
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", typeof(decimal));
            }
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstock>("UpdateMovingAveragePriceForRepairingGroup", c_INV_LOC_REPAIR_REQUESTParameter, c_INV_LOC_REPAIRINGParameter, c_INV_LOC_REPAIR_RETURNParameter, decMovingAveragePriceParameter, strOfficeCodeParameter, strInstrumentCodeParameter);
        }
        public ObjectResult<tbt_AccountInprocess> UpdateMovingAveragePriceForWIPGroup(string strProjectCode, Nullable<decimal> decMovingAveragePrice, string strInstrumentCode, string strContractCode, string c_INV_LOC_PARTIAL, string c_INV_LOC_PROJECT_WIP, string c_INV_LOC_WIP, string c_INV_LOC_UNOPERATED_WIP)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
    
            ObjectParameter decMovingAveragePriceParameter;
    
            if (decMovingAveragePrice.HasValue)
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", decMovingAveragePrice);
            }
            else
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", typeof(decimal));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_PARTIALParameter;
    
            if (c_INV_LOC_PARTIAL != null)
            {
                c_INV_LOC_PARTIALParameter = new ObjectParameter("C_INV_LOC_PARTIAL", c_INV_LOC_PARTIAL);
            }
            else
            {
                c_INV_LOC_PARTIALParameter = new ObjectParameter("C_INV_LOC_PARTIAL", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_PROJECT_WIPParameter;
    
            if (c_INV_LOC_PROJECT_WIP != null)
            {
                c_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("C_INV_LOC_PROJECT_WIP", c_INV_LOC_PROJECT_WIP);
            }
            else
            {
                c_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("C_INV_LOC_PROJECT_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_WIPParameter;
    
            if (c_INV_LOC_WIP != null)
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", c_INV_LOC_WIP);
            }
            else
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_UNOPERATED_WIPParameter;
    
            if (c_INV_LOC_UNOPERATED_WIP != null)
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", c_INV_LOC_UNOPERATED_WIP);
            }
            else
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInprocess>("UpdateMovingAveragePriceForWIPGroup", strProjectCodeParameter, decMovingAveragePriceParameter, strInstrumentCodeParameter, strContractCodeParameter, c_INV_LOC_PARTIALParameter, c_INV_LOC_PROJECT_WIPParameter, c_INV_LOC_WIPParameter, c_INV_LOC_UNOPERATED_WIPParameter);
        }
        public ObjectResult<tbs_PurchaseOrderRunningNo> GetTbs_PurchaseOrderRunningNo(string yearCode, string monthCode, string nationCodeCode)
        {
    
            ObjectParameter yearCodeParameter;
    
            if (yearCode != null)
            {
                yearCodeParameter = new ObjectParameter("YearCode", yearCode);
            }
            else
            {
                yearCodeParameter = new ObjectParameter("YearCode", typeof(string));
            }
    
            ObjectParameter monthCodeParameter;
    
            if (monthCode != null)
            {
                monthCodeParameter = new ObjectParameter("MonthCode", monthCode);
            }
            else
            {
                monthCodeParameter = new ObjectParameter("MonthCode", typeof(string));
            }
    
            ObjectParameter nationCodeCodeParameter;
    
            if (nationCodeCode != null)
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", nationCodeCode);
            }
            else
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", typeof(string));
            }
            return base.ExecuteFunction<tbs_PurchaseOrderRunningNo>("GetTbs_PurchaseOrderRunningNo", yearCodeParameter, monthCodeParameter, nationCodeCodeParameter);
        }
        public ObjectResult<tbs_PurchaseOrderRunningNo> UpdateTbs_PurchaseOrderRunningNo(string yearCode, string monthCode, string nationCodeCode, string strRunningNo)
        {
    
            ObjectParameter yearCodeParameter;
    
            if (yearCode != null)
            {
                yearCodeParameter = new ObjectParameter("YearCode", yearCode);
            }
            else
            {
                yearCodeParameter = new ObjectParameter("YearCode", typeof(string));
            }
    
            ObjectParameter monthCodeParameter;
    
            if (monthCode != null)
            {
                monthCodeParameter = new ObjectParameter("MonthCode", monthCode);
            }
            else
            {
                monthCodeParameter = new ObjectParameter("MonthCode", typeof(string));
            }
    
            ObjectParameter nationCodeCodeParameter;
    
            if (nationCodeCode != null)
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", nationCodeCode);
            }
            else
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", typeof(string));
            }
    
            ObjectParameter strRunningNoParameter;
    
            if (strRunningNo != null)
            {
                strRunningNoParameter = new ObjectParameter("strRunningNo", strRunningNo);
            }
            else
            {
                strRunningNoParameter = new ObjectParameter("strRunningNo", typeof(string));
            }
            return base.ExecuteFunction<tbs_PurchaseOrderRunningNo>("UpdateTbs_PurchaseOrderRunningNo", yearCodeParameter, monthCodeParameter, nationCodeCodeParameter, strRunningNoParameter);
        }
        public ObjectResult<tbs_PurchaseOrderRunningNo> InsertTbs_PurchaseOrderRunningNo(string yearCode, string monthCode, string nationCodeCode, string runningNo)
        {
    
            ObjectParameter yearCodeParameter;
    
            if (yearCode != null)
            {
                yearCodeParameter = new ObjectParameter("YearCode", yearCode);
            }
            else
            {
                yearCodeParameter = new ObjectParameter("YearCode", typeof(string));
            }
    
            ObjectParameter monthCodeParameter;
    
            if (monthCode != null)
            {
                monthCodeParameter = new ObjectParameter("MonthCode", monthCode);
            }
            else
            {
                monthCodeParameter = new ObjectParameter("MonthCode", typeof(string));
            }
    
            ObjectParameter nationCodeCodeParameter;
    
            if (nationCodeCode != null)
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", nationCodeCode);
            }
            else
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", typeof(string));
            }
    
            ObjectParameter runningNoParameter;
    
            if (runningNo != null)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(string));
            }
            return base.ExecuteFunction<tbs_PurchaseOrderRunningNo>("InsertTbs_PurchaseOrderRunningNo", yearCodeParameter, monthCodeParameter, nationCodeCodeParameter, runningNoParameter);
        }
        public ObjectResult<tbt_PurchaseOrder> InsertTbt_PurchaseOrder(string xml_Tbt_PurchaseOrder)
        {
    
            ObjectParameter xml_Tbt_PurchaseOrderParameter;
    
            if (xml_Tbt_PurchaseOrder != null)
            {
                xml_Tbt_PurchaseOrderParameter = new ObjectParameter("xml_Tbt_PurchaseOrder", xml_Tbt_PurchaseOrder);
            }
            else
            {
                xml_Tbt_PurchaseOrderParameter = new ObjectParameter("xml_Tbt_PurchaseOrder", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrder>("InsertTbt_PurchaseOrder", xml_Tbt_PurchaseOrderParameter);
        }
        public ObjectResult<tbt_PurchaseOrderDetail> InsertTbt_PurchaseOrderDetail(string xml_Tbt_PurchaseOrderDetail)
        {
    
            ObjectParameter xml_Tbt_PurchaseOrderDetailParameter;
    
            if (xml_Tbt_PurchaseOrderDetail != null)
            {
                xml_Tbt_PurchaseOrderDetailParameter = new ObjectParameter("xml_Tbt_PurchaseOrderDetail", xml_Tbt_PurchaseOrderDetail);
            }
            else
            {
                xml_Tbt_PurchaseOrderDetailParameter = new ObjectParameter("xml_Tbt_PurchaseOrderDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrderDetail>("InsertTbt_PurchaseOrderDetail", xml_Tbt_PurchaseOrderDetailParameter);
        }
        public ObjectResult<doFIFOInstrumentPrice> GetFIFOInstrumentPrice(Nullable<int> intTransferQty, string strOfficeCode, string strLocationCode, string strInstrumentCode, Nullable<int> intPrevInstrumentQty, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter intTransferQtyParameter;
    
            if (intTransferQty.HasValue)
            {
                intTransferQtyParameter = new ObjectParameter("IntTransferQty", intTransferQty);
            }
            else
            {
                intTransferQtyParameter = new ObjectParameter("IntTransferQty", typeof(int));
            }
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strLocationCodeParameter;
    
            if (strLocationCode != null)
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", strLocationCode);
            }
            else
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter intPrevInstrumentQtyParameter;
    
            if (intPrevInstrumentQty.HasValue)
            {
                intPrevInstrumentQtyParameter = new ObjectParameter("IntPrevInstrumentQty", intPrevInstrumentQty);
            }
            else
            {
                intPrevInstrumentQtyParameter = new ObjectParameter("IntPrevInstrumentQty", typeof(int));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doFIFOInstrumentPrice>("GetFIFOInstrumentPrice", intTransferQtyParameter, strOfficeCodeParameter, strLocationCodeParameter, strInstrumentCodeParameter, intPrevInstrumentQtyParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<Nullable<int>> CheckNewInstrument(string slipNo, string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_DEMO)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SALEParameter;
    
            if (c_INV_AREA_NEW_SALE != null)
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", c_INV_AREA_NEW_SALE);
            }
            else
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_RENTALParameter;
    
            if (c_INV_AREA_NEW_RENTAL != null)
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", c_INV_AREA_NEW_RENTAL);
            }
            else
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_DEMOParameter;
    
            if (c_INV_AREA_NEW_DEMO != null)
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", c_INV_AREA_NEW_DEMO);
            }
            else
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckNewInstrument", slipNoParameter, c_INV_AREA_NEW_SALEParameter, c_INV_AREA_NEW_RENTALParameter, c_INV_AREA_NEW_DEMOParameter);
        }
        public ObjectResult<doGroupNewInstrument> GetGroupNewInstrument(string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_DEMO, string slipNo)
        {
    
            ObjectParameter c_INV_AREA_NEW_SALEParameter;
    
            if (c_INV_AREA_NEW_SALE != null)
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", c_INV_AREA_NEW_SALE);
            }
            else
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_RENTALParameter;
    
            if (c_INV_AREA_NEW_RENTAL != null)
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", c_INV_AREA_NEW_RENTAL);
            }
            else
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_DEMOParameter;
    
            if (c_INV_AREA_NEW_DEMO != null)
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", c_INV_AREA_NEW_DEMO);
            }
            else
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<doGroupNewInstrument>("GetGroupNewInstrument", c_INV_AREA_NEW_SALEParameter, c_INV_AREA_NEW_RENTALParameter, c_INV_AREA_NEW_DEMOParameter, slipNoParameter);
        }
        public ObjectResult<Nullable<int>> CheckSecondhandInstrument(string strInventorySlipNo, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_LENDING_DEMO, string c_INV_AREA_SE_HANDLING_DEMO)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_RENTALParameter;
    
            if (c_INV_AREA_SE_RENTAL != null)
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", c_INV_AREA_SE_RENTAL);
            }
            else
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_LENDING_DEMOParameter;
    
            if (c_INV_AREA_SE_LENDING_DEMO != null)
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", c_INV_AREA_SE_LENDING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_HANDLING_DEMOParameter;
    
            if (c_INV_AREA_SE_HANDLING_DEMO != null)
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", c_INV_AREA_SE_HANDLING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckSecondhandInstrument", strInventorySlipNoParameter, c_INV_AREA_SE_RENTALParameter, c_INV_AREA_SE_LENDING_DEMOParameter, c_INV_AREA_SE_HANDLING_DEMOParameter);
        }
        public ObjectResult<doGroupSecondhandInstrument> GetGroupSecondhandInstrument(string strInventorySlipNo, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_HANDLING_DEMO, string c_INV_AREA_SE_LENDING_DEMO)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_RENTALParameter;
    
            if (c_INV_AREA_SE_RENTAL != null)
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", c_INV_AREA_SE_RENTAL);
            }
            else
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_HANDLING_DEMOParameter;
    
            if (c_INV_AREA_SE_HANDLING_DEMO != null)
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", c_INV_AREA_SE_HANDLING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_LENDING_DEMOParameter;
    
            if (c_INV_AREA_SE_LENDING_DEMO != null)
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", c_INV_AREA_SE_LENDING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", typeof(string));
            }
            return base.ExecuteFunction<doGroupSecondhandInstrument>("GetGroupSecondhandInstrument", strInventorySlipNoParameter, c_INV_AREA_SE_RENTALParameter, c_INV_AREA_SE_HANDLING_DEMOParameter, c_INV_AREA_SE_LENDING_DEMOParameter);
        }
        public ObjectResult<doFIFOInstrument> GetFIFOInstrument(string strOfficeCode, string strLocationCode, string strInstrumentCode)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strLocationCodeParameter;
    
            if (strLocationCode != null)
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", strLocationCode);
            }
            else
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<doFIFOInstrument>("GetFIFOInstrument", strOfficeCodeParameter, strLocationCodeParameter, strInstrumentCodeParameter);
        }
        public ObjectResult<tbt_AccountInstalled> UpdateTbt_AccountInstalled(string xmltbt_AccountInstalled)
        {
    
            ObjectParameter xmltbt_AccountInstalledParameter;
    
            if (xmltbt_AccountInstalled != null)
            {
                xmltbt_AccountInstalledParameter = new ObjectParameter("xmltbt_AccountInstalled", xmltbt_AccountInstalled);
            }
            else
            {
                xmltbt_AccountInstalledParameter = new ObjectParameter("xmltbt_AccountInstalled", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstalled>("UpdateTbt_AccountInstalled", xmltbt_AccountInstalledParameter);
        }
        public ObjectResult<tbt_AccountInstalled> InsertTbt_AccountInstalled(string xmltbt_AccountInstalled)
        {
    
            ObjectParameter xmltbt_AccountInstalledParameter;
    
            if (xmltbt_AccountInstalled != null)
            {
                xmltbt_AccountInstalledParameter = new ObjectParameter("xmltbt_AccountInstalled", xmltbt_AccountInstalled);
            }
            else
            {
                xmltbt_AccountInstalledParameter = new ObjectParameter("xmltbt_AccountInstalled", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstalled>("InsertTbt_AccountInstalled", xmltbt_AccountInstalledParameter);
        }
        public ObjectResult<Nullable<int>> CheckSampleInstrument(string strInventorySlipNo, string c_INV_AREA_NEW_SAMPLE)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SAMPLEParameter;
    
            if (c_INV_AREA_NEW_SAMPLE != null)
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", c_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckSampleInstrument", strInventorySlipNoParameter, c_INV_AREA_NEW_SAMPLEParameter);
        }
        public ObjectResult<doGroupSampleInstrument> GetGroupSampleInstrument(string strInventorySlipNo, string c_INV_AREA_NEW_SAMPLE)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SAMPLEParameter;
    
            if (c_INV_AREA_NEW_SAMPLE != null)
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", c_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", typeof(string));
            }
            return base.ExecuteFunction<doGroupSampleInstrument>("GetGroupSampleInstrument", strInventorySlipNoParameter, c_INV_AREA_NEW_SAMPLEParameter);
        }
        public ObjectResult<tbt_AccountStockMoving> InsertAccountStockMoving(string xmlTbt_AccountStockMoving)
        {
    
            ObjectParameter xmlTbt_AccountStockMovingParameter;
    
            if (xmlTbt_AccountStockMoving != null)
            {
                xmlTbt_AccountStockMovingParameter = new ObjectParameter("xmlTbt_AccountStockMoving", xmlTbt_AccountStockMoving);
            }
            else
            {
                xmlTbt_AccountStockMovingParameter = new ObjectParameter("xmlTbt_AccountStockMoving", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountStockMoving>("InsertAccountStockMoving", xmlTbt_AccountStockMovingParameter);
        }
        public ObjectResult<doOffice> GetInventoryOffice(string c_OFFICELOGISTIC_NONE)
        {
    
            ObjectParameter c_OFFICELOGISTIC_NONEParameter;
    
            if (c_OFFICELOGISTIC_NONE != null)
            {
                c_OFFICELOGISTIC_NONEParameter = new ObjectParameter("C_OFFICELOGISTIC_NONE", c_OFFICELOGISTIC_NONE);
            }
            else
            {
                c_OFFICELOGISTIC_NONEParameter = new ObjectParameter("C_OFFICELOGISTIC_NONE", typeof(string));
            }
            return base.ExecuteFunction<doOffice>("GetInventoryOffice", c_OFFICELOGISTIC_NONEParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistSummaryAsset(string strYearMonth)
        {
    
            ObjectParameter strYearMonthParameter;
    
            if (strYearMonth != null)
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", strYearMonth);
            }
            else
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistSummaryAsset", strYearMonthParameter);
        }
        public ObjectResult<doInventorySlip> SearchInventorySlip(string c_INV_LOC, string inventorySlipNo)
        {
    
            ObjectParameter c_INV_LOCParameter;
    
            if (c_INV_LOC != null)
            {
                c_INV_LOCParameter = new ObjectParameter("C_INV_LOC", c_INV_LOC);
            }
            else
            {
                c_INV_LOCParameter = new ObjectParameter("C_INV_LOC", typeof(string));
            }
    
            ObjectParameter inventorySlipNoParameter;
    
            if (inventorySlipNo != null)
            {
                inventorySlipNoParameter = new ObjectParameter("InventorySlipNo", inventorySlipNo);
            }
            else
            {
                inventorySlipNoParameter = new ObjectParameter("InventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<doInventorySlip>("SearchInventorySlip", c_INV_LOCParameter, inventorySlipNoParameter);
        }
        public ObjectResult<doInventorySlipDetail> SearchInventorySlipDetail(string c_INV_AREA, string inventorySlipNo)
        {
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
    
            ObjectParameter inventorySlipNoParameter;
    
            if (inventorySlipNo != null)
            {
                inventorySlipNoParameter = new ObjectParameter("InventorySlipNo", inventorySlipNo);
            }
            else
            {
                inventorySlipNoParameter = new ObjectParameter("InventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<doInventorySlipDetail>("SearchInventorySlipDetail", c_INV_AREAParameter, inventorySlipNoParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistSummaryInOutHeadOffice(Nullable<System.DateTime> checkDate)
        {
    
            ObjectParameter checkDateParameter;
    
            if (checkDate.HasValue)
            {
                checkDateParameter = new ObjectParameter("CheckDate", checkDate);
            }
            else
            {
                checkDateParameter = new ObjectParameter("CheckDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistSummaryInOutHeadOffice", checkDateParameter);
        }
        public ObjectResult<tbt_InventorySlipDetail> GetTbt_InventorySlipDetail(string slipNo, Nullable<int> runningNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("slipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("slipNo", typeof(string));
            }
    
            ObjectParameter runningNoParameter;
    
            if (runningNo.HasValue)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(int));
            }
            return base.ExecuteFunction<tbt_InventorySlipDetail>("GetTbt_InventorySlipDetail", slipNoParameter, runningNoParameter);
        }
        public int UpdateTbt_InventoryCurrentByLocation(string sourceOfficeCode, string destinationOfficeCode, string sourceLocationCode, string destinationLocationCode, string sourceAreaCode, string destinationAreaCode, string sourceShelfNo, string destinationShelfNo, string instrumentCode, Nullable<int> transferQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter sourceOfficeCodeParameter;
    
            if (sourceOfficeCode != null)
            {
                sourceOfficeCodeParameter = new ObjectParameter("SourceOfficeCode", sourceOfficeCode);
            }
            else
            {
                sourceOfficeCodeParameter = new ObjectParameter("SourceOfficeCode", typeof(string));
            }
    
            ObjectParameter destinationOfficeCodeParameter;
    
            if (destinationOfficeCode != null)
            {
                destinationOfficeCodeParameter = new ObjectParameter("DestinationOfficeCode", destinationOfficeCode);
            }
            else
            {
                destinationOfficeCodeParameter = new ObjectParameter("DestinationOfficeCode", typeof(string));
            }
    
            ObjectParameter sourceLocationCodeParameter;
    
            if (sourceLocationCode != null)
            {
                sourceLocationCodeParameter = new ObjectParameter("SourceLocationCode", sourceLocationCode);
            }
            else
            {
                sourceLocationCodeParameter = new ObjectParameter("SourceLocationCode", typeof(string));
            }
    
            ObjectParameter destinationLocationCodeParameter;
    
            if (destinationLocationCode != null)
            {
                destinationLocationCodeParameter = new ObjectParameter("DestinationLocationCode", destinationLocationCode);
            }
            else
            {
                destinationLocationCodeParameter = new ObjectParameter("DestinationLocationCode", typeof(string));
            }
    
            ObjectParameter sourceAreaCodeParameter;
    
            if (sourceAreaCode != null)
            {
                sourceAreaCodeParameter = new ObjectParameter("SourceAreaCode", sourceAreaCode);
            }
            else
            {
                sourceAreaCodeParameter = new ObjectParameter("SourceAreaCode", typeof(string));
            }
    
            ObjectParameter destinationAreaCodeParameter;
    
            if (destinationAreaCode != null)
            {
                destinationAreaCodeParameter = new ObjectParameter("DestinationAreaCode", destinationAreaCode);
            }
            else
            {
                destinationAreaCodeParameter = new ObjectParameter("DestinationAreaCode", typeof(string));
            }
    
            ObjectParameter sourceShelfNoParameter;
    
            if (sourceShelfNo != null)
            {
                sourceShelfNoParameter = new ObjectParameter("SourceShelfNo", sourceShelfNo);
            }
            else
            {
                sourceShelfNoParameter = new ObjectParameter("SourceShelfNo", typeof(string));
            }
    
            ObjectParameter destinationShelfNoParameter;
    
            if (destinationShelfNo != null)
            {
                destinationShelfNoParameter = new ObjectParameter("DestinationShelfNo", destinationShelfNo);
            }
            else
            {
                destinationShelfNoParameter = new ObjectParameter("DestinationShelfNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter transferQtyParameter;
    
            if (transferQty.HasValue)
            {
                transferQtyParameter = new ObjectParameter("TransferQty", transferQty);
            }
            else
            {
                transferQtyParameter = new ObjectParameter("TransferQty", typeof(int));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction("UpdateTbt_InventoryCurrentByLocation", sourceOfficeCodeParameter, destinationOfficeCodeParameter, sourceLocationCodeParameter, destinationLocationCodeParameter, sourceAreaCodeParameter, destinationAreaCodeParameter, sourceShelfNoParameter, destinationShelfNoParameter, instrumentCodeParameter, transferQtyParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbt_InventorySlip> UpdateTbt_InventorySlip(string xmlTbt_InventorySlip)
        {
    
            ObjectParameter xmlTbt_InventorySlipParameter;
    
            if (xmlTbt_InventorySlip != null)
            {
                xmlTbt_InventorySlipParameter = new ObjectParameter("xmlTbt_InventorySlip", xmlTbt_InventorySlip);
            }
            else
            {
                xmlTbt_InventorySlipParameter = new ObjectParameter("xmlTbt_InventorySlip", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlip>("UpdateTbt_InventorySlip", xmlTbt_InventorySlipParameter);
        }
        public ObjectResult<dtBatchProcessResult> GenerateSummaryInventoryInOutReport(Nullable<System.DateTime> tRANSFERMONTH, Nullable<System.DateTime> dateBatchDate, string c_INV_LOC_BUFFER, string c_INV_LOC_INSTOCK, string c_INV_LOC_PRE_ELIMINATION, string c_INV_LOC_REPAIR_REQUEST, string c_INV_LOC_REPAIR_RETURN, string c_INV_LOC_RETURN_WIP, string c_INV_LOC_RETURNED, string c_INV_LOC_SPECIAL, string c_INV_LOC_TRANSFER, string c_INV_LOC_UNOPERATED_WIP, string c_INV_LOC_USER, string c_INV_LOC_WAITING_RETURN, string c_INV_LOC_WIP, string c_INV_SLIP_STATUS_COMPLETE, string c_INV_TRANSFERTYPE_CANCEL_INSTALLATION, string c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION, string c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, string c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, string c_INV_TRANSFERTYPE_COMPLETE_PROJECT, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_TRANSFERTYPE_FIX_ADJUSTMENT, string c_INV_TRANSFERTYPE_PRE_ELIMINATION, string c_INV_TRANSFERTYPE_RECEIVE_RETURNED, string c_INV_TRANSFERTYPE_REPAIR_REQUEST, string c_INV_TRANSFERTYPE_REPAIR_RETURN, string c_INV_TRANSFERTYPE_START_SERVICE, string c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PROJECT, string c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string c_INV_TRANSFERTYPE_TRANSFER_BUFFER, string c_INV_TRANSFERTYPE_TRANSFER_OFFICE, string c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW, string c_RENTAL_INSTALL_TYPE_NEW, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, Nullable<bool> c_FLAG_OFF, Nullable<bool> c_FLAG_ON, string c_INV_LOC_PROJECT_WIP, string c_INV_LOC_PARTIAL_OUT, string c_INV_LOC_REPAIRING, string c_INV_LOC_ELIMINATION)
        {
    
            ObjectParameter tRANSFERMONTHParameter;
    
            if (tRANSFERMONTH.HasValue)
            {
                tRANSFERMONTHParameter = new ObjectParameter("TRANSFERMONTH", tRANSFERMONTH);
            }
            else
            {
                tRANSFERMONTHParameter = new ObjectParameter("TRANSFERMONTH", typeof(System.DateTime));
            }
    
            ObjectParameter dateBatchDateParameter;
    
            if (dateBatchDate.HasValue)
            {
                dateBatchDateParameter = new ObjectParameter("dateBatchDate", dateBatchDate);
            }
            else
            {
                dateBatchDateParameter = new ObjectParameter("dateBatchDate", typeof(System.DateTime));
            }
    
            ObjectParameter c_INV_LOC_BUFFERParameter;
    
            if (c_INV_LOC_BUFFER != null)
            {
                c_INV_LOC_BUFFERParameter = new ObjectParameter("C_INV_LOC_BUFFER", c_INV_LOC_BUFFER);
            }
            else
            {
                c_INV_LOC_BUFFERParameter = new ObjectParameter("C_INV_LOC_BUFFER", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_INSTOCKParameter;
    
            if (c_INV_LOC_INSTOCK != null)
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", c_INV_LOC_INSTOCK);
            }
            else
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_PRE_ELIMINATIONParameter;
    
            if (c_INV_LOC_PRE_ELIMINATION != null)
            {
                c_INV_LOC_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_PRE_ELIMINATION", c_INV_LOC_PRE_ELIMINATION);
            }
            else
            {
                c_INV_LOC_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_PRE_ELIMINATION", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_REPAIR_REQUESTParameter;
    
            if (c_INV_LOC_REPAIR_REQUEST != null)
            {
                c_INV_LOC_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_LOC_REPAIR_REQUEST", c_INV_LOC_REPAIR_REQUEST);
            }
            else
            {
                c_INV_LOC_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_LOC_REPAIR_REQUEST", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_REPAIR_RETURNParameter;
    
            if (c_INV_LOC_REPAIR_RETURN != null)
            {
                c_INV_LOC_REPAIR_RETURNParameter = new ObjectParameter("C_INV_LOC_REPAIR_RETURN", c_INV_LOC_REPAIR_RETURN);
            }
            else
            {
                c_INV_LOC_REPAIR_RETURNParameter = new ObjectParameter("C_INV_LOC_REPAIR_RETURN", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_RETURN_WIPParameter;
    
            if (c_INV_LOC_RETURN_WIP != null)
            {
                c_INV_LOC_RETURN_WIPParameter = new ObjectParameter("C_INV_LOC_RETURN_WIP", c_INV_LOC_RETURN_WIP);
            }
            else
            {
                c_INV_LOC_RETURN_WIPParameter = new ObjectParameter("C_INV_LOC_RETURN_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_RETURNEDParameter;
    
            if (c_INV_LOC_RETURNED != null)
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", c_INV_LOC_RETURNED);
            }
            else
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_SPECIALParameter;
    
            if (c_INV_LOC_SPECIAL != null)
            {
                c_INV_LOC_SPECIALParameter = new ObjectParameter("C_INV_LOC_SPECIAL", c_INV_LOC_SPECIAL);
            }
            else
            {
                c_INV_LOC_SPECIALParameter = new ObjectParameter("C_INV_LOC_SPECIAL", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_TRANSFERParameter;
    
            if (c_INV_LOC_TRANSFER != null)
            {
                c_INV_LOC_TRANSFERParameter = new ObjectParameter("C_INV_LOC_TRANSFER", c_INV_LOC_TRANSFER);
            }
            else
            {
                c_INV_LOC_TRANSFERParameter = new ObjectParameter("C_INV_LOC_TRANSFER", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_UNOPERATED_WIPParameter;
    
            if (c_INV_LOC_UNOPERATED_WIP != null)
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", c_INV_LOC_UNOPERATED_WIP);
            }
            else
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_USERParameter;
    
            if (c_INV_LOC_USER != null)
            {
                c_INV_LOC_USERParameter = new ObjectParameter("C_INV_LOC_USER", c_INV_LOC_USER);
            }
            else
            {
                c_INV_LOC_USERParameter = new ObjectParameter("C_INV_LOC_USER", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_WAITING_RETURNParameter;
    
            if (c_INV_LOC_WAITING_RETURN != null)
            {
                c_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("C_INV_LOC_WAITING_RETURN", c_INV_LOC_WAITING_RETURN);
            }
            else
            {
                c_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("C_INV_LOC_WAITING_RETURN", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_WIPParameter;
    
            if (c_INV_LOC_WIP != null)
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", c_INV_LOC_WIP);
            }
            else
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_SLIP_STATUS_COMPLETEParameter;
    
            if (c_INV_SLIP_STATUS_COMPLETE != null)
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", c_INV_SLIP_STATUS_COMPLETE);
            }
            else
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter;
    
            if (c_INV_TRANSFERTYPE_CANCEL_INSTALLATION != null)
            {
                c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CANCEL_INSTALLATION", c_INV_TRANSFERTYPE_CANCEL_INSTALLATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CANCEL_INSTALLATION", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter;
    
            if (c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION != null)
            {
                c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CHANGE_INVESTIGATION", c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CHANGE_INVESTIGATION", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_AFTER_START != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_AFTER_START", c_INV_TRANSFERTYPE_COMPLETE_AFTER_START);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_AFTER_START", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_BEFORE_START", c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_BEFORE_START", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_PROJECTParameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_PROJECT != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_PROJECTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_PROJECT", c_INV_TRANSFERTYPE_COMPLETE_PROJECT);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_PROJECTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter;
    
            if (c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE != null)
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE);
            }
            else
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter;
    
            if (c_INV_TRANSFERTYPE_FIX_ADJUSTMENT != null)
            {
                c_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_FIX_ADJUSTMENT", c_INV_TRANSFERTYPE_FIX_ADJUSTMENT);
            }
            else
            {
                c_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_FIX_ADJUSTMENT", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter;
    
            if (c_INV_TRANSFERTYPE_PRE_ELIMINATION != null)
            {
                c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_PRE_ELIMINATION", c_INV_TRANSFERTYPE_PRE_ELIMINATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_PRE_ELIMINATION", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_RECEIVE_RETURNEDParameter;
    
            if (c_INV_TRANSFERTYPE_RECEIVE_RETURNED != null)
            {
                c_INV_TRANSFERTYPE_RECEIVE_RETURNEDParameter = new ObjectParameter("C_INV_TRANSFERTYPE_RECEIVE_RETURNED", c_INV_TRANSFERTYPE_RECEIVE_RETURNED);
            }
            else
            {
                c_INV_TRANSFERTYPE_RECEIVE_RETURNEDParameter = new ObjectParameter("C_INV_TRANSFERTYPE_RECEIVE_RETURNED", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter;
    
            if (c_INV_TRANSFERTYPE_REPAIR_REQUEST != null)
            {
                c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_REQUEST", c_INV_TRANSFERTYPE_REPAIR_REQUEST);
            }
            else
            {
                c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_REQUEST", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_REPAIR_RETURNParameter;
    
            if (c_INV_TRANSFERTYPE_REPAIR_RETURN != null)
            {
                c_INV_TRANSFERTYPE_REPAIR_RETURNParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_RETURN", c_INV_TRANSFERTYPE_REPAIR_RETURN);
            }
            else
            {
                c_INV_TRANSFERTYPE_REPAIR_RETURNParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_RETURN", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_START_SERVICEParameter;
    
            if (c_INV_TRANSFERTYPE_START_SERVICE != null)
            {
                c_INV_TRANSFERTYPE_START_SERVICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_START_SERVICE", c_INV_TRANSFERTYPE_START_SERVICE);
            }
            else
            {
                c_INV_TRANSFERTYPE_START_SERVICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_START_SERVICE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKIN_PURCHASE != null)
            {
                c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_PURCHASE", c_INV_TRANSFERTYPE_STOCKIN_PURCHASE);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_PURCHASE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKIN_SPECIAL != null)
            {
                c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_SPECIAL", c_INV_TRANSFERTYPE_STOCKIN_SPECIAL);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_SPECIAL", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PROJECT != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PROJECT", c_INV_TRANSFERTYPE_STOCKOUT_PROJECT);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PROJECT", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter;
    
            if (c_INV_TRANSFERTYPE_TRANSFER_BUFFER != null)
            {
                c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_BUFFER", c_INV_TRANSFERTYPE_TRANSFER_BUFFER);
            }
            else
            {
                c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_BUFFER", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter;
    
            if (c_INV_TRANSFERTYPE_TRANSFER_OFFICE != null)
            {
                c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_OFFICE", c_INV_TRANSFERTYPE_TRANSFER_OFFICE);
            }
            else
            {
                c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_OFFICE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter;
    
            if (c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW != null)
            {
                c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW", c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_NEWParameter;
    
            if (c_RENTAL_INSTALL_TYPE_NEW != null)
            {
                c_RENTAL_INSTALL_TYPE_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_NEW", c_RENTAL_INSTALL_TYPE_NEW);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_NEW", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_SALE_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", c_SALE_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_FLAG_OFFParameter;
    
            if (c_FLAG_OFF.HasValue)
            {
                c_FLAG_OFFParameter = new ObjectParameter("C_FLAG_OFF", c_FLAG_OFF);
            }
            else
            {
                c_FLAG_OFFParameter = new ObjectParameter("C_FLAG_OFF", typeof(bool));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
    
            ObjectParameter c_INV_LOC_PROJECT_WIPParameter;
    
            if (c_INV_LOC_PROJECT_WIP != null)
            {
                c_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("C_INV_LOC_PROJECT_WIP", c_INV_LOC_PROJECT_WIP);
            }
            else
            {
                c_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("C_INV_LOC_PROJECT_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_PARTIAL_OUTParameter;
    
            if (c_INV_LOC_PARTIAL_OUT != null)
            {
                c_INV_LOC_PARTIAL_OUTParameter = new ObjectParameter("C_INV_LOC_PARTIAL_OUT", c_INV_LOC_PARTIAL_OUT);
            }
            else
            {
                c_INV_LOC_PARTIAL_OUTParameter = new ObjectParameter("C_INV_LOC_PARTIAL_OUT", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_REPAIRINGParameter;
    
            if (c_INV_LOC_REPAIRING != null)
            {
                c_INV_LOC_REPAIRINGParameter = new ObjectParameter("C_INV_LOC_REPAIRING", c_INV_LOC_REPAIRING);
            }
            else
            {
                c_INV_LOC_REPAIRINGParameter = new ObjectParameter("C_INV_LOC_REPAIRING", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_ELIMINATIONParameter;
    
            if (c_INV_LOC_ELIMINATION != null)
            {
                c_INV_LOC_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_ELIMINATION", c_INV_LOC_ELIMINATION);
            }
            else
            {
                c_INV_LOC_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_ELIMINATION", typeof(string));
            }
            return base.ExecuteFunction<dtBatchProcessResult>("GenerateSummaryInventoryInOutReport", tRANSFERMONTHParameter, dateBatchDateParameter, c_INV_LOC_BUFFERParameter, c_INV_LOC_INSTOCKParameter, c_INV_LOC_PRE_ELIMINATIONParameter, c_INV_LOC_REPAIR_REQUESTParameter, c_INV_LOC_REPAIR_RETURNParameter, c_INV_LOC_RETURN_WIPParameter, c_INV_LOC_RETURNEDParameter, c_INV_LOC_SPECIALParameter, c_INV_LOC_TRANSFERParameter, c_INV_LOC_UNOPERATED_WIPParameter, c_INV_LOC_USERParameter, c_INV_LOC_WAITING_RETURNParameter, c_INV_LOC_WIPParameter, c_INV_SLIP_STATUS_COMPLETEParameter, c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter, c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter, c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter, c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter, c_INV_TRANSFERTYPE_COMPLETE_PROJECTParameter, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter, c_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter, c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter, c_INV_TRANSFERTYPE_RECEIVE_RETURNEDParameter, c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter, c_INV_TRANSFERTYPE_REPAIR_RETURNParameter, c_INV_TRANSFERTYPE_START_SERVICEParameter, c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter, c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter, c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter, c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter, c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter, c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter, c_RENTAL_INSTALL_TYPE_NEWParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPE_REMOVE_ALLParameter, c_FLAG_OFFParameter, c_FLAG_ONParameter, c_INV_LOC_PROJECT_WIPParameter, c_INV_LOC_PARTIAL_OUTParameter, c_INV_LOC_REPAIRINGParameter, c_INV_LOC_ELIMINATIONParameter);
        }
        public ObjectResult<Nullable<int>> CheckFreezedData()
        {
            return base.ExecuteFunction<Nullable<int>>("CheckFreezedData");
        }
        public ObjectResult<Nullable<int>> CheckStartedStockChecking()
        {
            return base.ExecuteFunction<Nullable<int>>("CheckStartedStockChecking");
        }
        public ObjectResult<dtBatchProcessResult> GenerateInventorySummaryAsset(string strYearMonth, string c_FUNC_LOGISTIC_HQ, string c_INV_OFFICE_SNR, string c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string c_INV_TRANSFERTYPE_TRANSFER_OFFICE, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_DEMO, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_LENDING_DEMO, string c_INV_AREA_SE_HANDLING_DEMO, string c_INV_SLIP_STATUS_COMPLETE, string c_INV_SLIP_STATUS_TRANSFER, string c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, string c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, string c_INV_TRANSFERTYPE_COMPLETE_MK30, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string c_INV_TRANSFERTYPE_START_SERVICE, string c_INV_TRANSFERTYPE_PRE_ELIMINATION, string c_INV_TRANSFERTYPE_CANCEL_INSTALLATION, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_TRANSFERTYPE_CHECKING_RETURNED, string c_INV_TRANSFERTYPE_REPAIR_REQUEST, string c_INV_TRANSFERTYPE_REPAIR_RETURN, string c_INV_TRANSFERTYPE_TRANSFER_BUFFER, string c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION, string c_SALE_INSTALL_TYPE_ADD, string c_SALE_INSTALL_TYPE_NEW, string c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW, string c_RENTAL_INSTALL_TYPE_NEW, string c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEW, string c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE, string c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP, string c_INV_LOC_WAITING_RETURN, string c_INV_LOC_RETURNED, string c_INV_LOC_INSTOCK, string c_INV_LOC_REPAIRING, string c_INV_LOC_BUFFER, string c_INV_LOC_USER, string c_INV_LOC_PROJECT_WIP, string c_INV_LOC_UNOPERATED_WIP, string c_INV_LOC_WIP, Nullable<bool> c_FLAG_OFF, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter strYearMonthParameter;
    
            if (strYearMonth != null)
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", strYearMonth);
            }
            else
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", typeof(string));
            }
    
            ObjectParameter c_FUNC_LOGISTIC_HQParameter;
    
            if (c_FUNC_LOGISTIC_HQ != null)
            {
                c_FUNC_LOGISTIC_HQParameter = new ObjectParameter("C_FUNC_LOGISTIC_HQ", c_FUNC_LOGISTIC_HQ);
            }
            else
            {
                c_FUNC_LOGISTIC_HQParameter = new ObjectParameter("C_FUNC_LOGISTIC_HQ", typeof(string));
            }
    
            ObjectParameter c_INV_OFFICE_SNRParameter;
    
            if (c_INV_OFFICE_SNR != null)
            {
                c_INV_OFFICE_SNRParameter = new ObjectParameter("C_INV_OFFICE_SNR", c_INV_OFFICE_SNR);
            }
            else
            {
                c_INV_OFFICE_SNRParameter = new ObjectParameter("C_INV_OFFICE_SNR", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKIN_PURCHASE != null)
            {
                c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_PURCHASE", c_INV_TRANSFERTYPE_STOCKIN_PURCHASE);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_PURCHASE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKIN_SPECIAL != null)
            {
                c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_SPECIAL", c_INV_TRANSFERTYPE_STOCKIN_SPECIAL);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_SPECIAL", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter;
    
            if (c_INV_TRANSFERTYPE_TRANSFER_OFFICE != null)
            {
                c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_OFFICE", c_INV_TRANSFERTYPE_TRANSFER_OFFICE);
            }
            else
            {
                c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_OFFICE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SAMPLEParameter;
    
            if (c_INV_AREA_NEW_SAMPLE != null)
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", c_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SALEParameter;
    
            if (c_INV_AREA_NEW_SALE != null)
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", c_INV_AREA_NEW_SALE);
            }
            else
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_RENTALParameter;
    
            if (c_INV_AREA_NEW_RENTAL != null)
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", c_INV_AREA_NEW_RENTAL);
            }
            else
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_DEMOParameter;
    
            if (c_INV_AREA_NEW_DEMO != null)
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", c_INV_AREA_NEW_DEMO);
            }
            else
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_RENTALParameter;
    
            if (c_INV_AREA_SE_RENTAL != null)
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", c_INV_AREA_SE_RENTAL);
            }
            else
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_LENDING_DEMOParameter;
    
            if (c_INV_AREA_SE_LENDING_DEMO != null)
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", c_INV_AREA_SE_LENDING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_HANDLING_DEMOParameter;
    
            if (c_INV_AREA_SE_HANDLING_DEMO != null)
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", c_INV_AREA_SE_HANDLING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_SLIP_STATUS_COMPLETEParameter;
    
            if (c_INV_SLIP_STATUS_COMPLETE != null)
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", c_INV_SLIP_STATUS_COMPLETE);
            }
            else
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INV_SLIP_STATUS_TRANSFERParameter;
    
            if (c_INV_SLIP_STATUS_TRANSFER != null)
            {
                c_INV_SLIP_STATUS_TRANSFERParameter = new ObjectParameter("C_INV_SLIP_STATUS_TRANSFER", c_INV_SLIP_STATUS_TRANSFER);
            }
            else
            {
                c_INV_SLIP_STATUS_TRANSFERParameter = new ObjectParameter("C_INV_SLIP_STATUS_TRANSFER", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_AFTER_START != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_AFTER_START", c_INV_TRANSFERTYPE_COMPLETE_AFTER_START);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_AFTER_START", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_BEFORE_START", c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_BEFORE_START", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_MK30Parameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_MK30 != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_MK30Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_MK30", c_INV_TRANSFERTYPE_COMPLETE_MK30);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_MK30Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_MK30", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_START_SERVICEParameter;
    
            if (c_INV_TRANSFERTYPE_START_SERVICE != null)
            {
                c_INV_TRANSFERTYPE_START_SERVICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_START_SERVICE", c_INV_TRANSFERTYPE_START_SERVICE);
            }
            else
            {
                c_INV_TRANSFERTYPE_START_SERVICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_START_SERVICE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter;
    
            if (c_INV_TRANSFERTYPE_PRE_ELIMINATION != null)
            {
                c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_PRE_ELIMINATION", c_INV_TRANSFERTYPE_PRE_ELIMINATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_PRE_ELIMINATION", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter;
    
            if (c_INV_TRANSFERTYPE_CANCEL_INSTALLATION != null)
            {
                c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CANCEL_INSTALLATION", c_INV_TRANSFERTYPE_CANCEL_INSTALLATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CANCEL_INSTALLATION", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter;
    
            if (c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE != null)
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE);
            }
            else
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CHECKING_RETURNEDParameter;
    
            if (c_INV_TRANSFERTYPE_CHECKING_RETURNED != null)
            {
                c_INV_TRANSFERTYPE_CHECKING_RETURNEDParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CHECKING_RETURNED", c_INV_TRANSFERTYPE_CHECKING_RETURNED);
            }
            else
            {
                c_INV_TRANSFERTYPE_CHECKING_RETURNEDParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CHECKING_RETURNED", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter;
    
            if (c_INV_TRANSFERTYPE_REPAIR_REQUEST != null)
            {
                c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_REQUEST", c_INV_TRANSFERTYPE_REPAIR_REQUEST);
            }
            else
            {
                c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_REQUEST", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_REPAIR_RETURNParameter;
    
            if (c_INV_TRANSFERTYPE_REPAIR_RETURN != null)
            {
                c_INV_TRANSFERTYPE_REPAIR_RETURNParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_RETURN", c_INV_TRANSFERTYPE_REPAIR_RETURN);
            }
            else
            {
                c_INV_TRANSFERTYPE_REPAIR_RETURNParameter = new ObjectParameter("C_INV_TRANSFERTYPE_REPAIR_RETURN", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter;
    
            if (c_INV_TRANSFERTYPE_TRANSFER_BUFFER != null)
            {
                c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_BUFFER", c_INV_TRANSFERTYPE_TRANSFER_BUFFER);
            }
            else
            {
                c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_BUFFER", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter;
    
            if (c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION != null)
            {
                c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CHANGE_INVESTIGATION", c_INV_TRANSFERTYPE_CHANGE_INVESTIGATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CHANGE_INVESTIGATION", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_ADDParameter;
    
            if (c_SALE_INSTALL_TYPE_ADD != null)
            {
                c_SALE_INSTALL_TYPE_ADDParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_ADD", c_SALE_INSTALL_TYPE_ADD);
            }
            else
            {
                c_SALE_INSTALL_TYPE_ADDParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_ADD", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_NEWParameter;
    
            if (c_SALE_INSTALL_TYPE_NEW != null)
            {
                c_SALE_INSTALL_TYPE_NEWParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_NEW", c_SALE_INSTALL_TYPE_NEW);
            }
            else
            {
                c_SALE_INSTALL_TYPE_NEWParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_NEW", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter;
    
            if (c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE != null)
            {
                c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE", c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE);
            }
            else
            {
                c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter;
    
            if (c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW != null)
            {
                c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW", c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEW", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_NEWParameter;
    
            if (c_RENTAL_INSTALL_TYPE_NEW != null)
            {
                c_RENTAL_INSTALL_TYPE_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_NEW", c_RENTAL_INSTALL_TYPE_NEW);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_NEW", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEWParameter;
    
            if (c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEW != null)
            {
                c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEW", c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEW);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEWParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEW", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter;
    
            if (c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE != null)
            {
                c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE", c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter;
    
            if (c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE != null)
            {
                c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE", c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter;
    
            if (c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP != null)
            {
                c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP", c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP);
            }
            else
            {
                c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_WAITING_RETURNParameter;
    
            if (c_INV_LOC_WAITING_RETURN != null)
            {
                c_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("C_INV_LOC_WAITING_RETURN", c_INV_LOC_WAITING_RETURN);
            }
            else
            {
                c_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("C_INV_LOC_WAITING_RETURN", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_RETURNEDParameter;
    
            if (c_INV_LOC_RETURNED != null)
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", c_INV_LOC_RETURNED);
            }
            else
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_INSTOCKParameter;
    
            if (c_INV_LOC_INSTOCK != null)
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", c_INV_LOC_INSTOCK);
            }
            else
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_REPAIRINGParameter;
    
            if (c_INV_LOC_REPAIRING != null)
            {
                c_INV_LOC_REPAIRINGParameter = new ObjectParameter("C_INV_LOC_REPAIRING", c_INV_LOC_REPAIRING);
            }
            else
            {
                c_INV_LOC_REPAIRINGParameter = new ObjectParameter("C_INV_LOC_REPAIRING", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_BUFFERParameter;
    
            if (c_INV_LOC_BUFFER != null)
            {
                c_INV_LOC_BUFFERParameter = new ObjectParameter("C_INV_LOC_BUFFER", c_INV_LOC_BUFFER);
            }
            else
            {
                c_INV_LOC_BUFFERParameter = new ObjectParameter("C_INV_LOC_BUFFER", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_USERParameter;
    
            if (c_INV_LOC_USER != null)
            {
                c_INV_LOC_USERParameter = new ObjectParameter("C_INV_LOC_USER", c_INV_LOC_USER);
            }
            else
            {
                c_INV_LOC_USERParameter = new ObjectParameter("C_INV_LOC_USER", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_PROJECT_WIPParameter;
    
            if (c_INV_LOC_PROJECT_WIP != null)
            {
                c_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("C_INV_LOC_PROJECT_WIP", c_INV_LOC_PROJECT_WIP);
            }
            else
            {
                c_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("C_INV_LOC_PROJECT_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_UNOPERATED_WIPParameter;
    
            if (c_INV_LOC_UNOPERATED_WIP != null)
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", c_INV_LOC_UNOPERATED_WIP);
            }
            else
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_WIPParameter;
    
            if (c_INV_LOC_WIP != null)
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", c_INV_LOC_WIP);
            }
            else
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", typeof(string));
            }
    
            ObjectParameter c_FLAG_OFFParameter;
    
            if (c_FLAG_OFF.HasValue)
            {
                c_FLAG_OFFParameter = new ObjectParameter("C_FLAG_OFF", c_FLAG_OFF);
            }
            else
            {
                c_FLAG_OFFParameter = new ObjectParameter("C_FLAG_OFF", typeof(bool));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<dtBatchProcessResult>("GenerateInventorySummaryAsset", strYearMonthParameter, c_FUNC_LOGISTIC_HQParameter, c_INV_OFFICE_SNRParameter, c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter, c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter, c_INV_TRANSFERTYPE_TRANSFER_OFFICEParameter, c_INV_AREA_NEW_SAMPLEParameter, c_INV_AREA_NEW_SALEParameter, c_INV_AREA_NEW_RENTALParameter, c_INV_AREA_NEW_DEMOParameter, c_INV_AREA_SE_RENTALParameter, c_INV_AREA_SE_LENDING_DEMOParameter, c_INV_AREA_SE_HANDLING_DEMOParameter, c_INV_SLIP_STATUS_COMPLETEParameter, c_INV_SLIP_STATUS_TRANSFERParameter, c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter, c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter, c_INV_TRANSFERTYPE_COMPLETE_MK30Parameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter, c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter, c_INV_TRANSFERTYPE_START_SERVICEParameter, c_INV_TRANSFERTYPE_PRE_ELIMINATIONParameter, c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter, c_INV_TRANSFERTYPE_CHECKING_RETURNEDParameter, c_INV_TRANSFERTYPE_REPAIR_REQUESTParameter, c_INV_TRANSFERTYPE_REPAIR_RETURNParameter, c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter, c_INV_TRANSFERTYPE_CHANGE_INVESTIGATIONParameter, c_SALE_INSTALL_TYPE_ADDParameter, c_SALE_INSTALL_TYPE_NEWParameter, c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter, c_RENTAL_INSTALL_TYPE_CHANGEPLAN_NEWParameter, c_RENTAL_INSTALL_TYPE_NEWParameter, c_RENTAL_INSTALL_TYPE_CHANGEPLAN_AFTER_NEWParameter, c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter, c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter, c_RENTAL_CHANGE_TYPE_CHANGE_INSTRU_DURING_STOPParameter, c_INV_LOC_WAITING_RETURNParameter, c_INV_LOC_RETURNEDParameter, c_INV_LOC_INSTOCKParameter, c_INV_LOC_REPAIRINGParameter, c_INV_LOC_BUFFERParameter, c_INV_LOC_USERParameter, c_INV_LOC_PROJECT_WIPParameter, c_INV_LOC_UNOPERATED_WIPParameter, c_INV_LOC_WIPParameter, c_FLAG_OFFParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<string> GetLotRunningNo(string instrumentCode, string depreciationPeriodForContract, string startYearMonth)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter depreciationPeriodForContractParameter;
    
            if (depreciationPeriodForContract != null)
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", depreciationPeriodForContract);
            }
            else
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", typeof(string));
            }
    
            ObjectParameter startYearMonthParameter;
    
            if (startYearMonth != null)
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", startYearMonth);
            }
            else
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", typeof(string));
            }
            return base.ExecuteFunction<string>("GetLotRunningNo", instrumentCodeParameter, depreciationPeriodForContractParameter, startYearMonthParameter);
        }
        public ObjectResult<string> GetMaxLotRunningNo(string instrumentCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetMaxLotRunningNo", instrumentCodeParameter);
        }
        public int InsertTbs_LotRunningNo(string instrumentCode, string depreciationPeriodForContract, string startYearMonth, string lotRunningNo)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter depreciationPeriodForContractParameter;
    
            if (depreciationPeriodForContract != null)
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", depreciationPeriodForContract);
            }
            else
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", typeof(string));
            }
    
            ObjectParameter startYearMonthParameter;
    
            if (startYearMonth != null)
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", startYearMonth);
            }
            else
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", typeof(string));
            }
    
            ObjectParameter lotRunningNoParameter;
    
            if (lotRunningNo != null)
            {
                lotRunningNoParameter = new ObjectParameter("LotRunningNo", lotRunningNo);
            }
            else
            {
                lotRunningNoParameter = new ObjectParameter("LotRunningNo", typeof(string));
            }
            return base.ExecuteFunction("InsertTbs_LotRunningNo", instrumentCodeParameter, depreciationPeriodForContractParameter, startYearMonthParameter, lotRunningNoParameter);
        }
        public ObjectResult<doCompleteStockoutInstrument> GetCompleteStockoutInstrument(string strContractCode, string strInstrumentCode, Nullable<int> intTotalStockoutQty, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_SE_RENTAL, string c_INV_LOC_WIP)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter intTotalStockoutQtyParameter;
    
            if (intTotalStockoutQty.HasValue)
            {
                intTotalStockoutQtyParameter = new ObjectParameter("intTotalStockoutQty", intTotalStockoutQty);
            }
            else
            {
                intTotalStockoutQtyParameter = new ObjectParameter("intTotalStockoutQty", typeof(int));
            }
    
            ObjectParameter c_INV_AREA_NEW_RENTALParameter;
    
            if (c_INV_AREA_NEW_RENTAL != null)
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", c_INV_AREA_NEW_RENTAL);
            }
            else
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SAMPLEParameter;
    
            if (c_INV_AREA_NEW_SAMPLE != null)
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", c_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_RENTALParameter;
    
            if (c_INV_AREA_SE_RENTAL != null)
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", c_INV_AREA_SE_RENTAL);
            }
            else
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_WIPParameter;
    
            if (c_INV_LOC_WIP != null)
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", c_INV_LOC_WIP);
            }
            else
            {
                c_INV_LOC_WIPParameter = new ObjectParameter("C_INV_LOC_WIP", typeof(string));
            }
            return base.ExecuteFunction<doCompleteStockoutInstrument>("GetCompleteStockoutInstrument", strContractCodeParameter, strInstrumentCodeParameter, intTotalStockoutQtyParameter, c_INV_AREA_NEW_RENTALParameter, c_INV_AREA_NEW_SAMPLEParameter, c_INV_AREA_SE_RENTALParameter, c_INV_LOC_WIPParameter);
        }
        public ObjectResult<doDepreciationData> GetDepreciationData(string strInstrumentCode, string strStartYearMonth, Nullable<int> intDepreciationPeriod, string startType, string contractCode, string oCC)
        {
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter strStartYearMonthParameter;
    
            if (strStartYearMonth != null)
            {
                strStartYearMonthParameter = new ObjectParameter("strStartYearMonth", strStartYearMonth);
            }
            else
            {
                strStartYearMonthParameter = new ObjectParameter("strStartYearMonth", typeof(string));
            }
    
            ObjectParameter intDepreciationPeriodParameter;
    
            if (intDepreciationPeriod.HasValue)
            {
                intDepreciationPeriodParameter = new ObjectParameter("intDepreciationPeriod", intDepreciationPeriod);
            }
            else
            {
                intDepreciationPeriodParameter = new ObjectParameter("intDepreciationPeriod", typeof(int));
            }
    
            ObjectParameter startTypeParameter;
    
            if (startType != null)
            {
                startTypeParameter = new ObjectParameter("StartType", startType);
            }
            else
            {
                startTypeParameter = new ObjectParameter("StartType", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
            return base.ExecuteFunction<doDepreciationData>("GetDepreciationData", strInstrumentCodeParameter, strStartYearMonthParameter, intDepreciationPeriodParameter, startTypeParameter, contractCodeParameter, oCCParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistLotRunningNumber(string instrumentCode, string depreciationPeriodForContract, string startYearMonth)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter depreciationPeriodForContractParameter;
    
            if (depreciationPeriodForContract != null)
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", depreciationPeriodForContract);
            }
            else
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", typeof(string));
            }
    
            ObjectParameter startYearMonthParameter;
    
            if (startYearMonth != null)
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", startYearMonth);
            }
            else
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistLotRunningNumber", instrumentCodeParameter, depreciationPeriodForContractParameter, startYearMonthParameter);
        }
        public int UpdateMovingAveragePriceForInstalled(Nullable<decimal> decMovingAveragePrice, string strInstrumentCode, string strLotNo, string c_CONFIG_SCRAP_VALUE, Nullable<System.DateTime> updateDate, string updateBy, string pGUID, string pScreenID)
        {
    
            ObjectParameter decMovingAveragePriceParameter;
    
            if (decMovingAveragePrice.HasValue)
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", decMovingAveragePrice);
            }
            else
            {
                decMovingAveragePriceParameter = new ObjectParameter("decMovingAveragePrice", typeof(decimal));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter strLotNoParameter;
    
            if (strLotNo != null)
            {
                strLotNoParameter = new ObjectParameter("strLotNo", strLotNo);
            }
            else
            {
                strLotNoParameter = new ObjectParameter("strLotNo", typeof(string));
            }
    
            ObjectParameter c_CONFIG_SCRAP_VALUEParameter;
    
            if (c_CONFIG_SCRAP_VALUE != null)
            {
                c_CONFIG_SCRAP_VALUEParameter = new ObjectParameter("C_CONFIG_SCRAP_VALUE", c_CONFIG_SCRAP_VALUE);
            }
            else
            {
                c_CONFIG_SCRAP_VALUEParameter = new ObjectParameter("C_CONFIG_SCRAP_VALUE", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter pGUIDParameter;
    
            if (pGUID != null)
            {
                pGUIDParameter = new ObjectParameter("pGUID", pGUID);
            }
            else
            {
                pGUIDParameter = new ObjectParameter("pGUID", typeof(string));
            }
    
            ObjectParameter pScreenIDParameter;
    
            if (pScreenID != null)
            {
                pScreenIDParameter = new ObjectParameter("pScreenID", pScreenID);
            }
            else
            {
                pScreenIDParameter = new ObjectParameter("pScreenID", typeof(string));
            }
            return base.ExecuteFunction("UpdateMovingAveragePriceForInstalled", decMovingAveragePriceParameter, strInstrumentCodeParameter, strLotNoParameter, c_CONFIG_SCRAP_VALUEParameter, updateDateParameter, updateByParameter, pGUIDParameter, pScreenIDParameter);
        }
        public int InsertTbt_InventoryDepreciation(string lotNo, string instrumentCode, Nullable<decimal> accquisitionCost, string startDepreciationYearMonth, Nullable<int> totalNumDepreciation, Nullable<int> lastNumDepreciation, string lastDepreciationYearMonth, Nullable<decimal> accumulateDepreciationAmount, Nullable<decimal> monthlyDepreciationAmount, Nullable<decimal> lastDepreciationAmount, Nullable<int> totalNumDepreciationRevenue, Nullable<int> lastNumDepreciationRevenue, string lastDepreciationYearMonthRevenue, Nullable<decimal> accumulateDepreciationAmountRevenue, Nullable<decimal> monthlyDepreciationAmountRevenue, Nullable<decimal> lastDepreciationAmountRevenue, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter lotNoParameter;
    
            if (lotNo != null)
            {
                lotNoParameter = new ObjectParameter("LotNo", lotNo);
            }
            else
            {
                lotNoParameter = new ObjectParameter("LotNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter accquisitionCostParameter;
    
            if (accquisitionCost.HasValue)
            {
                accquisitionCostParameter = new ObjectParameter("AccquisitionCost", accquisitionCost);
            }
            else
            {
                accquisitionCostParameter = new ObjectParameter("AccquisitionCost", typeof(decimal));
            }
    
            ObjectParameter startDepreciationYearMonthParameter;
    
            if (startDepreciationYearMonth != null)
            {
                startDepreciationYearMonthParameter = new ObjectParameter("StartDepreciationYearMonth", startDepreciationYearMonth);
            }
            else
            {
                startDepreciationYearMonthParameter = new ObjectParameter("StartDepreciationYearMonth", typeof(string));
            }
    
            ObjectParameter totalNumDepreciationParameter;
    
            if (totalNumDepreciation.HasValue)
            {
                totalNumDepreciationParameter = new ObjectParameter("TotalNumDepreciation", totalNumDepreciation);
            }
            else
            {
                totalNumDepreciationParameter = new ObjectParameter("TotalNumDepreciation", typeof(int));
            }
    
            ObjectParameter lastNumDepreciationParameter;
    
            if (lastNumDepreciation.HasValue)
            {
                lastNumDepreciationParameter = new ObjectParameter("LastNumDepreciation", lastNumDepreciation);
            }
            else
            {
                lastNumDepreciationParameter = new ObjectParameter("LastNumDepreciation", typeof(int));
            }
    
            ObjectParameter lastDepreciationYearMonthParameter;
    
            if (lastDepreciationYearMonth != null)
            {
                lastDepreciationYearMonthParameter = new ObjectParameter("LastDepreciationYearMonth", lastDepreciationYearMonth);
            }
            else
            {
                lastDepreciationYearMonthParameter = new ObjectParameter("LastDepreciationYearMonth", typeof(string));
            }
    
            ObjectParameter accumulateDepreciationAmountParameter;
    
            if (accumulateDepreciationAmount.HasValue)
            {
                accumulateDepreciationAmountParameter = new ObjectParameter("AccumulateDepreciationAmount", accumulateDepreciationAmount);
            }
            else
            {
                accumulateDepreciationAmountParameter = new ObjectParameter("AccumulateDepreciationAmount", typeof(decimal));
            }
    
            ObjectParameter monthlyDepreciationAmountParameter;
    
            if (monthlyDepreciationAmount.HasValue)
            {
                monthlyDepreciationAmountParameter = new ObjectParameter("MonthlyDepreciationAmount", monthlyDepreciationAmount);
            }
            else
            {
                monthlyDepreciationAmountParameter = new ObjectParameter("MonthlyDepreciationAmount", typeof(decimal));
            }
    
            ObjectParameter lastDepreciationAmountParameter;
    
            if (lastDepreciationAmount.HasValue)
            {
                lastDepreciationAmountParameter = new ObjectParameter("LastDepreciationAmount", lastDepreciationAmount);
            }
            else
            {
                lastDepreciationAmountParameter = new ObjectParameter("LastDepreciationAmount", typeof(decimal));
            }
    
            ObjectParameter totalNumDepreciationRevenueParameter;
    
            if (totalNumDepreciationRevenue.HasValue)
            {
                totalNumDepreciationRevenueParameter = new ObjectParameter("TotalNumDepreciationRevenue", totalNumDepreciationRevenue);
            }
            else
            {
                totalNumDepreciationRevenueParameter = new ObjectParameter("TotalNumDepreciationRevenue", typeof(int));
            }
    
            ObjectParameter lastNumDepreciationRevenueParameter;
    
            if (lastNumDepreciationRevenue.HasValue)
            {
                lastNumDepreciationRevenueParameter = new ObjectParameter("LastNumDepreciationRevenue", lastNumDepreciationRevenue);
            }
            else
            {
                lastNumDepreciationRevenueParameter = new ObjectParameter("LastNumDepreciationRevenue", typeof(int));
            }
    
            ObjectParameter lastDepreciationYearMonthRevenueParameter;
    
            if (lastDepreciationYearMonthRevenue != null)
            {
                lastDepreciationYearMonthRevenueParameter = new ObjectParameter("LastDepreciationYearMonthRevenue", lastDepreciationYearMonthRevenue);
            }
            else
            {
                lastDepreciationYearMonthRevenueParameter = new ObjectParameter("LastDepreciationYearMonthRevenue", typeof(string));
            }
    
            ObjectParameter accumulateDepreciationAmountRevenueParameter;
    
            if (accumulateDepreciationAmountRevenue.HasValue)
            {
                accumulateDepreciationAmountRevenueParameter = new ObjectParameter("AccumulateDepreciationAmountRevenue", accumulateDepreciationAmountRevenue);
            }
            else
            {
                accumulateDepreciationAmountRevenueParameter = new ObjectParameter("AccumulateDepreciationAmountRevenue", typeof(decimal));
            }
    
            ObjectParameter monthlyDepreciationAmountRevenueParameter;
    
            if (monthlyDepreciationAmountRevenue.HasValue)
            {
                monthlyDepreciationAmountRevenueParameter = new ObjectParameter("MonthlyDepreciationAmountRevenue", monthlyDepreciationAmountRevenue);
            }
            else
            {
                monthlyDepreciationAmountRevenueParameter = new ObjectParameter("MonthlyDepreciationAmountRevenue", typeof(decimal));
            }
    
            ObjectParameter lastDepreciationAmountRevenueParameter;
    
            if (lastDepreciationAmountRevenue.HasValue)
            {
                lastDepreciationAmountRevenueParameter = new ObjectParameter("LastDepreciationAmountRevenue", lastDepreciationAmountRevenue);
            }
            else
            {
                lastDepreciationAmountRevenueParameter = new ObjectParameter("LastDepreciationAmountRevenue", typeof(decimal));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction("InsertTbt_InventoryDepreciation", lotNoParameter, instrumentCodeParameter, accquisitionCostParameter, startDepreciationYearMonthParameter, totalNumDepreciationParameter, lastNumDepreciationParameter, lastDepreciationYearMonthParameter, accumulateDepreciationAmountParameter, monthlyDepreciationAmountParameter, lastDepreciationAmountParameter, totalNumDepreciationRevenueParameter, lastNumDepreciationRevenueParameter, lastDepreciationYearMonthRevenueParameter, accumulateDepreciationAmountRevenueParameter, monthlyDepreciationAmountRevenueParameter, lastDepreciationAmountRevenueParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<Nullable<int>> GetMovingNo()
        {
            return base.ExecuteFunction<Nullable<int>>("GetMovingNo");
        }
        public ObjectResult<doResultGetReturnSlip> GetReturnedSlip(string strInstallationSlipNo, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_SLIP_STATUS_WAIT_FOR_RETURN)
        {
    
            ObjectParameter strInstallationSlipNoParameter;
    
            if (strInstallationSlipNo != null)
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", strInstallationSlipNo);
            }
            else
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_SLIP_STATUS_WAIT_FOR_RETURNParameter;
    
            if (c_SLIP_STATUS_WAIT_FOR_RETURN != null)
            {
                c_SLIP_STATUS_WAIT_FOR_RETURNParameter = new ObjectParameter("C_SLIP_STATUS_WAIT_FOR_RETURN", c_SLIP_STATUS_WAIT_FOR_RETURN);
            }
            else
            {
                c_SLIP_STATUS_WAIT_FOR_RETURNParameter = new ObjectParameter("C_SLIP_STATUS_WAIT_FOR_RETURN", typeof(string));
            }
            return base.ExecuteFunction<doResultGetReturnSlip>("GetReturnedSlip", strInstallationSlipNoParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, c_SLIP_STATUS_WAIT_FOR_RETURNParameter);
        }
        public ObjectResult<doResultReturnInstrument> GetReturnInstrumentByInstallationSlip(string strInstallationSlipNo, string c_INV_RETURNED, string c_INV_LOC_ELIMINATION, string c_INV_SLIP_STATUS_TRANSFER, string c_INV_AREA)
        {
    
            ObjectParameter strInstallationSlipNoParameter;
    
            if (strInstallationSlipNo != null)
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", strInstallationSlipNo);
            }
            else
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_RETURNEDParameter;
    
            if (c_INV_RETURNED != null)
            {
                c_INV_RETURNEDParameter = new ObjectParameter("C_INV_RETURNED", c_INV_RETURNED);
            }
            else
            {
                c_INV_RETURNEDParameter = new ObjectParameter("C_INV_RETURNED", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_ELIMINATIONParameter;
    
            if (c_INV_LOC_ELIMINATION != null)
            {
                c_INV_LOC_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_ELIMINATION", c_INV_LOC_ELIMINATION);
            }
            else
            {
                c_INV_LOC_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_ELIMINATION", typeof(string));
            }
    
            ObjectParameter c_INV_SLIP_STATUS_TRANSFERParameter;
    
            if (c_INV_SLIP_STATUS_TRANSFER != null)
            {
                c_INV_SLIP_STATUS_TRANSFERParameter = new ObjectParameter("C_INV_SLIP_STATUS_TRANSFER", c_INV_SLIP_STATUS_TRANSFER);
            }
            else
            {
                c_INV_SLIP_STATUS_TRANSFERParameter = new ObjectParameter("C_INV_SLIP_STATUS_TRANSFER", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<doResultReturnInstrument>("GetReturnInstrumentByInstallationSlip", strInstallationSlipNoParameter, c_INV_RETURNEDParameter, c_INV_LOC_ELIMINATIONParameter, c_INV_SLIP_STATUS_TRANSFERParameter, c_INV_AREAParameter);
        }
        public ObjectResult<doCompleteRemoveInstrument> GetCompleteRemoveInstrument(string strContractCode, string strInstrumentCode, Nullable<int> intTotalStockoutQty, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_SE_RENTAL, string c_INV_LOC_UNOPERATED_WIP)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter intTotalStockoutQtyParameter;
    
            if (intTotalStockoutQty.HasValue)
            {
                intTotalStockoutQtyParameter = new ObjectParameter("intTotalStockoutQty", intTotalStockoutQty);
            }
            else
            {
                intTotalStockoutQtyParameter = new ObjectParameter("intTotalStockoutQty", typeof(int));
            }
    
            ObjectParameter c_INV_AREA_NEW_RENTALParameter;
    
            if (c_INV_AREA_NEW_RENTAL != null)
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", c_INV_AREA_NEW_RENTAL);
            }
            else
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SAMPLEParameter;
    
            if (c_INV_AREA_NEW_SAMPLE != null)
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", c_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_RENTALParameter;
    
            if (c_INV_AREA_SE_RENTAL != null)
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", c_INV_AREA_SE_RENTAL);
            }
            else
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_UNOPERATED_WIPParameter;
    
            if (c_INV_LOC_UNOPERATED_WIP != null)
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", c_INV_LOC_UNOPERATED_WIP);
            }
            else
            {
                c_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("C_INV_LOC_UNOPERATED_WIP", typeof(string));
            }
            return base.ExecuteFunction<doCompleteRemoveInstrument>("GetCompleteRemoveInstrument", strContractCodeParameter, strInstrumentCodeParameter, intTotalStockoutQtyParameter, c_INV_AREA_NEW_RENTALParameter, c_INV_AREA_NEW_SAMPLEParameter, c_INV_AREA_SE_RENTALParameter, c_INV_LOC_UNOPERATED_WIPParameter);
        }
        public ObjectResult<doTbt_InventorySlipDetailForView> GetTbt_InventorySlipDetailForView(string strInventorySlipNo, string c_INV_AREA)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<doTbt_InventorySlipDetailForView>("GetTbt_InventorySlipDetailForView", strInventorySlipNoParameter, c_INV_AREAParameter);
        }
        public ObjectResult<doPurchaseOrderDetail> GetPurchaseOrderDetailForMaintain(string c_CURRENCY_TYPE, string c_PURCHASE_ORDER_STATUS, string c_TRANSPORT_TYPE, string strPurchaseOrder)
        {
    
            ObjectParameter c_CURRENCY_TYPEParameter;
    
            if (c_CURRENCY_TYPE != null)
            {
                c_CURRENCY_TYPEParameter = new ObjectParameter("C_CURRENCY_TYPE", c_CURRENCY_TYPE);
            }
            else
            {
                c_CURRENCY_TYPEParameter = new ObjectParameter("C_CURRENCY_TYPE", typeof(string));
            }
    
            ObjectParameter c_PURCHASE_ORDER_STATUSParameter;
    
            if (c_PURCHASE_ORDER_STATUS != null)
            {
                c_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("C_PURCHASE_ORDER_STATUS", c_PURCHASE_ORDER_STATUS);
            }
            else
            {
                c_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("C_PURCHASE_ORDER_STATUS", typeof(string));
            }
    
            ObjectParameter c_TRANSPORT_TYPEParameter;
    
            if (c_TRANSPORT_TYPE != null)
            {
                c_TRANSPORT_TYPEParameter = new ObjectParameter("C_TRANSPORT_TYPE", c_TRANSPORT_TYPE);
            }
            else
            {
                c_TRANSPORT_TYPEParameter = new ObjectParameter("C_TRANSPORT_TYPE", typeof(string));
            }
    
            ObjectParameter strPurchaseOrderParameter;
    
            if (strPurchaseOrder != null)
            {
                strPurchaseOrderParameter = new ObjectParameter("strPurchaseOrder", strPurchaseOrder);
            }
            else
            {
                strPurchaseOrderParameter = new ObjectParameter("strPurchaseOrder", typeof(string));
            }
            return base.ExecuteFunction<doPurchaseOrderDetail>("GetPurchaseOrderDetailForMaintain", c_CURRENCY_TYPEParameter, c_PURCHASE_ORDER_STATUSParameter, c_TRANSPORT_TYPEParameter, strPurchaseOrderParameter);
        }
        public ObjectResult<tbt_InventorySlip> GetTbt_InventorySlipForReceiveReturn(string strInstallationSlipNo, string c_INV_LOC_RETURNED, string c_INV_SLIP_STATUS_COMPLETE)
        {
    
            ObjectParameter strInstallationSlipNoParameter;
    
            if (strInstallationSlipNo != null)
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", strInstallationSlipNo);
            }
            else
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_RETURNEDParameter;
    
            if (c_INV_LOC_RETURNED != null)
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", c_INV_LOC_RETURNED);
            }
            else
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", typeof(string));
            }
    
            ObjectParameter c_INV_SLIP_STATUS_COMPLETEParameter;
    
            if (c_INV_SLIP_STATUS_COMPLETE != null)
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", c_INV_SLIP_STATUS_COMPLETE);
            }
            else
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlip>("GetTbt_InventorySlipForReceiveReturn", strInstallationSlipNoParameter, c_INV_LOC_RETURNEDParameter, c_INV_SLIP_STATUS_COMPLETEParameter);
        }
        public ObjectResult<tbt_PurchaseOrderDetail> DeleteTbt_PurchaseOrderDetail(string purchaseOrderNo)
        {
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrderDetail>("DeleteTbt_PurchaseOrderDetail", purchaseOrderNoParameter);
        }
        public ObjectResult<tbt_InventoryProjectWIP> GetProjectWIPInstrument(string strProjectCode)
        {
    
            ObjectParameter strProjectCodeParameter;
    
            if (strProjectCode != null)
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", strProjectCode);
            }
            else
            {
                strProjectCodeParameter = new ObjectParameter("strProjectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryProjectWIP>("GetProjectWIPInstrument", strProjectCodeParameter);
        }
        public ObjectResult<doContractUnoperatedInstrument> GetContractUnoperatedInstrument(string strContractCode, string c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START, string pC_INV_LOC_WIP, string pC_INV_LOC_UNOPERATED_WIP, string pC_INV_LOC_WAITING_RETURN, string pC_INV_LOC_RETURNED)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_BEFORE_START", c_INV_TRANSFERTYPE_COMPLETE_BEFORE_START);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_BEFORE_START", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_WIPParameter;
    
            if (pC_INV_LOC_WIP != null)
            {
                pC_INV_LOC_WIPParameter = new ObjectParameter("pC_INV_LOC_WIP", pC_INV_LOC_WIP);
            }
            else
            {
                pC_INV_LOC_WIPParameter = new ObjectParameter("pC_INV_LOC_WIP", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_UNOPERATED_WIPParameter;
    
            if (pC_INV_LOC_UNOPERATED_WIP != null)
            {
                pC_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("pC_INV_LOC_UNOPERATED_WIP", pC_INV_LOC_UNOPERATED_WIP);
            }
            else
            {
                pC_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("pC_INV_LOC_UNOPERATED_WIP", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_WAITING_RETURNParameter;
    
            if (pC_INV_LOC_WAITING_RETURN != null)
            {
                pC_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("pC_INV_LOC_WAITING_RETURN", pC_INV_LOC_WAITING_RETURN);
            }
            else
            {
                pC_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("pC_INV_LOC_WAITING_RETURN", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_RETURNEDParameter;
    
            if (pC_INV_LOC_RETURNED != null)
            {
                pC_INV_LOC_RETURNEDParameter = new ObjectParameter("pC_INV_LOC_RETURNED", pC_INV_LOC_RETURNED);
            }
            else
            {
                pC_INV_LOC_RETURNEDParameter = new ObjectParameter("pC_INV_LOC_RETURNED", typeof(string));
            }
            return base.ExecuteFunction<doContractUnoperatedInstrument>("GetContractUnoperatedInstrument", strContractCodeParameter, c_INV_TRANSFERTYPE_COMPLETE_BEFORE_STARTParameter, pC_INV_LOC_WIPParameter, pC_INV_LOC_UNOPERATED_WIPParameter, pC_INV_LOC_WAITING_RETURNParameter, pC_INV_LOC_RETURNEDParameter);
        }
        public ObjectResult<tbt_PurchaseOrder> DeleteTbt_PurchaseOrder(string purchaseOrderNo)
        {
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurchaseOrder>("DeleteTbt_PurchaseOrder", purchaseOrderNoParameter);
        }
        public ObjectResult<tbt_InventoryProjectWIP> UpdateTbt_InventoryProjectWIP(string projectCode, string areaCode, string instrumentCode, Nullable<int> addToInstrumentQty)
        {
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", typeof(string));
            }
    
            ObjectParameter areaCodeParameter;
    
            if (areaCode != null)
            {
                areaCodeParameter = new ObjectParameter("AreaCode", areaCode);
            }
            else
            {
                areaCodeParameter = new ObjectParameter("AreaCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter addToInstrumentQtyParameter;
    
            if (addToInstrumentQty.HasValue)
            {
                addToInstrumentQtyParameter = new ObjectParameter("AddToInstrumentQty", addToInstrumentQty);
            }
            else
            {
                addToInstrumentQtyParameter = new ObjectParameter("AddToInstrumentQty", typeof(int));
            }
            return base.ExecuteFunction<tbt_InventoryProjectWIP>("UpdateTbt_InventoryProjectWIP", projectCodeParameter, areaCodeParameter, instrumentCodeParameter, addToInstrumentQtyParameter);
        }
        public ObjectResult<Nullable<bool>> CheckUpdatedCancelInstallation(string strInstallationSlipNo, string c_INV_TRANSFERTYPE_CANCEL_INSTALLATION)
        {
    
            ObjectParameter strInstallationSlipNoParameter;
    
            if (strInstallationSlipNo != null)
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", strInstallationSlipNo);
            }
            else
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter;
    
            if (c_INV_TRANSFERTYPE_CANCEL_INSTALLATION != null)
            {
                c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CANCEL_INSTALLATION", c_INV_TRANSFERTYPE_CANCEL_INSTALLATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CANCEL_INSTALLATION", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckUpdatedCancelInstallation", strInstallationSlipNoParameter, c_INV_TRANSFERTYPE_CANCEL_INSTALLATIONParameter);
        }
        public ObjectResult<Nullable<bool>> CheckUpdatedUserAcceptance(string strContractCode, Nullable<System.DateTime> dtpAcceptanceDate, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter dtpAcceptanceDateParameter;
    
            if (dtpAcceptanceDate.HasValue)
            {
                dtpAcceptanceDateParameter = new ObjectParameter("dtpAcceptanceDate", dtpAcceptanceDate);
            }
            else
            {
                dtpAcceptanceDateParameter = new ObjectParameter("dtpAcceptanceDate", typeof(System.DateTime));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter;
    
            if (c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE != null)
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE);
            }
            else
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckUpdatedUserAcceptance", strContractCodeParameter, dtpAcceptanceDateParameter, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter);
        }
        public ObjectResult<doSaleInstrument> GetSaleInstrument(string strContractCode, string strOCC, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter strOCCParameter;
    
            if (strOCC != null)
            {
                strOCCParameter = new ObjectParameter("strOCC", strOCC);
            }
            else
            {
                strOCCParameter = new ObjectParameter("strOCC", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", typeof(string));
            }
            return base.ExecuteFunction<doSaleInstrument>("GetSaleInstrument", strContractCodeParameter, strOCCParameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter);
        }
        public ObjectResult<doResultIVS200> GetIVS200(string officeCode, string c_INV_LOC_INSTOCK, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_NEW_SALE, string instrumentCode, string instrumentName, string c_CONFIG_WILDCARD, Nullable<bool> haveOrderQty, Nullable<bool> belowSafety, Nullable<bool> minus)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_INSTOCKParameter;
    
            if (c_INV_LOC_INSTOCK != null)
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", c_INV_LOC_INSTOCK);
            }
            else
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SAMPLEParameter;
    
            if (c_INV_AREA_NEW_SAMPLE != null)
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", c_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_RENTALParameter;
    
            if (c_INV_AREA_NEW_RENTAL != null)
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", c_INV_AREA_NEW_RENTAL);
            }
            else
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SALEParameter;
    
            if (c_INV_AREA_NEW_SALE != null)
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", c_INV_AREA_NEW_SALE);
            }
            else
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter instrumentNameParameter;
    
            if (instrumentName != null)
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", instrumentName);
            }
            else
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", typeof(string));
            }
    
            ObjectParameter c_CONFIG_WILDCARDParameter;
    
            if (c_CONFIG_WILDCARD != null)
            {
                c_CONFIG_WILDCARDParameter = new ObjectParameter("C_CONFIG_WILDCARD", c_CONFIG_WILDCARD);
            }
            else
            {
                c_CONFIG_WILDCARDParameter = new ObjectParameter("C_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter haveOrderQtyParameter;
    
            if (haveOrderQty.HasValue)
            {
                haveOrderQtyParameter = new ObjectParameter("HaveOrderQty", haveOrderQty);
            }
            else
            {
                haveOrderQtyParameter = new ObjectParameter("HaveOrderQty", typeof(bool));
            }
    
            ObjectParameter belowSafetyParameter;
    
            if (belowSafety.HasValue)
            {
                belowSafetyParameter = new ObjectParameter("BelowSafety", belowSafety);
            }
            else
            {
                belowSafetyParameter = new ObjectParameter("BelowSafety", typeof(bool));
            }
    
            ObjectParameter minusParameter;
    
            if (minus.HasValue)
            {
                minusParameter = new ObjectParameter("Minus", minus);
            }
            else
            {
                minusParameter = new ObjectParameter("Minus", typeof(bool));
            }
            return base.ExecuteFunction<doResultIVS200>("GetIVS200", officeCodeParameter, c_INV_LOC_INSTOCKParameter, c_INV_AREA_NEW_SAMPLEParameter, c_INV_AREA_NEW_RENTALParameter, c_INV_AREA_NEW_SALEParameter, instrumentCodeParameter, instrumentNameParameter, c_CONFIG_WILDCARDParameter, haveOrderQtyParameter, belowSafetyParameter, minusParameter);
        }
        public ObjectResult<tbt_AccountStockMoving> InsertTbt_AccountStockMoving(string xmltbt_AccountStockMoving)
        {
    
            ObjectParameter xmltbt_AccountStockMovingParameter;
    
            if (xmltbt_AccountStockMoving != null)
            {
                xmltbt_AccountStockMovingParameter = new ObjectParameter("xmltbt_AccountStockMoving", xmltbt_AccountStockMoving);
            }
            else
            {
                xmltbt_AccountStockMovingParameter = new ObjectParameter("xmltbt_AccountStockMoving", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountStockMoving>("InsertTbt_AccountStockMoving", xmltbt_AccountStockMovingParameter);
        }
        public ObjectResult<doResultInstallationSlipForStockOut> GetInstallationSlipForStockOut(string pC_RENTAL_INSTALL_TYPE, string pC_SALE_INSTALL_TYPE, string pC_SLIP_STATUS_NOT_STOCK_OUT, string pC_CONFIG_WILDCARD, string pInstallationSlipNo, string pProjectCode, string pContractCode, string pContractTargerName, string pSiteName, Nullable<System.DateTime> pExpectedStockOutDateFrom, Nullable<System.DateTime> pExpectedStockOutDateTo, string pOfficeCode, string pInstallationType)
        {
    
            ObjectParameter pC_RENTAL_INSTALL_TYPEParameter;
    
            if (pC_RENTAL_INSTALL_TYPE != null)
            {
                pC_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("pC_RENTAL_INSTALL_TYPE", pC_RENTAL_INSTALL_TYPE);
            }
            else
            {
                pC_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("pC_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SALE_INSTALL_TYPEParameter;
    
            if (pC_SALE_INSTALL_TYPE != null)
            {
                pC_SALE_INSTALL_TYPEParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE", pC_SALE_INSTALL_TYPE);
            }
            else
            {
                pC_SALE_INSTALL_TYPEParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SLIP_STATUS_NOT_STOCK_OUTParameter;
    
            if (pC_SLIP_STATUS_NOT_STOCK_OUT != null)
            {
                pC_SLIP_STATUS_NOT_STOCK_OUTParameter = new ObjectParameter("pC_SLIP_STATUS_NOT_STOCK_OUT", pC_SLIP_STATUS_NOT_STOCK_OUT);
            }
            else
            {
                pC_SLIP_STATUS_NOT_STOCK_OUTParameter = new ObjectParameter("pC_SLIP_STATUS_NOT_STOCK_OUT", typeof(string));
            }
    
            ObjectParameter pC_CONFIG_WILDCARDParameter;
    
            if (pC_CONFIG_WILDCARD != null)
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", pC_CONFIG_WILDCARD);
            }
            else
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter pInstallationSlipNoParameter;
    
            if (pInstallationSlipNo != null)
            {
                pInstallationSlipNoParameter = new ObjectParameter("pInstallationSlipNo", pInstallationSlipNo);
            }
            else
            {
                pInstallationSlipNoParameter = new ObjectParameter("pInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pContractTargerNameParameter;
    
            if (pContractTargerName != null)
            {
                pContractTargerNameParameter = new ObjectParameter("pContractTargerName", pContractTargerName);
            }
            else
            {
                pContractTargerNameParameter = new ObjectParameter("pContractTargerName", typeof(string));
            }
    
            ObjectParameter pSiteNameParameter;
    
            if (pSiteName != null)
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", pSiteName);
            }
            else
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", typeof(string));
            }
    
            ObjectParameter pExpectedStockOutDateFromParameter;
    
            if (pExpectedStockOutDateFrom.HasValue)
            {
                pExpectedStockOutDateFromParameter = new ObjectParameter("pExpectedStockOutDateFrom", pExpectedStockOutDateFrom);
            }
            else
            {
                pExpectedStockOutDateFromParameter = new ObjectParameter("pExpectedStockOutDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pExpectedStockOutDateToParameter;
    
            if (pExpectedStockOutDateTo.HasValue)
            {
                pExpectedStockOutDateToParameter = new ObjectParameter("pExpectedStockOutDateTo", pExpectedStockOutDateTo);
            }
            else
            {
                pExpectedStockOutDateToParameter = new ObjectParameter("pExpectedStockOutDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pInstallationTypeParameter;
    
            if (pInstallationType != null)
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", pInstallationType);
            }
            else
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", typeof(string));
            }
            return base.ExecuteFunction<doResultInstallationSlipForStockOut>("GetInstallationSlipForStockOut", pC_RENTAL_INSTALL_TYPEParameter, pC_SALE_INSTALL_TYPEParameter, pC_SLIP_STATUS_NOT_STOCK_OUTParameter, pC_CONFIG_WILDCARDParameter, pInstallationSlipNoParameter, pProjectCodeParameter, pContractCodeParameter, pContractTargerNameParameter, pSiteNameParameter, pExpectedStockOutDateFromParameter, pExpectedStockOutDateToParameter, pOfficeCodeParameter, pInstallationTypeParameter);
        }
        public ObjectResult<doContractWIPInstrument> GetContractWIPInstrument(string strInstallationSlipNo, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29)
        {
    
            ObjectParameter strInstallationSlipNoParameter;
    
            if (strInstallationSlipNo != null)
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", strInstallationSlipNo);
            }
            else
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", typeof(string));
            }
            return base.ExecuteFunction<doContractWIPInstrument>("GetContractWIPInstrument", strInstallationSlipNoParameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistInstrument(string strInstrumentCode)
        {
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistInstrument", strInstrumentCodeParameter);
        }
        public ObjectResult<doResultInstallationDetailForStockOut> GetInstallationDetailForStockOut(string pC_INV_AREA_NEW_SALE, string pC_INV_AREA_NEW_RENTAL, string pC_INV_AREA_NEW_SAMPLE, string pC_INV_AREA_SE_RENTAL, string pC_INST_TYPE_GENERAL, string pSlipNo)
        {
    
            ObjectParameter pC_INV_AREA_NEW_SALEParameter;
    
            if (pC_INV_AREA_NEW_SALE != null)
            {
                pC_INV_AREA_NEW_SALEParameter = new ObjectParameter("pC_INV_AREA_NEW_SALE", pC_INV_AREA_NEW_SALE);
            }
            else
            {
                pC_INV_AREA_NEW_SALEParameter = new ObjectParameter("pC_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_NEW_RENTALParameter;
    
            if (pC_INV_AREA_NEW_RENTAL != null)
            {
                pC_INV_AREA_NEW_RENTALParameter = new ObjectParameter("pC_INV_AREA_NEW_RENTAL", pC_INV_AREA_NEW_RENTAL);
            }
            else
            {
                pC_INV_AREA_NEW_RENTALParameter = new ObjectParameter("pC_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_NEW_SAMPLEParameter;
    
            if (pC_INV_AREA_NEW_SAMPLE != null)
            {
                pC_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("pC_INV_AREA_NEW_SAMPLE", pC_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                pC_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("pC_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_SE_RENTALParameter;
    
            if (pC_INV_AREA_SE_RENTAL != null)
            {
                pC_INV_AREA_SE_RENTALParameter = new ObjectParameter("pC_INV_AREA_SE_RENTAL", pC_INV_AREA_SE_RENTAL);
            }
            else
            {
                pC_INV_AREA_SE_RENTALParameter = new ObjectParameter("pC_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter pC_INST_TYPE_GENERALParameter;
    
            if (pC_INST_TYPE_GENERAL != null)
            {
                pC_INST_TYPE_GENERALParameter = new ObjectParameter("pC_INST_TYPE_GENERAL", pC_INST_TYPE_GENERAL);
            }
            else
            {
                pC_INST_TYPE_GENERALParameter = new ObjectParameter("pC_INST_TYPE_GENERAL", typeof(string));
            }
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
            return base.ExecuteFunction<doResultInstallationDetailForStockOut>("GetInstallationDetailForStockOut", pC_INV_AREA_NEW_SALEParameter, pC_INV_AREA_NEW_RENTALParameter, pC_INV_AREA_NEW_SAMPLEParameter, pC_INV_AREA_SE_RENTALParameter, pC_INST_TYPE_GENERALParameter, pSlipNoParameter);
        }
        public ObjectResult<doOffice> GetInventorySrinakarinOffice(string office_Code)
        {
    
            ObjectParameter office_CodeParameter;
    
            if (office_Code != null)
            {
                office_CodeParameter = new ObjectParameter("Office_Code", office_Code);
            }
            else
            {
                office_CodeParameter = new ObjectParameter("Office_Code", typeof(string));
            }
            return base.ExecuteFunction<doOffice>("GetInventorySrinakarinOffice", office_CodeParameter);
        }
        public ObjectResult<tbt_InventoryCheckingSchedule> GetLastCheckingSchedule()
        {
            return base.ExecuteFunction<tbt_InventoryCheckingSchedule>("GetLastCheckingSchedule");
        }
        public ObjectResult<dtCheckingStatusList> GetCheckingStatusList(string pCheckingYear, string pC_INV_CHECKING_STATUS)
        {
    
            ObjectParameter pCheckingYearParameter;
    
            if (pCheckingYear != null)
            {
                pCheckingYearParameter = new ObjectParameter("pCheckingYear", pCheckingYear);
            }
            else
            {
                pCheckingYearParameter = new ObjectParameter("pCheckingYear", typeof(string));
            }
    
            ObjectParameter pC_INV_CHECKING_STATUSParameter;
    
            if (pC_INV_CHECKING_STATUS != null)
            {
                pC_INV_CHECKING_STATUSParameter = new ObjectParameter("pC_INV_CHECKING_STATUS", pC_INV_CHECKING_STATUS);
            }
            else
            {
                pC_INV_CHECKING_STATUSParameter = new ObjectParameter("pC_INV_CHECKING_STATUS", typeof(string));
            }
            return base.ExecuteFunction<dtCheckingStatusList>("GetCheckingStatusList", pCheckingYearParameter, pC_INV_CHECKING_STATUSParameter);
        }
        public ObjectResult<dtOfficeCheckingList> GetOfficeCheckingList(string pC_INV_LOC)
        {
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
            return base.ExecuteFunction<dtOfficeCheckingList>("GetOfficeCheckingList", pC_INV_LOCParameter);
        }
        public ObjectResult<dtCheckingYear> GetCheckingYear()
        {
            return base.ExecuteFunction<dtCheckingYear>("GetCheckingYear");
        }
        public ObjectResult<tbt_AccountInstalled> GetOldestLot(string strOfficeCode, string strLocationCode, string strInstrumentCode)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strLocationCodeParameter;
    
            if (strLocationCode != null)
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", strLocationCode);
            }
            else
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstalled>("GetOldestLot", strOfficeCodeParameter, strLocationCodeParameter, strInstrumentCodeParameter);
        }
        public ObjectResult<tbt_InventoryCheckingSchedule> GetTbt_InventoryCheckingSchedule(string strYearMonth)
        {
    
            ObjectParameter strYearMonthParameter;
    
            if (strYearMonth != null)
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", strYearMonth);
            }
            else
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingSchedule>("GetTbt_InventoryCheckingSchedule", strYearMonthParameter);
        }
        public ObjectResult<doShelfCurrentData> GetShelfCurrentData(string officeCode, string locationCode, string shelfNo)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter shelfNoParameter;
    
            if (shelfNo != null)
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", shelfNo);
            }
            else
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", typeof(string));
            }
            return base.ExecuteFunction<doShelfCurrentData>("GetShelfCurrentData", officeCodeParameter, locationCodeParameter, shelfNoParameter);
        }
        public ObjectResult<doResultInstallationStockOutForChecking> GetInstallationStockOutForChecking(string pC_FUNC_LOGISTIC_HQ, string pC_INV_AREA_NEW_SALE, string pC_INV_AREA_NEW_RENTAL, string pC_INV_AREA_NEW_SAMPLE, string pC_INV_AREA_SE_RENTAL, string pC_INV_LOC_INSTOCK, string pC_INV_LOC_PROJECT_WIP, string pOfficeCode, string pSlipNo, string pProjectCode, string pInstrumentCode, string pSaleShelfNo, string pRentalShelfNo, string pSampleShelfNo, string pSecondShelfNo)
        {
    
            ObjectParameter pC_FUNC_LOGISTIC_HQParameter;
    
            if (pC_FUNC_LOGISTIC_HQ != null)
            {
                pC_FUNC_LOGISTIC_HQParameter = new ObjectParameter("pC_FUNC_LOGISTIC_HQ", pC_FUNC_LOGISTIC_HQ);
            }
            else
            {
                pC_FUNC_LOGISTIC_HQParameter = new ObjectParameter("pC_FUNC_LOGISTIC_HQ", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_NEW_SALEParameter;
    
            if (pC_INV_AREA_NEW_SALE != null)
            {
                pC_INV_AREA_NEW_SALEParameter = new ObjectParameter("pC_INV_AREA_NEW_SALE", pC_INV_AREA_NEW_SALE);
            }
            else
            {
                pC_INV_AREA_NEW_SALEParameter = new ObjectParameter("pC_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_NEW_RENTALParameter;
    
            if (pC_INV_AREA_NEW_RENTAL != null)
            {
                pC_INV_AREA_NEW_RENTALParameter = new ObjectParameter("pC_INV_AREA_NEW_RENTAL", pC_INV_AREA_NEW_RENTAL);
            }
            else
            {
                pC_INV_AREA_NEW_RENTALParameter = new ObjectParameter("pC_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_NEW_SAMPLEParameter;
    
            if (pC_INV_AREA_NEW_SAMPLE != null)
            {
                pC_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("pC_INV_AREA_NEW_SAMPLE", pC_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                pC_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("pC_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_SE_RENTALParameter;
    
            if (pC_INV_AREA_SE_RENTAL != null)
            {
                pC_INV_AREA_SE_RENTALParameter = new ObjectParameter("pC_INV_AREA_SE_RENTAL", pC_INV_AREA_SE_RENTAL);
            }
            else
            {
                pC_INV_AREA_SE_RENTALParameter = new ObjectParameter("pC_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_INSTOCKParameter;
    
            if (pC_INV_LOC_INSTOCK != null)
            {
                pC_INV_LOC_INSTOCKParameter = new ObjectParameter("pC_INV_LOC_INSTOCK", pC_INV_LOC_INSTOCK);
            }
            else
            {
                pC_INV_LOC_INSTOCKParameter = new ObjectParameter("pC_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_PROJECT_WIPParameter;
    
            if (pC_INV_LOC_PROJECT_WIP != null)
            {
                pC_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("pC_INV_LOC_PROJECT_WIP", pC_INV_LOC_PROJECT_WIP);
            }
            else
            {
                pC_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("pC_INV_LOC_PROJECT_WIP", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
    
            ObjectParameter pSaleShelfNoParameter;
    
            if (pSaleShelfNo != null)
            {
                pSaleShelfNoParameter = new ObjectParameter("pSaleShelfNo", pSaleShelfNo);
            }
            else
            {
                pSaleShelfNoParameter = new ObjectParameter("pSaleShelfNo", typeof(string));
            }
    
            ObjectParameter pRentalShelfNoParameter;
    
            if (pRentalShelfNo != null)
            {
                pRentalShelfNoParameter = new ObjectParameter("pRentalShelfNo", pRentalShelfNo);
            }
            else
            {
                pRentalShelfNoParameter = new ObjectParameter("pRentalShelfNo", typeof(string));
            }
    
            ObjectParameter pSampleShelfNoParameter;
    
            if (pSampleShelfNo != null)
            {
                pSampleShelfNoParameter = new ObjectParameter("pSampleShelfNo", pSampleShelfNo);
            }
            else
            {
                pSampleShelfNoParameter = new ObjectParameter("pSampleShelfNo", typeof(string));
            }
    
            ObjectParameter pSecondShelfNoParameter;
    
            if (pSecondShelfNo != null)
            {
                pSecondShelfNoParameter = new ObjectParameter("pSecondShelfNo", pSecondShelfNo);
            }
            else
            {
                pSecondShelfNoParameter = new ObjectParameter("pSecondShelfNo", typeof(string));
            }
            return base.ExecuteFunction<doResultInstallationStockOutForChecking>("GetInstallationStockOutForChecking", pC_FUNC_LOGISTIC_HQParameter, pC_INV_AREA_NEW_SALEParameter, pC_INV_AREA_NEW_RENTALParameter, pC_INV_AREA_NEW_SAMPLEParameter, pC_INV_AREA_SE_RENTALParameter, pC_INV_LOC_INSTOCKParameter, pC_INV_LOC_PROJECT_WIPParameter, pOfficeCodeParameter, pSlipNoParameter, pProjectCodeParameter, pInstrumentCodeParameter, pSaleShelfNoParameter, pRentalShelfNoParameter, pSampleShelfNoParameter, pSecondShelfNoParameter);
        }
        public ObjectResult<tbt_InventoryBooking> GetTbt_InventoryBooking(string pContractCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBooking>("GetTbt_InventoryBooking", pContractCodeParameter);
        }
        public ObjectResult<tbt_InventoryBookingDetail> UpdateTbt_InventoryBookingDetail(string xml_doTbt_InventoryBookingDetails)
        {
    
            ObjectParameter xml_doTbt_InventoryBookingDetailsParameter;
    
            if (xml_doTbt_InventoryBookingDetails != null)
            {
                xml_doTbt_InventoryBookingDetailsParameter = new ObjectParameter("xml_doTbt_InventoryBookingDetails", xml_doTbt_InventoryBookingDetails);
            }
            else
            {
                xml_doTbt_InventoryBookingDetailsParameter = new ObjectParameter("xml_doTbt_InventoryBookingDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBookingDetail>("UpdateTbt_InventoryBookingDetail", xml_doTbt_InventoryBookingDetailsParameter);
        }
        public ObjectResult<tbt_InventoryBookingDetail> GetTbt_InventoryBookingDetail(string pContractCode, string pInstrumentCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBookingDetail>("GetTbt_InventoryBookingDetail", pContractCodeParameter, pInstrumentCodeParameter);
        }
        public ObjectResult<tbt_InventoryBooking> DeleteTbt_InventoryBooking(string pContractCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBooking>("DeleteTbt_InventoryBooking", pContractCodeParameter);
        }
        public ObjectResult<tbt_InventoryBookingDetail> DeleteTbt_InventoryBookingDetail(string pContractCode, string pInstrumentCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBookingDetail>("DeleteTbt_InventoryBookingDetail", pContractCodeParameter, pInstrumentCodeParameter);
        }
        public ObjectResult<dtSearchInstrumentListResult> SearchInventoryInstrumentListAllShelf(string officeCode, string locationCode, string areaCode, string startShelfNo, string endShelfNo, string instrumentCode, string instrumentName, string c_INV_AREA, string c_CONFIG_WILDCARD, string c_INV_SHELF_NO_NOT_PRICE, string c_INV_AREA_SE_LENDING_DEMO)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter areaCodeParameter;
    
            if (areaCode != null)
            {
                areaCodeParameter = new ObjectParameter("AreaCode", areaCode);
            }
            else
            {
                areaCodeParameter = new ObjectParameter("AreaCode", typeof(string));
            }
    
            ObjectParameter startShelfNoParameter;
    
            if (startShelfNo != null)
            {
                startShelfNoParameter = new ObjectParameter("StartShelfNo", startShelfNo);
            }
            else
            {
                startShelfNoParameter = new ObjectParameter("StartShelfNo", typeof(string));
            }
    
            ObjectParameter endShelfNoParameter;
    
            if (endShelfNo != null)
            {
                endShelfNoParameter = new ObjectParameter("EndShelfNo", endShelfNo);
            }
            else
            {
                endShelfNoParameter = new ObjectParameter("EndShelfNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter instrumentNameParameter;
    
            if (instrumentName != null)
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", instrumentName);
            }
            else
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
    
            ObjectParameter c_CONFIG_WILDCARDParameter;
    
            if (c_CONFIG_WILDCARD != null)
            {
                c_CONFIG_WILDCARDParameter = new ObjectParameter("C_CONFIG_WILDCARD", c_CONFIG_WILDCARD);
            }
            else
            {
                c_CONFIG_WILDCARDParameter = new ObjectParameter("C_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter c_INV_SHELF_NO_NOT_PRICEParameter;
    
            if (c_INV_SHELF_NO_NOT_PRICE != null)
            {
                c_INV_SHELF_NO_NOT_PRICEParameter = new ObjectParameter("C_INV_SHELF_NO_NOT_PRICE", c_INV_SHELF_NO_NOT_PRICE);
            }
            else
            {
                c_INV_SHELF_NO_NOT_PRICEParameter = new ObjectParameter("C_INV_SHELF_NO_NOT_PRICE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_LENDING_DEMOParameter;
    
            if (c_INV_AREA_SE_LENDING_DEMO != null)
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", c_INV_AREA_SE_LENDING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", typeof(string));
            }
            return base.ExecuteFunction<dtSearchInstrumentListResult>("SearchInventoryInstrumentListAllShelf", officeCodeParameter, locationCodeParameter, areaCodeParameter, startShelfNoParameter, endShelfNoParameter, instrumentCodeParameter, instrumentNameParameter, c_INV_AREAParameter, c_CONFIG_WILDCARDParameter, c_INV_SHELF_NO_NOT_PRICEParameter, c_INV_AREA_SE_LENDING_DEMOParameter);
        }
        public ObjectResult<doIVR> GetIVR(string pC_INV_STOCKIN_TYPE, string pC_INV_LOC, string pC_INV_AREA, string pInventorySlipNo)
        {
    
            ObjectParameter pC_INV_STOCKIN_TYPEParameter;
    
            if (pC_INV_STOCKIN_TYPE != null)
            {
                pC_INV_STOCKIN_TYPEParameter = new ObjectParameter("pC_INV_STOCKIN_TYPE", pC_INV_STOCKIN_TYPE);
            }
            else
            {
                pC_INV_STOCKIN_TYPEParameter = new ObjectParameter("pC_INV_STOCKIN_TYPE", typeof(string));
            }
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<doIVR>("GetIVR", pC_INV_STOCKIN_TYPEParameter, pC_INV_LOCParameter, pC_INV_AREAParameter, pInventorySlipNoParameter);
        }
        public ObjectResult<doResultInstallationSlipForStockOut> GetInstallationSlipForPartialStockOutList(string pC_RENTAL_INSTALL_TYPE, string pC_SALE_INSTALL_TYPE, string pC_SLIP_STATUS_NOT_STOCK_OUT, string pC_CONFIG_WILDCARD, string pC_SLIP_STATUS_PARTIAL_STOCK_OUT, string pInstallationSlipNo, string pContractCode, string pContractTargerName, string pSiteName, Nullable<System.DateTime> pExpectedStockOutDateFrom, Nullable<System.DateTime> pExpectedStockOutDateTo, string pOfficeCode, string pInstallationType)
        {
    
            ObjectParameter pC_RENTAL_INSTALL_TYPEParameter;
    
            if (pC_RENTAL_INSTALL_TYPE != null)
            {
                pC_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("pC_RENTAL_INSTALL_TYPE", pC_RENTAL_INSTALL_TYPE);
            }
            else
            {
                pC_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("pC_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SALE_INSTALL_TYPEParameter;
    
            if (pC_SALE_INSTALL_TYPE != null)
            {
                pC_SALE_INSTALL_TYPEParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE", pC_SALE_INSTALL_TYPE);
            }
            else
            {
                pC_SALE_INSTALL_TYPEParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter pC_SLIP_STATUS_NOT_STOCK_OUTParameter;
    
            if (pC_SLIP_STATUS_NOT_STOCK_OUT != null)
            {
                pC_SLIP_STATUS_NOT_STOCK_OUTParameter = new ObjectParameter("pC_SLIP_STATUS_NOT_STOCK_OUT", pC_SLIP_STATUS_NOT_STOCK_OUT);
            }
            else
            {
                pC_SLIP_STATUS_NOT_STOCK_OUTParameter = new ObjectParameter("pC_SLIP_STATUS_NOT_STOCK_OUT", typeof(string));
            }
    
            ObjectParameter pC_CONFIG_WILDCARDParameter;
    
            if (pC_CONFIG_WILDCARD != null)
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", pC_CONFIG_WILDCARD);
            }
            else
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter pC_SLIP_STATUS_PARTIAL_STOCK_OUTParameter;
    
            if (pC_SLIP_STATUS_PARTIAL_STOCK_OUT != null)
            {
                pC_SLIP_STATUS_PARTIAL_STOCK_OUTParameter = new ObjectParameter("pC_SLIP_STATUS_PARTIAL_STOCK_OUT", pC_SLIP_STATUS_PARTIAL_STOCK_OUT);
            }
            else
            {
                pC_SLIP_STATUS_PARTIAL_STOCK_OUTParameter = new ObjectParameter("pC_SLIP_STATUS_PARTIAL_STOCK_OUT", typeof(string));
            }
    
            ObjectParameter pInstallationSlipNoParameter;
    
            if (pInstallationSlipNo != null)
            {
                pInstallationSlipNoParameter = new ObjectParameter("pInstallationSlipNo", pInstallationSlipNo);
            }
            else
            {
                pInstallationSlipNoParameter = new ObjectParameter("pInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pContractTargerNameParameter;
    
            if (pContractTargerName != null)
            {
                pContractTargerNameParameter = new ObjectParameter("pContractTargerName", pContractTargerName);
            }
            else
            {
                pContractTargerNameParameter = new ObjectParameter("pContractTargerName", typeof(string));
            }
    
            ObjectParameter pSiteNameParameter;
    
            if (pSiteName != null)
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", pSiteName);
            }
            else
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", typeof(string));
            }
    
            ObjectParameter pExpectedStockOutDateFromParameter;
    
            if (pExpectedStockOutDateFrom.HasValue)
            {
                pExpectedStockOutDateFromParameter = new ObjectParameter("pExpectedStockOutDateFrom", pExpectedStockOutDateFrom);
            }
            else
            {
                pExpectedStockOutDateFromParameter = new ObjectParameter("pExpectedStockOutDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pExpectedStockOutDateToParameter;
    
            if (pExpectedStockOutDateTo.HasValue)
            {
                pExpectedStockOutDateToParameter = new ObjectParameter("pExpectedStockOutDateTo", pExpectedStockOutDateTo);
            }
            else
            {
                pExpectedStockOutDateToParameter = new ObjectParameter("pExpectedStockOutDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pInstallationTypeParameter;
    
            if (pInstallationType != null)
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", pInstallationType);
            }
            else
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", typeof(string));
            }
            return base.ExecuteFunction<doResultInstallationSlipForStockOut>("GetInstallationSlipForPartialStockOutList", pC_RENTAL_INSTALL_TYPEParameter, pC_SALE_INSTALL_TYPEParameter, pC_SLIP_STATUS_NOT_STOCK_OUTParameter, pC_CONFIG_WILDCARDParameter, pC_SLIP_STATUS_PARTIAL_STOCK_OUTParameter, pInstallationSlipNoParameter, pContractCodeParameter, pContractTargerNameParameter, pSiteNameParameter, pExpectedStockOutDateFromParameter, pExpectedStockOutDateToParameter, pOfficeCodeParameter, pInstallationTypeParameter);
        }
        public ObjectResult<doGetShelfOfArea> GetShelfOfArea(string areaCode, string instrumentCode, string c_INV_SHELF_TYPE_NORMAL)
        {
    
            ObjectParameter areaCodeParameter;
    
            if (areaCode != null)
            {
                areaCodeParameter = new ObjectParameter("AreaCode", areaCode);
            }
            else
            {
                areaCodeParameter = new ObjectParameter("AreaCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter c_INV_SHELF_TYPE_NORMALParameter;
    
            if (c_INV_SHELF_TYPE_NORMAL != null)
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", c_INV_SHELF_TYPE_NORMAL);
            }
            else
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", typeof(string));
            }
            return base.ExecuteFunction<doGetShelfOfArea>("GetShelfOfArea", areaCodeParameter, instrumentCodeParameter, c_INV_SHELF_TYPE_NORMALParameter);
        }
        public ObjectResult<doResultGetSumPartialStockOutList> GetSumPartialStockOutList(string pC_INV_SLIP_STATUS_PARTIAL, string pContractCode)
        {
    
            ObjectParameter pC_INV_SLIP_STATUS_PARTIALParameter;
    
            if (pC_INV_SLIP_STATUS_PARTIAL != null)
            {
                pC_INV_SLIP_STATUS_PARTIALParameter = new ObjectParameter("pC_INV_SLIP_STATUS_PARTIAL", pC_INV_SLIP_STATUS_PARTIAL);
            }
            else
            {
                pC_INV_SLIP_STATUS_PARTIALParameter = new ObjectParameter("pC_INV_SLIP_STATUS_PARTIAL", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<doResultGetSumPartialStockOutList>("GetSumPartialStockOutList", pC_INV_SLIP_STATUS_PARTIALParameter, pContractCodeParameter);
        }
        public ObjectResult<tbt_InventoryBooking> InsertTbt_InventoryBooking(string xml_doTbt_InventoryBookings)
        {
    
            ObjectParameter xml_doTbt_InventoryBookingsParameter;
    
            if (xml_doTbt_InventoryBookings != null)
            {
                xml_doTbt_InventoryBookingsParameter = new ObjectParameter("xml_doTbt_InventoryBookings", xml_doTbt_InventoryBookings);
            }
            else
            {
                xml_doTbt_InventoryBookingsParameter = new ObjectParameter("xml_doTbt_InventoryBookings", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBooking>("InsertTbt_InventoryBooking", xml_doTbt_InventoryBookingsParameter);
        }
        public ObjectResult<tbt_InventoryBooking> UpdateTbt_InventoryBooking(string xml_doTbt_InventoryBookings)
        {
    
            ObjectParameter xml_doTbt_InventoryBookingsParameter;
    
            if (xml_doTbt_InventoryBookings != null)
            {
                xml_doTbt_InventoryBookingsParameter = new ObjectParameter("xml_doTbt_InventoryBookings", xml_doTbt_InventoryBookings);
            }
            else
            {
                xml_doTbt_InventoryBookingsParameter = new ObjectParameter("xml_doTbt_InventoryBookings", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBooking>("UpdateTbt_InventoryBooking", xml_doTbt_InventoryBookingsParameter);
        }
        public ObjectResult<dtCheckingDetailList> GetCheckingDetailList(string pCheckingYearMonth, string pOfficeCode, string pLocationCode, string pAreaCode, string pC_INV_AREA)
        {
    
            ObjectParameter pCheckingYearMonthParameter;
    
            if (pCheckingYearMonth != null)
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", pCheckingYearMonth);
            }
            else
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pLocationCodeParameter;
    
            if (pLocationCode != null)
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", pLocationCode);
            }
            else
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", typeof(string));
            }
    
            ObjectParameter pAreaCodeParameter;
    
            if (pAreaCode != null)
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", pAreaCode);
            }
            else
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<dtCheckingDetailList>("GetCheckingDetailList", pCheckingYearMonthParameter, pOfficeCodeParameter, pLocationCodeParameter, pAreaCodeParameter, pC_INV_AREAParameter);
        }
        public ObjectResult<dtStockCheckingList> GetStockCheckingList(string pAreaCode, string pCheckingYearMonth, string pInstrumentCode, string pInstrumentName, string pLocationCode, string pOfficeCode, string pShelfNoFrom, string pShelfNoTo, string pC_INV_AREA, string pC_INV_LOC)
        {
    
            ObjectParameter pAreaCodeParameter;
    
            if (pAreaCode != null)
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", pAreaCode);
            }
            else
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", typeof(string));
            }
    
            ObjectParameter pCheckingYearMonthParameter;
    
            if (pCheckingYearMonth != null)
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", pCheckingYearMonth);
            }
            else
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
    
            ObjectParameter pInstrumentNameParameter;
    
            if (pInstrumentName != null)
            {
                pInstrumentNameParameter = new ObjectParameter("pInstrumentName", pInstrumentName);
            }
            else
            {
                pInstrumentNameParameter = new ObjectParameter("pInstrumentName", typeof(string));
            }
    
            ObjectParameter pLocationCodeParameter;
    
            if (pLocationCode != null)
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", pLocationCode);
            }
            else
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pShelfNoFromParameter;
    
            if (pShelfNoFrom != null)
            {
                pShelfNoFromParameter = new ObjectParameter("pShelfNoFrom", pShelfNoFrom);
            }
            else
            {
                pShelfNoFromParameter = new ObjectParameter("pShelfNoFrom", typeof(string));
            }
    
            ObjectParameter pShelfNoToParameter;
    
            if (pShelfNoTo != null)
            {
                pShelfNoToParameter = new ObjectParameter("pShelfNoTo", pShelfNoTo);
            }
            else
            {
                pShelfNoToParameter = new ObjectParameter("pShelfNoTo", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
            return base.ExecuteFunction<dtStockCheckingList>("GetStockCheckingList", pAreaCodeParameter, pCheckingYearMonthParameter, pInstrumentCodeParameter, pInstrumentNameParameter, pLocationCodeParameter, pOfficeCodeParameter, pShelfNoFromParameter, pShelfNoToParameter, pC_INV_AREAParameter, pC_INV_LOCParameter);
        }
        public ObjectResult<tbt_InventoryBookingDetail> InsertTbt_InventoryBookingDetail(string xml_doTbt_InventoryBookingDetails)
        {
    
            ObjectParameter xml_doTbt_InventoryBookingDetailsParameter;
    
            if (xml_doTbt_InventoryBookingDetails != null)
            {
                xml_doTbt_InventoryBookingDetailsParameter = new ObjectParameter("xml_doTbt_InventoryBookingDetails", xml_doTbt_InventoryBookingDetails);
            }
            else
            {
                xml_doTbt_InventoryBookingDetailsParameter = new ObjectParameter("xml_doTbt_InventoryBookingDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryBookingDetail>("InsertTbt_InventoryBookingDetail", xml_doTbt_InventoryBookingDetailsParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetLastBusinessDate_(Nullable<System.DateTime> date)
        {
    
            ObjectParameter dateParameter;
    
            if (date.HasValue)
            {
                dateParameter = new ObjectParameter("Date", date);
            }
            else
            {
                dateParameter = new ObjectParameter("Date", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetLastBusinessDate_", dateParameter);
        }
        public int UpdateCalculateDepreciation(Nullable<System.DateTime> pProcessDate, string pEmpNo)
        {
    
            ObjectParameter pProcessDateParameter;
    
            if (pProcessDate.HasValue)
            {
                pProcessDateParameter = new ObjectParameter("pProcessDate", pProcessDate);
            }
            else
            {
                pProcessDateParameter = new ObjectParameter("pProcessDate", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
            return base.ExecuteFunction("UpdateCalculateDepreciation", pProcessDateParameter, pEmpNoParameter);
        }
        public int FreezeInstrumentDataForStockCheckingProcess(string pCheckingYearMonth, string pC_INV_LOC_INSTOCK, string pC_INV_LOC_PRE_ELIMINATION, string pC_INV_LOC_REPAIRING, Nullable<bool> pC_FLAG_OFF, string pC_INV_CHECKING_STATUS_PREPARING, string pC_INV_SHELF_NO_NOT_PRICE)
        {
    
            ObjectParameter pCheckingYearMonthParameter;
    
            if (pCheckingYearMonth != null)
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", pCheckingYearMonth);
            }
            else
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_INSTOCKParameter;
    
            if (pC_INV_LOC_INSTOCK != null)
            {
                pC_INV_LOC_INSTOCKParameter = new ObjectParameter("pC_INV_LOC_INSTOCK", pC_INV_LOC_INSTOCK);
            }
            else
            {
                pC_INV_LOC_INSTOCKParameter = new ObjectParameter("pC_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_PRE_ELIMINATIONParameter;
    
            if (pC_INV_LOC_PRE_ELIMINATION != null)
            {
                pC_INV_LOC_PRE_ELIMINATIONParameter = new ObjectParameter("pC_INV_LOC_PRE_ELIMINATION", pC_INV_LOC_PRE_ELIMINATION);
            }
            else
            {
                pC_INV_LOC_PRE_ELIMINATIONParameter = new ObjectParameter("pC_INV_LOC_PRE_ELIMINATION", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_REPAIRINGParameter;
    
            if (pC_INV_LOC_REPAIRING != null)
            {
                pC_INV_LOC_REPAIRINGParameter = new ObjectParameter("pC_INV_LOC_REPAIRING", pC_INV_LOC_REPAIRING);
            }
            else
            {
                pC_INV_LOC_REPAIRINGParameter = new ObjectParameter("pC_INV_LOC_REPAIRING", typeof(string));
            }
    
            ObjectParameter pC_FLAG_OFFParameter;
    
            if (pC_FLAG_OFF.HasValue)
            {
                pC_FLAG_OFFParameter = new ObjectParameter("pC_FLAG_OFF", pC_FLAG_OFF);
            }
            else
            {
                pC_FLAG_OFFParameter = new ObjectParameter("pC_FLAG_OFF", typeof(bool));
            }
    
            ObjectParameter pC_INV_CHECKING_STATUS_PREPARINGParameter;
    
            if (pC_INV_CHECKING_STATUS_PREPARING != null)
            {
                pC_INV_CHECKING_STATUS_PREPARINGParameter = new ObjectParameter("pC_INV_CHECKING_STATUS_PREPARING", pC_INV_CHECKING_STATUS_PREPARING);
            }
            else
            {
                pC_INV_CHECKING_STATUS_PREPARINGParameter = new ObjectParameter("pC_INV_CHECKING_STATUS_PREPARING", typeof(string));
            }
    
            ObjectParameter pC_INV_SHELF_NO_NOT_PRICEParameter;
    
            if (pC_INV_SHELF_NO_NOT_PRICE != null)
            {
                pC_INV_SHELF_NO_NOT_PRICEParameter = new ObjectParameter("pC_INV_SHELF_NO_NOT_PRICE", pC_INV_SHELF_NO_NOT_PRICE);
            }
            else
            {
                pC_INV_SHELF_NO_NOT_PRICEParameter = new ObjectParameter("pC_INV_SHELF_NO_NOT_PRICE", typeof(string));
            }
            return base.ExecuteFunction("FreezeInstrumentDataForStockCheckingProcess", pCheckingYearMonthParameter, pC_INV_LOC_INSTOCKParameter, pC_INV_LOC_PRE_ELIMINATIONParameter, pC_INV_LOC_REPAIRINGParameter, pC_FLAG_OFFParameter, pC_INV_CHECKING_STATUS_PREPARINGParameter, pC_INV_SHELF_NO_NOT_PRICEParameter);
        }
        public ObjectResult<tbt_InventoryCheckingSlip> GetTbt_InventoryCheckingSlip(string pSlipNo, string pCheckingYearMonth, string pLocationCode, string pOfficeCode)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter pCheckingYearMonthParameter;
    
            if (pCheckingYearMonth != null)
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", pCheckingYearMonth);
            }
            else
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", typeof(string));
            }
    
            ObjectParameter pLocationCodeParameter;
    
            if (pLocationCode != null)
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", pLocationCode);
            }
            else
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingSlip>("GetTbt_InventoryCheckingSlip", pSlipNoParameter, pCheckingYearMonthParameter, pLocationCodeParameter, pOfficeCodeParameter);
        }
        public ObjectResult<doCheckingTempForGenSlip> GetCheckingTempForGenSlip(string pCheckingYearMonth)
        {
    
            ObjectParameter pCheckingYearMonthParameter;
    
            if (pCheckingYearMonth != null)
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", pCheckingYearMonth);
            }
            else
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", typeof(string));
            }
            return base.ExecuteFunction<doCheckingTempForGenSlip>("GetCheckingTempForGenSlip", pCheckingYearMonthParameter);
        }
        public ObjectResult<tbt_InventoryCheckingSlip> InsertTbt_InventoryCheckingSlip(string xml_doTbt_InventoryCheckingSlips)
        {
    
            ObjectParameter xml_doTbt_InventoryCheckingSlipsParameter;
    
            if (xml_doTbt_InventoryCheckingSlips != null)
            {
                xml_doTbt_InventoryCheckingSlipsParameter = new ObjectParameter("xml_doTbt_InventoryCheckingSlips", xml_doTbt_InventoryCheckingSlips);
            }
            else
            {
                xml_doTbt_InventoryCheckingSlipsParameter = new ObjectParameter("xml_doTbt_InventoryCheckingSlips", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingSlip>("InsertTbt_InventoryCheckingSlip", xml_doTbt_InventoryCheckingSlipsParameter);
        }
        public ObjectResult<doIVR100> GetIVR100(string pC_INV_LOC, string pC_INV_AREA, string pC_CONFIG_SUSPENDFLAG, string pInventorySlipNo)
        {
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pC_CONFIG_SUSPENDFLAGParameter;
    
            if (pC_CONFIG_SUSPENDFLAG != null)
            {
                pC_CONFIG_SUSPENDFLAGParameter = new ObjectParameter("pC_CONFIG_SUSPENDFLAG", pC_CONFIG_SUSPENDFLAG);
            }
            else
            {
                pC_CONFIG_SUSPENDFLAGParameter = new ObjectParameter("pC_CONFIG_SUSPENDFLAG", typeof(string));
            }
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<doIVR100>("GetIVR100", pC_INV_LOCParameter, pC_INV_AREAParameter, pC_CONFIG_SUSPENDFLAGParameter, pInventorySlipNoParameter);
        }
        public ObjectResult<tbt_InventoryCheckingTemp> GetTbt_InventoryCheckingTemp(string pCheckingYearMonth, string pLocationCode, string pOfficeCode, string pShelfNo, string pAreaCode, string pInstrumentCode)
        {
    
            ObjectParameter pCheckingYearMonthParameter;
    
            if (pCheckingYearMonth != null)
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", pCheckingYearMonth);
            }
            else
            {
                pCheckingYearMonthParameter = new ObjectParameter("pCheckingYearMonth", typeof(string));
            }
    
            ObjectParameter pLocationCodeParameter;
    
            if (pLocationCode != null)
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", pLocationCode);
            }
            else
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pShelfNoParameter;
    
            if (pShelfNo != null)
            {
                pShelfNoParameter = new ObjectParameter("pShelfNo", pShelfNo);
            }
            else
            {
                pShelfNoParameter = new ObjectParameter("pShelfNo", typeof(string));
            }
    
            ObjectParameter pAreaCodeParameter;
    
            if (pAreaCode != null)
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", pAreaCode);
            }
            else
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingTemp>("GetTbt_InventoryCheckingTemp", pCheckingYearMonthParameter, pLocationCodeParameter, pOfficeCodeParameter, pShelfNoParameter, pAreaCodeParameter, pInstrumentCodeParameter);
        }
        public ObjectResult<RPTdoIVR140> GetIVR140(string strInventorySlipNo, string c_INV_AREA)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<RPTdoIVR140>("GetIVR140", strInventorySlipNoParameter, c_INV_AREAParameter);
        }
        public ObjectResult<RPTdoIVR141> GetIVR141(string strInventorySlipNo, string c_INV_AREA)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<RPTdoIVR141>("GetIVR141", strInventorySlipNoParameter, c_INV_AREAParameter);
        }
        public ObjectResult<RPTdoIVR142> GetIVR142(string strInventorySlipNo, string c_INV_AREA)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<RPTdoIVR142>("GetIVR142", strInventorySlipNoParameter, c_INV_AREAParameter);
        }
        public ObjectResult<RPTdoIVR143> GetIVR143(string strInventorySlipNo, string c_INV_AREA)
        {
    
            ObjectParameter strInventorySlipNoParameter;
    
            if (strInventorySlipNo != null)
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", strInventorySlipNo);
            }
            else
            {
                strInventorySlipNoParameter = new ObjectParameter("strInventorySlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<RPTdoIVR143>("GetIVR143", strInventorySlipNoParameter, c_INV_AREAParameter);
        }
        public ObjectResult<RPTdoIVR150> GetIVR150(string strYearMonth)
        {
    
            ObjectParameter strYearMonthParameter;
    
            if (strYearMonth != null)
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", strYearMonth);
            }
            else
            {
                strYearMonthParameter = new ObjectParameter("strYearMonth", typeof(string));
            }
            return base.ExecuteFunction<RPTdoIVR150>("GetIVR150", strYearMonthParameter);
        }
        public ObjectResult<doCSVassetAmountAcc> GetExportAssetAmountAcc(string pC_INV_ACCOUNT_CODE_SALE, string pC_INV_ACCOUNT_CODE_SPECIAL, string pC_INV_ACCOUNT_CODE_INSTOCK, string pC_INV_ACCOUNT_CODE_INSTALLED, string pC_INV_ACCOUNT_CODE_ELIMINATE, string pC_INV_ACCOUNT_CODE_ADJUST)
        {
    
            ObjectParameter pC_INV_ACCOUNT_CODE_SALEParameter;
    
            if (pC_INV_ACCOUNT_CODE_SALE != null)
            {
                pC_INV_ACCOUNT_CODE_SALEParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_SALE", pC_INV_ACCOUNT_CODE_SALE);
            }
            else
            {
                pC_INV_ACCOUNT_CODE_SALEParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_SALE", typeof(string));
            }
    
            ObjectParameter pC_INV_ACCOUNT_CODE_SPECIALParameter;
    
            if (pC_INV_ACCOUNT_CODE_SPECIAL != null)
            {
                pC_INV_ACCOUNT_CODE_SPECIALParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_SPECIAL", pC_INV_ACCOUNT_CODE_SPECIAL);
            }
            else
            {
                pC_INV_ACCOUNT_CODE_SPECIALParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_SPECIAL", typeof(string));
            }
    
            ObjectParameter pC_INV_ACCOUNT_CODE_INSTOCKParameter;
    
            if (pC_INV_ACCOUNT_CODE_INSTOCK != null)
            {
                pC_INV_ACCOUNT_CODE_INSTOCKParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_INSTOCK", pC_INV_ACCOUNT_CODE_INSTOCK);
            }
            else
            {
                pC_INV_ACCOUNT_CODE_INSTOCKParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_INSTOCK", typeof(string));
            }
    
            ObjectParameter pC_INV_ACCOUNT_CODE_INSTALLEDParameter;
    
            if (pC_INV_ACCOUNT_CODE_INSTALLED != null)
            {
                pC_INV_ACCOUNT_CODE_INSTALLEDParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_INSTALLED", pC_INV_ACCOUNT_CODE_INSTALLED);
            }
            else
            {
                pC_INV_ACCOUNT_CODE_INSTALLEDParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_INSTALLED", typeof(string));
            }
    
            ObjectParameter pC_INV_ACCOUNT_CODE_ELIMINATEParameter;
    
            if (pC_INV_ACCOUNT_CODE_ELIMINATE != null)
            {
                pC_INV_ACCOUNT_CODE_ELIMINATEParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_ELIMINATE", pC_INV_ACCOUNT_CODE_ELIMINATE);
            }
            else
            {
                pC_INV_ACCOUNT_CODE_ELIMINATEParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_ELIMINATE", typeof(string));
            }
    
            ObjectParameter pC_INV_ACCOUNT_CODE_ADJUSTParameter;
    
            if (pC_INV_ACCOUNT_CODE_ADJUST != null)
            {
                pC_INV_ACCOUNT_CODE_ADJUSTParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_ADJUST", pC_INV_ACCOUNT_CODE_ADJUST);
            }
            else
            {
                pC_INV_ACCOUNT_CODE_ADJUSTParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE_ADJUST", typeof(string));
            }
            return base.ExecuteFunction<doCSVassetAmountAcc>("GetExportAssetAmountAcc", pC_INV_ACCOUNT_CODE_SALEParameter, pC_INV_ACCOUNT_CODE_SPECIALParameter, pC_INV_ACCOUNT_CODE_INSTOCKParameter, pC_INV_ACCOUNT_CODE_INSTALLEDParameter, pC_INV_ACCOUNT_CODE_ELIMINATEParameter, pC_INV_ACCOUNT_CODE_ADJUSTParameter);
        }
        public ObjectResult<doCSVInvDepreciationAcc> GetExportInvDepreciationAcc(Nullable<System.DateTime> pDateGenerate)
        {
    
            ObjectParameter pDateGenerateParameter;
    
            if (pDateGenerate.HasValue)
            {
                pDateGenerateParameter = new ObjectParameter("pDateGenerate", pDateGenerate);
            }
            else
            {
                pDateGenerateParameter = new ObjectParameter("pDateGenerate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doCSVInvDepreciationAcc>("GetExportInvDepreciationAcc", pDateGenerateParameter);
        }
        public ObjectResult<tbt_InventoryCheckingSlipDetail> InsertTbt_InventoryCheckingSlipDetail(string xml_doTbt_InventoryCheckingSlipDetails)
        {
    
            ObjectParameter xml_doTbt_InventoryCheckingSlipDetailsParameter;
    
            if (xml_doTbt_InventoryCheckingSlipDetails != null)
            {
                xml_doTbt_InventoryCheckingSlipDetailsParameter = new ObjectParameter("xml_doTbt_InventoryCheckingSlipDetails", xml_doTbt_InventoryCheckingSlipDetails);
            }
            else
            {
                xml_doTbt_InventoryCheckingSlipDetailsParameter = new ObjectParameter("xml_doTbt_InventoryCheckingSlipDetails", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingSlipDetail>("InsertTbt_InventoryCheckingSlipDetail", xml_doTbt_InventoryCheckingSlipDetailsParameter);
        }
        public ObjectResult<doIVR110> GetIVR110(string pC_INV_LOC, string pC_INV_AREA, string pC_CONFIG_SUSPENDFLAG, string pInventorySlipNo)
        {
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pC_CONFIG_SUSPENDFLAGParameter;
    
            if (pC_CONFIG_SUSPENDFLAG != null)
            {
                pC_CONFIG_SUSPENDFLAGParameter = new ObjectParameter("pC_CONFIG_SUSPENDFLAG", pC_CONFIG_SUSPENDFLAG);
            }
            else
            {
                pC_CONFIG_SUSPENDFLAGParameter = new ObjectParameter("pC_CONFIG_SUSPENDFLAG", typeof(string));
            }
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<doIVR110>("GetIVR110", pC_INV_LOCParameter, pC_INV_AREAParameter, pC_CONFIG_SUSPENDFLAGParameter, pInventorySlipNoParameter);
        }
        public ObjectResult<doIVR170> GetIVR170(string pickingListNo, string c_INV_AREA)
        {
    
            ObjectParameter pickingListNoParameter;
    
            if (pickingListNo != null)
            {
                pickingListNoParameter = new ObjectParameter("PickingListNo", pickingListNo);
            }
            else
            {
                pickingListNoParameter = new ObjectParameter("PickingListNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<doIVR170>("GetIVR170", pickingListNoParameter, c_INV_AREAParameter);
        }
        public ObjectResult<doIVR190> GetIVR190(string purchaseOrderNo, string c_OFFICELEVEL_HEAD, string c_DEPT_PURCHASE, Nullable<bool> c_FLAG_ON, string c_CURRENCY_TYPE_THB, string c_CURRENCY_TYPE_USD, string c_CURRENCY_TYPE_EUR, string c_CURRENCY_TYPE_YEN)
        {
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
    
            ObjectParameter c_OFFICELEVEL_HEADParameter;
    
            if (c_OFFICELEVEL_HEAD != null)
            {
                c_OFFICELEVEL_HEADParameter = new ObjectParameter("C_OFFICELEVEL_HEAD", c_OFFICELEVEL_HEAD);
            }
            else
            {
                c_OFFICELEVEL_HEADParameter = new ObjectParameter("C_OFFICELEVEL_HEAD", typeof(string));
            }
    
            ObjectParameter c_DEPT_PURCHASEParameter;
    
            if (c_DEPT_PURCHASE != null)
            {
                c_DEPT_PURCHASEParameter = new ObjectParameter("C_DEPT_PURCHASE", c_DEPT_PURCHASE);
            }
            else
            {
                c_DEPT_PURCHASEParameter = new ObjectParameter("C_DEPT_PURCHASE", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
    
            ObjectParameter c_CURRENCY_TYPE_THBParameter;
    
            if (c_CURRENCY_TYPE_THB != null)
            {
                c_CURRENCY_TYPE_THBParameter = new ObjectParameter("C_CURRENCY_TYPE_THB", c_CURRENCY_TYPE_THB);
            }
            else
            {
                c_CURRENCY_TYPE_THBParameter = new ObjectParameter("C_CURRENCY_TYPE_THB", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_TYPE_USDParameter;
    
            if (c_CURRENCY_TYPE_USD != null)
            {
                c_CURRENCY_TYPE_USDParameter = new ObjectParameter("C_CURRENCY_TYPE_USD", c_CURRENCY_TYPE_USD);
            }
            else
            {
                c_CURRENCY_TYPE_USDParameter = new ObjectParameter("C_CURRENCY_TYPE_USD", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_TYPE_EURParameter;
    
            if (c_CURRENCY_TYPE_EUR != null)
            {
                c_CURRENCY_TYPE_EURParameter = new ObjectParameter("C_CURRENCY_TYPE_EUR", c_CURRENCY_TYPE_EUR);
            }
            else
            {
                c_CURRENCY_TYPE_EURParameter = new ObjectParameter("C_CURRENCY_TYPE_EUR", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_TYPE_YENParameter;
    
            if (c_CURRENCY_TYPE_YEN != null)
            {
                c_CURRENCY_TYPE_YENParameter = new ObjectParameter("C_CURRENCY_TYPE_YEN", c_CURRENCY_TYPE_YEN);
            }
            else
            {
                c_CURRENCY_TYPE_YENParameter = new ObjectParameter("C_CURRENCY_TYPE_YEN", typeof(string));
            }
            return base.ExecuteFunction<doIVR190>("GetIVR190", purchaseOrderNoParameter, c_OFFICELEVEL_HEADParameter, c_DEPT_PURCHASEParameter, c_FLAG_ONParameter, c_CURRENCY_TYPE_THBParameter, c_CURRENCY_TYPE_USDParameter, c_CURRENCY_TYPE_EURParameter, c_CURRENCY_TYPE_YENParameter);
        }
        public ObjectResult<doIVR191> GetIVR191(string purchaseOrderNo, string c_VAT_THB, string c_UNIT_PCS, string c_OFFICELEVEL_HEAD, string c_DEPT_PURCHASE, Nullable<bool> c_FLAG_ON)
        {
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
    
            ObjectParameter c_VAT_THBParameter;
    
            if (c_VAT_THB != null)
            {
                c_VAT_THBParameter = new ObjectParameter("C_VAT_THB", c_VAT_THB);
            }
            else
            {
                c_VAT_THBParameter = new ObjectParameter("C_VAT_THB", typeof(string));
            }
    
            ObjectParameter c_UNIT_PCSParameter;
    
            if (c_UNIT_PCS != null)
            {
                c_UNIT_PCSParameter = new ObjectParameter("C_UNIT_PCS", c_UNIT_PCS);
            }
            else
            {
                c_UNIT_PCSParameter = new ObjectParameter("C_UNIT_PCS", typeof(string));
            }
    
            ObjectParameter c_OFFICELEVEL_HEADParameter;
    
            if (c_OFFICELEVEL_HEAD != null)
            {
                c_OFFICELEVEL_HEADParameter = new ObjectParameter("C_OFFICELEVEL_HEAD", c_OFFICELEVEL_HEAD);
            }
            else
            {
                c_OFFICELEVEL_HEADParameter = new ObjectParameter("C_OFFICELEVEL_HEAD", typeof(string));
            }
    
            ObjectParameter c_DEPT_PURCHASEParameter;
    
            if (c_DEPT_PURCHASE != null)
            {
                c_DEPT_PURCHASEParameter = new ObjectParameter("C_DEPT_PURCHASE", c_DEPT_PURCHASE);
            }
            else
            {
                c_DEPT_PURCHASEParameter = new ObjectParameter("C_DEPT_PURCHASE", typeof(string));
            }
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON.HasValue)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(bool));
            }
            return base.ExecuteFunction<doIVR191>("GetIVR191", purchaseOrderNoParameter, c_VAT_THBParameter, c_UNIT_PCSParameter, c_OFFICELEVEL_HEADParameter, c_DEPT_PURCHASEParameter, c_FLAG_ONParameter);
        }
        public ObjectResult<doResultIVS201> GetIVS201(string pC_INV_LOC, string pC_INV_AREA, string pC_INV_AREA_SHORT, string pC_CONFIG_WILDCARD, string pOfficeCode, string pLocationCode, string pAreaCode, string pShelfNoFrom, string pShelfNoTo, string pInstrumentCode, string pInstrumentName)
        {
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_SHORTParameter;
    
            if (pC_INV_AREA_SHORT != null)
            {
                pC_INV_AREA_SHORTParameter = new ObjectParameter("pC_INV_AREA_SHORT", pC_INV_AREA_SHORT);
            }
            else
            {
                pC_INV_AREA_SHORTParameter = new ObjectParameter("pC_INV_AREA_SHORT", typeof(string));
            }
    
            ObjectParameter pC_CONFIG_WILDCARDParameter;
    
            if (pC_CONFIG_WILDCARD != null)
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", pC_CONFIG_WILDCARD);
            }
            else
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pLocationCodeParameter;
    
            if (pLocationCode != null)
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", pLocationCode);
            }
            else
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", typeof(string));
            }
    
            ObjectParameter pAreaCodeParameter;
    
            if (pAreaCode != null)
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", pAreaCode);
            }
            else
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", typeof(string));
            }
    
            ObjectParameter pShelfNoFromParameter;
    
            if (pShelfNoFrom != null)
            {
                pShelfNoFromParameter = new ObjectParameter("pShelfNoFrom", pShelfNoFrom);
            }
            else
            {
                pShelfNoFromParameter = new ObjectParameter("pShelfNoFrom", typeof(string));
            }
    
            ObjectParameter pShelfNoToParameter;
    
            if (pShelfNoTo != null)
            {
                pShelfNoToParameter = new ObjectParameter("pShelfNoTo", pShelfNoTo);
            }
            else
            {
                pShelfNoToParameter = new ObjectParameter("pShelfNoTo", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
    
            ObjectParameter pInstrumentNameParameter;
    
            if (pInstrumentName != null)
            {
                pInstrumentNameParameter = new ObjectParameter("pInstrumentName", pInstrumentName);
            }
            else
            {
                pInstrumentNameParameter = new ObjectParameter("pInstrumentName", typeof(string));
            }
            return base.ExecuteFunction<doResultIVS201>("GetIVS201", pC_INV_LOCParameter, pC_INV_AREAParameter, pC_INV_AREA_SHORTParameter, pC_CONFIG_WILDCARDParameter, pOfficeCodeParameter, pLocationCodeParameter, pAreaCodeParameter, pShelfNoFromParameter, pShelfNoToParameter, pInstrumentCodeParameter, pInstrumentNameParameter);
        }
        public ObjectResult<dtResultIVS220> GetIVS220(string pC_INV_AREA, string pC_INV_AREA_SHORT, string pC_INV_SLIP_PREFIX, string pC_INV_TRANSFERTYPE_TRANSFER_AREA, string pC_INV_TRANSFERTYPE_TRANSFER_SHELF, string pC_CONFIG_WILDCARD, string pC_INV_LOC_WAITING_RETURN, string pC_INV_LOC_PROJECT_WIP, string pC_INV_LOC_WIP, string pC_INV_LOC_UNOPERATED_WIP, string pC_INV_LOC_RETURNED, string pC_INV_LOC_RETURN_WIP, string pC_INV_LOC_USER, string pC_INV_LOC_TRANSFER, string pC_INV_LOC_INSTOCK, string pC_INV_LOC_REPAIR_REQUEST, string pC_INV_LOC_REPAIRING, string pC_INV_LOC_REPAIR_RETURN, string pC_INV_SLIP_STATUS_COMPLETE, string pC_INV_SLIP_STATUS_TRANSFER, string pOfficeCode, string pLocationCode, Nullable<System.DateTime> pDateFrom, Nullable<System.DateTime> pDateTo, string pInstrumentCode, string pInstrumentName, string pInventorySlipNo, string pAreaCode, string contractCode, string supplierName, string transferTypeCode)
        {
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_SHORTParameter;
    
            if (pC_INV_AREA_SHORT != null)
            {
                pC_INV_AREA_SHORTParameter = new ObjectParameter("pC_INV_AREA_SHORT", pC_INV_AREA_SHORT);
            }
            else
            {
                pC_INV_AREA_SHORTParameter = new ObjectParameter("pC_INV_AREA_SHORT", typeof(string));
            }
    
            ObjectParameter pC_INV_SLIP_PREFIXParameter;
    
            if (pC_INV_SLIP_PREFIX != null)
            {
                pC_INV_SLIP_PREFIXParameter = new ObjectParameter("pC_INV_SLIP_PREFIX", pC_INV_SLIP_PREFIX);
            }
            else
            {
                pC_INV_SLIP_PREFIXParameter = new ObjectParameter("pC_INV_SLIP_PREFIX", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter;
    
            if (pC_INV_TRANSFERTYPE_TRANSFER_AREA != null)
            {
                pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_TRANSFER_AREA", pC_INV_TRANSFERTYPE_TRANSFER_AREA);
            }
            else
            {
                pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_TRANSFER_AREA", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_TRANSFER_SHELFParameter;
    
            if (pC_INV_TRANSFERTYPE_TRANSFER_SHELF != null)
            {
                pC_INV_TRANSFERTYPE_TRANSFER_SHELFParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_TRANSFER_SHELF", pC_INV_TRANSFERTYPE_TRANSFER_SHELF);
            }
            else
            {
                pC_INV_TRANSFERTYPE_TRANSFER_SHELFParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_TRANSFER_SHELF", typeof(string));
            }
    
            ObjectParameter pC_CONFIG_WILDCARDParameter;
    
            if (pC_CONFIG_WILDCARD != null)
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", pC_CONFIG_WILDCARD);
            }
            else
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_WAITING_RETURNParameter;
    
            if (pC_INV_LOC_WAITING_RETURN != null)
            {
                pC_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("pC_INV_LOC_WAITING_RETURN", pC_INV_LOC_WAITING_RETURN);
            }
            else
            {
                pC_INV_LOC_WAITING_RETURNParameter = new ObjectParameter("pC_INV_LOC_WAITING_RETURN", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_PROJECT_WIPParameter;
    
            if (pC_INV_LOC_PROJECT_WIP != null)
            {
                pC_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("pC_INV_LOC_PROJECT_WIP", pC_INV_LOC_PROJECT_WIP);
            }
            else
            {
                pC_INV_LOC_PROJECT_WIPParameter = new ObjectParameter("pC_INV_LOC_PROJECT_WIP", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_WIPParameter;
    
            if (pC_INV_LOC_WIP != null)
            {
                pC_INV_LOC_WIPParameter = new ObjectParameter("pC_INV_LOC_WIP", pC_INV_LOC_WIP);
            }
            else
            {
                pC_INV_LOC_WIPParameter = new ObjectParameter("pC_INV_LOC_WIP", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_UNOPERATED_WIPParameter;
    
            if (pC_INV_LOC_UNOPERATED_WIP != null)
            {
                pC_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("pC_INV_LOC_UNOPERATED_WIP", pC_INV_LOC_UNOPERATED_WIP);
            }
            else
            {
                pC_INV_LOC_UNOPERATED_WIPParameter = new ObjectParameter("pC_INV_LOC_UNOPERATED_WIP", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_RETURNEDParameter;
    
            if (pC_INV_LOC_RETURNED != null)
            {
                pC_INV_LOC_RETURNEDParameter = new ObjectParameter("pC_INV_LOC_RETURNED", pC_INV_LOC_RETURNED);
            }
            else
            {
                pC_INV_LOC_RETURNEDParameter = new ObjectParameter("pC_INV_LOC_RETURNED", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_RETURN_WIPParameter;
    
            if (pC_INV_LOC_RETURN_WIP != null)
            {
                pC_INV_LOC_RETURN_WIPParameter = new ObjectParameter("pC_INV_LOC_RETURN_WIP", pC_INV_LOC_RETURN_WIP);
            }
            else
            {
                pC_INV_LOC_RETURN_WIPParameter = new ObjectParameter("pC_INV_LOC_RETURN_WIP", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_USERParameter;
    
            if (pC_INV_LOC_USER != null)
            {
                pC_INV_LOC_USERParameter = new ObjectParameter("pC_INV_LOC_USER", pC_INV_LOC_USER);
            }
            else
            {
                pC_INV_LOC_USERParameter = new ObjectParameter("pC_INV_LOC_USER", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_TRANSFERParameter;
    
            if (pC_INV_LOC_TRANSFER != null)
            {
                pC_INV_LOC_TRANSFERParameter = new ObjectParameter("pC_INV_LOC_TRANSFER", pC_INV_LOC_TRANSFER);
            }
            else
            {
                pC_INV_LOC_TRANSFERParameter = new ObjectParameter("pC_INV_LOC_TRANSFER", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_INSTOCKParameter;
    
            if (pC_INV_LOC_INSTOCK != null)
            {
                pC_INV_LOC_INSTOCKParameter = new ObjectParameter("pC_INV_LOC_INSTOCK", pC_INV_LOC_INSTOCK);
            }
            else
            {
                pC_INV_LOC_INSTOCKParameter = new ObjectParameter("pC_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_REPAIR_REQUESTParameter;
    
            if (pC_INV_LOC_REPAIR_REQUEST != null)
            {
                pC_INV_LOC_REPAIR_REQUESTParameter = new ObjectParameter("pC_INV_LOC_REPAIR_REQUEST", pC_INV_LOC_REPAIR_REQUEST);
            }
            else
            {
                pC_INV_LOC_REPAIR_REQUESTParameter = new ObjectParameter("pC_INV_LOC_REPAIR_REQUEST", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_REPAIRINGParameter;
    
            if (pC_INV_LOC_REPAIRING != null)
            {
                pC_INV_LOC_REPAIRINGParameter = new ObjectParameter("pC_INV_LOC_REPAIRING", pC_INV_LOC_REPAIRING);
            }
            else
            {
                pC_INV_LOC_REPAIRINGParameter = new ObjectParameter("pC_INV_LOC_REPAIRING", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_REPAIR_RETURNParameter;
    
            if (pC_INV_LOC_REPAIR_RETURN != null)
            {
                pC_INV_LOC_REPAIR_RETURNParameter = new ObjectParameter("pC_INV_LOC_REPAIR_RETURN", pC_INV_LOC_REPAIR_RETURN);
            }
            else
            {
                pC_INV_LOC_REPAIR_RETURNParameter = new ObjectParameter("pC_INV_LOC_REPAIR_RETURN", typeof(string));
            }
    
            ObjectParameter pC_INV_SLIP_STATUS_COMPLETEParameter;
    
            if (pC_INV_SLIP_STATUS_COMPLETE != null)
            {
                pC_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("pC_INV_SLIP_STATUS_COMPLETE", pC_INV_SLIP_STATUS_COMPLETE);
            }
            else
            {
                pC_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("pC_INV_SLIP_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter pC_INV_SLIP_STATUS_TRANSFERParameter;
    
            if (pC_INV_SLIP_STATUS_TRANSFER != null)
            {
                pC_INV_SLIP_STATUS_TRANSFERParameter = new ObjectParameter("pC_INV_SLIP_STATUS_TRANSFER", pC_INV_SLIP_STATUS_TRANSFER);
            }
            else
            {
                pC_INV_SLIP_STATUS_TRANSFERParameter = new ObjectParameter("pC_INV_SLIP_STATUS_TRANSFER", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pLocationCodeParameter;
    
            if (pLocationCode != null)
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", pLocationCode);
            }
            else
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", typeof(string));
            }
    
            ObjectParameter pDateFromParameter;
    
            if (pDateFrom.HasValue)
            {
                pDateFromParameter = new ObjectParameter("pDateFrom", pDateFrom);
            }
            else
            {
                pDateFromParameter = new ObjectParameter("pDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pDateToParameter;
    
            if (pDateTo.HasValue)
            {
                pDateToParameter = new ObjectParameter("pDateTo", pDateTo);
            }
            else
            {
                pDateToParameter = new ObjectParameter("pDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
    
            ObjectParameter pInstrumentNameParameter;
    
            if (pInstrumentName != null)
            {
                pInstrumentNameParameter = new ObjectParameter("pInstrumentName", pInstrumentName);
            }
            else
            {
                pInstrumentNameParameter = new ObjectParameter("pInstrumentName", typeof(string));
            }
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
    
            ObjectParameter pAreaCodeParameter;
    
            if (pAreaCode != null)
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", pAreaCode);
            }
            else
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter supplierNameParameter;
    
            if (supplierName != null)
            {
                supplierNameParameter = new ObjectParameter("SupplierName", supplierName);
            }
            else
            {
                supplierNameParameter = new ObjectParameter("SupplierName", typeof(string));
            }
    
            ObjectParameter transferTypeCodeParameter;
    
            if (transferTypeCode != null)
            {
                transferTypeCodeParameter = new ObjectParameter("TransferTypeCode", transferTypeCode);
            }
            else
            {
                transferTypeCodeParameter = new ObjectParameter("TransferTypeCode", typeof(string));
            }
            return base.ExecuteFunction<dtResultIVS220>("GetIVS220", pC_INV_AREAParameter, pC_INV_AREA_SHORTParameter, pC_INV_SLIP_PREFIXParameter, pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter, pC_INV_TRANSFERTYPE_TRANSFER_SHELFParameter, pC_CONFIG_WILDCARDParameter, pC_INV_LOC_WAITING_RETURNParameter, pC_INV_LOC_PROJECT_WIPParameter, pC_INV_LOC_WIPParameter, pC_INV_LOC_UNOPERATED_WIPParameter, pC_INV_LOC_RETURNEDParameter, pC_INV_LOC_RETURN_WIPParameter, pC_INV_LOC_USERParameter, pC_INV_LOC_TRANSFERParameter, pC_INV_LOC_INSTOCKParameter, pC_INV_LOC_REPAIR_REQUESTParameter, pC_INV_LOC_REPAIRINGParameter, pC_INV_LOC_REPAIR_RETURNParameter, pC_INV_SLIP_STATUS_COMPLETEParameter, pC_INV_SLIP_STATUS_TRANSFERParameter, pOfficeCodeParameter, pLocationCodeParameter, pDateFromParameter, pDateToParameter, pInstrumentCodeParameter, pInstrumentNameParameter, pInventorySlipNoParameter, pAreaCodeParameter, contractCodeParameter, supplierNameParameter, transferTypeCodeParameter);
        }
        public ObjectResult<dtResultInventorySlipIVS230> GetInventorySlipIVS230(string pC_INV_LOC, string pC_INV_TRANSFERTYPE, string pC_INV_SLIP_STATUS, string pC_INV_TRANSFERTYPE_TRANSFER_AREA, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string pInventorySlipNo, string pSlipStatus, string pOfficeCode, Nullable<System.DateTime> pDateFrom, Nullable<System.DateTime> pDateTo, string pEmpNo, string pProjectCode, string pStockOutType, string contractCode, string instrumentCode, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29)
        {
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPEParameter;
    
            if (pC_INV_TRANSFERTYPE != null)
            {
                pC_INV_TRANSFERTYPEParameter = new ObjectParameter("pC_INV_TRANSFERTYPE", pC_INV_TRANSFERTYPE);
            }
            else
            {
                pC_INV_TRANSFERTYPEParameter = new ObjectParameter("pC_INV_TRANSFERTYPE", typeof(string));
            }
    
            ObjectParameter pC_INV_SLIP_STATUSParameter;
    
            if (pC_INV_SLIP_STATUS != null)
            {
                pC_INV_SLIP_STATUSParameter = new ObjectParameter("pC_INV_SLIP_STATUS", pC_INV_SLIP_STATUS);
            }
            else
            {
                pC_INV_SLIP_STATUSParameter = new ObjectParameter("pC_INV_SLIP_STATUS", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter;
    
            if (pC_INV_TRANSFERTYPE_TRANSFER_AREA != null)
            {
                pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_TRANSFER_AREA", pC_INV_TRANSFERTYPE_TRANSFER_AREA);
            }
            else
            {
                pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_TRANSFER_AREA", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", typeof(string));
            }
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
    
            ObjectParameter pSlipStatusParameter;
    
            if (pSlipStatus != null)
            {
                pSlipStatusParameter = new ObjectParameter("pSlipStatus", pSlipStatus);
            }
            else
            {
                pSlipStatusParameter = new ObjectParameter("pSlipStatus", typeof(string));
            }
    
            ObjectParameter pOfficeCodeParameter;
    
            if (pOfficeCode != null)
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", pOfficeCode);
            }
            else
            {
                pOfficeCodeParameter = new ObjectParameter("pOfficeCode", typeof(string));
            }
    
            ObjectParameter pDateFromParameter;
    
            if (pDateFrom.HasValue)
            {
                pDateFromParameter = new ObjectParameter("pDateFrom", pDateFrom);
            }
            else
            {
                pDateFromParameter = new ObjectParameter("pDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pDateToParameter;
    
            if (pDateTo.HasValue)
            {
                pDateToParameter = new ObjectParameter("pDateTo", pDateTo);
            }
            else
            {
                pDateToParameter = new ObjectParameter("pDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
    
            ObjectParameter pStockOutTypeParameter;
    
            if (pStockOutType != null)
            {
                pStockOutTypeParameter = new ObjectParameter("pStockOutType", pStockOutType);
            }
            else
            {
                pStockOutTypeParameter = new ObjectParameter("pStockOutType", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", typeof(string));
            }
            return base.ExecuteFunction<dtResultInventorySlipIVS230>("GetInventorySlipIVS230", pC_INV_LOCParameter, pC_INV_TRANSFERTYPEParameter, pC_INV_SLIP_STATUSParameter, pC_INV_TRANSFERTYPE_TRANSFER_AREAParameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter, pInventorySlipNoParameter, pSlipStatusParameter, pOfficeCodeParameter, pDateFromParameter, pDateToParameter, pEmpNoParameter, pProjectCodeParameter, pStockOutTypeParameter, contractCodeParameter, instrumentCodeParameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter);
        }
        public ObjectResult<dtResultInventorySlipDetail> GetInventorySlipDetail(string pC_INV_AREA, string pInventorySlipNo)
        {
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtResultInventorySlipDetail>("GetInventorySlipDetail", pC_INV_AREAParameter, pInventorySlipNoParameter);
        }
        public ObjectResult<dtSearchInstallationSlipResult> SearchInstallationSlip(string pC_CONFIG_WILDCARD, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string pInstallationSlipNo, Nullable<System.DateTime> pExpectedStockOutDateFrom, Nullable<System.DateTime> pExpectedStockOutDateTo, string pContractCode, string pProjectCode, string pOperationOfficeCode, string pSubContractorName)
        {
    
            ObjectParameter pC_CONFIG_WILDCARDParameter;
    
            if (pC_CONFIG_WILDCARD != null)
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", pC_CONFIG_WILDCARD);
            }
            else
            {
                pC_CONFIG_WILDCARDParameter = new ObjectParameter("pC_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", typeof(string));
            }
    
            ObjectParameter pInstallationSlipNoParameter;
    
            if (pInstallationSlipNo != null)
            {
                pInstallationSlipNoParameter = new ObjectParameter("pInstallationSlipNo", pInstallationSlipNo);
            }
            else
            {
                pInstallationSlipNoParameter = new ObjectParameter("pInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter pExpectedStockOutDateFromParameter;
    
            if (pExpectedStockOutDateFrom.HasValue)
            {
                pExpectedStockOutDateFromParameter = new ObjectParameter("pExpectedStockOutDateFrom", pExpectedStockOutDateFrom);
            }
            else
            {
                pExpectedStockOutDateFromParameter = new ObjectParameter("pExpectedStockOutDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pExpectedStockOutDateToParameter;
    
            if (pExpectedStockOutDateTo.HasValue)
            {
                pExpectedStockOutDateToParameter = new ObjectParameter("pExpectedStockOutDateTo", pExpectedStockOutDateTo);
            }
            else
            {
                pExpectedStockOutDateToParameter = new ObjectParameter("pExpectedStockOutDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCodeParameter;
    
            if (pOperationOfficeCode != null)
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode);
            }
            else
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pSubContractorNameParameter;
    
            if (pSubContractorName != null)
            {
                pSubContractorNameParameter = new ObjectParameter("pSubContractorName", pSubContractorName);
            }
            else
            {
                pSubContractorNameParameter = new ObjectParameter("pSubContractorName", typeof(string));
            }
            return base.ExecuteFunction<dtSearchInstallationSlipResult>("SearchInstallationSlip", pC_CONFIG_WILDCARDParameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter, pInstallationSlipNoParameter, pExpectedStockOutDateFromParameter, pExpectedStockOutDateToParameter, pContractCodeParameter, pProjectCodeParameter, pOperationOfficeCodeParameter, pSubContractorNameParameter);
        }
        public ObjectResult<dtStockOutByInstallationSlipResult> GetStockOutByInstallationSlip(string pC_INV_AREA, string pInstallSlipNo)
        {
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pInstallSlipNoParameter;
    
            if (pInstallSlipNo != null)
            {
                pInstallSlipNoParameter = new ObjectParameter("pInstallSlipNo", pInstallSlipNo);
            }
            else
            {
                pInstallSlipNoParameter = new ObjectParameter("pInstallSlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtStockOutByInstallationSlipResult>("GetStockOutByInstallationSlip", pC_INV_AREAParameter, pInstallSlipNoParameter);
        }
        public ObjectResult<string> GeneratePickingListNo(Nullable<int> pC_INV_PICKING_NO_MINIMUM, Nullable<int> pC_INV_PICKING_NO_MAXIMUM)
        {
    
            ObjectParameter pC_INV_PICKING_NO_MINIMUMParameter;
    
            if (pC_INV_PICKING_NO_MINIMUM.HasValue)
            {
                pC_INV_PICKING_NO_MINIMUMParameter = new ObjectParameter("pC_INV_PICKING_NO_MINIMUM", pC_INV_PICKING_NO_MINIMUM);
            }
            else
            {
                pC_INV_PICKING_NO_MINIMUMParameter = new ObjectParameter("pC_INV_PICKING_NO_MINIMUM", typeof(int));
            }
    
            ObjectParameter pC_INV_PICKING_NO_MAXIMUMParameter;
    
            if (pC_INV_PICKING_NO_MAXIMUM.HasValue)
            {
                pC_INV_PICKING_NO_MAXIMUMParameter = new ObjectParameter("pC_INV_PICKING_NO_MAXIMUM", pC_INV_PICKING_NO_MAXIMUM);
            }
            else
            {
                pC_INV_PICKING_NO_MAXIMUMParameter = new ObjectParameter("pC_INV_PICKING_NO_MAXIMUM", typeof(int));
            }
            return base.ExecuteFunction<string>("GeneratePickingListNo", pC_INV_PICKING_NO_MINIMUMParameter, pC_INV_PICKING_NO_MAXIMUMParameter);
        }
        public ObjectResult<doIsEmptyShelfResult> IsEmptyShelf(string strShelfNo)
        {
    
            ObjectParameter strShelfNoParameter;
    
            if (strShelfNo != null)
            {
                strShelfNoParameter = new ObjectParameter("strShelfNo", strShelfNo);
            }
            else
            {
                strShelfNoParameter = new ObjectParameter("strShelfNo", typeof(string));
            }
            return base.ExecuteFunction<doIsEmptyShelfResult>("IsEmptyShelf", strShelfNoParameter);
        }
        public ObjectResult<doProjectInformation> GetProjectInformation(string pProjectCode)
        {
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
            return base.ExecuteFunction<doProjectInformation>("GetProjectInformation", pProjectCodeParameter);
        }
        public ObjectResult<string> GenerateInventorySlipNo(Nullable<int> c_INV_SLIP_NO_MAXIMUM, Nullable<int> c_INV_SLIP_NO_MINIMUM, string officeCode, string slipid)
        {
    
            ObjectParameter c_INV_SLIP_NO_MAXIMUMParameter;
    
            if (c_INV_SLIP_NO_MAXIMUM.HasValue)
            {
                c_INV_SLIP_NO_MAXIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MAXIMUM", c_INV_SLIP_NO_MAXIMUM);
            }
            else
            {
                c_INV_SLIP_NO_MAXIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MAXIMUM", typeof(int));
            }
    
            ObjectParameter c_INV_SLIP_NO_MINIMUMParameter;
    
            if (c_INV_SLIP_NO_MINIMUM.HasValue)
            {
                c_INV_SLIP_NO_MINIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MINIMUM", c_INV_SLIP_NO_MINIMUM);
            }
            else
            {
                c_INV_SLIP_NO_MINIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MINIMUM", typeof(int));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("officeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("officeCode", typeof(string));
            }
    
            ObjectParameter slipidParameter;
    
            if (slipid != null)
            {
                slipidParameter = new ObjectParameter("slipid", slipid);
            }
            else
            {
                slipidParameter = new ObjectParameter("slipid", typeof(string));
            }
            return base.ExecuteFunction<string>("GenerateInventorySlipNo", c_INV_SLIP_NO_MAXIMUMParameter, c_INV_SLIP_NO_MINIMUMParameter, officeCodeParameter, slipidParameter);
        }
        public ObjectResult<string> GeneratePurchaseOrderNo(Nullable<int> c_INV_SLIP_NO_MAXIMUM, Nullable<int> c_INV_SLIP_NO_MINIMUM, string nationCodeCode)
        {
    
            ObjectParameter c_INV_SLIP_NO_MAXIMUMParameter;
    
            if (c_INV_SLIP_NO_MAXIMUM.HasValue)
            {
                c_INV_SLIP_NO_MAXIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MAXIMUM", c_INV_SLIP_NO_MAXIMUM);
            }
            else
            {
                c_INV_SLIP_NO_MAXIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MAXIMUM", typeof(int));
            }
    
            ObjectParameter c_INV_SLIP_NO_MINIMUMParameter;
    
            if (c_INV_SLIP_NO_MINIMUM.HasValue)
            {
                c_INV_SLIP_NO_MINIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MINIMUM", c_INV_SLIP_NO_MINIMUM);
            }
            else
            {
                c_INV_SLIP_NO_MINIMUMParameter = new ObjectParameter("C_INV_SLIP_NO_MINIMUM", typeof(int));
            }
    
            ObjectParameter nationCodeCodeParameter;
    
            if (nationCodeCode != null)
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", nationCodeCode);
            }
            else
            {
                nationCodeCodeParameter = new ObjectParameter("NationCodeCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GeneratePurchaseOrderNo", c_INV_SLIP_NO_MAXIMUMParameter, c_INV_SLIP_NO_MINIMUMParameter, nationCodeCodeParameter);
        }
        public ObjectResult<string> GenerateLotNo(Nullable<int> c_INV_LOT_NO_MAXIMUM, Nullable<int> c_INV_LOT_NO_MINIMUM, string instrumentCode, string depreciationPeriodForContract, string startYearMonth, string startType)
        {
    
            ObjectParameter c_INV_LOT_NO_MAXIMUMParameter;
    
            if (c_INV_LOT_NO_MAXIMUM.HasValue)
            {
                c_INV_LOT_NO_MAXIMUMParameter = new ObjectParameter("C_INV_LOT_NO_MAXIMUM", c_INV_LOT_NO_MAXIMUM);
            }
            else
            {
                c_INV_LOT_NO_MAXIMUMParameter = new ObjectParameter("C_INV_LOT_NO_MAXIMUM", typeof(int));
            }
    
            ObjectParameter c_INV_LOT_NO_MINIMUMParameter;
    
            if (c_INV_LOT_NO_MINIMUM.HasValue)
            {
                c_INV_LOT_NO_MINIMUMParameter = new ObjectParameter("C_INV_LOT_NO_MINIMUM", c_INV_LOT_NO_MINIMUM);
            }
            else
            {
                c_INV_LOT_NO_MINIMUMParameter = new ObjectParameter("C_INV_LOT_NO_MINIMUM", typeof(int));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter depreciationPeriodForContractParameter;
    
            if (depreciationPeriodForContract != null)
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", depreciationPeriodForContract);
            }
            else
            {
                depreciationPeriodForContractParameter = new ObjectParameter("DepreciationPeriodForContract", typeof(string));
            }
    
            ObjectParameter startYearMonthParameter;
    
            if (startYearMonth != null)
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", startYearMonth);
            }
            else
            {
                startYearMonthParameter = new ObjectParameter("StartYearMonth", typeof(string));
            }
    
            ObjectParameter startTypeParameter;
    
            if (startType != null)
            {
                startTypeParameter = new ObjectParameter("StartType", startType);
            }
            else
            {
                startTypeParameter = new ObjectParameter("StartType", typeof(string));
            }
            return base.ExecuteFunction<string>("GenerateLotNo", c_INV_LOT_NO_MAXIMUMParameter, c_INV_LOT_NO_MINIMUMParameter, instrumentCodeParameter, depreciationPeriodForContractParameter, startYearMonthParameter, startTypeParameter);
        }
        public ObjectResult<tbt_InventoryCheckingSchedule> UpdateTbt_InventoryCheckingSchedule(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingSchedule>("UpdateTbt_InventoryCheckingSchedule", xmlParameter);
        }
        public ObjectResult<tbt_InventoryCheckingSchedule> InsertTbt_InventoryCheckingSchedule(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingSchedule>("InsertTbt_InventoryCheckingSchedule", xmlParameter);
        }
        public ObjectResult<string> ValidateFreezeInstrumentIVP050()
        {
            return base.ExecuteFunction<string>("ValidateFreezeInstrumentIVP050");
        }
        public ObjectResult<tbt_InventoryProjectWIP> InsertTbt_InventoryProjectWIP(string xml_doTbt_InventoryProjectWIPs)
        {
    
            ObjectParameter xml_doTbt_InventoryProjectWIPsParameter;
    
            if (xml_doTbt_InventoryProjectWIPs != null)
            {
                xml_doTbt_InventoryProjectWIPsParameter = new ObjectParameter("xml_doTbt_InventoryProjectWIPs", xml_doTbt_InventoryProjectWIPs);
            }
            else
            {
                xml_doTbt_InventoryProjectWIPsParameter = new ObjectParameter("xml_doTbt_InventoryProjectWIPs", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryProjectWIP>("InsertTbt_InventoryProjectWIP", xml_doTbt_InventoryProjectWIPsParameter);
        }
        public ObjectResult<tbt_InventoryProjectWIP> GetTbt_InventoryProjectWIP(string pProjectCode, string pAreaCode, string pInstrumentCode)
        {
    
            ObjectParameter pProjectCodeParameter;
    
            if (pProjectCode != null)
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", pProjectCode);
            }
            else
            {
                pProjectCodeParameter = new ObjectParameter("pProjectCode", typeof(string));
            }
    
            ObjectParameter pAreaCodeParameter;
    
            if (pAreaCode != null)
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", pAreaCode);
            }
            else
            {
                pAreaCodeParameter = new ObjectParameter("pAreaCode", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryProjectWIP>("GetTbt_InventoryProjectWIP", pProjectCodeParameter, pAreaCodeParameter, pInstrumentCodeParameter);
        }
        public ObjectResult<doCSVMovingAssetAcc> ExportMovingAssetAcc(string pC_INV_ACCOUNT_CODE, Nullable<System.DateTime> pDateGenerate)
        {
    
            ObjectParameter pC_INV_ACCOUNT_CODEParameter;
    
            if (pC_INV_ACCOUNT_CODE != null)
            {
                pC_INV_ACCOUNT_CODEParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE", pC_INV_ACCOUNT_CODE);
            }
            else
            {
                pC_INV_ACCOUNT_CODEParameter = new ObjectParameter("pC_INV_ACCOUNT_CODE", typeof(string));
            }
    
            ObjectParameter pDateGenerateParameter;
    
            if (pDateGenerate.HasValue)
            {
                pDateGenerateParameter = new ObjectParameter("pDateGenerate", pDateGenerate);
            }
            else
            {
                pDateGenerateParameter = new ObjectParameter("pDateGenerate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doCSVMovingAssetAcc>("ExportMovingAssetAcc", pC_INV_ACCOUNT_CODEParameter, pDateGenerateParameter);
        }
        public ObjectResult<doCSVOtherFinancialAcc> OtherFinancialAcc(string pC_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string pC_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string pC_INV_TRANSFERTYPE_ELIMINATION, string pC_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string pC_INV_TRANSFERTYPE_FIX_ADJUSTMENT, Nullable<System.DateTime> pDateGenerate)
        {
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKIN_PURCHASE != null)
            {
                pC_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKIN_PURCHASE", pC_INV_TRANSFERTYPE_STOCKIN_PURCHASE);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKIN_PURCHASE", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKIN_SPECIAL != null)
            {
                pC_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKIN_SPECIAL", pC_INV_TRANSFERTYPE_STOCKIN_SPECIAL);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKIN_SPECIAL", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_ELIMINATIONParameter;
    
            if (pC_INV_TRANSFERTYPE_ELIMINATION != null)
            {
                pC_INV_TRANSFERTYPE_ELIMINATIONParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_ELIMINATION", pC_INV_TRANSFERTYPE_ELIMINATION);
            }
            else
            {
                pC_INV_TRANSFERTYPE_ELIMINATIONParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_ELIMINATION", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_SPECIAL != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", pC_INV_TRANSFERTYPE_STOCKOUT_SPECIAL);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter;
    
            if (pC_INV_TRANSFERTYPE_FIX_ADJUSTMENT != null)
            {
                pC_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_FIX_ADJUSTMENT", pC_INV_TRANSFERTYPE_FIX_ADJUSTMENT);
            }
            else
            {
                pC_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter = new ObjectParameter("pC_INV_TRANSFERTYPE_FIX_ADJUSTMENT", typeof(string));
            }
    
            ObjectParameter pDateGenerateParameter;
    
            if (pDateGenerate.HasValue)
            {
                pDateGenerateParameter = new ObjectParameter("pDateGenerate", pDateGenerate);
            }
            else
            {
                pDateGenerateParameter = new ObjectParameter("pDateGenerate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doCSVOtherFinancialAcc>("OtherFinancialAcc", pC_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter, pC_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter, pC_INV_TRANSFERTYPE_ELIMINATIONParameter, pC_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter, pC_INV_TRANSFERTYPE_FIX_ADJUSTMENTParameter, pDateGenerateParameter);
        }
        public ObjectResult<doOffice> GetAuthorityOffice(string empNo)
        {
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
            return base.ExecuteFunction<doOffice>("GetAuthorityOffice", empNoParameter);
        }
        public ObjectResult<tbt_InventorySlipDetail> UpdateTbt_InventorySlipDetail(string xmlTbt_InventorySlipDetail)
        {
    
            ObjectParameter xmlTbt_InventorySlipDetailParameter;
    
            if (xmlTbt_InventorySlipDetail != null)
            {
                xmlTbt_InventorySlipDetailParameter = new ObjectParameter("xmlTbt_InventorySlipDetail", xmlTbt_InventorySlipDetail);
            }
            else
            {
                xmlTbt_InventorySlipDetailParameter = new ObjectParameter("xmlTbt_InventorySlipDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlipDetail>("UpdateTbt_InventorySlipDetail", xmlTbt_InventorySlipDetailParameter);
        }
        public ObjectResult<doShelfCurrentData> GetShelfForChecking(string officeCode, string locationCode, string areaCode, string shelfNo, string instrumentCode)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter areaCodeParameter;
    
            if (areaCode != null)
            {
                areaCodeParameter = new ObjectParameter("AreaCode", areaCode);
            }
            else
            {
                areaCodeParameter = new ObjectParameter("AreaCode", typeof(string));
            }
    
            ObjectParameter shelfNoParameter;
    
            if (shelfNo != null)
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", shelfNo);
            }
            else
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<doShelfCurrentData>("GetShelfForChecking", officeCodeParameter, locationCodeParameter, areaCodeParameter, shelfNoParameter, instrumentCodeParameter);
        }
        public ObjectResult<dtSearchInstrumentListResult> SearchInventoryInstrumentListIVS190(string c_INV_AREA, string c_INV_AREA_SHORT, string officeCode, string locationCode, string areaCodeStr, string shelfType, string startShelfNo, string endShelfNo, string instrumentName, string instrumentCode, string sH_NO_NOT_MOVE_SH, string sH_NO_NOT_PRICE, string transferType, string c_CONFIG_WILDCARD, string c_INV_AREA_SE_LENDING_DEMO)
        {
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SHORTParameter;
    
            if (c_INV_AREA_SHORT != null)
            {
                c_INV_AREA_SHORTParameter = new ObjectParameter("C_INV_AREA_SHORT", c_INV_AREA_SHORT);
            }
            else
            {
                c_INV_AREA_SHORTParameter = new ObjectParameter("C_INV_AREA_SHORT", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter areaCodeStrParameter;
    
            if (areaCodeStr != null)
            {
                areaCodeStrParameter = new ObjectParameter("AreaCodeStr", areaCodeStr);
            }
            else
            {
                areaCodeStrParameter = new ObjectParameter("AreaCodeStr", typeof(string));
            }
    
            ObjectParameter shelfTypeParameter;
    
            if (shelfType != null)
            {
                shelfTypeParameter = new ObjectParameter("ShelfType", shelfType);
            }
            else
            {
                shelfTypeParameter = new ObjectParameter("ShelfType", typeof(string));
            }
    
            ObjectParameter startShelfNoParameter;
    
            if (startShelfNo != null)
            {
                startShelfNoParameter = new ObjectParameter("StartShelfNo", startShelfNo);
            }
            else
            {
                startShelfNoParameter = new ObjectParameter("StartShelfNo", typeof(string));
            }
    
            ObjectParameter endShelfNoParameter;
    
            if (endShelfNo != null)
            {
                endShelfNoParameter = new ObjectParameter("EndShelfNo", endShelfNo);
            }
            else
            {
                endShelfNoParameter = new ObjectParameter("EndShelfNo", typeof(string));
            }
    
            ObjectParameter instrumentNameParameter;
    
            if (instrumentName != null)
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", instrumentName);
            }
            else
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter sH_NO_NOT_MOVE_SHParameter;
    
            if (sH_NO_NOT_MOVE_SH != null)
            {
                sH_NO_NOT_MOVE_SHParameter = new ObjectParameter("SH_NO_NOT_MOVE_SH", sH_NO_NOT_MOVE_SH);
            }
            else
            {
                sH_NO_NOT_MOVE_SHParameter = new ObjectParameter("SH_NO_NOT_MOVE_SH", typeof(string));
            }
    
            ObjectParameter sH_NO_NOT_PRICEParameter;
    
            if (sH_NO_NOT_PRICE != null)
            {
                sH_NO_NOT_PRICEParameter = new ObjectParameter("SH_NO_NOT_PRICE", sH_NO_NOT_PRICE);
            }
            else
            {
                sH_NO_NOT_PRICEParameter = new ObjectParameter("SH_NO_NOT_PRICE", typeof(string));
            }
    
            ObjectParameter transferTypeParameter;
    
            if (transferType != null)
            {
                transferTypeParameter = new ObjectParameter("TransferType", transferType);
            }
            else
            {
                transferTypeParameter = new ObjectParameter("TransferType", typeof(string));
            }
    
            ObjectParameter c_CONFIG_WILDCARDParameter;
    
            if (c_CONFIG_WILDCARD != null)
            {
                c_CONFIG_WILDCARDParameter = new ObjectParameter("C_CONFIG_WILDCARD", c_CONFIG_WILDCARD);
            }
            else
            {
                c_CONFIG_WILDCARDParameter = new ObjectParameter("C_CONFIG_WILDCARD", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_LENDING_DEMOParameter;
    
            if (c_INV_AREA_SE_LENDING_DEMO != null)
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", c_INV_AREA_SE_LENDING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_LENDING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDING_DEMO", typeof(string));
            }
            return base.ExecuteFunction<dtSearchInstrumentListResult>("SearchInventoryInstrumentListIVS190", c_INV_AREAParameter, c_INV_AREA_SHORTParameter, officeCodeParameter, locationCodeParameter, areaCodeStrParameter, shelfTypeParameter, startShelfNoParameter, endShelfNoParameter, instrumentNameParameter, instrumentCodeParameter, sH_NO_NOT_MOVE_SHParameter, sH_NO_NOT_PRICEParameter, transferTypeParameter, c_CONFIG_WILDCARDParameter, c_INV_AREA_SE_LENDING_DEMOParameter);
        }
        public ObjectResult<Nullable<int>> CheckImplementStockChecking()
        {
            return base.ExecuteFunction<Nullable<int>>("CheckImplementStockChecking");
        }
        public ObjectResult<tbt_InventoryCurrent> DeleteTbt_InventoryCurrent(string officeCode, string locationCode, string areaCode, string shelfNo, string instrumentCode)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter areaCodeParameter;
    
            if (areaCode != null)
            {
                areaCodeParameter = new ObjectParameter("AreaCode", areaCode);
            }
            else
            {
                areaCodeParameter = new ObjectParameter("AreaCode", typeof(string));
            }
    
            ObjectParameter shelfNoParameter;
    
            if (shelfNo != null)
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", shelfNo);
            }
            else
            {
                shelfNoParameter = new ObjectParameter("ShelfNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCurrent>("DeleteTbt_InventoryCurrent", officeCodeParameter, locationCodeParameter, areaCodeParameter, shelfNoParameter, instrumentCodeParameter);
        }
        public ObjectResult<doFIFOInstrument> GetFIFOInstrumentAbsoluteQty(string strOfficeCode, string strLocationCode, string strInstrumentCode)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strLocationCodeParameter;
    
            if (strLocationCode != null)
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", strLocationCode);
            }
            else
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<doFIFOInstrument>("GetFIFOInstrumentAbsoluteQty", strOfficeCodeParameter, strLocationCodeParameter, strInstrumentCodeParameter);
        }
        public ObjectResult<tbt_AccountInstalled> ClearQtyInAllLot(string officeCode, string locationCode, string instrumentCode)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_AccountInstalled>("ClearQtyInAllLot", officeCodeParameter, locationCodeParameter, instrumentCodeParameter);
        }
        public ObjectResult<doFIFOInstrument> GetLIFOInstrument(string strOfficeCode, string strLocationCode, string strInstrumentCode)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strLocationCodeParameter;
    
            if (strLocationCode != null)
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", strLocationCode);
            }
            else
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<doFIFOInstrument>("GetLIFOInstrument", strOfficeCodeParameter, strLocationCodeParameter, strInstrumentCodeParameter);
        }
        public ObjectResult<Nullable<int>> CheckTransferFromBuffer(string locationCode, string instrumentCode, string c_INV_LOC_BUFFER, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_SE_HANDLING_DEMO, string c_INV_AREA_SE_LENDLING_DEMO)
        {
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_BUFFERParameter;
    
            if (c_INV_LOC_BUFFER != null)
            {
                c_INV_LOC_BUFFERParameter = new ObjectParameter("C_INV_LOC_BUFFER", c_INV_LOC_BUFFER);
            }
            else
            {
                c_INV_LOC_BUFFERParameter = new ObjectParameter("C_INV_LOC_BUFFER", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_RENTALParameter;
    
            if (c_INV_AREA_SE_RENTAL != null)
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", c_INV_AREA_SE_RENTAL);
            }
            else
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_HANDLING_DEMOParameter;
    
            if (c_INV_AREA_SE_HANDLING_DEMO != null)
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", c_INV_AREA_SE_HANDLING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_HANDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_HANDLING_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_LENDLING_DEMOParameter;
    
            if (c_INV_AREA_SE_LENDLING_DEMO != null)
            {
                c_INV_AREA_SE_LENDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDLING_DEMO", c_INV_AREA_SE_LENDLING_DEMO);
            }
            else
            {
                c_INV_AREA_SE_LENDLING_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_LENDLING_DEMO", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CheckTransferFromBuffer", locationCodeParameter, instrumentCodeParameter, c_INV_LOC_BUFFERParameter, c_INV_AREA_SE_RENTALParameter, c_INV_AREA_SE_HANDLING_DEMOParameter, c_INV_AREA_SE_LENDLING_DEMOParameter);
        }
        public ObjectResult<tbt_InventoryCheckingTemp> InsertTbt_InventoryCheckingTemp(string xml_doTbt_InventoryCheckingTemp)
        {
    
            ObjectParameter xml_doTbt_InventoryCheckingTempParameter;
    
            if (xml_doTbt_InventoryCheckingTemp != null)
            {
                xml_doTbt_InventoryCheckingTempParameter = new ObjectParameter("xml_doTbt_InventoryCheckingTemp", xml_doTbt_InventoryCheckingTemp);
            }
            else
            {
                xml_doTbt_InventoryCheckingTempParameter = new ObjectParameter("xml_doTbt_InventoryCheckingTemp", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingTemp>("InsertTbt_InventoryCheckingTemp", xml_doTbt_InventoryCheckingTempParameter);
        }
        public ObjectResult<tbt_InventoryCheckingTemp> UpdateTbt_InventoryCheckingTemp(string xml_InventoryCheckingTemp)
        {
    
            ObjectParameter xml_InventoryCheckingTempParameter;
    
            if (xml_InventoryCheckingTemp != null)
            {
                xml_InventoryCheckingTempParameter = new ObjectParameter("xml_InventoryCheckingTemp", xml_InventoryCheckingTemp);
            }
            else
            {
                xml_InventoryCheckingTempParameter = new ObjectParameter("xml_InventoryCheckingTemp", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventoryCheckingTemp>("UpdateTbt_InventoryCheckingTemp", xml_InventoryCheckingTempParameter);
        }
        public ObjectResult<doNormalShelfExistCurrent> GetNormalShelfExistCurrent(string strShelfNo, string c_INV_SHELF_TYPE_NORMAL)
        {
    
            ObjectParameter strShelfNoParameter;
    
            if (strShelfNo != null)
            {
                strShelfNoParameter = new ObjectParameter("strShelfNo", strShelfNo);
            }
            else
            {
                strShelfNoParameter = new ObjectParameter("strShelfNo", typeof(string));
            }
    
            ObjectParameter c_INV_SHELF_TYPE_NORMALParameter;
    
            if (c_INV_SHELF_TYPE_NORMAL != null)
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", c_INV_SHELF_TYPE_NORMAL);
            }
            else
            {
                c_INV_SHELF_TYPE_NORMALParameter = new ObjectParameter("C_INV_SHELF_TYPE_NORMAL", typeof(string));
            }
            return base.ExecuteFunction<doNormalShelfExistCurrent>("GetNormalShelfExistCurrent", strShelfNoParameter, c_INV_SHELF_TYPE_NORMALParameter);
        }
        public ObjectResult<doLIFOInstrumentPrice> GetLIFOInstrumentPrice(string strOfficeCode, string strLocationCode, string strInstrumentCode, Nullable<int> intTransferQty, Nullable<int> intPrevInstrumentQty, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter strOfficeCodeParameter;
    
            if (strOfficeCode != null)
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", strOfficeCode);
            }
            else
            {
                strOfficeCodeParameter = new ObjectParameter("strOfficeCode", typeof(string));
            }
    
            ObjectParameter strLocationCodeParameter;
    
            if (strLocationCode != null)
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", strLocationCode);
            }
            else
            {
                strLocationCodeParameter = new ObjectParameter("strLocationCode", typeof(string));
            }
    
            ObjectParameter strInstrumentCodeParameter;
    
            if (strInstrumentCode != null)
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", strInstrumentCode);
            }
            else
            {
                strInstrumentCodeParameter = new ObjectParameter("strInstrumentCode", typeof(string));
            }
    
            ObjectParameter intTransferQtyParameter;
    
            if (intTransferQty.HasValue)
            {
                intTransferQtyParameter = new ObjectParameter("IntTransferQty", intTransferQty);
            }
            else
            {
                intTransferQtyParameter = new ObjectParameter("IntTransferQty", typeof(int));
            }
    
            ObjectParameter intPrevInstrumentQtyParameter;
    
            if (intPrevInstrumentQty.HasValue)
            {
                intPrevInstrumentQtyParameter = new ObjectParameter("IntPrevInstrumentQty", intPrevInstrumentQty);
            }
            else
            {
                intPrevInstrumentQtyParameter = new ObjectParameter("IntPrevInstrumentQty", typeof(int));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doLIFOInstrumentPrice>("GetLIFOInstrumentPrice", strOfficeCodeParameter, strLocationCodeParameter, strInstrumentCodeParameter, intTransferQtyParameter, intPrevInstrumentQtyParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doInstrumentMASale> GetInstrumentForCompleteMASale(string pC_INV_AREA_NEW_SALE, string pC_INV_AREA_NEW_SAMPLE, string pC_INV_LOC_WIP, string pContractCode)
        {
    
            ObjectParameter pC_INV_AREA_NEW_SALEParameter;
    
            if (pC_INV_AREA_NEW_SALE != null)
            {
                pC_INV_AREA_NEW_SALEParameter = new ObjectParameter("pC_INV_AREA_NEW_SALE", pC_INV_AREA_NEW_SALE);
            }
            else
            {
                pC_INV_AREA_NEW_SALEParameter = new ObjectParameter("pC_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter pC_INV_AREA_NEW_SAMPLEParameter;
    
            if (pC_INV_AREA_NEW_SAMPLE != null)
            {
                pC_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("pC_INV_AREA_NEW_SAMPLE", pC_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                pC_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("pC_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter pC_INV_LOC_WIPParameter;
    
            if (pC_INV_LOC_WIP != null)
            {
                pC_INV_LOC_WIPParameter = new ObjectParameter("pC_INV_LOC_WIP", pC_INV_LOC_WIP);
            }
            else
            {
                pC_INV_LOC_WIPParameter = new ObjectParameter("pC_INV_LOC_WIP", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<doInstrumentMASale>("GetInstrumentForCompleteMASale", pC_INV_AREA_NEW_SALEParameter, pC_INV_AREA_NEW_SAMPLEParameter, pC_INV_LOC_WIPParameter, pContractCodeParameter);
        }
        public ObjectResult<tbt_InventorySlip> UpdatePartialToCompleteStatus(string pC_INV_SLIP_STATUS_COMPLETE, string pC_INV_SLIP_STATUS_PARTIAL, string pContractCode)
        {
    
            ObjectParameter pC_INV_SLIP_STATUS_COMPLETEParameter;
    
            if (pC_INV_SLIP_STATUS_COMPLETE != null)
            {
                pC_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("pC_INV_SLIP_STATUS_COMPLETE", pC_INV_SLIP_STATUS_COMPLETE);
            }
            else
            {
                pC_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("pC_INV_SLIP_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter pC_INV_SLIP_STATUS_PARTIALParameter;
    
            if (pC_INV_SLIP_STATUS_PARTIAL != null)
            {
                pC_INV_SLIP_STATUS_PARTIALParameter = new ObjectParameter("pC_INV_SLIP_STATUS_PARTIAL", pC_INV_SLIP_STATUS_PARTIAL);
            }
            else
            {
                pC_INV_SLIP_STATUS_PARTIALParameter = new ObjectParameter("pC_INV_SLIP_STATUS_PARTIAL", typeof(string));
            }
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InventorySlip>("UpdatePartialToCompleteStatus", pC_INV_SLIP_STATUS_COMPLETEParameter, pC_INV_SLIP_STATUS_PARTIALParameter, pContractCodeParameter);
        }
        public ObjectResult<dtSearchInstrumentListResult> SearchInventoryInstrumentList(string c_INV_AREA, string officeCode, string locationCode, string areaCodeStr, string shelfType, string endShelfNo, string instrumentName, string instrumentCode, string startShelfNo, string c_INV_AREA_SHORT, string c_INV_SHELF_NO_NOT_MOVE_SHELF, string c_INV_SHELF_NO_NOT_PRICE, string excludeAreaCode)
        {
    
            ObjectParameter c_INV_AREAParameter;
    
            if (c_INV_AREA != null)
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", c_INV_AREA);
            }
            else
            {
                c_INV_AREAParameter = new ObjectParameter("C_INV_AREA", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter areaCodeStrParameter;
    
            if (areaCodeStr != null)
            {
                areaCodeStrParameter = new ObjectParameter("AreaCodeStr", areaCodeStr);
            }
            else
            {
                areaCodeStrParameter = new ObjectParameter("AreaCodeStr", typeof(string));
            }
    
            ObjectParameter shelfTypeParameter;
    
            if (shelfType != null)
            {
                shelfTypeParameter = new ObjectParameter("ShelfType", shelfType);
            }
            else
            {
                shelfTypeParameter = new ObjectParameter("ShelfType", typeof(string));
            }
    
            ObjectParameter endShelfNoParameter;
    
            if (endShelfNo != null)
            {
                endShelfNoParameter = new ObjectParameter("EndShelfNo", endShelfNo);
            }
            else
            {
                endShelfNoParameter = new ObjectParameter("EndShelfNo", typeof(string));
            }
    
            ObjectParameter instrumentNameParameter;
    
            if (instrumentName != null)
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", instrumentName);
            }
            else
            {
                instrumentNameParameter = new ObjectParameter("InstrumentName", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter startShelfNoParameter;
    
            if (startShelfNo != null)
            {
                startShelfNoParameter = new ObjectParameter("StartShelfNo", startShelfNo);
            }
            else
            {
                startShelfNoParameter = new ObjectParameter("StartShelfNo", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SHORTParameter;
    
            if (c_INV_AREA_SHORT != null)
            {
                c_INV_AREA_SHORTParameter = new ObjectParameter("C_INV_AREA_SHORT", c_INV_AREA_SHORT);
            }
            else
            {
                c_INV_AREA_SHORTParameter = new ObjectParameter("C_INV_AREA_SHORT", typeof(string));
            }
    
            ObjectParameter c_INV_SHELF_NO_NOT_MOVE_SHELFParameter;
    
            if (c_INV_SHELF_NO_NOT_MOVE_SHELF != null)
            {
                c_INV_SHELF_NO_NOT_MOVE_SHELFParameter = new ObjectParameter("C_INV_SHELF_NO_NOT_MOVE_SHELF", c_INV_SHELF_NO_NOT_MOVE_SHELF);
            }
            else
            {
                c_INV_SHELF_NO_NOT_MOVE_SHELFParameter = new ObjectParameter("C_INV_SHELF_NO_NOT_MOVE_SHELF", typeof(string));
            }
    
            ObjectParameter c_INV_SHELF_NO_NOT_PRICEParameter;
    
            if (c_INV_SHELF_NO_NOT_PRICE != null)
            {
                c_INV_SHELF_NO_NOT_PRICEParameter = new ObjectParameter("C_INV_SHELF_NO_NOT_PRICE", c_INV_SHELF_NO_NOT_PRICE);
            }
            else
            {
                c_INV_SHELF_NO_NOT_PRICEParameter = new ObjectParameter("C_INV_SHELF_NO_NOT_PRICE", typeof(string));
            }
    
            ObjectParameter excludeAreaCodeParameter;
    
            if (excludeAreaCode != null)
            {
                excludeAreaCodeParameter = new ObjectParameter("ExcludeAreaCode", excludeAreaCode);
            }
            else
            {
                excludeAreaCodeParameter = new ObjectParameter("ExcludeAreaCode", typeof(string));
            }
            return base.ExecuteFunction<dtSearchInstrumentListResult>("SearchInventoryInstrumentList", c_INV_AREAParameter, officeCodeParameter, locationCodeParameter, areaCodeStrParameter, shelfTypeParameter, endShelfNoParameter, instrumentNameParameter, instrumentCodeParameter, startShelfNoParameter, c_INV_AREA_SHORTParameter, c_INV_SHELF_NO_NOT_MOVE_SHELFParameter, c_INV_SHELF_NO_NOT_PRICEParameter, excludeAreaCodeParameter);
        }
        public ObjectResult<Nullable<bool>> CheckExistReturnSaleInstrument(string strInstallationSlipNo, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_LOC_RETURNED)
        {
    
            ObjectParameter strInstallationSlipNoParameter;
    
            if (strInstallationSlipNo != null)
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", strInstallationSlipNo);
            }
            else
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter;
    
            if (c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE != null)
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE);
            }
            else
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_RETURNEDParameter;
    
            if (c_INV_LOC_RETURNED != null)
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", c_INV_LOC_RETURNED);
            }
            else
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CheckExistReturnSaleInstrument", strInstallationSlipNoParameter, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter, c_INV_LOC_RETURNEDParameter);
        }
        public ObjectResult<doIVR180> GetIVR180(string pInventorySlipNo, string pC_INV_LOC, string pC_INV_AREA)
        {
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<doIVR180>("GetIVR180", pInventorySlipNoParameter, pC_INV_LOCParameter, pC_INV_AREAParameter);
        }
        public ObjectResult<dtInReportHeader> GetStockReport_InReport_Header(string reportType, string slipNoStart, string slipNoEnd, Nullable<System.DateTime> stockInDateStart, Nullable<System.DateTime> stockInDateEnd)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter slipNoStartParameter;
    
            if (slipNoStart != null)
            {
                slipNoStartParameter = new ObjectParameter("SlipNoStart", slipNoStart);
            }
            else
            {
                slipNoStartParameter = new ObjectParameter("SlipNoStart", typeof(string));
            }
    
            ObjectParameter slipNoEndParameter;
    
            if (slipNoEnd != null)
            {
                slipNoEndParameter = new ObjectParameter("SlipNoEnd", slipNoEnd);
            }
            else
            {
                slipNoEndParameter = new ObjectParameter("SlipNoEnd", typeof(string));
            }
    
            ObjectParameter stockInDateStartParameter;
    
            if (stockInDateStart.HasValue)
            {
                stockInDateStartParameter = new ObjectParameter("StockInDateStart", stockInDateStart);
            }
            else
            {
                stockInDateStartParameter = new ObjectParameter("StockInDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter stockInDateEndParameter;
    
            if (stockInDateEnd.HasValue)
            {
                stockInDateEndParameter = new ObjectParameter("StockInDateEnd", stockInDateEnd);
            }
            else
            {
                stockInDateEndParameter = new ObjectParameter("StockInDateEnd", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtInReportHeader>("GetStockReport_InReport_Header", reportTypeParameter, slipNoStartParameter, slipNoEndParameter, stockInDateStartParameter, stockInDateEndParameter);
        }
        public ObjectResult<dtInReportDetail> GetStockReport_InReport_Detail(string reportType, string slipNo)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtInReportDetail>("GetStockReport_InReport_Detail", reportTypeParameter, slipNoParameter);
        }
        public ObjectResult<dtOutReportDetail> GetStockReport_OutReport_Detail(string reportType, string slipNo)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtOutReportDetail>("GetStockReport_OutReport_Detail", reportTypeParameter, slipNoParameter);
        }
        public ObjectResult<dtOutReportHeader> GetStockReport_OutReport_Header(string reportType, string slipNoStart, string slipNoEnd, Nullable<System.DateTime> stockOutDateStart, Nullable<System.DateTime> stockOutDateEnd, string contractCode, Nullable<System.DateTime> operateDateStart, Nullable<System.DateTime> operateDateEnd, string custName)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter slipNoStartParameter;
    
            if (slipNoStart != null)
            {
                slipNoStartParameter = new ObjectParameter("SlipNoStart", slipNoStart);
            }
            else
            {
                slipNoStartParameter = new ObjectParameter("SlipNoStart", typeof(string));
            }
    
            ObjectParameter slipNoEndParameter;
    
            if (slipNoEnd != null)
            {
                slipNoEndParameter = new ObjectParameter("SlipNoEnd", slipNoEnd);
            }
            else
            {
                slipNoEndParameter = new ObjectParameter("SlipNoEnd", typeof(string));
            }
    
            ObjectParameter stockOutDateStartParameter;
    
            if (stockOutDateStart.HasValue)
            {
                stockOutDateStartParameter = new ObjectParameter("StockOutDateStart", stockOutDateStart);
            }
            else
            {
                stockOutDateStartParameter = new ObjectParameter("StockOutDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter stockOutDateEndParameter;
    
            if (stockOutDateEnd.HasValue)
            {
                stockOutDateEndParameter = new ObjectParameter("StockOutDateEnd", stockOutDateEnd);
            }
            else
            {
                stockOutDateEndParameter = new ObjectParameter("StockOutDateEnd", typeof(System.DateTime));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter operateDateStartParameter;
    
            if (operateDateStart.HasValue)
            {
                operateDateStartParameter = new ObjectParameter("OperateDateStart", operateDateStart);
            }
            else
            {
                operateDateStartParameter = new ObjectParameter("OperateDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter operateDateEndParameter;
    
            if (operateDateEnd.HasValue)
            {
                operateDateEndParameter = new ObjectParameter("OperateDateEnd", operateDateEnd);
            }
            else
            {
                operateDateEndParameter = new ObjectParameter("OperateDateEnd", typeof(System.DateTime));
            }
    
            ObjectParameter custNameParameter;
    
            if (custName != null)
            {
                custNameParameter = new ObjectParameter("CustName", custName);
            }
            else
            {
                custNameParameter = new ObjectParameter("CustName", typeof(string));
            }
            return base.ExecuteFunction<dtOutReportHeader>("GetStockReport_OutReport_Header", reportTypeParameter, slipNoStartParameter, slipNoEndParameter, stockOutDateStartParameter, stockOutDateEndParameter, contractCodeParameter, operateDateStartParameter, operateDateEndParameter, custNameParameter);
        }
        public ObjectResult<dtReturnReportDetail> GetStockReport_ReturnReport_Detail(string reportType, string slipNo)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtReturnReportDetail>("GetStockReport_ReturnReport_Detail", reportTypeParameter, slipNoParameter);
        }
        public ObjectResult<dtReturnReportHeader> GetStockReport_ReturnReport_Header(string reportType, string slipNoStart, string slipNoEnd, Nullable<System.DateTime> stockReturnDateStart, Nullable<System.DateTime> stockReturnDateEnd, string contractCode, Nullable<System.DateTime> operateDateStart, Nullable<System.DateTime> operateDateEnd, string custName)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter slipNoStartParameter;
    
            if (slipNoStart != null)
            {
                slipNoStartParameter = new ObjectParameter("SlipNoStart", slipNoStart);
            }
            else
            {
                slipNoStartParameter = new ObjectParameter("SlipNoStart", typeof(string));
            }
    
            ObjectParameter slipNoEndParameter;
    
            if (slipNoEnd != null)
            {
                slipNoEndParameter = new ObjectParameter("SlipNoEnd", slipNoEnd);
            }
            else
            {
                slipNoEndParameter = new ObjectParameter("SlipNoEnd", typeof(string));
            }
    
            ObjectParameter stockReturnDateStartParameter;
    
            if (stockReturnDateStart.HasValue)
            {
                stockReturnDateStartParameter = new ObjectParameter("StockReturnDateStart", stockReturnDateStart);
            }
            else
            {
                stockReturnDateStartParameter = new ObjectParameter("StockReturnDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter stockReturnDateEndParameter;
    
            if (stockReturnDateEnd.HasValue)
            {
                stockReturnDateEndParameter = new ObjectParameter("StockReturnDateEnd", stockReturnDateEnd);
            }
            else
            {
                stockReturnDateEndParameter = new ObjectParameter("StockReturnDateEnd", typeof(System.DateTime));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter operateDateStartParameter;
    
            if (operateDateStart.HasValue)
            {
                operateDateStartParameter = new ObjectParameter("OperateDateStart", operateDateStart);
            }
            else
            {
                operateDateStartParameter = new ObjectParameter("OperateDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter operateDateEndParameter;
    
            if (operateDateEnd.HasValue)
            {
                operateDateEndParameter = new ObjectParameter("OperateDateEnd", operateDateEnd);
            }
            else
            {
                operateDateEndParameter = new ObjectParameter("OperateDateEnd", typeof(System.DateTime));
            }
    
            ObjectParameter custNameParameter;
    
            if (custName != null)
            {
                custNameParameter = new ObjectParameter("CustName", custName);
            }
            else
            {
                custNameParameter = new ObjectParameter("CustName", typeof(string));
            }
            return base.ExecuteFunction<dtReturnReportHeader>("GetStockReport_ReturnReport_Header", reportTypeParameter, slipNoStartParameter, slipNoEndParameter, stockReturnDateStartParameter, stockReturnDateEndParameter, contractCodeParameter, operateDateStartParameter, operateDateEndParameter, custNameParameter);
        }
        public ObjectResult<dtInprocessToInstallReport> GetStockReport_InprocessToInstall(string reportType, string contractCode, string yearMonth)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter yearMonthParameter;
    
            if (yearMonth != null)
            {
                yearMonthParameter = new ObjectParameter("YearMonth", yearMonth);
            }
            else
            {
                yearMonthParameter = new ObjectParameter("YearMonth", typeof(string));
            }
            return base.ExecuteFunction<dtInprocessToInstallReport>("GetStockReport_InprocessToInstall", reportTypeParameter, contractCodeParameter, yearMonthParameter);
        }
        public ObjectResult<dtPhysicalReport> GetStockReport_Physical(string reportType, string instrumentCode, string yearMonth)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter yearMonthParameter;
    
            if (yearMonth != null)
            {
                yearMonthParameter = new ObjectParameter("YearMonth", yearMonth);
            }
            else
            {
                yearMonthParameter = new ObjectParameter("YearMonth", typeof(string));
            }
            return base.ExecuteFunction<dtPhysicalReport>("GetStockReport_Physical", reportTypeParameter, instrumentCodeParameter, yearMonthParameter);
        }
        public ObjectResult<dtStockListReport> GetStockReport_StockList(string reportType, string instrumentCode)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<dtStockListReport>("GetStockReport_StockList", reportTypeParameter, instrumentCodeParameter);
        }
        public ObjectResult<dtInProcessReport> GetStockReport_InProcess(string reportType, string contractCode, string yearMonth)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter yearMonthParameter;
    
            if (yearMonth != null)
            {
                yearMonthParameter = new ObjectParameter("YearMonth", yearMonth);
            }
            else
            {
                yearMonthParameter = new ObjectParameter("YearMonth", typeof(string));
            }
            return base.ExecuteFunction<dtInProcessReport>("GetStockReport_InProcess", reportTypeParameter, contractCodeParameter, yearMonthParameter);
        }
        public ObjectResult<dtInstrumentForMovementReport> GetStockReport_Instrument(string reportType, string instrumentCode)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<dtInstrumentForMovementReport>("GetStockReport_Instrument", reportTypeParameter, instrumentCodeParameter);
        }
        public ObjectResult<dtMovementReport> GetStockReport_Movement(string reportType, string instrumentCode, string yearMonth)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter yearMonthParameter;
    
            if (yearMonth != null)
            {
                yearMonthParameter = new ObjectParameter("YearMonth", yearMonth);
            }
            else
            {
                yearMonthParameter = new ObjectParameter("YearMonth", typeof(string));
            }
            return base.ExecuteFunction<dtMovementReport>("GetStockReport_Movement", reportTypeParameter, instrumentCodeParameter, yearMonthParameter);
        }
        public ObjectResult<doIVR181> GetIVR181(string pInventorySlipNo, string pC_INV_LOC, string pC_INV_AREA)
        {
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
            return base.ExecuteFunction<doIVR181>("GetIVR181", pInventorySlipNoParameter, pC_INV_LOCParameter, pC_INV_AREAParameter);
        }
        public ObjectResult<doIVR192> GetIVR192(string purchaseOrderNo)
        {
    
            ObjectParameter purchaseOrderNoParameter;
    
            if (purchaseOrderNo != null)
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", purchaseOrderNo);
            }
            else
            {
                purchaseOrderNoParameter = new ObjectParameter("PurchaseOrderNo", typeof(string));
            }
            return base.ExecuteFunction<doIVR192>("GetIVR192", purchaseOrderNoParameter);
        }
        public ObjectResult<doIVR010> GetIVR010(string pC_INV_STOCKIN_TYPE, string pC_INV_LOC, string pC_INV_AREA, string pC_PURCHASE_ORDER_STATUS, string pC_TRANSPORT_TYPE, string pC_CURRENCY_TYPE, string pInventorySlipNo)
        {
    
            ObjectParameter pC_INV_STOCKIN_TYPEParameter;
    
            if (pC_INV_STOCKIN_TYPE != null)
            {
                pC_INV_STOCKIN_TYPEParameter = new ObjectParameter("pC_INV_STOCKIN_TYPE", pC_INV_STOCKIN_TYPE);
            }
            else
            {
                pC_INV_STOCKIN_TYPEParameter = new ObjectParameter("pC_INV_STOCKIN_TYPE", typeof(string));
            }
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
    
            ObjectParameter pC_INV_AREAParameter;
    
            if (pC_INV_AREA != null)
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", pC_INV_AREA);
            }
            else
            {
                pC_INV_AREAParameter = new ObjectParameter("pC_INV_AREA", typeof(string));
            }
    
            ObjectParameter pC_PURCHASE_ORDER_STATUSParameter;
    
            if (pC_PURCHASE_ORDER_STATUS != null)
            {
                pC_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("pC_PURCHASE_ORDER_STATUS", pC_PURCHASE_ORDER_STATUS);
            }
            else
            {
                pC_PURCHASE_ORDER_STATUSParameter = new ObjectParameter("pC_PURCHASE_ORDER_STATUS", typeof(string));
            }
    
            ObjectParameter pC_TRANSPORT_TYPEParameter;
    
            if (pC_TRANSPORT_TYPE != null)
            {
                pC_TRANSPORT_TYPEParameter = new ObjectParameter("pC_TRANSPORT_TYPE", pC_TRANSPORT_TYPE);
            }
            else
            {
                pC_TRANSPORT_TYPEParameter = new ObjectParameter("pC_TRANSPORT_TYPE", typeof(string));
            }
    
            ObjectParameter pC_CURRENCY_TYPEParameter;
    
            if (pC_CURRENCY_TYPE != null)
            {
                pC_CURRENCY_TYPEParameter = new ObjectParameter("pC_CURRENCY_TYPE", pC_CURRENCY_TYPE);
            }
            else
            {
                pC_CURRENCY_TYPEParameter = new ObjectParameter("pC_CURRENCY_TYPE", typeof(string));
            }
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<doIVR010>("GetIVR010", pC_INV_STOCKIN_TYPEParameter, pC_INV_LOCParameter, pC_INV_AREAParameter, pC_PURCHASE_ORDER_STATUSParameter, pC_TRANSPORT_TYPEParameter, pC_CURRENCY_TYPEParameter, pInventorySlipNoParameter);
        }
        public ObjectResult<string> GenerateVoucherID(Nullable<System.DateTime> stockInDate)
        {
    
            ObjectParameter stockInDateParameter;
    
            if (stockInDate.HasValue)
            {
                stockInDateParameter = new ObjectParameter("StockInDate", stockInDate);
            }
            else
            {
                stockInDateParameter = new ObjectParameter("StockInDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<string>("GenerateVoucherID", stockInDateParameter);
        }
        public ObjectResult<doSearchReceiveSlipResult> SearchReceiveSlip(string contractCode, Nullable<System.DateTime> completeDateStart, Nullable<System.DateTime> completeDateEnd, string installationSlipNo, string subContractorName, string projectCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter completeDateStartParameter;
    
            if (completeDateStart.HasValue)
            {
                completeDateStartParameter = new ObjectParameter("CompleteDateStart", completeDateStart);
            }
            else
            {
                completeDateStartParameter = new ObjectParameter("CompleteDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter completeDateEndParameter;
    
            if (completeDateEnd.HasValue)
            {
                completeDateEndParameter = new ObjectParameter("CompleteDateEnd", completeDateEnd);
            }
            else
            {
                completeDateEndParameter = new ObjectParameter("CompleteDateEnd", typeof(System.DateTime));
            }
    
            ObjectParameter installationSlipNoParameter;
    
            if (installationSlipNo != null)
            {
                installationSlipNoParameter = new ObjectParameter("InstallationSlipNo", installationSlipNo);
            }
            else
            {
                installationSlipNoParameter = new ObjectParameter("InstallationSlipNo", typeof(string));
            }
    
            ObjectParameter subContractorNameParameter;
    
            if (subContractorName != null)
            {
                subContractorNameParameter = new ObjectParameter("SubContractorName", subContractorName);
            }
            else
            {
                subContractorNameParameter = new ObjectParameter("SubContractorName", typeof(string));
            }
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", typeof(string));
            }
            return base.ExecuteFunction<doSearchReceiveSlipResult>("SearchReceiveSlip", contractCodeParameter, completeDateStartParameter, completeDateEndParameter, installationSlipNoParameter, subContractorNameParameter, projectCodeParameter);
        }
        public ObjectResult<dtChangeAreaReportDetail> GetStockReport_ChangeArea_Detail(string slipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtChangeAreaReportDetail>("GetStockReport_ChangeArea_Detail", slipNoParameter);
        }
        public ObjectResult<dtChangeAreaReportHeader> GetStockReport_ChangeArea_Header(string inventorySlipNoStart, string inventorySlipNoEnd, string contractCode, Nullable<System.DateTime> transferDateStart, Nullable<System.DateTime> transferDateEnd, string sourceAreaCode, string destinationAreaCode)
        {
    
            ObjectParameter inventorySlipNoStartParameter;
    
            if (inventorySlipNoStart != null)
            {
                inventorySlipNoStartParameter = new ObjectParameter("InventorySlipNoStart", inventorySlipNoStart);
            }
            else
            {
                inventorySlipNoStartParameter = new ObjectParameter("InventorySlipNoStart", typeof(string));
            }
    
            ObjectParameter inventorySlipNoEndParameter;
    
            if (inventorySlipNoEnd != null)
            {
                inventorySlipNoEndParameter = new ObjectParameter("InventorySlipNoEnd", inventorySlipNoEnd);
            }
            else
            {
                inventorySlipNoEndParameter = new ObjectParameter("InventorySlipNoEnd", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter transferDateStartParameter;
    
            if (transferDateStart.HasValue)
            {
                transferDateStartParameter = new ObjectParameter("TransferDateStart", transferDateStart);
            }
            else
            {
                transferDateStartParameter = new ObjectParameter("TransferDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter transferDateEndParameter;
    
            if (transferDateEnd.HasValue)
            {
                transferDateEndParameter = new ObjectParameter("TransferDateEnd", transferDateEnd);
            }
            else
            {
                transferDateEndParameter = new ObjectParameter("TransferDateEnd", typeof(System.DateTime));
            }
    
            ObjectParameter sourceAreaCodeParameter;
    
            if (sourceAreaCode != null)
            {
                sourceAreaCodeParameter = new ObjectParameter("SourceAreaCode", sourceAreaCode);
            }
            else
            {
                sourceAreaCodeParameter = new ObjectParameter("SourceAreaCode", typeof(string));
            }
    
            ObjectParameter destinationAreaCodeParameter;
    
            if (destinationAreaCode != null)
            {
                destinationAreaCodeParameter = new ObjectParameter("DestinationAreaCode", destinationAreaCode);
            }
            else
            {
                destinationAreaCodeParameter = new ObjectParameter("DestinationAreaCode", typeof(string));
            }
            return base.ExecuteFunction<dtChangeAreaReportHeader>("GetStockReport_ChangeArea_Header", inventorySlipNoStartParameter, inventorySlipNoEndParameter, contractCodeParameter, transferDateStartParameter, transferDateEndParameter, sourceAreaCodeParameter, destinationAreaCodeParameter);
        }
        public ObjectResult<dtEliminateReportDetail> GetStockReport_Eliminate_Detail(string slipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtEliminateReportDetail>("GetStockReport_Eliminate_Detail", slipNoParameter);
        }
        public ObjectResult<dtEliminateReportHeader> GetStockReport_Eliminate_Header(string inventorySlipNoStart, string inventorySlipNoEnd, Nullable<System.DateTime> transferDateStart, Nullable<System.DateTime> transferDateEnd, string transferType)
        {
    
            ObjectParameter inventorySlipNoStartParameter;
    
            if (inventorySlipNoStart != null)
            {
                inventorySlipNoStartParameter = new ObjectParameter("InventorySlipNoStart", inventorySlipNoStart);
            }
            else
            {
                inventorySlipNoStartParameter = new ObjectParameter("InventorySlipNoStart", typeof(string));
            }
    
            ObjectParameter inventorySlipNoEndParameter;
    
            if (inventorySlipNoEnd != null)
            {
                inventorySlipNoEndParameter = new ObjectParameter("InventorySlipNoEnd", inventorySlipNoEnd);
            }
            else
            {
                inventorySlipNoEndParameter = new ObjectParameter("InventorySlipNoEnd", typeof(string));
            }
    
            ObjectParameter transferDateStartParameter;
    
            if (transferDateStart.HasValue)
            {
                transferDateStartParameter = new ObjectParameter("TransferDateStart", transferDateStart);
            }
            else
            {
                transferDateStartParameter = new ObjectParameter("TransferDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter transferDateEndParameter;
    
            if (transferDateEnd.HasValue)
            {
                transferDateEndParameter = new ObjectParameter("TransferDateEnd", transferDateEnd);
            }
            else
            {
                transferDateEndParameter = new ObjectParameter("TransferDateEnd", typeof(System.DateTime));
            }
    
            ObjectParameter transferTypeParameter;
    
            if (transferType != null)
            {
                transferTypeParameter = new ObjectParameter("TransferType", transferType);
            }
            else
            {
                transferTypeParameter = new ObjectParameter("TransferType", typeof(string));
            }
            return base.ExecuteFunction<dtEliminateReportHeader>("GetStockReport_Eliminate_Header", inventorySlipNoStartParameter, inventorySlipNoEndParameter, transferDateStartParameter, transferDateEndParameter, transferTypeParameter);
        }
        public ObjectResult<dtBufferLossReportDetail> GetStockReport_BufferLoss_Detail(string slipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtBufferLossReportDetail>("GetStockReport_BufferLoss_Detail", slipNoParameter);
        }
        public ObjectResult<dtBufferLossReportHeader> GetStockReport_BufferLoss_Header(string inventorySlipNoStart, string inventorySlipNoEnd, Nullable<System.DateTime> transferDateStart, Nullable<System.DateTime> transferDateEnd)
        {
    
            ObjectParameter inventorySlipNoStartParameter;
    
            if (inventorySlipNoStart != null)
            {
                inventorySlipNoStartParameter = new ObjectParameter("InventorySlipNoStart", inventorySlipNoStart);
            }
            else
            {
                inventorySlipNoStartParameter = new ObjectParameter("InventorySlipNoStart", typeof(string));
            }
    
            ObjectParameter inventorySlipNoEndParameter;
    
            if (inventorySlipNoEnd != null)
            {
                inventorySlipNoEndParameter = new ObjectParameter("InventorySlipNoEnd", inventorySlipNoEnd);
            }
            else
            {
                inventorySlipNoEndParameter = new ObjectParameter("InventorySlipNoEnd", typeof(string));
            }
    
            ObjectParameter transferDateStartParameter;
    
            if (transferDateStart.HasValue)
            {
                transferDateStartParameter = new ObjectParameter("TransferDateStart", transferDateStart);
            }
            else
            {
                transferDateStartParameter = new ObjectParameter("TransferDateStart", typeof(System.DateTime));
            }
    
            ObjectParameter transferDateEndParameter;
    
            if (transferDateEnd.HasValue)
            {
                transferDateEndParameter = new ObjectParameter("TransferDateEnd", transferDateEnd);
            }
            else
            {
                transferDateEndParameter = new ObjectParameter("TransferDateEnd", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtBufferLossReportHeader>("GetStockReport_BufferLoss_Header", inventorySlipNoStartParameter, inventorySlipNoEndParameter, transferDateStartParameter, transferDateEndParameter);
        }
        public ObjectResult<doMonthlyAveragePrice> GetMonthlyAveragePrice(string instrumentCode, Nullable<System.DateTime> yearMonth, string accountCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter yearMonthParameter;
    
            if (yearMonth.HasValue)
            {
                yearMonthParameter = new ObjectParameter("YearMonth", yearMonth);
            }
            else
            {
                yearMonthParameter = new ObjectParameter("YearMonth", typeof(System.DateTime));
            }
    
            ObjectParameter accountCodeParameter;
    
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doMonthlyAveragePrice>("GetMonthlyAveragePrice", instrumentCodeParameter, yearMonthParameter, accountCodeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public int UpdateMonthlyAveragePrice(Nullable<System.DateTime> batchDate, Nullable<System.DateTime> updateDate, string updateBy, string c_INV_ACCOUNT_CODE_INSTOCK, string c_INV_ACCOUNT_CODE_INPROCESS, string c_INV_TRANSFERTYPE_STOCKIN_PURCHASE, string c_INV_TRANSFERTYPE_STOCKIN_SPECIAL, string c_INV_AREA_NEW_SAMPLE, string c_INV_AREA_NEW_SALE, string c_INV_AREA_NEW_RENTAL, string c_INV_AREA_SE_RENTAL, string c_INV_AREA_NEW_DEMO, string c_INV_AREA_SE_DEMO, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29, string c_INV_TRANSFERTYPE_STOCKOUT_PROJECT, string c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE, string c_INV_TRANSFERTYPE_COMPLETE_AFTER_START, string c_INV_TRANSFERTYPE_START_SERVICE, string c_INV_TRANSFERTYPE_ELIMINATION, string c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL, string c_INV_TRANSFERTYPE_TRANSFER_BUFFER, string c_INV_TRANSFERTYPE_TRANSFER_AREA, string c_INV_SLIP_STATUS_COMPLETE, string c_INV_LOC_RETURNED, string c_INV_LOC_SOLD, string c_INV_LOC_USER, string c_INV_LOC_INSTOCK, string c_INV_LOC_PRE_ELIMINATION, string c_CONFIG_SCRAP_VALUE)
        {
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter c_INV_ACCOUNT_CODE_INSTOCKParameter;
    
            if (c_INV_ACCOUNT_CODE_INSTOCK != null)
            {
                c_INV_ACCOUNT_CODE_INSTOCKParameter = new ObjectParameter("C_INV_ACCOUNT_CODE_INSTOCK", c_INV_ACCOUNT_CODE_INSTOCK);
            }
            else
            {
                c_INV_ACCOUNT_CODE_INSTOCKParameter = new ObjectParameter("C_INV_ACCOUNT_CODE_INSTOCK", typeof(string));
            }
    
            ObjectParameter c_INV_ACCOUNT_CODE_INPROCESSParameter;
    
            if (c_INV_ACCOUNT_CODE_INPROCESS != null)
            {
                c_INV_ACCOUNT_CODE_INPROCESSParameter = new ObjectParameter("C_INV_ACCOUNT_CODE_INPROCESS", c_INV_ACCOUNT_CODE_INPROCESS);
            }
            else
            {
                c_INV_ACCOUNT_CODE_INPROCESSParameter = new ObjectParameter("C_INV_ACCOUNT_CODE_INPROCESS", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKIN_PURCHASE != null)
            {
                c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_PURCHASE", c_INV_TRANSFERTYPE_STOCKIN_PURCHASE);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_PURCHASE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKIN_SPECIAL != null)
            {
                c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_SPECIAL", c_INV_TRANSFERTYPE_STOCKIN_SPECIAL);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKIN_SPECIAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SAMPLEParameter;
    
            if (c_INV_AREA_NEW_SAMPLE != null)
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", c_INV_AREA_NEW_SAMPLE);
            }
            else
            {
                c_INV_AREA_NEW_SAMPLEParameter = new ObjectParameter("C_INV_AREA_NEW_SAMPLE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_SALEParameter;
    
            if (c_INV_AREA_NEW_SALE != null)
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", c_INV_AREA_NEW_SALE);
            }
            else
            {
                c_INV_AREA_NEW_SALEParameter = new ObjectParameter("C_INV_AREA_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_RENTALParameter;
    
            if (c_INV_AREA_NEW_RENTAL != null)
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", c_INV_AREA_NEW_RENTAL);
            }
            else
            {
                c_INV_AREA_NEW_RENTALParameter = new ObjectParameter("C_INV_AREA_NEW_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_RENTALParameter;
    
            if (c_INV_AREA_SE_RENTAL != null)
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", c_INV_AREA_SE_RENTAL);
            }
            else
            {
                c_INV_AREA_SE_RENTALParameter = new ObjectParameter("C_INV_AREA_SE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_NEW_DEMOParameter;
    
            if (c_INV_AREA_NEW_DEMO != null)
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", c_INV_AREA_NEW_DEMO);
            }
            else
            {
                c_INV_AREA_NEW_DEMOParameter = new ObjectParameter("C_INV_AREA_NEW_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_AREA_SE_DEMOParameter;
    
            if (c_INV_AREA_SE_DEMO != null)
            {
                c_INV_AREA_SE_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_DEMO", c_INV_AREA_SE_DEMO);
            }
            else
            {
                c_INV_AREA_SE_DEMOParameter = new ObjectParameter("C_INV_AREA_SE_DEMO", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29 != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_PROJECT != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PROJECT", c_INV_TRANSFERTYPE_STOCKOUT_PROJECT);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_PROJECT", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter;
    
            if (c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE != null)
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE);
            }
            else
            {
                c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter;
    
            if (c_INV_TRANSFERTYPE_COMPLETE_AFTER_START != null)
            {
                c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_AFTER_START", c_INV_TRANSFERTYPE_COMPLETE_AFTER_START);
            }
            else
            {
                c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter = new ObjectParameter("C_INV_TRANSFERTYPE_COMPLETE_AFTER_START", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_START_SERVICEParameter;
    
            if (c_INV_TRANSFERTYPE_START_SERVICE != null)
            {
                c_INV_TRANSFERTYPE_START_SERVICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_START_SERVICE", c_INV_TRANSFERTYPE_START_SERVICE);
            }
            else
            {
                c_INV_TRANSFERTYPE_START_SERVICEParameter = new ObjectParameter("C_INV_TRANSFERTYPE_START_SERVICE", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_ELIMINATIONParameter;
    
            if (c_INV_TRANSFERTYPE_ELIMINATION != null)
            {
                c_INV_TRANSFERTYPE_ELIMINATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_ELIMINATION", c_INV_TRANSFERTYPE_ELIMINATION);
            }
            else
            {
                c_INV_TRANSFERTYPE_ELIMINATIONParameter = new ObjectParameter("C_INV_TRANSFERTYPE_ELIMINATION", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter;
    
            if (c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL != null)
            {
                c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", c_INV_TRANSFERTYPE_STOCKOUT_SPECIAL);
            }
            else
            {
                c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter = new ObjectParameter("C_INV_TRANSFERTYPE_STOCKOUT_SPECIAL", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter;
    
            if (c_INV_TRANSFERTYPE_TRANSFER_BUFFER != null)
            {
                c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_BUFFER", c_INV_TRANSFERTYPE_TRANSFER_BUFFER);
            }
            else
            {
                c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_BUFFER", typeof(string));
            }
    
            ObjectParameter c_INV_TRANSFERTYPE_TRANSFER_AREAParameter;
    
            if (c_INV_TRANSFERTYPE_TRANSFER_AREA != null)
            {
                c_INV_TRANSFERTYPE_TRANSFER_AREAParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_AREA", c_INV_TRANSFERTYPE_TRANSFER_AREA);
            }
            else
            {
                c_INV_TRANSFERTYPE_TRANSFER_AREAParameter = new ObjectParameter("C_INV_TRANSFERTYPE_TRANSFER_AREA", typeof(string));
            }
    
            ObjectParameter c_INV_SLIP_STATUS_COMPLETEParameter;
    
            if (c_INV_SLIP_STATUS_COMPLETE != null)
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", c_INV_SLIP_STATUS_COMPLETE);
            }
            else
            {
                c_INV_SLIP_STATUS_COMPLETEParameter = new ObjectParameter("C_INV_SLIP_STATUS_COMPLETE", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_RETURNEDParameter;
    
            if (c_INV_LOC_RETURNED != null)
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", c_INV_LOC_RETURNED);
            }
            else
            {
                c_INV_LOC_RETURNEDParameter = new ObjectParameter("C_INV_LOC_RETURNED", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_SOLDParameter;
    
            if (c_INV_LOC_SOLD != null)
            {
                c_INV_LOC_SOLDParameter = new ObjectParameter("C_INV_LOC_SOLD", c_INV_LOC_SOLD);
            }
            else
            {
                c_INV_LOC_SOLDParameter = new ObjectParameter("C_INV_LOC_SOLD", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_USERParameter;
    
            if (c_INV_LOC_USER != null)
            {
                c_INV_LOC_USERParameter = new ObjectParameter("C_INV_LOC_USER", c_INV_LOC_USER);
            }
            else
            {
                c_INV_LOC_USERParameter = new ObjectParameter("C_INV_LOC_USER", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_INSTOCKParameter;
    
            if (c_INV_LOC_INSTOCK != null)
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", c_INV_LOC_INSTOCK);
            }
            else
            {
                c_INV_LOC_INSTOCKParameter = new ObjectParameter("C_INV_LOC_INSTOCK", typeof(string));
            }
    
            ObjectParameter c_INV_LOC_PRE_ELIMINATIONParameter;
    
            if (c_INV_LOC_PRE_ELIMINATION != null)
            {
                c_INV_LOC_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_PRE_ELIMINATION", c_INV_LOC_PRE_ELIMINATION);
            }
            else
            {
                c_INV_LOC_PRE_ELIMINATIONParameter = new ObjectParameter("C_INV_LOC_PRE_ELIMINATION", typeof(string));
            }
    
            ObjectParameter c_CONFIG_SCRAP_VALUEParameter;
    
            if (c_CONFIG_SCRAP_VALUE != null)
            {
                c_CONFIG_SCRAP_VALUEParameter = new ObjectParameter("C_CONFIG_SCRAP_VALUE", c_CONFIG_SCRAP_VALUE);
            }
            else
            {
                c_CONFIG_SCRAP_VALUEParameter = new ObjectParameter("C_CONFIG_SCRAP_VALUE", typeof(string));
            }
            return base.ExecuteFunction("UpdateMonthlyAveragePrice", batchDateParameter, updateDateParameter, updateByParameter, c_INV_ACCOUNT_CODE_INSTOCKParameter, c_INV_ACCOUNT_CODE_INPROCESSParameter, c_INV_TRANSFERTYPE_STOCKIN_PURCHASEParameter, c_INV_TRANSFERTYPE_STOCKIN_SPECIALParameter, c_INV_AREA_NEW_SAMPLEParameter, c_INV_AREA_NEW_SALEParameter, c_INV_AREA_NEW_RENTALParameter, c_INV_AREA_SE_RENTALParameter, c_INV_AREA_NEW_DEMOParameter, c_INV_AREA_SE_DEMOParameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK03Parameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK20Parameter, c_INV_TRANSFERTYPE_STOCKOUT_NORMAL_MK29Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter, c_INV_TRANSFERTYPE_STOCKOUT_PROJECTParameter, c_INV_TRANSFERTYPE_CUSTOMER_ACCEPTANCEParameter, c_INV_TRANSFERTYPE_COMPLETE_AFTER_STARTParameter, c_INV_TRANSFERTYPE_START_SERVICEParameter, c_INV_TRANSFERTYPE_ELIMINATIONParameter, c_INV_TRANSFERTYPE_STOCKOUT_SPECIALParameter, c_INV_TRANSFERTYPE_TRANSFER_BUFFERParameter, c_INV_TRANSFERTYPE_TRANSFER_AREAParameter, c_INV_SLIP_STATUS_COMPLETEParameter, c_INV_LOC_RETURNEDParameter, c_INV_LOC_SOLDParameter, c_INV_LOC_USERParameter, c_INV_LOC_INSTOCKParameter, c_INV_LOC_PRE_ELIMINATIONParameter, c_CONFIG_SCRAP_VALUEParameter);
        }
        public ObjectResult<string> GetStockReport_InProcessPeriod()
        {
            return base.ExecuteFunction<string>("GetStockReport_InProcessPeriod");
        }
        public int FreezeInprocess(Nullable<System.DateTime> batchDate, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction("FreezeInprocess", batchDateParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<string> GetStockReport_PhysicalPeriod()
        {
            return base.ExecuteFunction<string>("GetStockReport_PhysicalPeriod");
        }
        public ObjectResult<Nullable<System.DateTime>> GetBusinessDateByOffset(Nullable<System.DateTime> date, Nullable<int> offset)
        {
    
            ObjectParameter dateParameter;
    
            if (date.HasValue)
            {
                dateParameter = new ObjectParameter("Date", date);
            }
            else
            {
                dateParameter = new ObjectParameter("Date", typeof(System.DateTime));
            }
    
            ObjectParameter offsetParameter;
    
            if (offset.HasValue)
            {
                offsetParameter = new ObjectParameter("Offset", offset);
            }
            else
            {
                offsetParameter = new ObjectParameter("Offset", typeof(int));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetBusinessDateByOffset", dateParameter, offsetParameter);
        }
        public ObjectResult<dtInProcessReportDetail> GetStockReport_InProcess_Detail(string reportType, string contractCode, string yearMonth)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter yearMonthParameter;
    
            if (yearMonth != null)
            {
                yearMonthParameter = new ObjectParameter("YearMonth", yearMonth);
            }
            else
            {
                yearMonthParameter = new ObjectParameter("YearMonth", typeof(string));
            }
            return base.ExecuteFunction<dtInProcessReportDetail>("GetStockReport_InProcess_Detail", reportTypeParameter, contractCodeParameter, yearMonthParameter);
        }
        public ObjectResult<dtInprocessToInstallReportDetail> GetStockReport_InprocessToInstall_Detail(string reportType, string contractCodeWithOCC, string yearMonth)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter contractCodeWithOCCParameter;
    
            if (contractCodeWithOCC != null)
            {
                contractCodeWithOCCParameter = new ObjectParameter("ContractCodeWithOCC", contractCodeWithOCC);
            }
            else
            {
                contractCodeWithOCCParameter = new ObjectParameter("ContractCodeWithOCC", typeof(string));
            }
    
            ObjectParameter yearMonthParameter;
    
            if (yearMonth != null)
            {
                yearMonthParameter = new ObjectParameter("YearMonth", yearMonth);
            }
            else
            {
                yearMonthParameter = new ObjectParameter("YearMonth", typeof(string));
            }
            return base.ExecuteFunction<dtInprocessToInstallReportDetail>("GetStockReport_InprocessToInstall_Detail", reportTypeParameter, contractCodeWithOCCParameter, yearMonthParameter);
        }
        public ObjectResult<doIVR210> GetIVR210(string pInventorySlipNo, string pC_INV_LOC)
        {
    
            ObjectParameter pInventorySlipNoParameter;
    
            if (pInventorySlipNo != null)
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", pInventorySlipNo);
            }
            else
            {
                pInventorySlipNoParameter = new ObjectParameter("pInventorySlipNo", typeof(string));
            }
    
            ObjectParameter pC_INV_LOCParameter;
    
            if (pC_INV_LOC != null)
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", pC_INV_LOC);
            }
            else
            {
                pC_INV_LOCParameter = new ObjectParameter("pC_INV_LOC", typeof(string));
            }
            return base.ExecuteFunction<doIVR210>("GetIVR210", pInventorySlipNoParameter, pC_INV_LOCParameter);
        }
        public ObjectResult<Nullable<System.DateTime>> GetDepreciationStartDate(string pContractCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<System.DateTime>>("GetDepreciationStartDate", pContractCodeParameter);
        }
        public ObjectResult<doContractWIPInstrumentPartial> GetContractWIPInstrumentPartial(string strInstallationSlipNo, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20, string pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29)
        {
    
            ObjectParameter strInstallationSlipNoParameter;
    
            if (strInstallationSlipNo != null)
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", strInstallationSlipNo);
            }
            else
            {
                strInstallationSlipNoParameter = new ObjectParameter("strInstallationSlipNo", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20", typeof(string));
            }
    
            ObjectParameter pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter;
    
            if (pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29 != null)
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29);
            }
            else
            {
                pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter = new ObjectParameter("pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29", typeof(string));
            }
            return base.ExecuteFunction<doContractWIPInstrumentPartial>("GetContractWIPInstrumentPartial", strInstallationSlipNoParameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK03Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK20Parameter, pC_INV_TRANSFERTYPE_STOCKOUT_PARTIAL_MK29Parameter);
        }
        public ObjectResult<doInventoryBookingDetail> GetTbtInventoryBookingDetailForIV200(string instrumentCode)
        {
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<doInventoryBookingDetail>("GetTbtInventoryBookingDetailForIV200", instrumentCodeParameter);
        }

        #endregion

    }
}
