//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Common
{
    public partial class CMDataEntities : ObjectContext
    {
        public const string ConnectionString = "name=CMDataEntities";
        public const string ContainerName = "CMDataEntities";
    
        #region Constructors
    
        public CMDataEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public CMDataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public CMDataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<tbs_ProductType> tbs_ProductType
        {
            get { return _tbs_ProductType  ?? (_tbs_ProductType = CreateObjectSet<tbs_ProductType>("tbs_ProductType")); }
        }
        private ObjectSet<tbs_ProductType> _tbs_ProductType;
    
        public ObjectSet<tbt_PurgeLog> tbt_PurgeLog
        {
            get { return _tbt_PurgeLog  ?? (_tbt_PurgeLog = CreateObjectSet<tbt_PurgeLog>("tbt_PurgeLog")); }
        }
        private ObjectSet<tbt_PurgeLog> _tbt_PurgeLog;
    
        public ObjectSet<tbm_DocumentTemplate> tbm_DocumentTemplate
        {
            get { return _tbm_DocumentTemplate  ?? (_tbm_DocumentTemplate = CreateObjectSet<tbm_DocumentTemplate>("tbm_DocumentTemplate")); }
        }
        private ObjectSet<tbm_DocumentTemplate> _tbm_DocumentTemplate;
    
        public ObjectSet<tbm_Supplier> tbm_Supplier
        {
            get { return _tbm_Supplier  ?? (_tbm_Supplier = CreateObjectSet<tbm_Supplier>("tbm_Supplier")); }
        }
        private ObjectSet<tbm_Supplier> _tbm_Supplier;
    
        public ObjectSet<tbs_Configuration> tbs_Configuration
        {
            get { return _tbs_Configuration  ?? (_tbs_Configuration = CreateObjectSet<tbs_Configuration>("tbs_Configuration")); }
        }
        private ObjectSet<tbs_Configuration> _tbs_Configuration;
    
        public ObjectSet<tbt_DocumentDownloadLog> tbt_DocumentDownloadLog
        {
            get { return _tbt_DocumentDownloadLog  ?? (_tbt_DocumentDownloadLog = CreateObjectSet<tbt_DocumentDownloadLog>("tbt_DocumentDownloadLog")); }
        }
        private ObjectSet<tbt_DocumentDownloadLog> _tbt_DocumentDownloadLog;
    
        public ObjectSet<tbt_AttachFile> tbt_AttachFile
        {
            get { return _tbt_AttachFile  ?? (_tbt_AttachFile = CreateObjectSet<tbt_AttachFile>("tbt_AttachFile")); }
        }
        private ObjectSet<tbt_AttachFile> _tbt_AttachFile;
    
        public ObjectSet<tbt_DocumentReports> tbt_DocumentReports
        {
            get { return _tbt_DocumentReports  ?? (_tbt_DocumentReports = CreateObjectSet<tbt_DocumentReports>("tbt_DocumentReports")); }
        }
        private ObjectSet<tbt_DocumentReports> _tbt_DocumentReports;
    
        public ObjectSet<tbt_DocumentList> tbt_DocumentList
        {
            get { return _tbt_DocumentList  ?? (_tbt_DocumentList = CreateObjectSet<tbt_DocumentList>("tbt_DocumentList")); }
        }
        private ObjectSet<tbt_DocumentList> _tbt_DocumentList;
    
        public ObjectSet<tbt_ManageCarryOverProfit> tbt_ManageCarryOverProfit
        {
            get { return _tbt_ManageCarryOverProfit  ?? (_tbt_ManageCarryOverProfit = CreateObjectSet<tbt_ManageCarryOverProfit>("tbt_ManageCarryOverProfit")); }
        }
        private ObjectSet<tbt_ManageCarryOverProfit> _tbt_ManageCarryOverProfit;
    
        public ObjectSet<tbs_BatchQueue> tbs_BatchQueue
        {
            get { return _tbs_BatchQueue  ?? (_tbs_BatchQueue = CreateObjectSet<tbs_BatchQueue>("tbs_BatchQueue")); }
        }
        private ObjectSet<tbs_BatchQueue> _tbs_BatchQueue;
    
        public ObjectSet<tbs_BatchSchedule> tbs_BatchSchedule
        {
            get { return _tbs_BatchSchedule  ?? (_tbs_BatchSchedule = CreateObjectSet<tbs_BatchSchedule>("tbs_BatchSchedule")); }
        }
        private ObjectSet<tbs_BatchSchedule> _tbs_BatchSchedule;

        #endregion

        #region Function Imports
        public ObjectResult<tbs_ProductType> GetTbs_ProductType(string pchrServiceTypeCode, string pchrProductTypeCode)
        {
    
            ObjectParameter pchrServiceTypeCodeParameter;
    
            if (pchrServiceTypeCode != null)
            {
                pchrServiceTypeCodeParameter = new ObjectParameter("pchrServiceTypeCode", pchrServiceTypeCode);
            }
            else
            {
                pchrServiceTypeCodeParameter = new ObjectParameter("pchrServiceTypeCode", typeof(string));
            }
    
            ObjectParameter pchrProductTypeCodeParameter;
    
            if (pchrProductTypeCode != null)
            {
                pchrProductTypeCodeParameter = new ObjectParameter("pchrProductTypeCode", pchrProductTypeCode);
            }
            else
            {
                pchrProductTypeCodeParameter = new ObjectParameter("pchrProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbs_ProductType>("GetTbs_ProductType", pchrServiceTypeCodeParameter, pchrProductTypeCodeParameter);
        }
        public ObjectResult<dtDocumentType> GetDocumentTypeDataList(string c_DOCUMENT_TYPE, string pObjectIDList)
        {
    
            ObjectParameter c_DOCUMENT_TYPEParameter;
    
            if (c_DOCUMENT_TYPE != null)
            {
                c_DOCUMENT_TYPEParameter = new ObjectParameter("C_DOCUMENT_TYPE", c_DOCUMENT_TYPE);
            }
            else
            {
                c_DOCUMENT_TYPEParameter = new ObjectParameter("C_DOCUMENT_TYPE", typeof(string));
            }
    
            ObjectParameter pObjectIDListParameter;
    
            if (pObjectIDList != null)
            {
                pObjectIDListParameter = new ObjectParameter("pObjectIDList", pObjectIDList);
            }
            else
            {
                pObjectIDListParameter = new ObjectParameter("pObjectIDList", typeof(string));
            }
            return base.ExecuteFunction<dtDocumentType>("GetDocumentTypeDataList", c_DOCUMENT_TYPEParameter, pObjectIDListParameter);
        }
        public ObjectResult<Nullable<int>> WriteTransactionLog(string gUID, string screenID, string tableName, string transactionData, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter gUIDParameter;
    
            if (gUID != null)
            {
                gUIDParameter = new ObjectParameter("GUID", gUID);
            }
            else
            {
                gUIDParameter = new ObjectParameter("GUID", typeof(string));
            }
    
            ObjectParameter screenIDParameter;
    
            if (screenID != null)
            {
                screenIDParameter = new ObjectParameter("ScreenID", screenID);
            }
            else
            {
                screenIDParameter = new ObjectParameter("ScreenID", typeof(string));
            }
    
            ObjectParameter tableNameParameter;
    
            if (tableName != null)
            {
                tableNameParameter = new ObjectParameter("TableName", tableName);
            }
            else
            {
                tableNameParameter = new ObjectParameter("TableName", typeof(string));
            }
    
            ObjectParameter transactionDataParameter;
    
            if (transactionData != null)
            {
                transactionDataParameter = new ObjectParameter("TransactionData", transactionData);
            }
            else
            {
                transactionDataParameter = new ObjectParameter("TransactionData", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("WriteTransactionLog", gUIDParameter, screenIDParameter, tableNameParameter, transactionDataParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<Nullable<int>> UpdateSystemStatus(Nullable<bool> bSuspendFlag, Nullable<bool> bManualFlag, string pUpdateBy, string pSuspendResumeSystemJobName)
        {
    
            ObjectParameter bSuspendFlagParameter;
    
            if (bSuspendFlag.HasValue)
            {
                bSuspendFlagParameter = new ObjectParameter("bSuspendFlag", bSuspendFlag);
            }
            else
            {
                bSuspendFlagParameter = new ObjectParameter("bSuspendFlag", typeof(bool));
            }
    
            ObjectParameter bManualFlagParameter;
    
            if (bManualFlag.HasValue)
            {
                bManualFlagParameter = new ObjectParameter("bManualFlag", bManualFlag);
            }
            else
            {
                bManualFlagParameter = new ObjectParameter("bManualFlag", typeof(bool));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
    
            ObjectParameter pSuspendResumeSystemJobNameParameter;
    
            if (pSuspendResumeSystemJobName != null)
            {
                pSuspendResumeSystemJobNameParameter = new ObjectParameter("pSuspendResumeSystemJobName", pSuspendResumeSystemJobName);
            }
            else
            {
                pSuspendResumeSystemJobNameParameter = new ObjectParameter("pSuspendResumeSystemJobName", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateSystemStatus", bSuspendFlagParameter, bManualFlagParameter, pUpdateByParameter, pSuspendResumeSystemJobNameParameter);
        }
        public ObjectResult<doSystemStatus> sp_CM_GetSystemStatus()
        {
            return base.ExecuteFunction<doSystemStatus>("sp_CM_GetSystemStatus");
        }
        public ObjectResult<tbt_PurgeLog> DeleteLog(Nullable<System.DateTime> monthYear, string empNo)
        {
    
            ObjectParameter monthYearParameter;
    
            if (monthYear.HasValue)
            {
                monthYearParameter = new ObjectParameter("MonthYear", monthYear);
            }
            else
            {
                monthYearParameter = new ObjectParameter("MonthYear", typeof(System.DateTime));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_PurgeLog>("DeleteLog", monthYearParameter, empNoParameter);
        }
        public ObjectResult<dtDocumentData> GetDocumentDataList(string pchvDocumentType, string pchvDocumentCode, Nullable<System.DateTime> pdatGenerateDateFrom, Nullable<System.DateTime> pdatGenerateDateTo, Nullable<int> pdatMonth, Nullable<int> pdatYear, string pchrContractOfficeCode, string pchrOperationOfficeCode, string pchrBillingOfficeCode, string pchrIssueOfficeCode, string pchrDocumentNo, string pchrQuotationTargetCode, string pchrAlphabet, string pchrProjectCode, string pchrContractCode, string pchrOCC, string pchrBillingTargetCode, string pchvInstrumentCode, string pC_DOCUMENT_TYPE_CONTRACT, string pC_DOCUMENT_TYPE_MA, string pC_DOCUMENT_TYPE_INSTALLATION, string pC_DOCUMENT_TYPE_INVENTORY, string pC_DOCUMENT_TYPE_INCOME, string pOfficeCodeList, string pC_DOCUMENT_TYPE_COMMON, string pLocationCode)
        {
    
            ObjectParameter pchvDocumentTypeParameter;
    
            if (pchvDocumentType != null)
            {
                pchvDocumentTypeParameter = new ObjectParameter("pchvDocumentType", pchvDocumentType);
            }
            else
            {
                pchvDocumentTypeParameter = new ObjectParameter("pchvDocumentType", typeof(string));
            }
    
            ObjectParameter pchvDocumentCodeParameter;
    
            if (pchvDocumentCode != null)
            {
                pchvDocumentCodeParameter = new ObjectParameter("pchvDocumentCode", pchvDocumentCode);
            }
            else
            {
                pchvDocumentCodeParameter = new ObjectParameter("pchvDocumentCode", typeof(string));
            }
    
            ObjectParameter pdatGenerateDateFromParameter;
    
            if (pdatGenerateDateFrom.HasValue)
            {
                pdatGenerateDateFromParameter = new ObjectParameter("pdatGenerateDateFrom", pdatGenerateDateFrom);
            }
            else
            {
                pdatGenerateDateFromParameter = new ObjectParameter("pdatGenerateDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pdatGenerateDateToParameter;
    
            if (pdatGenerateDateTo.HasValue)
            {
                pdatGenerateDateToParameter = new ObjectParameter("pdatGenerateDateTo", pdatGenerateDateTo);
            }
            else
            {
                pdatGenerateDateToParameter = new ObjectParameter("pdatGenerateDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pdatMonthParameter;
    
            if (pdatMonth.HasValue)
            {
                pdatMonthParameter = new ObjectParameter("pdatMonth", pdatMonth);
            }
            else
            {
                pdatMonthParameter = new ObjectParameter("pdatMonth", typeof(int));
            }
    
            ObjectParameter pdatYearParameter;
    
            if (pdatYear.HasValue)
            {
                pdatYearParameter = new ObjectParameter("pdatYear", pdatYear);
            }
            else
            {
                pdatYearParameter = new ObjectParameter("pdatYear", typeof(int));
            }
    
            ObjectParameter pchrContractOfficeCodeParameter;
    
            if (pchrContractOfficeCode != null)
            {
                pchrContractOfficeCodeParameter = new ObjectParameter("pchrContractOfficeCode", pchrContractOfficeCode);
            }
            else
            {
                pchrContractOfficeCodeParameter = new ObjectParameter("pchrContractOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrOperationOfficeCodeParameter;
    
            if (pchrOperationOfficeCode != null)
            {
                pchrOperationOfficeCodeParameter = new ObjectParameter("pchrOperationOfficeCode", pchrOperationOfficeCode);
            }
            else
            {
                pchrOperationOfficeCodeParameter = new ObjectParameter("pchrOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrBillingOfficeCodeParameter;
    
            if (pchrBillingOfficeCode != null)
            {
                pchrBillingOfficeCodeParameter = new ObjectParameter("pchrBillingOfficeCode", pchrBillingOfficeCode);
            }
            else
            {
                pchrBillingOfficeCodeParameter = new ObjectParameter("pchrBillingOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrIssueOfficeCodeParameter;
    
            if (pchrIssueOfficeCode != null)
            {
                pchrIssueOfficeCodeParameter = new ObjectParameter("pchrIssueOfficeCode", pchrIssueOfficeCode);
            }
            else
            {
                pchrIssueOfficeCodeParameter = new ObjectParameter("pchrIssueOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrDocumentNoParameter;
    
            if (pchrDocumentNo != null)
            {
                pchrDocumentNoParameter = new ObjectParameter("pchrDocumentNo", pchrDocumentNo);
            }
            else
            {
                pchrDocumentNoParameter = new ObjectParameter("pchrDocumentNo", typeof(string));
            }
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchrProjectCodeParameter;
    
            if (pchrProjectCode != null)
            {
                pchrProjectCodeParameter = new ObjectParameter("pchrProjectCode", pchrProjectCode);
            }
            else
            {
                pchrProjectCodeParameter = new ObjectParameter("pchrProjectCode", typeof(string));
            }
    
            ObjectParameter pchrContractCodeParameter;
    
            if (pchrContractCode != null)
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", pchrContractCode);
            }
            else
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", typeof(string));
            }
    
            ObjectParameter pchrOCCParameter;
    
            if (pchrOCC != null)
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", pchrOCC);
            }
            else
            {
                pchrOCCParameter = new ObjectParameter("pchrOCC", typeof(string));
            }
    
            ObjectParameter pchrBillingTargetCodeParameter;
    
            if (pchrBillingTargetCode != null)
            {
                pchrBillingTargetCodeParameter = new ObjectParameter("pchrBillingTargetCode", pchrBillingTargetCode);
            }
            else
            {
                pchrBillingTargetCodeParameter = new ObjectParameter("pchrBillingTargetCode", typeof(string));
            }
    
            ObjectParameter pchvInstrumentCodeParameter;
    
            if (pchvInstrumentCode != null)
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode);
            }
            else
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", typeof(string));
            }
    
            ObjectParameter pC_DOCUMENT_TYPE_CONTRACTParameter;
    
            if (pC_DOCUMENT_TYPE_CONTRACT != null)
            {
                pC_DOCUMENT_TYPE_CONTRACTParameter = new ObjectParameter("pC_DOCUMENT_TYPE_CONTRACT", pC_DOCUMENT_TYPE_CONTRACT);
            }
            else
            {
                pC_DOCUMENT_TYPE_CONTRACTParameter = new ObjectParameter("pC_DOCUMENT_TYPE_CONTRACT", typeof(string));
            }
    
            ObjectParameter pC_DOCUMENT_TYPE_MAParameter;
    
            if (pC_DOCUMENT_TYPE_MA != null)
            {
                pC_DOCUMENT_TYPE_MAParameter = new ObjectParameter("pC_DOCUMENT_TYPE_MA", pC_DOCUMENT_TYPE_MA);
            }
            else
            {
                pC_DOCUMENT_TYPE_MAParameter = new ObjectParameter("pC_DOCUMENT_TYPE_MA", typeof(string));
            }
    
            ObjectParameter pC_DOCUMENT_TYPE_INSTALLATIONParameter;
    
            if (pC_DOCUMENT_TYPE_INSTALLATION != null)
            {
                pC_DOCUMENT_TYPE_INSTALLATIONParameter = new ObjectParameter("pC_DOCUMENT_TYPE_INSTALLATION", pC_DOCUMENT_TYPE_INSTALLATION);
            }
            else
            {
                pC_DOCUMENT_TYPE_INSTALLATIONParameter = new ObjectParameter("pC_DOCUMENT_TYPE_INSTALLATION", typeof(string));
            }
    
            ObjectParameter pC_DOCUMENT_TYPE_INVENTORYParameter;
    
            if (pC_DOCUMENT_TYPE_INVENTORY != null)
            {
                pC_DOCUMENT_TYPE_INVENTORYParameter = new ObjectParameter("pC_DOCUMENT_TYPE_INVENTORY", pC_DOCUMENT_TYPE_INVENTORY);
            }
            else
            {
                pC_DOCUMENT_TYPE_INVENTORYParameter = new ObjectParameter("pC_DOCUMENT_TYPE_INVENTORY", typeof(string));
            }
    
            ObjectParameter pC_DOCUMENT_TYPE_INCOMEParameter;
    
            if (pC_DOCUMENT_TYPE_INCOME != null)
            {
                pC_DOCUMENT_TYPE_INCOMEParameter = new ObjectParameter("pC_DOCUMENT_TYPE_INCOME", pC_DOCUMENT_TYPE_INCOME);
            }
            else
            {
                pC_DOCUMENT_TYPE_INCOMEParameter = new ObjectParameter("pC_DOCUMENT_TYPE_INCOME", typeof(string));
            }
    
            ObjectParameter pOfficeCodeListParameter;
    
            if (pOfficeCodeList != null)
            {
                pOfficeCodeListParameter = new ObjectParameter("pOfficeCodeList", pOfficeCodeList);
            }
            else
            {
                pOfficeCodeListParameter = new ObjectParameter("pOfficeCodeList", typeof(string));
            }
    
            ObjectParameter pC_DOCUMENT_TYPE_COMMONParameter;
    
            if (pC_DOCUMENT_TYPE_COMMON != null)
            {
                pC_DOCUMENT_TYPE_COMMONParameter = new ObjectParameter("pC_DOCUMENT_TYPE_COMMON", pC_DOCUMENT_TYPE_COMMON);
            }
            else
            {
                pC_DOCUMENT_TYPE_COMMONParameter = new ObjectParameter("pC_DOCUMENT_TYPE_COMMON", typeof(string));
            }
    
            ObjectParameter pLocationCodeParameter;
    
            if (pLocationCode != null)
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", pLocationCode);
            }
            else
            {
                pLocationCodeParameter = new ObjectParameter("pLocationCode", typeof(string));
            }
            return base.ExecuteFunction<dtDocumentData>("GetDocumentDataList", pchvDocumentTypeParameter, pchvDocumentCodeParameter, pdatGenerateDateFromParameter, pdatGenerateDateToParameter, pdatMonthParameter, pdatYearParameter, pchrContractOfficeCodeParameter, pchrOperationOfficeCodeParameter, pchrBillingOfficeCodeParameter, pchrIssueOfficeCodeParameter, pchrDocumentNoParameter, pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pchrProjectCodeParameter, pchrContractCodeParameter, pchrOCCParameter, pchrBillingTargetCodeParameter, pchvInstrumentCodeParameter, pC_DOCUMENT_TYPE_CONTRACTParameter, pC_DOCUMENT_TYPE_MAParameter, pC_DOCUMENT_TYPE_INSTALLATIONParameter, pC_DOCUMENT_TYPE_INVENTORYParameter, pC_DOCUMENT_TYPE_INCOMEParameter, pOfficeCodeListParameter, pC_DOCUMENT_TYPE_COMMONParameter, pLocationCodeParameter);
        }
        public ObjectResult<Nullable<int>> UpdateSystemConfig(string configName, string configValue, string empNo, string pSuspendResumeSystemJobName)
        {
    
            ObjectParameter configNameParameter;
    
            if (configName != null)
            {
                configNameParameter = new ObjectParameter("ConfigName", configName);
            }
            else
            {
                configNameParameter = new ObjectParameter("ConfigName", typeof(string));
            }
    
            ObjectParameter configValueParameter;
    
            if (configValue != null)
            {
                configValueParameter = new ObjectParameter("ConfigValue", configValue);
            }
            else
            {
                configValueParameter = new ObjectParameter("ConfigValue", typeof(string));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
    
            ObjectParameter pSuspendResumeSystemJobNameParameter;
    
            if (pSuspendResumeSystemJobName != null)
            {
                pSuspendResumeSystemJobNameParameter = new ObjectParameter("pSuspendResumeSystemJobName", pSuspendResumeSystemJobName);
            }
            else
            {
                pSuspendResumeSystemJobNameParameter = new ObjectParameter("pSuspendResumeSystemJobName", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateSystemConfig", configNameParameter, configValueParameter, empNoParameter, pSuspendResumeSystemJobNameParameter);
        }
        public int WriteWindowLog(string eventType, string strMessage)
        {
    
            ObjectParameter eventTypeParameter;
    
            if (eventType != null)
            {
                eventTypeParameter = new ObjectParameter("EventType", eventType);
            }
            else
            {
                eventTypeParameter = new ObjectParameter("EventType", typeof(string));
            }
    
            ObjectParameter strMessageParameter;
    
            if (strMessage != null)
            {
                strMessageParameter = new ObjectParameter("strMessage", strMessage);
            }
            else
            {
                strMessageParameter = new ObjectParameter("strMessage", typeof(string));
            }
            return base.ExecuteFunction("WriteWindowLog", eventTypeParameter, strMessageParameter);
        }
        public int WriteErrorLog(string screenID, string desc, string detail, Nullable<System.DateTime> modifiedDate, string modifiedBy)
        {
    
            ObjectParameter screenIDParameter;
    
            if (screenID != null)
            {
                screenIDParameter = new ObjectParameter("ScreenID", screenID);
            }
            else
            {
                screenIDParameter = new ObjectParameter("ScreenID", typeof(string));
            }
    
            ObjectParameter descParameter;
    
            if (desc != null)
            {
                descParameter = new ObjectParameter("Desc", desc);
            }
            else
            {
                descParameter = new ObjectParameter("Desc", typeof(string));
            }
    
            ObjectParameter detailParameter;
    
            if (detail != null)
            {
                detailParameter = new ObjectParameter("Detail", detail);
            }
            else
            {
                detailParameter = new ObjectParameter("Detail", typeof(string));
            }
    
            ObjectParameter modifiedDateParameter;
    
            if (modifiedDate.HasValue)
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", modifiedDate);
            }
            else
            {
                modifiedDateParameter = new ObjectParameter("ModifiedDate", typeof(System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
    
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(string));
            }
            return base.ExecuteFunction("WriteErrorLog", screenIDParameter, descParameter, detailParameter, modifiedDateParameter, modifiedByParameter);
        }
        public int WriteDocumentDownloadLog(string pDocumentNo, string pDocumentCode, Nullable<System.DateTime> processDateTime, string empNo, string pDocumentOCC)
        {
    
            ObjectParameter pDocumentNoParameter;
    
            if (pDocumentNo != null)
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", pDocumentNo);
            }
            else
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", typeof(string));
            }
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
    
            ObjectParameter processDateTimeParameter;
    
            if (processDateTime.HasValue)
            {
                processDateTimeParameter = new ObjectParameter("ProcessDateTime", processDateTime);
            }
            else
            {
                processDateTimeParameter = new ObjectParameter("ProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
    
            ObjectParameter pDocumentOCCParameter;
    
            if (pDocumentOCC != null)
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", pDocumentOCC);
            }
            else
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", typeof(string));
            }
            return base.ExecuteFunction("WriteDocumentDownloadLog", pDocumentNoParameter, pDocumentCodeParameter, processDateTimeParameter, empNoParameter, pDocumentOCCParameter);
        }
        public ObjectResult<doMiscTypeCode> GetMiscTypeCodeList(string xml0)
        {
    
            ObjectParameter xml0Parameter;
    
            if (xml0 != null)
            {
                xml0Parameter = new ObjectParameter("xml0", xml0);
            }
            else
            {
                xml0Parameter = new ObjectParameter("xml0", typeof(string));
            }
            return base.ExecuteFunction<doMiscTypeCode>("GetMiscTypeCodeList", xml0Parameter);
        }
        public ObjectResult<tbm_DocumentTemplate> GetTbm_DocumentTemplate(string pchvDocumentType, Nullable<bool> bReportFlag)
        {
    
            ObjectParameter pchvDocumentTypeParameter;
    
            if (pchvDocumentType != null)
            {
                pchvDocumentTypeParameter = new ObjectParameter("pchvDocumentType", pchvDocumentType);
            }
            else
            {
                pchvDocumentTypeParameter = new ObjectParameter("pchvDocumentType", typeof(string));
            }
    
            ObjectParameter bReportFlagParameter;
    
            if (bReportFlag.HasValue)
            {
                bReportFlagParameter = new ObjectParameter("bReportFlag", bReportFlag);
            }
            else
            {
                bReportFlagParameter = new ObjectParameter("bReportFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbm_DocumentTemplate>("GetTbm_DocumentTemplate", pchvDocumentTypeParameter, bReportFlagParameter);
        }
        public ObjectResult<tbm_Supplier> GetTbm_SupplierCode()
        {
            return base.ExecuteFunction<tbm_Supplier>("GetTbm_SupplierCode");
        }
        public ObjectResult<doReportTemplatePath> GetReportTemplatePath(string documentCode)
        {
    
            ObjectParameter documentCodeParameter;
    
            if (documentCode != null)
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", documentCode);
            }
            else
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", typeof(string));
            }
            return base.ExecuteFunction<doReportTemplatePath>("GetReportTemplatePath", documentCodeParameter);
        }
        public ObjectResult<doRunningNo> GetNextRunningCode(string nameCode, Nullable<bool> isLockRow)
        {
    
            ObjectParameter nameCodeParameter;
    
            if (nameCode != null)
            {
                nameCodeParameter = new ObjectParameter("NameCode", nameCode);
            }
            else
            {
                nameCodeParameter = new ObjectParameter("NameCode", typeof(string));
            }
    
            ObjectParameter isLockRowParameter;
    
            if (isLockRow.HasValue)
            {
                isLockRowParameter = new ObjectParameter("IsLockRow", isLockRow);
            }
            else
            {
                isLockRowParameter = new ObjectParameter("IsLockRow", typeof(bool));
            }
            return base.ExecuteFunction<doRunningNo>("GetNextRunningCode", nameCodeParameter, isLockRowParameter);
        }
        public ObjectResult<doSystemConfig> GetSystemConfig(string configName)
        {
    
            ObjectParameter configNameParameter;
    
            if (configName != null)
            {
                configNameParameter = new ObjectParameter("ConfigName", configName);
            }
            else
            {
                configNameParameter = new ObjectParameter("ConfigName", typeof(string));
            }
            return base.ExecuteFunction<doSystemConfig>("GetSystemConfig", configNameParameter);
        }
        public ObjectResult<dtDocumentList> InsertDocumentList(string documentNo, string documentOCC, string documentCode, string contractCode, string oCC, string quotationTargetCode, string alphabet, string projectCode, string billingTargetCode, string instrumentCode, string contractOfficeCode, string operationOfficeCode, string billingOfficeCode, string issueOfficeCode, Nullable<System.DateTime> generateDate, Nullable<int> reportMonth, Nullable<int> reportYear, string filePath, Nullable<int> downloadCount, Nullable<int> managementNo, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string locationCode, Nullable<int> minManagementNo, Nullable<int> maxManagementNo)
        {
    
            ObjectParameter documentNoParameter;
    
            if (documentNo != null)
            {
                documentNoParameter = new ObjectParameter("DocumentNo", documentNo);
            }
            else
            {
                documentNoParameter = new ObjectParameter("DocumentNo", typeof(string));
            }
    
            ObjectParameter documentOCCParameter;
    
            if (documentOCC != null)
            {
                documentOCCParameter = new ObjectParameter("DocumentOCC", documentOCC);
            }
            else
            {
                documentOCCParameter = new ObjectParameter("DocumentOCC", typeof(string));
            }
    
            ObjectParameter documentCodeParameter;
    
            if (documentCode != null)
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", documentCode);
            }
            else
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", typeof(string));
            }
    
            ObjectParameter billingTargetCodeParameter;
    
            if (billingTargetCode != null)
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", billingTargetCode);
            }
            else
            {
                billingTargetCodeParameter = new ObjectParameter("BillingTargetCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter contractOfficeCodeParameter;
    
            if (contractOfficeCode != null)
            {
                contractOfficeCodeParameter = new ObjectParameter("ContractOfficeCode", contractOfficeCode);
            }
            else
            {
                contractOfficeCodeParameter = new ObjectParameter("ContractOfficeCode", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
    
            ObjectParameter billingOfficeCodeParameter;
    
            if (billingOfficeCode != null)
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", billingOfficeCode);
            }
            else
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", typeof(string));
            }
    
            ObjectParameter issueOfficeCodeParameter;
    
            if (issueOfficeCode != null)
            {
                issueOfficeCodeParameter = new ObjectParameter("IssueOfficeCode", issueOfficeCode);
            }
            else
            {
                issueOfficeCodeParameter = new ObjectParameter("IssueOfficeCode", typeof(string));
            }
    
            ObjectParameter generateDateParameter;
    
            if (generateDate.HasValue)
            {
                generateDateParameter = new ObjectParameter("GenerateDate", generateDate);
            }
            else
            {
                generateDateParameter = new ObjectParameter("GenerateDate", typeof(System.DateTime));
            }
    
            ObjectParameter reportMonthParameter;
    
            if (reportMonth.HasValue)
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", reportMonth);
            }
            else
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", typeof(int));
            }
    
            ObjectParameter reportYearParameter;
    
            if (reportYear.HasValue)
            {
                reportYearParameter = new ObjectParameter("ReportYear", reportYear);
            }
            else
            {
                reportYearParameter = new ObjectParameter("ReportYear", typeof(int));
            }
    
            ObjectParameter filePathParameter;
    
            if (filePath != null)
            {
                filePathParameter = new ObjectParameter("FilePath", filePath);
            }
            else
            {
                filePathParameter = new ObjectParameter("FilePath", typeof(string));
            }
    
            ObjectParameter downloadCountParameter;
    
            if (downloadCount.HasValue)
            {
                downloadCountParameter = new ObjectParameter("DownloadCount", downloadCount);
            }
            else
            {
                downloadCountParameter = new ObjectParameter("DownloadCount", typeof(int));
            }
    
            ObjectParameter managementNoParameter;
    
            if (managementNo.HasValue)
            {
                managementNoParameter = new ObjectParameter("ManagementNo", managementNo);
            }
            else
            {
                managementNoParameter = new ObjectParameter("ManagementNo", typeof(int));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter locationCodeParameter;
    
            if (locationCode != null)
            {
                locationCodeParameter = new ObjectParameter("LocationCode", locationCode);
            }
            else
            {
                locationCodeParameter = new ObjectParameter("LocationCode", typeof(string));
            }
    
            ObjectParameter minManagementNoParameter;
    
            if (minManagementNo.HasValue)
            {
                minManagementNoParameter = new ObjectParameter("MinManagementNo", minManagementNo);
            }
            else
            {
                minManagementNoParameter = new ObjectParameter("MinManagementNo", typeof(int));
            }
    
            ObjectParameter maxManagementNoParameter;
    
            if (maxManagementNo.HasValue)
            {
                maxManagementNoParameter = new ObjectParameter("MaxManagementNo", maxManagementNo);
            }
            else
            {
                maxManagementNoParameter = new ObjectParameter("MaxManagementNo", typeof(int));
            }
            return base.ExecuteFunction<dtDocumentList>("InsertDocumentList", documentNoParameter, documentOCCParameter, documentCodeParameter, contractCodeParameter, oCCParameter, quotationTargetCodeParameter, alphabetParameter, projectCodeParameter, billingTargetCodeParameter, instrumentCodeParameter, contractOfficeCodeParameter, operationOfficeCodeParameter, billingOfficeCodeParameter, issueOfficeCodeParameter, generateDateParameter, reportMonthParameter, reportYearParameter, filePathParameter, downloadCountParameter, managementNoParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, locationCodeParameter, minManagementNoParameter, maxManagementNoParameter);
        }
        public ObjectResult<doDocumentNoName> GetDocumentNoNameByDocumentCode(string pchrDocumentCode)
        {
    
            ObjectParameter pchrDocumentCodeParameter;
    
            if (pchrDocumentCode != null)
            {
                pchrDocumentCodeParameter = new ObjectParameter("pchrDocumentCode", pchrDocumentCode);
            }
            else
            {
                pchrDocumentCodeParameter = new ObjectParameter("pchrDocumentCode", typeof(string));
            }
            return base.ExecuteFunction<doDocumentNoName>("GetDocumentNoNameByDocumentCode", pchrDocumentCodeParameter);
        }
        public ObjectResult<doOperationType> GetOperationTypeList(string pcharC_OPERATION_TYPE)
        {
    
            ObjectParameter pcharC_OPERATION_TYPEParameter;
    
            if (pcharC_OPERATION_TYPE != null)
            {
                pcharC_OPERATION_TYPEParameter = new ObjectParameter("pcharC_OPERATION_TYPE", pcharC_OPERATION_TYPE);
            }
            else
            {
                pcharC_OPERATION_TYPEParameter = new ObjectParameter("pcharC_OPERATION_TYPE", typeof(string));
            }
            return base.ExecuteFunction<doOperationType>("GetOperationTypeList", pcharC_OPERATION_TYPEParameter);
        }
        public ObjectResult<dtBatchProcess> GetBatchProcessDataList(string pC_CONFIG_SUSPEND_FLAG, string pC_BATCH_STATUS, string pC_BATCH_LAST_RESULT, string pC_BATCH_STATUS_PROCESSING, Nullable<bool> pC_FLAG_ON, Nullable<bool> pC_FLAG_OFF)
        {
    
            ObjectParameter pC_CONFIG_SUSPEND_FLAGParameter;
    
            if (pC_CONFIG_SUSPEND_FLAG != null)
            {
                pC_CONFIG_SUSPEND_FLAGParameter = new ObjectParameter("pC_CONFIG_SUSPEND_FLAG", pC_CONFIG_SUSPEND_FLAG);
            }
            else
            {
                pC_CONFIG_SUSPEND_FLAGParameter = new ObjectParameter("pC_CONFIG_SUSPEND_FLAG", typeof(string));
            }
    
            ObjectParameter pC_BATCH_STATUSParameter;
    
            if (pC_BATCH_STATUS != null)
            {
                pC_BATCH_STATUSParameter = new ObjectParameter("pC_BATCH_STATUS", pC_BATCH_STATUS);
            }
            else
            {
                pC_BATCH_STATUSParameter = new ObjectParameter("pC_BATCH_STATUS", typeof(string));
            }
    
            ObjectParameter pC_BATCH_LAST_RESULTParameter;
    
            if (pC_BATCH_LAST_RESULT != null)
            {
                pC_BATCH_LAST_RESULTParameter = new ObjectParameter("pC_BATCH_LAST_RESULT", pC_BATCH_LAST_RESULT);
            }
            else
            {
                pC_BATCH_LAST_RESULTParameter = new ObjectParameter("pC_BATCH_LAST_RESULT", typeof(string));
            }
    
            ObjectParameter pC_BATCH_STATUS_PROCESSINGParameter;
    
            if (pC_BATCH_STATUS_PROCESSING != null)
            {
                pC_BATCH_STATUS_PROCESSINGParameter = new ObjectParameter("pC_BATCH_STATUS_PROCESSING", pC_BATCH_STATUS_PROCESSING);
            }
            else
            {
                pC_BATCH_STATUS_PROCESSINGParameter = new ObjectParameter("pC_BATCH_STATUS_PROCESSING", typeof(string));
            }
    
            ObjectParameter pC_FLAG_ONParameter;
    
            if (pC_FLAG_ON.HasValue)
            {
                pC_FLAG_ONParameter = new ObjectParameter("pC_FLAG_ON", pC_FLAG_ON);
            }
            else
            {
                pC_FLAG_ONParameter = new ObjectParameter("pC_FLAG_ON", typeof(bool));
            }
    
            ObjectParameter pC_FLAG_OFFParameter;
    
            if (pC_FLAG_OFF.HasValue)
            {
                pC_FLAG_OFFParameter = new ObjectParameter("pC_FLAG_OFF", pC_FLAG_OFF);
            }
            else
            {
                pC_FLAG_OFFParameter = new ObjectParameter("pC_FLAG_OFF", typeof(bool));
            }
            return base.ExecuteFunction<dtBatchProcess>("GetBatchProcessDataList", pC_CONFIG_SUSPEND_FLAGParameter, pC_BATCH_STATUSParameter, pC_BATCH_LAST_RESULTParameter, pC_BATCH_STATUS_PROCESSINGParameter, pC_FLAG_ONParameter, pC_FLAG_OFFParameter);
        }
        public ObjectResult<Nullable<int>> RunBatch(string pBatchCode, string pBatchName, string pBatchDescription, string pBatchLastResult, string pBatchStatus, Nullable<int> pTotal, Nullable<int> pComplete, Nullable<int> pFailed, string pBatchJobName, Nullable<System.DateTime> pBatchDate, string pBatchUser, string pC_BATCH_STATUS_FAILED, string pC_BATCH_STATUS_PROCESSING, string pC_BATCH_STATUS_SUCCEEDED, string pC_EVENT_TYPE_INFORMATION, string pC_LOG_NIGHT_BATCH_ERROR)
        {
    
            ObjectParameter pBatchCodeParameter;
    
            if (pBatchCode != null)
            {
                pBatchCodeParameter = new ObjectParameter("pBatchCode", pBatchCode);
            }
            else
            {
                pBatchCodeParameter = new ObjectParameter("pBatchCode", typeof(string));
            }
    
            ObjectParameter pBatchNameParameter;
    
            if (pBatchName != null)
            {
                pBatchNameParameter = new ObjectParameter("pBatchName", pBatchName);
            }
            else
            {
                pBatchNameParameter = new ObjectParameter("pBatchName", typeof(string));
            }
    
            ObjectParameter pBatchDescriptionParameter;
    
            if (pBatchDescription != null)
            {
                pBatchDescriptionParameter = new ObjectParameter("pBatchDescription", pBatchDescription);
            }
            else
            {
                pBatchDescriptionParameter = new ObjectParameter("pBatchDescription", typeof(string));
            }
    
            ObjectParameter pBatchLastResultParameter;
    
            if (pBatchLastResult != null)
            {
                pBatchLastResultParameter = new ObjectParameter("pBatchLastResult", pBatchLastResult);
            }
            else
            {
                pBatchLastResultParameter = new ObjectParameter("pBatchLastResult", typeof(string));
            }
    
            ObjectParameter pBatchStatusParameter;
    
            if (pBatchStatus != null)
            {
                pBatchStatusParameter = new ObjectParameter("pBatchStatus", pBatchStatus);
            }
            else
            {
                pBatchStatusParameter = new ObjectParameter("pBatchStatus", typeof(string));
            }
    
            ObjectParameter pTotalParameter;
    
            if (pTotal.HasValue)
            {
                pTotalParameter = new ObjectParameter("pTotal", pTotal);
            }
            else
            {
                pTotalParameter = new ObjectParameter("pTotal", typeof(int));
            }
    
            ObjectParameter pCompleteParameter;
    
            if (pComplete.HasValue)
            {
                pCompleteParameter = new ObjectParameter("pComplete", pComplete);
            }
            else
            {
                pCompleteParameter = new ObjectParameter("pComplete", typeof(int));
            }
    
            ObjectParameter pFailedParameter;
    
            if (pFailed.HasValue)
            {
                pFailedParameter = new ObjectParameter("pFailed", pFailed);
            }
            else
            {
                pFailedParameter = new ObjectParameter("pFailed", typeof(int));
            }
    
            ObjectParameter pBatchJobNameParameter;
    
            if (pBatchJobName != null)
            {
                pBatchJobNameParameter = new ObjectParameter("pBatchJobName", pBatchJobName);
            }
            else
            {
                pBatchJobNameParameter = new ObjectParameter("pBatchJobName", typeof(string));
            }
    
            ObjectParameter pBatchDateParameter;
    
            if (pBatchDate.HasValue)
            {
                pBatchDateParameter = new ObjectParameter("pBatchDate", pBatchDate);
            }
            else
            {
                pBatchDateParameter = new ObjectParameter("pBatchDate", typeof(System.DateTime));
            }
    
            ObjectParameter pBatchUserParameter;
    
            if (pBatchUser != null)
            {
                pBatchUserParameter = new ObjectParameter("pBatchUser", pBatchUser);
            }
            else
            {
                pBatchUserParameter = new ObjectParameter("pBatchUser", typeof(string));
            }
    
            ObjectParameter pC_BATCH_STATUS_FAILEDParameter;
    
            if (pC_BATCH_STATUS_FAILED != null)
            {
                pC_BATCH_STATUS_FAILEDParameter = new ObjectParameter("pC_BATCH_STATUS_FAILED", pC_BATCH_STATUS_FAILED);
            }
            else
            {
                pC_BATCH_STATUS_FAILEDParameter = new ObjectParameter("pC_BATCH_STATUS_FAILED", typeof(string));
            }
    
            ObjectParameter pC_BATCH_STATUS_PROCESSINGParameter;
    
            if (pC_BATCH_STATUS_PROCESSING != null)
            {
                pC_BATCH_STATUS_PROCESSINGParameter = new ObjectParameter("pC_BATCH_STATUS_PROCESSING", pC_BATCH_STATUS_PROCESSING);
            }
            else
            {
                pC_BATCH_STATUS_PROCESSINGParameter = new ObjectParameter("pC_BATCH_STATUS_PROCESSING", typeof(string));
            }
    
            ObjectParameter pC_BATCH_STATUS_SUCCEEDEDParameter;
    
            if (pC_BATCH_STATUS_SUCCEEDED != null)
            {
                pC_BATCH_STATUS_SUCCEEDEDParameter = new ObjectParameter("pC_BATCH_STATUS_SUCCEEDED", pC_BATCH_STATUS_SUCCEEDED);
            }
            else
            {
                pC_BATCH_STATUS_SUCCEEDEDParameter = new ObjectParameter("pC_BATCH_STATUS_SUCCEEDED", typeof(string));
            }
    
            ObjectParameter pC_EVENT_TYPE_INFORMATIONParameter;
    
            if (pC_EVENT_TYPE_INFORMATION != null)
            {
                pC_EVENT_TYPE_INFORMATIONParameter = new ObjectParameter("pC_EVENT_TYPE_INFORMATION", pC_EVENT_TYPE_INFORMATION);
            }
            else
            {
                pC_EVENT_TYPE_INFORMATIONParameter = new ObjectParameter("pC_EVENT_TYPE_INFORMATION", typeof(string));
            }
    
            ObjectParameter pC_LOG_NIGHT_BATCH_ERRORParameter;
    
            if (pC_LOG_NIGHT_BATCH_ERROR != null)
            {
                pC_LOG_NIGHT_BATCH_ERRORParameter = new ObjectParameter("pC_LOG_NIGHT_BATCH_ERROR", pC_LOG_NIGHT_BATCH_ERROR);
            }
            else
            {
                pC_LOG_NIGHT_BATCH_ERRORParameter = new ObjectParameter("pC_LOG_NIGHT_BATCH_ERROR", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("RunBatch", pBatchCodeParameter, pBatchNameParameter, pBatchDescriptionParameter, pBatchLastResultParameter, pBatchStatusParameter, pTotalParameter, pCompleteParameter, pFailedParameter, pBatchJobNameParameter, pBatchDateParameter, pBatchUserParameter, pC_BATCH_STATUS_FAILEDParameter, pC_BATCH_STATUS_PROCESSINGParameter, pC_BATCH_STATUS_SUCCEEDEDParameter, pC_EVENT_TYPE_INFORMATIONParameter, pC_LOG_NIGHT_BATCH_ERRORParameter);
        }
        public ObjectResult<string> IsSystemSuspending(string pcharC_CONFIG_SUSPEND_FLAG)
        {
    
            ObjectParameter pcharC_CONFIG_SUSPEND_FLAGParameter;
    
            if (pcharC_CONFIG_SUSPEND_FLAG != null)
            {
                pcharC_CONFIG_SUSPEND_FLAGParameter = new ObjectParameter("pcharC_CONFIG_SUSPEND_FLAG", pcharC_CONFIG_SUSPEND_FLAG);
            }
            else
            {
                pcharC_CONFIG_SUSPEND_FLAGParameter = new ObjectParameter("pcharC_CONFIG_SUSPEND_FLAG", typeof(string));
            }
            return base.ExecuteFunction<string>("IsSystemSuspending", pcharC_CONFIG_SUSPEND_FLAGParameter);
        }
        public ObjectResult<Nullable<int>> KeepHistory_ef(string pchrEmpNo, string pchrLogType)
        {
    
            ObjectParameter pchrEmpNoParameter;
    
            if (pchrEmpNo != null)
            {
                pchrEmpNoParameter = new ObjectParameter("pchrEmpNo", pchrEmpNo);
            }
            else
            {
                pchrEmpNoParameter = new ObjectParameter("pchrEmpNo", typeof(string));
            }
    
            ObjectParameter pchrLogTypeParameter;
    
            if (pchrLogType != null)
            {
                pchrLogTypeParameter = new ObjectParameter("pchrLogType", pchrLogType);
            }
            else
            {
                pchrLogTypeParameter = new ObjectParameter("pchrLogType", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("KeepHistory_ef", pchrEmpNoParameter, pchrLogTypeParameter);
        }
        public ObjectResult<dtMonthYear> GetLogMonthYear()
        {
            return base.ExecuteFunction<dtMonthYear>("GetLogMonthYear");
        }
        public ObjectResult<doMisPurge> GetMisPurge(string purgeStatus)
        {
    
            ObjectParameter purgeStatusParameter;
    
            if (purgeStatus != null)
            {
                purgeStatusParameter = new ObjectParameter("PurgeStatus", purgeStatus);
            }
            else
            {
                purgeStatusParameter = new ObjectParameter("PurgeStatus", typeof(string));
            }
            return base.ExecuteFunction<doMisPurge>("GetMisPurge", purgeStatusParameter);
        }
        public ObjectResult<dtTPL> GetTbt_Purgelog(Nullable<System.DateTime> pPurgeMonthYear)
        {
    
            ObjectParameter pPurgeMonthYearParameter;
    
            if (pPurgeMonthYear.HasValue)
            {
                pPurgeMonthYearParameter = new ObjectParameter("pPurgeMonthYear", pPurgeMonthYear);
            }
            else
            {
                pPurgeMonthYearParameter = new ObjectParameter("pPurgeMonthYear", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtTPL>("GetTbt_Purgelog", pPurgeMonthYearParameter);
        }
        public ObjectResult<dtUserPermission> RefreshPermissionData(string pEmpNo, string xml_dtBelonging)
        {
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter xml_dtBelongingParameter;
    
            if (xml_dtBelonging != null)
            {
                xml_dtBelongingParameter = new ObjectParameter("xml_dtBelonging", xml_dtBelonging);
            }
            else
            {
                xml_dtBelongingParameter = new ObjectParameter("xml_dtBelonging", typeof(string));
            }
            return base.ExecuteFunction<dtUserPermission>("RefreshPermissionData", pEmpNoParameter, xml_dtBelongingParameter);
        }
        public ObjectResult<dtDocumentNameDataList> GetDocumentNameDataList(string pchvDocumentType, string pObjectIDList)
        {
    
            ObjectParameter pchvDocumentTypeParameter;
    
            if (pchvDocumentType != null)
            {
                pchvDocumentTypeParameter = new ObjectParameter("pchvDocumentType", pchvDocumentType);
            }
            else
            {
                pchvDocumentTypeParameter = new ObjectParameter("pchvDocumentType", typeof(string));
            }
    
            ObjectParameter pObjectIDListParameter;
    
            if (pObjectIDList != null)
            {
                pObjectIDListParameter = new ObjectParameter("pObjectIDList", pObjectIDList);
            }
            else
            {
                pObjectIDListParameter = new ObjectParameter("pObjectIDList", typeof(string));
            }
            return base.ExecuteFunction<dtDocumentNameDataList>("GetDocumentNameDataList", pchvDocumentTypeParameter, pObjectIDListParameter);
        }
        public ObjectResult<doEmpCodeName> GetEmpCodeName()
        {
            return base.ExecuteFunction<doEmpCodeName>("GetEmpCodeName");
        }
        public int DeleteAttachFileByID(Nullable<int> attachFileID)
        {
    
            ObjectParameter attachFileIDParameter;
    
            if (attachFileID.HasValue)
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", attachFileID);
            }
            else
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", typeof(int));
            }
            return base.ExecuteFunction("DeleteAttachFileByID", attachFileIDParameter);
        }
        public int DeleteAttachFileByRelatedID(string relatedID)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
            return base.ExecuteFunction("DeleteAttachFileByRelatedID", relatedIDParameter);
        }
        public ObjectResult<tbt_AttachFile> GetAttachFile(string relatedID)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
            return base.ExecuteFunction<tbt_AttachFile>("GetAttachFile", relatedIDParameter);
        }
        public ObjectResult<tbt_AttachFile> InsertAttachFile(string relatedID, string fileName, string fileType, Nullable<int> fileSize, string filePath, Nullable<bool> uploadCompleteFlag, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
    
            ObjectParameter fileNameParameter;
    
            if (fileName != null)
            {
                fileNameParameter = new ObjectParameter("FileName", fileName);
            }
            else
            {
                fileNameParameter = new ObjectParameter("FileName", typeof(string));
            }
    
            ObjectParameter fileTypeParameter;
    
            if (fileType != null)
            {
                fileTypeParameter = new ObjectParameter("FileType", fileType);
            }
            else
            {
                fileTypeParameter = new ObjectParameter("FileType", typeof(string));
            }
    
            ObjectParameter fileSizeParameter;
    
            if (fileSize.HasValue)
            {
                fileSizeParameter = new ObjectParameter("FileSize", fileSize);
            }
            else
            {
                fileSizeParameter = new ObjectParameter("FileSize", typeof(int));
            }
    
            ObjectParameter filePathParameter;
    
            if (filePath != null)
            {
                filePathParameter = new ObjectParameter("FilePath", filePath);
            }
            else
            {
                filePathParameter = new ObjectParameter("FilePath", typeof(string));
            }
    
            ObjectParameter uploadCompleteFlagParameter;
    
            if (uploadCompleteFlag.HasValue)
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag);
            }
            else
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", typeof(bool));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_AttachFile>("InsertAttachFile", relatedIDParameter, fileNameParameter, fileTypeParameter, fileSizeParameter, filePathParameter, uploadCompleteFlagParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<dtTotalAttachFileSize> GetTotalAttachFileSize(string relatedID)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
            return base.ExecuteFunction<dtTotalAttachFileSize>("GetTotalAttachFileSize", relatedIDParameter);
        }
        public int UpdateFlagAttachFile(string relatedID, string newRelatedID, string newFileName, string filePath, Nullable<int> attachFileID)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
    
            ObjectParameter newRelatedIDParameter;
    
            if (newRelatedID != null)
            {
                newRelatedIDParameter = new ObjectParameter("NewRelatedID", newRelatedID);
            }
            else
            {
                newRelatedIDParameter = new ObjectParameter("NewRelatedID", typeof(string));
            }
    
            ObjectParameter newFileNameParameter;
    
            if (newFileName != null)
            {
                newFileNameParameter = new ObjectParameter("NewFileName", newFileName);
            }
            else
            {
                newFileNameParameter = new ObjectParameter("NewFileName", typeof(string));
            }
    
            ObjectParameter filePathParameter;
    
            if (filePath != null)
            {
                filePathParameter = new ObjectParameter("FilePath", filePath);
            }
            else
            {
                filePathParameter = new ObjectParameter("FilePath", typeof(string));
            }
    
            ObjectParameter attachFileIDParameter;
    
            if (attachFileID.HasValue)
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", attachFileID);
            }
            else
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", typeof(int));
            }
            return base.ExecuteFunction("UpdateFlagAttachFile", relatedIDParameter, newRelatedIDParameter, newFileNameParameter, filePathParameter, attachFileIDParameter);
        }
        public ObjectResult<tbt_DocumentReports> GetDocumentReportsList(string pDocumentNo, string pDocumentOCC, string pDocumentCode)
        {
    
            ObjectParameter pDocumentNoParameter;
    
            if (pDocumentNo != null)
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", pDocumentNo);
            }
            else
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", typeof(string));
            }
    
            ObjectParameter pDocumentOCCParameter;
    
            if (pDocumentOCC != null)
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", pDocumentOCC);
            }
            else
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", typeof(string));
            }
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocumentReports>("GetDocumentReportsList", pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter);
        }
        public ObjectResult<tbt_DocumentReports> InsertDocumentReports(string pDocumentNo, string pDocumentOCC, string pDocumentCode, byte[] pFileBinary, Nullable<System.DateTime> pCreateDate, string pCreateBy)
        {
    
            ObjectParameter pDocumentNoParameter;
    
            if (pDocumentNo != null)
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", pDocumentNo);
            }
            else
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", typeof(string));
            }
    
            ObjectParameter pDocumentOCCParameter;
    
            if (pDocumentOCC != null)
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", pDocumentOCC);
            }
            else
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", typeof(string));
            }
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
    
            ObjectParameter pFileBinaryParameter;
    
            if (pFileBinary != null)
            {
                pFileBinaryParameter = new ObjectParameter("pFileBinary", pFileBinary);
            }
            else
            {
                pFileBinaryParameter = new ObjectParameter("pFileBinary", typeof(byte[]));
            }
    
            ObjectParameter pCreateDateParameter;
    
            if (pCreateDate.HasValue)
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", pCreateDate);
            }
            else
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCreateByParameter;
    
            if (pCreateBy != null)
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", pCreateBy);
            }
            else
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocumentReports>("InsertDocumentReports", pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter, pFileBinaryParameter, pCreateDateParameter, pCreateByParameter);
        }
        public ObjectResult<Nullable<int>> IsExistReport(string pDocumentNo, string pDocumentOCC, string pDocumentCode)
        {
    
            ObjectParameter pDocumentNoParameter;
    
            if (pDocumentNo != null)
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", pDocumentNo);
            }
            else
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", typeof(string));
            }
    
            ObjectParameter pDocumentOCCParameter;
    
            if (pDocumentOCC != null)
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", pDocumentOCC);
            }
            else
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", typeof(string));
            }
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("IsExistReport", pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter);
        }
        public int RunBatchAll(string pEmpNo, Nullable<System.DateTime> pBatchDate)
        {
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter pBatchDateParameter;
    
            if (pBatchDate.HasValue)
            {
                pBatchDateParameter = new ObjectParameter("pBatchDate", pBatchDate);
            }
            else
            {
                pBatchDateParameter = new ObjectParameter("pBatchDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction("RunBatchAll", pEmpNoParameter, pBatchDateParameter);
        }
        public int RemoveAttachFile(Nullable<int> attachFileId, string relateId, Nullable<bool> uploadCompleteFlag)
        {
    
            ObjectParameter attachFileIdParameter;
    
            if (attachFileId.HasValue)
            {
                attachFileIdParameter = new ObjectParameter("AttachFileId", attachFileId);
            }
            else
            {
                attachFileIdParameter = new ObjectParameter("AttachFileId", typeof(int));
            }
    
            ObjectParameter relateIdParameter;
    
            if (relateId != null)
            {
                relateIdParameter = new ObjectParameter("RelateId", relateId);
            }
            else
            {
                relateIdParameter = new ObjectParameter("RelateId", typeof(string));
            }
    
            ObjectParameter uploadCompleteFlagParameter;
    
            if (uploadCompleteFlag.HasValue)
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag);
            }
            else
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", typeof(bool));
            }
            return base.ExecuteFunction("RemoveAttachFile", attachFileIdParameter, relateIdParameter, uploadCompleteFlagParameter);
        }
        public ObjectResult<dtAttachFileNameID> GetAttachFileName(string relatedID, Nullable<int> attachFileID, Nullable<bool> uploadCompleteFlag)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
    
            ObjectParameter attachFileIDParameter;
    
            if (attachFileID.HasValue)
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", attachFileID);
            }
            else
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", typeof(int));
            }
    
            ObjectParameter uploadCompleteFlagParameter;
    
            if (uploadCompleteFlag.HasValue)
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag);
            }
            else
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", typeof(bool));
            }
            return base.ExecuteFunction<dtAttachFileNameID>("GetAttachFileName", relatedIDParameter, attachFileIDParameter, uploadCompleteFlagParameter);
        }
        public ObjectResult<tbt_AttachFile> GetTbt_AttachFile(string relatedID, Nullable<int> attachFileID, Nullable<bool> uploadCompleteFlag)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
    
            ObjectParameter attachFileIDParameter;
    
            if (attachFileID.HasValue)
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", attachFileID);
            }
            else
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", typeof(int));
            }
    
            ObjectParameter uploadCompleteFlagParameter;
    
            if (uploadCompleteFlag.HasValue)
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag);
            }
            else
            {
                uploadCompleteFlagParameter = new ObjectParameter("UploadCompleteFlag", typeof(bool));
            }
            return base.ExecuteFunction<tbt_AttachFile>("GetTbt_AttachFile", relatedIDParameter, attachFileIDParameter, uploadCompleteFlagParameter);
        }
        public int GetTbt_EmailTemplate(string strEmailTemplateName)
        {
    
            ObjectParameter strEmailTemplateNameParameter;
    
            if (strEmailTemplateName != null)
            {
                strEmailTemplateNameParameter = new ObjectParameter("strEmailTemplateName", strEmailTemplateName);
            }
            else
            {
                strEmailTemplateNameParameter = new ObjectParameter("strEmailTemplateName", typeof(string));
            }
            return base.ExecuteFunction("GetTbt_EmailTemplate", strEmailTemplateNameParameter);
        }
        public ObjectResult<tbt_DocumentList> GetTbt_DocumentList(string pDocumentNo, string pDocumentCode, string pDocumentOCC)
        {
    
            ObjectParameter pDocumentNoParameter;
    
            if (pDocumentNo != null)
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", pDocumentNo);
            }
            else
            {
                pDocumentNoParameter = new ObjectParameter("pDocumentNo", typeof(string));
            }
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
    
            ObjectParameter pDocumentOCCParameter;
    
            if (pDocumentOCC != null)
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", pDocumentOCC);
            }
            else
            {
                pDocumentOCCParameter = new ObjectParameter("pDocumentOCC", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocumentList>("GetTbt_DocumentList", pDocumentNoParameter, pDocumentCodeParameter, pDocumentOCCParameter);
        }
        public ObjectResult<tbt_AttachFile> CopyAttachFile(string relatedID, string newRelatedID, string module)
        {
    
            ObjectParameter relatedIDParameter;
    
            if (relatedID != null)
            {
                relatedIDParameter = new ObjectParameter("RelatedID", relatedID);
            }
            else
            {
                relatedIDParameter = new ObjectParameter("RelatedID", typeof(string));
            }
    
            ObjectParameter newRelatedIDParameter;
    
            if (newRelatedID != null)
            {
                newRelatedIDParameter = new ObjectParameter("NewRelatedID", newRelatedID);
            }
            else
            {
                newRelatedIDParameter = new ObjectParameter("NewRelatedID", typeof(string));
            }
    
            ObjectParameter moduleParameter;
    
            if (module != null)
            {
                moduleParameter = new ObjectParameter("Module", module);
            }
            else
            {
                moduleParameter = new ObjectParameter("Module", typeof(string));
            }
            return base.ExecuteFunction<tbt_AttachFile>("CopyAttachFile", relatedIDParameter, newRelatedIDParameter, moduleParameter);
        }
        public ObjectResult<tbm_DocumentTemplate> GetDocumentTemplateByDocumentCode(string pDocumentCode)
        {
    
            ObjectParameter pDocumentCodeParameter;
    
            if (pDocumentCode != null)
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", pDocumentCode);
            }
            else
            {
                pDocumentCodeParameter = new ObjectParameter("pDocumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbm_DocumentTemplate>("GetDocumentTemplateByDocumentCode", pDocumentCodeParameter);
        }
        public ObjectResult<dtAttachFileTemporary> InsertTbt_AttachFileTemporary(Nullable<int> pAttachFileID, string pRelatedID, string pFileName, string pFileType, Nullable<int> pFileSize, string pFilePath, Nullable<bool> pUploadCompleteFlag, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, string pSessionID)
        {
    
            ObjectParameter pAttachFileIDParameter;
    
            if (pAttachFileID.HasValue)
            {
                pAttachFileIDParameter = new ObjectParameter("pAttachFileID", pAttachFileID);
            }
            else
            {
                pAttachFileIDParameter = new ObjectParameter("pAttachFileID", typeof(int));
            }
    
            ObjectParameter pRelatedIDParameter;
    
            if (pRelatedID != null)
            {
                pRelatedIDParameter = new ObjectParameter("pRelatedID", pRelatedID);
            }
            else
            {
                pRelatedIDParameter = new ObjectParameter("pRelatedID", typeof(string));
            }
    
            ObjectParameter pFileNameParameter;
    
            if (pFileName != null)
            {
                pFileNameParameter = new ObjectParameter("pFileName", pFileName);
            }
            else
            {
                pFileNameParameter = new ObjectParameter("pFileName", typeof(string));
            }
    
            ObjectParameter pFileTypeParameter;
    
            if (pFileType != null)
            {
                pFileTypeParameter = new ObjectParameter("pFileType", pFileType);
            }
            else
            {
                pFileTypeParameter = new ObjectParameter("pFileType", typeof(string));
            }
    
            ObjectParameter pFileSizeParameter;
    
            if (pFileSize.HasValue)
            {
                pFileSizeParameter = new ObjectParameter("pFileSize", pFileSize);
            }
            else
            {
                pFileSizeParameter = new ObjectParameter("pFileSize", typeof(int));
            }
    
            ObjectParameter pFilePathParameter;
    
            if (pFilePath != null)
            {
                pFilePathParameter = new ObjectParameter("pFilePath", pFilePath);
            }
            else
            {
                pFilePathParameter = new ObjectParameter("pFilePath", typeof(string));
            }
    
            ObjectParameter pUploadCompleteFlagParameter;
    
            if (pUploadCompleteFlag.HasValue)
            {
                pUploadCompleteFlagParameter = new ObjectParameter("pUploadCompleteFlag", pUploadCompleteFlag);
            }
            else
            {
                pUploadCompleteFlagParameter = new ObjectParameter("pUploadCompleteFlag", typeof(bool));
            }
    
            ObjectParameter pCreateDateParameter;
    
            if (pCreateDate.HasValue)
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", pCreateDate);
            }
            else
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCreateByParameter;
    
            if (pCreateBy != null)
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", pCreateBy);
            }
            else
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", typeof(string));
            }
    
            ObjectParameter pUpdateDateParameter;
    
            if (pUpdateDate.HasValue)
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", pUpdateDate);
            }
            else
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
    
            ObjectParameter pSessionIDParameter;
    
            if (pSessionID != null)
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", pSessionID);
            }
            else
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", typeof(string));
            }
            return base.ExecuteFunction<dtAttachFileTemporary>("InsertTbt_AttachFileTemporary", pAttachFileIDParameter, pRelatedIDParameter, pFileNameParameter, pFileTypeParameter, pFileSizeParameter, pFilePathParameter, pUploadCompleteFlagParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pSessionIDParameter);
        }
        public int BackUpAttachFile(Nullable<int> pAttachFileID, string pSessionID)
        {
    
            ObjectParameter pAttachFileIDParameter;
    
            if (pAttachFileID.HasValue)
            {
                pAttachFileIDParameter = new ObjectParameter("pAttachFileID", pAttachFileID);
            }
            else
            {
                pAttachFileIDParameter = new ObjectParameter("pAttachFileID", typeof(int));
            }
    
            ObjectParameter pSessionIDParameter;
    
            if (pSessionID != null)
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", pSessionID);
            }
            else
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", typeof(string));
            }
            return base.ExecuteFunction("BackUpAttachFile", pAttachFileIDParameter, pSessionIDParameter);
        }
        public ObjectResult<dtAttachFileTemporary> GetTbt_AttachFileTemporary(string pSessionID)
        {
    
            ObjectParameter pSessionIDParameter;
    
            if (pSessionID != null)
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", pSessionID);
            }
            else
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", typeof(string));
            }
            return base.ExecuteFunction<dtAttachFileTemporary>("GetTbt_AttachFileTemporary", pSessionIDParameter);
        }
        public int RemoveAttachFileTemporary(string pSessionID, Nullable<bool> pIsDeleteRealAttachFile)
        {
    
            ObjectParameter pSessionIDParameter;
    
            if (pSessionID != null)
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", pSessionID);
            }
            else
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", typeof(string));
            }
    
            ObjectParameter pIsDeleteRealAttachFileParameter;
    
            if (pIsDeleteRealAttachFile.HasValue)
            {
                pIsDeleteRealAttachFileParameter = new ObjectParameter("pIsDeleteRealAttachFile", pIsDeleteRealAttachFile);
            }
            else
            {
                pIsDeleteRealAttachFileParameter = new ObjectParameter("pIsDeleteRealAttachFile", typeof(bool));
            }
            return base.ExecuteFunction("RemoveAttachFileTemporary", pSessionIDParameter, pIsDeleteRealAttachFileParameter);
        }
        public ObjectResult<dtAttachFileForGridView> GetAttachFileForGridView(string pRelatedID)
        {
    
            ObjectParameter pRelatedIDParameter;
    
            if (pRelatedID != null)
            {
                pRelatedIDParameter = new ObjectParameter("pRelatedID", pRelatedID);
            }
            else
            {
                pRelatedIDParameter = new ObjectParameter("pRelatedID", typeof(string));
            }
            return base.ExecuteFunction<dtAttachFileForGridView>("GetAttachFileForGridView", pRelatedIDParameter);
        }
        public ObjectResult<dtGetAccumulateFileSize> GetAccumulateFileSize(string pRelatedID, string pSession)
        {
    
            ObjectParameter pRelatedIDParameter;
    
            if (pRelatedID != null)
            {
                pRelatedIDParameter = new ObjectParameter("pRelatedID", pRelatedID);
            }
            else
            {
                pRelatedIDParameter = new ObjectParameter("pRelatedID", typeof(string));
            }
    
            ObjectParameter pSessionParameter;
    
            if (pSession != null)
            {
                pSessionParameter = new ObjectParameter("pSession", pSession);
            }
            else
            {
                pSessionParameter = new ObjectParameter("pSession", typeof(string));
            }
            return base.ExecuteFunction<dtGetAccumulateFileSize>("GetAccumulateFileSize", pRelatedIDParameter, pSessionParameter);
        }
        public ObjectResult<Nullable<int>> UpdateBatchResult(string vBatchCode, string vBatchStatus, string vBatchLastResult, Nullable<int> vTotal, Nullable<int> vComplete, Nullable<int> vFailed, string vBatchUser)
        {
    
            ObjectParameter vBatchCodeParameter;
    
            if (vBatchCode != null)
            {
                vBatchCodeParameter = new ObjectParameter("vBatchCode", vBatchCode);
            }
            else
            {
                vBatchCodeParameter = new ObjectParameter("vBatchCode", typeof(string));
            }
    
            ObjectParameter vBatchStatusParameter;
    
            if (vBatchStatus != null)
            {
                vBatchStatusParameter = new ObjectParameter("vBatchStatus", vBatchStatus);
            }
            else
            {
                vBatchStatusParameter = new ObjectParameter("vBatchStatus", typeof(string));
            }
    
            ObjectParameter vBatchLastResultParameter;
    
            if (vBatchLastResult != null)
            {
                vBatchLastResultParameter = new ObjectParameter("vBatchLastResult", vBatchLastResult);
            }
            else
            {
                vBatchLastResultParameter = new ObjectParameter("vBatchLastResult", typeof(string));
            }
    
            ObjectParameter vTotalParameter;
    
            if (vTotal.HasValue)
            {
                vTotalParameter = new ObjectParameter("vTotal", vTotal);
            }
            else
            {
                vTotalParameter = new ObjectParameter("vTotal", typeof(int));
            }
    
            ObjectParameter vCompleteParameter;
    
            if (vComplete.HasValue)
            {
                vCompleteParameter = new ObjectParameter("vComplete", vComplete);
            }
            else
            {
                vCompleteParameter = new ObjectParameter("vComplete", typeof(int));
            }
    
            ObjectParameter vFailedParameter;
    
            if (vFailed.HasValue)
            {
                vFailedParameter = new ObjectParameter("vFailed", vFailed);
            }
            else
            {
                vFailedParameter = new ObjectParameter("vFailed", typeof(int));
            }
    
            ObjectParameter vBatchUserParameter;
    
            if (vBatchUser != null)
            {
                vBatchUserParameter = new ObjectParameter("vBatchUser", vBatchUser);
            }
            else
            {
                vBatchUserParameter = new ObjectParameter("vBatchUser", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("UpdateBatchResult", vBatchCodeParameter, vBatchStatusParameter, vBatchLastResultParameter, vTotalParameter, vCompleteParameter, vFailedParameter, vBatchUserParameter);
        }
        public ObjectResult<GetBatchProcessRunAll_Result> GetBatchProcessRunAll()
        {
            return base.ExecuteFunction<GetBatchProcessRunAll_Result>("GetBatchProcessRunAll");
        }
        public int InsertTbt_BatchLog(Nullable<System.DateTime> pBatchDate, string pBatchCode, string pErrorMessage, Nullable<bool> pErrorFlag, string pBatchUser)
        {
    
            ObjectParameter pBatchDateParameter;
    
            if (pBatchDate.HasValue)
            {
                pBatchDateParameter = new ObjectParameter("pBatchDate", pBatchDate);
            }
            else
            {
                pBatchDateParameter = new ObjectParameter("pBatchDate", typeof(System.DateTime));
            }
    
            ObjectParameter pBatchCodeParameter;
    
            if (pBatchCode != null)
            {
                pBatchCodeParameter = new ObjectParameter("pBatchCode", pBatchCode);
            }
            else
            {
                pBatchCodeParameter = new ObjectParameter("pBatchCode", typeof(string));
            }
    
            ObjectParameter pErrorMessageParameter;
    
            if (pErrorMessage != null)
            {
                pErrorMessageParameter = new ObjectParameter("pErrorMessage", pErrorMessage);
            }
            else
            {
                pErrorMessageParameter = new ObjectParameter("pErrorMessage", typeof(string));
            }
    
            ObjectParameter pErrorFlagParameter;
    
            if (pErrorFlag.HasValue)
            {
                pErrorFlagParameter = new ObjectParameter("pErrorFlag", pErrorFlag);
            }
            else
            {
                pErrorFlagParameter = new ObjectParameter("pErrorFlag", typeof(bool));
            }
    
            ObjectParameter pBatchUserParameter;
    
            if (pBatchUser != null)
            {
                pBatchUserParameter = new ObjectParameter("pBatchUser", pBatchUser);
            }
            else
            {
                pBatchUserParameter = new ObjectParameter("pBatchUser", typeof(string));
            }
            return base.ExecuteFunction("InsertTbt_BatchLog", pBatchDateParameter, pBatchCodeParameter, pErrorMessageParameter, pErrorFlagParameter, pBatchUserParameter);
        }
        public ObjectResult<dtDocumentListForPrining> GetDocumentListForPrining(string c_DOCUMENT_TYPE_INCOME, string c_DOCUMENT_TYPE_COMMON, Nullable<System.DateTime> datIssueDate, Nullable<int> intManagementNoFrom, Nullable<int> intManagementNoTo)
        {
    
            ObjectParameter c_DOCUMENT_TYPE_INCOMEParameter;
    
            if (c_DOCUMENT_TYPE_INCOME != null)
            {
                c_DOCUMENT_TYPE_INCOMEParameter = new ObjectParameter("C_DOCUMENT_TYPE_INCOME", c_DOCUMENT_TYPE_INCOME);
            }
            else
            {
                c_DOCUMENT_TYPE_INCOMEParameter = new ObjectParameter("C_DOCUMENT_TYPE_INCOME", typeof(string));
            }
    
            ObjectParameter c_DOCUMENT_TYPE_COMMONParameter;
    
            if (c_DOCUMENT_TYPE_COMMON != null)
            {
                c_DOCUMENT_TYPE_COMMONParameter = new ObjectParameter("C_DOCUMENT_TYPE_COMMON", c_DOCUMENT_TYPE_COMMON);
            }
            else
            {
                c_DOCUMENT_TYPE_COMMONParameter = new ObjectParameter("C_DOCUMENT_TYPE_COMMON", typeof(string));
            }
    
            ObjectParameter datIssueDateParameter;
    
            if (datIssueDate.HasValue)
            {
                datIssueDateParameter = new ObjectParameter("datIssueDate", datIssueDate);
            }
            else
            {
                datIssueDateParameter = new ObjectParameter("datIssueDate", typeof(System.DateTime));
            }
    
            ObjectParameter intManagementNoFromParameter;
    
            if (intManagementNoFrom.HasValue)
            {
                intManagementNoFromParameter = new ObjectParameter("intManagementNoFrom", intManagementNoFrom);
            }
            else
            {
                intManagementNoFromParameter = new ObjectParameter("intManagementNoFrom", typeof(int));
            }
    
            ObjectParameter intManagementNoToParameter;
    
            if (intManagementNoTo.HasValue)
            {
                intManagementNoToParameter = new ObjectParameter("intManagementNoTo", intManagementNoTo);
            }
            else
            {
                intManagementNoToParameter = new ObjectParameter("intManagementNoTo", typeof(int));
            }
            return base.ExecuteFunction<dtDocumentListForPrining>("GetDocumentListForPrining", c_DOCUMENT_TYPE_INCOMEParameter, c_DOCUMENT_TYPE_COMMONParameter, datIssueDateParameter, intManagementNoFromParameter, intManagementNoToParameter);
        }
        public ObjectResult<dtIssueListData> GetTmpIssueListData()
        {
            return base.ExecuteFunction<dtIssueListData>("GetTmpIssueListData");
        }
        public ObjectResult<dtBillingOffice> GetBillingOffice(string documentType, Nullable<System.DateTime> datBatchDate)
        {
    
            ObjectParameter documentTypeParameter;
    
            if (documentType != null)
            {
                documentTypeParameter = new ObjectParameter("DocumentType", documentType);
            }
            else
            {
                documentTypeParameter = new ObjectParameter("DocumentType", typeof(string));
            }
    
            ObjectParameter datBatchDateParameter;
    
            if (datBatchDate.HasValue)
            {
                datBatchDateParameter = new ObjectParameter("datBatchDate", datBatchDate);
            }
            else
            {
                datBatchDateParameter = new ObjectParameter("datBatchDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtBillingOffice>("GetBillingOffice", documentTypeParameter, datBatchDateParameter);
        }
        public ObjectResult<Nullable<int>> GetMaxManagementNo(string documentType, Nullable<System.DateTime> batchDate)
        {
    
            ObjectParameter documentTypeParameter;
    
            if (documentType != null)
            {
                documentTypeParameter = new ObjectParameter("DocumentType", documentType);
            }
            else
            {
                documentTypeParameter = new ObjectParameter("DocumentType", typeof(string));
            }
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<int>>("GetMaxManagementNo", documentTypeParameter, batchDateParameter);
        }
        public ObjectResult<dtIssueListData> GetIssueList(string documentType, string documentCode, Nullable<System.DateTime> batchDate, string billingOfficeCode, Nullable<int> intMaxManagementNo)
        {
    
            ObjectParameter documentTypeParameter;
    
            if (documentType != null)
            {
                documentTypeParameter = new ObjectParameter("DocumentType", documentType);
            }
            else
            {
                documentTypeParameter = new ObjectParameter("DocumentType", typeof(string));
            }
    
            ObjectParameter documentCodeParameter;
    
            if (documentCode != null)
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", documentCode);
            }
            else
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", typeof(string));
            }
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
    
            ObjectParameter billingOfficeCodeParameter;
    
            if (billingOfficeCode != null)
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", billingOfficeCode);
            }
            else
            {
                billingOfficeCodeParameter = new ObjectParameter("BillingOfficeCode", typeof(string));
            }
    
            ObjectParameter intMaxManagementNoParameter;
    
            if (intMaxManagementNo.HasValue)
            {
                intMaxManagementNoParameter = new ObjectParameter("intMaxManagementNo", intMaxManagementNo);
            }
            else
            {
                intMaxManagementNoParameter = new ObjectParameter("intMaxManagementNo", typeof(int));
            }
            return base.ExecuteFunction<dtIssueListData>("GetIssueList", documentTypeParameter, documentCodeParameter, batchDateParameter, billingOfficeCodeParameter, intMaxManagementNoParameter);
        }
        public ObjectResult<Nullable<int>> GetNextIssueListNo(string nameCode)
        {
    
            ObjectParameter nameCodeParameter;
    
            if (nameCode != null)
            {
                nameCodeParameter = new ObjectParameter("NameCode", nameCode);
            }
            else
            {
                nameCodeParameter = new ObjectParameter("NameCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("GetNextIssueListNo", nameCodeParameter);
        }
        public ObjectResult<tbt_DocumentList> UpdateManageNo(string xml)
        {
    
            ObjectParameter xmlParameter;
    
            if (xml != null)
            {
                xmlParameter = new ObjectParameter("xml", xml);
            }
            else
            {
                xmlParameter = new ObjectParameter("xml", typeof(string));
            }
            return base.ExecuteFunction<tbt_DocumentList>("UpdateManageNo", xmlParameter);
        }
        public ObjectResult<doPopupSubMenuList> GetPopupSubMenuList(string popupSubmenuID)
        {
    
            ObjectParameter popupSubmenuIDParameter;
    
            if (popupSubmenuID != null)
            {
                popupSubmenuIDParameter = new ObjectParameter("PopupSubmenuID", popupSubmenuID);
            }
            else
            {
                popupSubmenuIDParameter = new ObjectParameter("PopupSubmenuID", typeof(string));
            }
            return base.ExecuteFunction<doPopupSubMenuList>("GetPopupSubMenuList", popupSubmenuIDParameter);
        }
        public ObjectResult<dtAccountDataOfCarryOverAndProfit> GetAccountDataOfCarryOverAndProfit(Nullable<System.DateTime> startTargetDate, Nullable<System.DateTime> endTargetDate, Nullable<System.DateTime> fiveBusinessDate, string productTypeCode, string c_PROD_TYPE_AL, string c_PROD_TYPE_ONLINE, string c_PROD_TYPE_BE, string c_PROD_TYPE_SG, string c_PROD_TYPE_MA, string c_PROD_TYPE_RENTAL_SALE, string c_GROUP_PRODUCT_TYPE_N, string c_GROUP_PRODUCT_TYPE_SG, string c_GROUP_PRODUCT_TYPE_MA, string c_BILLING_TYPE_SERVICE, string c_RENTAL_CHANGE_TYPE)
        {
    
            ObjectParameter startTargetDateParameter;
    
            if (startTargetDate.HasValue)
            {
                startTargetDateParameter = new ObjectParameter("StartTargetDate", startTargetDate);
            }
            else
            {
                startTargetDateParameter = new ObjectParameter("StartTargetDate", typeof(System.DateTime));
            }
    
            ObjectParameter endTargetDateParameter;
    
            if (endTargetDate.HasValue)
            {
                endTargetDateParameter = new ObjectParameter("EndTargetDate", endTargetDate);
            }
            else
            {
                endTargetDateParameter = new ObjectParameter("EndTargetDate", typeof(System.DateTime));
            }
    
            ObjectParameter fiveBusinessDateParameter;
    
            if (fiveBusinessDate.HasValue)
            {
                fiveBusinessDateParameter = new ObjectParameter("FiveBusinessDate", fiveBusinessDate);
            }
            else
            {
                fiveBusinessDateParameter = new ObjectParameter("FiveBusinessDate", typeof(System.DateTime));
            }
    
            ObjectParameter productTypeCodeParameter;
    
            if (productTypeCode != null)
            {
                productTypeCodeParameter = new ObjectParameter("ProductTypeCode", productTypeCode);
            }
            else
            {
                productTypeCodeParameter = new ObjectParameter("ProductTypeCode", typeof(string));
            }
    
            ObjectParameter c_PROD_TYPE_ALParameter;
    
            if (c_PROD_TYPE_AL != null)
            {
                c_PROD_TYPE_ALParameter = new ObjectParameter("C_PROD_TYPE_AL", c_PROD_TYPE_AL);
            }
            else
            {
                c_PROD_TYPE_ALParameter = new ObjectParameter("C_PROD_TYPE_AL", typeof(string));
            }
    
            ObjectParameter c_PROD_TYPE_ONLINEParameter;
    
            if (c_PROD_TYPE_ONLINE != null)
            {
                c_PROD_TYPE_ONLINEParameter = new ObjectParameter("C_PROD_TYPE_ONLINE", c_PROD_TYPE_ONLINE);
            }
            else
            {
                c_PROD_TYPE_ONLINEParameter = new ObjectParameter("C_PROD_TYPE_ONLINE", typeof(string));
            }
    
            ObjectParameter c_PROD_TYPE_BEParameter;
    
            if (c_PROD_TYPE_BE != null)
            {
                c_PROD_TYPE_BEParameter = new ObjectParameter("C_PROD_TYPE_BE", c_PROD_TYPE_BE);
            }
            else
            {
                c_PROD_TYPE_BEParameter = new ObjectParameter("C_PROD_TYPE_BE", typeof(string));
            }
    
            ObjectParameter c_PROD_TYPE_SGParameter;
    
            if (c_PROD_TYPE_SG != null)
            {
                c_PROD_TYPE_SGParameter = new ObjectParameter("C_PROD_TYPE_SG", c_PROD_TYPE_SG);
            }
            else
            {
                c_PROD_TYPE_SGParameter = new ObjectParameter("C_PROD_TYPE_SG", typeof(string));
            }
    
            ObjectParameter c_PROD_TYPE_MAParameter;
    
            if (c_PROD_TYPE_MA != null)
            {
                c_PROD_TYPE_MAParameter = new ObjectParameter("C_PROD_TYPE_MA", c_PROD_TYPE_MA);
            }
            else
            {
                c_PROD_TYPE_MAParameter = new ObjectParameter("C_PROD_TYPE_MA", typeof(string));
            }
    
            ObjectParameter c_PROD_TYPE_RENTAL_SALEParameter;
    
            if (c_PROD_TYPE_RENTAL_SALE != null)
            {
                c_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("C_PROD_TYPE_RENTAL_SALE", c_PROD_TYPE_RENTAL_SALE);
            }
            else
            {
                c_PROD_TYPE_RENTAL_SALEParameter = new ObjectParameter("C_PROD_TYPE_RENTAL_SALE", typeof(string));
            }
    
            ObjectParameter c_GROUP_PRODUCT_TYPE_NParameter;
    
            if (c_GROUP_PRODUCT_TYPE_N != null)
            {
                c_GROUP_PRODUCT_TYPE_NParameter = new ObjectParameter("C_GROUP_PRODUCT_TYPE_N", c_GROUP_PRODUCT_TYPE_N);
            }
            else
            {
                c_GROUP_PRODUCT_TYPE_NParameter = new ObjectParameter("C_GROUP_PRODUCT_TYPE_N", typeof(string));
            }
    
            ObjectParameter c_GROUP_PRODUCT_TYPE_SGParameter;
    
            if (c_GROUP_PRODUCT_TYPE_SG != null)
            {
                c_GROUP_PRODUCT_TYPE_SGParameter = new ObjectParameter("C_GROUP_PRODUCT_TYPE_SG", c_GROUP_PRODUCT_TYPE_SG);
            }
            else
            {
                c_GROUP_PRODUCT_TYPE_SGParameter = new ObjectParameter("C_GROUP_PRODUCT_TYPE_SG", typeof(string));
            }
    
            ObjectParameter c_GROUP_PRODUCT_TYPE_MAParameter;
    
            if (c_GROUP_PRODUCT_TYPE_MA != null)
            {
                c_GROUP_PRODUCT_TYPE_MAParameter = new ObjectParameter("C_GROUP_PRODUCT_TYPE_MA", c_GROUP_PRODUCT_TYPE_MA);
            }
            else
            {
                c_GROUP_PRODUCT_TYPE_MAParameter = new ObjectParameter("C_GROUP_PRODUCT_TYPE_MA", typeof(string));
            }
    
            ObjectParameter c_BILLING_TYPE_SERVICEParameter;
    
            if (c_BILLING_TYPE_SERVICE != null)
            {
                c_BILLING_TYPE_SERVICEParameter = new ObjectParameter("C_BILLING_TYPE_SERVICE", c_BILLING_TYPE_SERVICE);
            }
            else
            {
                c_BILLING_TYPE_SERVICEParameter = new ObjectParameter("C_BILLING_TYPE_SERVICE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_CHANGE_TYPEParameter;
    
            if (c_RENTAL_CHANGE_TYPE != null)
            {
                c_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE", c_RENTAL_CHANGE_TYPE);
            }
            else
            {
                c_RENTAL_CHANGE_TYPEParameter = new ObjectParameter("C_RENTAL_CHANGE_TYPE", typeof(string));
            }
            return base.ExecuteFunction<dtAccountDataOfCarryOverAndProfit>("GetAccountDataOfCarryOverAndProfit", startTargetDateParameter, endTargetDateParameter, fiveBusinessDateParameter, productTypeCodeParameter, c_PROD_TYPE_ALParameter, c_PROD_TYPE_ONLINEParameter, c_PROD_TYPE_BEParameter, c_PROD_TYPE_SGParameter, c_PROD_TYPE_MAParameter, c_PROD_TYPE_RENTAL_SALEParameter, c_GROUP_PRODUCT_TYPE_NParameter, c_GROUP_PRODUCT_TYPE_SGParameter, c_GROUP_PRODUCT_TYPE_MAParameter, c_BILLING_TYPE_SERVICEParameter, c_RENTAL_CHANGE_TYPEParameter);
        }
        public ObjectResult<tbt_ManageCarryOverProfit> GetTbt_ManageCarryOverProfit(string reportYear, string reportMonth, string productType)
        {
    
            ObjectParameter reportYearParameter;
    
            if (reportYear != null)
            {
                reportYearParameter = new ObjectParameter("ReportYear", reportYear);
            }
            else
            {
                reportYearParameter = new ObjectParameter("ReportYear", typeof(string));
            }
    
            ObjectParameter reportMonthParameter;
    
            if (reportMonth != null)
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", reportMonth);
            }
            else
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", typeof(string));
            }
    
            ObjectParameter productTypeParameter;
    
            if (productType != null)
            {
                productTypeParameter = new ObjectParameter("ProductType", productType);
            }
            else
            {
                productTypeParameter = new ObjectParameter("ProductType", typeof(string));
            }
            return base.ExecuteFunction<tbt_ManageCarryOverProfit>("GetTbt_ManageCarryOverProfit", reportYearParameter, reportMonthParameter, productTypeParameter);
        }
        public ObjectResult<dtBusinessDateForAccountDataOfCarryOverAndProfit> GetBusinessDateForAccountDataOfCarryOverAndProfitProcess(Nullable<System.DateTime> batchDate)
        {
    
            ObjectParameter batchDateParameter;
    
            if (batchDate.HasValue)
            {
                batchDateParameter = new ObjectParameter("BatchDate", batchDate);
            }
            else
            {
                batchDateParameter = new ObjectParameter("BatchDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtBusinessDateForAccountDataOfCarryOverAndProfit>("GetBusinessDateForAccountDataOfCarryOverAndProfitProcess", batchDateParameter);
        }
        public ObjectResult<tbt_ManageCarryOverProfit> InsertTbt_ManageCarryOverProfit(string xmlTbt_ManageCarryOverProfit)
        {
    
            ObjectParameter xmlTbt_ManageCarryOverProfitParameter;
    
            if (xmlTbt_ManageCarryOverProfit != null)
            {
                xmlTbt_ManageCarryOverProfitParameter = new ObjectParameter("xmlTbt_ManageCarryOverProfit", xmlTbt_ManageCarryOverProfit);
            }
            else
            {
                xmlTbt_ManageCarryOverProfitParameter = new ObjectParameter("xmlTbt_ManageCarryOverProfit", typeof(string));
            }
            return base.ExecuteFunction<tbt_ManageCarryOverProfit>("InsertTbt_ManageCarryOverProfit", xmlTbt_ManageCarryOverProfitParameter);
        }
        public ObjectResult<dtRptAccountDataOfCarryOverAndProfit> GetRptAccountDataOfCarryOverAndProfit(string reportYear, string reportMonth, string productType)
        {
    
            ObjectParameter reportYearParameter;
    
            if (reportYear != null)
            {
                reportYearParameter = new ObjectParameter("ReportYear", reportYear);
            }
            else
            {
                reportYearParameter = new ObjectParameter("ReportYear", typeof(string));
            }
    
            ObjectParameter reportMonthParameter;
    
            if (reportMonth != null)
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", reportMonth);
            }
            else
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", typeof(string));
            }
    
            ObjectParameter productTypeParameter;
    
            if (productType != null)
            {
                productTypeParameter = new ObjectParameter("ProductType", productType);
            }
            else
            {
                productTypeParameter = new ObjectParameter("ProductType", typeof(string));
            }
            return base.ExecuteFunction<dtRptAccountDataOfCarryOverAndProfit>("GetRptAccountDataOfCarryOverAndProfit", reportYearParameter, reportMonthParameter, productTypeParameter);
        }
        public int DeleteAttachFileTemporaryByFileName(string pSessionID, string pFileName)
        {
    
            ObjectParameter pSessionIDParameter;
    
            if (pSessionID != null)
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", pSessionID);
            }
            else
            {
                pSessionIDParameter = new ObjectParameter("pSessionID", typeof(string));
            }
    
            ObjectParameter pFileNameParameter;
    
            if (pFileName != null)
            {
                pFileNameParameter = new ObjectParameter("pFileName", pFileName);
            }
            else
            {
                pFileNameParameter = new ObjectParameter("pFileName", typeof(string));
            }
            return base.ExecuteFunction("DeleteAttachFileTemporaryByFileName", pSessionIDParameter, pFileNameParameter);
        }
        public int UpdateBillingHistoryOfManageCarryOverProfit(string reportYear, string reportMonth, string productType, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter reportYearParameter;
    
            if (reportYear != null)
            {
                reportYearParameter = new ObjectParameter("ReportYear", reportYear);
            }
            else
            {
                reportYearParameter = new ObjectParameter("ReportYear", typeof(string));
            }
    
            ObjectParameter reportMonthParameter;
    
            if (reportMonth != null)
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", reportMonth);
            }
            else
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", typeof(string));
            }
    
            ObjectParameter productTypeParameter;
    
            if (productType != null)
            {
                productTypeParameter = new ObjectParameter("ProductType", productType);
            }
            else
            {
                productTypeParameter = new ObjectParameter("ProductType", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction("UpdateBillingHistoryOfManageCarryOverProfit", reportYearParameter, reportMonthParameter, productTypeParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<doYearOfCarryOverProfit> GetYearOfCarryOverProfit()
        {
            return base.ExecuteFunction<doYearOfCarryOverProfit>("GetYearOfCarryOverProfit");
        }
        public ObjectResult<doResultManageCarryOverProfitForEdit> GetManageCarryOverProfitForEdit(string reportYear, string reportMonth, string productType, string contractCode, string billingOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter reportYearParameter;
    
            if (reportYear != null)
            {
                reportYearParameter = new ObjectParameter("ReportYear", reportYear);
            }
            else
            {
                reportYearParameter = new ObjectParameter("ReportYear", typeof(string));
            }
    
            ObjectParameter reportMonthParameter;
    
            if (reportMonth != null)
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", reportMonth);
            }
            else
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", typeof(string));
            }
    
            ObjectParameter productTypeParameter;
    
            if (productType != null)
            {
                productTypeParameter = new ObjectParameter("ProductType", productType);
            }
            else
            {
                productTypeParameter = new ObjectParameter("ProductType", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doResultManageCarryOverProfitForEdit>("GetManageCarryOverProfitForEdit", reportYearParameter, reportMonthParameter, productTypeParameter, contractCodeParameter, billingOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public int UpdateTbtManageCarryOverProfit(string reportYear, string reportMonth, string contractCode, string billingOCC, Nullable<decimal> receiveAmount, Nullable<decimal> receiveAmountUsd, string receiveAmountCurrencyType, Nullable<decimal> incomeRentalFee, Nullable<decimal> incomeRentalFeeUsd, string incomeRentalFeeCurrencyType, Nullable<decimal> accumulatedReceiveAmount, Nullable<decimal> accumulatedReceiveAmountUsd, string accumulatedReceiveAmountCurrencyType, Nullable<decimal> accumulatedUnpaid, Nullable<decimal> accumulatedUnpaidUsd, string accumulatedUnpaidCurrencyType, Nullable<decimal> incomeVat, Nullable<decimal> incomeVatUsd, string incomeVatCurrencyType, Nullable<decimal> unpaidPeriod, Nullable<System.DateTime> incomeDate, string updateBy)
        {
    
            ObjectParameter reportYearParameter;
    
            if (reportYear != null)
            {
                reportYearParameter = new ObjectParameter("ReportYear", reportYear);
            }
            else
            {
                reportYearParameter = new ObjectParameter("ReportYear", typeof(string));
            }
    
            ObjectParameter reportMonthParameter;
    
            if (reportMonth != null)
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", reportMonth);
            }
            else
            {
                reportMonthParameter = new ObjectParameter("ReportMonth", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter receiveAmountParameter;
    
            if (receiveAmount.HasValue)
            {
                receiveAmountParameter = new ObjectParameter("ReceiveAmount", receiveAmount);
            }
            else
            {
                receiveAmountParameter = new ObjectParameter("ReceiveAmount", typeof(decimal));
            }
    
            ObjectParameter receiveAmountUsdParameter;
    
            if (receiveAmountUsd.HasValue)
            {
                receiveAmountUsdParameter = new ObjectParameter("ReceiveAmountUsd", receiveAmountUsd);
            }
            else
            {
                receiveAmountUsdParameter = new ObjectParameter("ReceiveAmountUsd", typeof(decimal));
            }
    
            ObjectParameter receiveAmountCurrencyTypeParameter;
    
            if (receiveAmountCurrencyType != null)
            {
                receiveAmountCurrencyTypeParameter = new ObjectParameter("ReceiveAmountCurrencyType", receiveAmountCurrencyType);
            }
            else
            {
                receiveAmountCurrencyTypeParameter = new ObjectParameter("ReceiveAmountCurrencyType", typeof(string));
            }
    
            ObjectParameter incomeRentalFeeParameter;
    
            if (incomeRentalFee.HasValue)
            {
                incomeRentalFeeParameter = new ObjectParameter("IncomeRentalFee", incomeRentalFee);
            }
            else
            {
                incomeRentalFeeParameter = new ObjectParameter("IncomeRentalFee", typeof(decimal));
            }
    
            ObjectParameter incomeRentalFeeUsdParameter;
    
            if (incomeRentalFeeUsd.HasValue)
            {
                incomeRentalFeeUsdParameter = new ObjectParameter("IncomeRentalFeeUsd", incomeRentalFeeUsd);
            }
            else
            {
                incomeRentalFeeUsdParameter = new ObjectParameter("IncomeRentalFeeUsd", typeof(decimal));
            }
    
            ObjectParameter incomeRentalFeeCurrencyTypeParameter;
    
            if (incomeRentalFeeCurrencyType != null)
            {
                incomeRentalFeeCurrencyTypeParameter = new ObjectParameter("IncomeRentalFeeCurrencyType", incomeRentalFeeCurrencyType);
            }
            else
            {
                incomeRentalFeeCurrencyTypeParameter = new ObjectParameter("IncomeRentalFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter accumulatedReceiveAmountParameter;
    
            if (accumulatedReceiveAmount.HasValue)
            {
                accumulatedReceiveAmountParameter = new ObjectParameter("AccumulatedReceiveAmount", accumulatedReceiveAmount);
            }
            else
            {
                accumulatedReceiveAmountParameter = new ObjectParameter("AccumulatedReceiveAmount", typeof(decimal));
            }
    
            ObjectParameter accumulatedReceiveAmountUsdParameter;
    
            if (accumulatedReceiveAmountUsd.HasValue)
            {
                accumulatedReceiveAmountUsdParameter = new ObjectParameter("AccumulatedReceiveAmountUsd", accumulatedReceiveAmountUsd);
            }
            else
            {
                accumulatedReceiveAmountUsdParameter = new ObjectParameter("AccumulatedReceiveAmountUsd", typeof(decimal));
            }
    
            ObjectParameter accumulatedReceiveAmountCurrencyTypeParameter;
    
            if (accumulatedReceiveAmountCurrencyType != null)
            {
                accumulatedReceiveAmountCurrencyTypeParameter = new ObjectParameter("AccumulatedReceiveAmountCurrencyType", accumulatedReceiveAmountCurrencyType);
            }
            else
            {
                accumulatedReceiveAmountCurrencyTypeParameter = new ObjectParameter("AccumulatedReceiveAmountCurrencyType", typeof(string));
            }
    
            ObjectParameter accumulatedUnpaidParameter;
    
            if (accumulatedUnpaid.HasValue)
            {
                accumulatedUnpaidParameter = new ObjectParameter("AccumulatedUnpaid", accumulatedUnpaid);
            }
            else
            {
                accumulatedUnpaidParameter = new ObjectParameter("AccumulatedUnpaid", typeof(decimal));
            }
    
            ObjectParameter accumulatedUnpaidUsdParameter;
    
            if (accumulatedUnpaidUsd.HasValue)
            {
                accumulatedUnpaidUsdParameter = new ObjectParameter("AccumulatedUnpaidUsd", accumulatedUnpaidUsd);
            }
            else
            {
                accumulatedUnpaidUsdParameter = new ObjectParameter("AccumulatedUnpaidUsd", typeof(decimal));
            }
    
            ObjectParameter accumulatedUnpaidCurrencyTypeParameter;
    
            if (accumulatedUnpaidCurrencyType != null)
            {
                accumulatedUnpaidCurrencyTypeParameter = new ObjectParameter("AccumulatedUnpaidCurrencyType", accumulatedUnpaidCurrencyType);
            }
            else
            {
                accumulatedUnpaidCurrencyTypeParameter = new ObjectParameter("AccumulatedUnpaidCurrencyType", typeof(string));
            }
    
            ObjectParameter incomeVatParameter;
    
            if (incomeVat.HasValue)
            {
                incomeVatParameter = new ObjectParameter("IncomeVat", incomeVat);
            }
            else
            {
                incomeVatParameter = new ObjectParameter("IncomeVat", typeof(decimal));
            }
    
            ObjectParameter incomeVatUsdParameter;
    
            if (incomeVatUsd.HasValue)
            {
                incomeVatUsdParameter = new ObjectParameter("IncomeVatUsd", incomeVatUsd);
            }
            else
            {
                incomeVatUsdParameter = new ObjectParameter("IncomeVatUsd", typeof(decimal));
            }
    
            ObjectParameter incomeVatCurrencyTypeParameter;
    
            if (incomeVatCurrencyType != null)
            {
                incomeVatCurrencyTypeParameter = new ObjectParameter("IncomeVatCurrencyType", incomeVatCurrencyType);
            }
            else
            {
                incomeVatCurrencyTypeParameter = new ObjectParameter("IncomeVatCurrencyType", typeof(string));
            }
    
            ObjectParameter unpaidPeriodParameter;
    
            if (unpaidPeriod.HasValue)
            {
                unpaidPeriodParameter = new ObjectParameter("UnpaidPeriod", unpaidPeriod);
            }
            else
            {
                unpaidPeriodParameter = new ObjectParameter("UnpaidPeriod", typeof(decimal));
            }
    
            ObjectParameter incomeDateParameter;
    
            if (incomeDate.HasValue)
            {
                incomeDateParameter = new ObjectParameter("IncomeDate", incomeDate);
            }
            else
            {
                incomeDateParameter = new ObjectParameter("IncomeDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction("UpdateTbtManageCarryOverProfit", reportYearParameter, reportMonthParameter, contractCodeParameter, billingOCCParameter, receiveAmountParameter, receiveAmountUsdParameter, receiveAmountCurrencyTypeParameter, incomeRentalFeeParameter, incomeRentalFeeUsdParameter, incomeRentalFeeCurrencyTypeParameter, accumulatedReceiveAmountParameter, accumulatedReceiveAmountUsdParameter, accumulatedReceiveAmountCurrencyTypeParameter, accumulatedUnpaidParameter, accumulatedUnpaidUsdParameter, accumulatedUnpaidCurrencyTypeParameter, incomeVatParameter, incomeVatUsdParameter, incomeVatCurrencyTypeParameter, unpaidPeriodParameter, incomeDateParameter, updateByParameter);
        }
        public ObjectResult<dtDocumentData> GetDocumentDataListByInventorySlipNo(string inventorySlipNo)
        {
    
            ObjectParameter inventorySlipNoParameter;
    
            if (inventorySlipNo != null)
            {
                inventorySlipNoParameter = new ObjectParameter("InventorySlipNo", inventorySlipNo);
            }
            else
            {
                inventorySlipNoParameter = new ObjectParameter("InventorySlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtDocumentData>("GetDocumentDataListByInventorySlipNo", inventorySlipNoParameter);
        }
        public ObjectResult<tbs_BatchQueue> GetTbs_BatchQueue(Nullable<int> runId, Nullable<System.DateTime> nextRunFrom, Nullable<System.DateTime> nextRunTo)
        {
    
            ObjectParameter runIdParameter;
    
            if (runId.HasValue)
            {
                runIdParameter = new ObjectParameter("RunId", runId);
            }
            else
            {
                runIdParameter = new ObjectParameter("RunId", typeof(int));
            }
    
            ObjectParameter nextRunFromParameter;
    
            if (nextRunFrom.HasValue)
            {
                nextRunFromParameter = new ObjectParameter("NextRunFrom", nextRunFrom);
            }
            else
            {
                nextRunFromParameter = new ObjectParameter("NextRunFrom", typeof(System.DateTime));
            }
    
            ObjectParameter nextRunToParameter;
    
            if (nextRunTo.HasValue)
            {
                nextRunToParameter = new ObjectParameter("NextRunTo", nextRunTo);
            }
            else
            {
                nextRunToParameter = new ObjectParameter("NextRunTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<tbs_BatchQueue>("GetTbs_BatchQueue", runIdParameter, nextRunFromParameter, nextRunToParameter);
        }
        public ObjectResult<tbs_BatchQueue> UpdateTbs_BatchQueue(string xml_doTbsBatchQueue)
        {
    
            ObjectParameter xml_doTbsBatchQueueParameter;
    
            if (xml_doTbsBatchQueue != null)
            {
                xml_doTbsBatchQueueParameter = new ObjectParameter("xml_doTbsBatchQueue", xml_doTbsBatchQueue);
            }
            else
            {
                xml_doTbsBatchQueueParameter = new ObjectParameter("xml_doTbsBatchQueue", typeof(string));
            }
            return base.ExecuteFunction<tbs_BatchQueue>("UpdateTbs_BatchQueue", xml_doTbsBatchQueueParameter);
        }
        public ObjectResult<dtDocumentData> GetDocumentDataListByDocumentCode(string documentNo, string documentCode, string documentOCC)
        {
    
            ObjectParameter documentNoParameter;
    
            if (documentNo != null)
            {
                documentNoParameter = new ObjectParameter("DocumentNo", documentNo);
            }
            else
            {
                documentNoParameter = new ObjectParameter("DocumentNo", typeof(string));
            }
    
            ObjectParameter documentCodeParameter;
    
            if (documentCode != null)
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", documentCode);
            }
            else
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", typeof(string));
            }
    
            ObjectParameter documentOCCParameter;
    
            if (documentOCC != null)
            {
                documentOCCParameter = new ObjectParameter("DocumentOCC", documentOCC);
            }
            else
            {
                documentOCCParameter = new ObjectParameter("DocumentOCC", typeof(string));
            }
            return base.ExecuteFunction<dtDocumentData>("GetDocumentDataListByDocumentCode", documentNoParameter, documentCodeParameter, documentOCCParameter);
        }
        public ObjectResult<dtReIssueInvoice> sp_CM_ReIssue_Invoice(string docNo, string updateBy)
        {
    
            ObjectParameter docNoParameter;
    
            if (docNo != null)
            {
                docNoParameter = new ObjectParameter("DocNo", docNo);
            }
            else
            {
                docNoParameter = new ObjectParameter("DocNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<dtReIssueInvoice>("sp_CM_ReIssue_Invoice", docNoParameter, updateByParameter);
        }
        public ObjectResult<dtReIssueReceipt> sp_CM_ReIssue_Receipt(string docNo, string updateBy)
        {
    
            ObjectParameter docNoParameter;
    
            if (docNo != null)
            {
                docNoParameter = new ObjectParameter("DocNo", docNo);
            }
            else
            {
                docNoParameter = new ObjectParameter("DocNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<dtReIssueReceipt>("sp_CM_ReIssue_Receipt", docNoParameter, updateByParameter);
        }
        public ObjectResult<dtReIssueCreditNote> sp_CM_ReIssue_CreditNote(string docNo, string updateBy)
        {
    
            ObjectParameter docNoParameter;
    
            if (docNo != null)
            {
                docNoParameter = new ObjectParameter("DocNo", docNo);
            }
            else
            {
                docNoParameter = new ObjectParameter("DocNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<dtReIssueCreditNote>("sp_CM_ReIssue_CreditNote", docNoParameter, updateByParameter);
        }
        public ObjectResult<dtReIssueTaxInvoice> sp_CM_ReIssue_TaxInvoice(string docNo, string updateBy)
        {
    
            ObjectParameter docNoParameter;
    
            if (docNo != null)
            {
                docNoParameter = new ObjectParameter("DocNo", docNo);
            }
            else
            {
                docNoParameter = new ObjectParameter("DocNo", typeof(string));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<dtReIssueTaxInvoice>("sp_CM_ReIssue_TaxInvoice", docNoParameter, updateByParameter);
        }
        public ObjectResult<sp_CM_GetTbs_DocumentOutput_Result> GetTbs_DocumentOutput(string documentCode, Nullable<int> documentCodeSeq, Nullable<System.DateTime> startDay)
        {
    
            ObjectParameter documentCodeParameter;
    
            if (documentCode != null)
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", documentCode);
            }
            else
            {
                documentCodeParameter = new ObjectParameter("DocumentCode", typeof(string));
            }
    
            ObjectParameter documentCodeSeqParameter;
    
            if (documentCodeSeq.HasValue)
            {
                documentCodeSeqParameter = new ObjectParameter("DocumentCodeSeq", documentCodeSeq);
            }
            else
            {
                documentCodeSeqParameter = new ObjectParameter("DocumentCodeSeq", typeof(int));
            }
    
            ObjectParameter startDayParameter;
    
            if (startDay.HasValue)
            {
                startDayParameter = new ObjectParameter("StartDay", startDay);
            }
            else
            {
                startDayParameter = new ObjectParameter("StartDay", typeof(System.DateTime));
            }
            return base.ExecuteFunction<sp_CM_GetTbs_DocumentOutput_Result>("GetTbs_DocumentOutput", documentCodeParameter, documentCodeSeqParameter, startDayParameter);
        }

        #endregion

    }
}
