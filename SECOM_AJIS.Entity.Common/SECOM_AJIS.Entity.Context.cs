//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SECOM_AJIS.DataEntity.Common
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CMDataEntities : DbContext
    {
        public CMDataEntities()
            : base("name=CMDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tbs_ProductType> tbs_ProductType { get; set; }
        public DbSet<tbt_PurgeLog> tbt_PurgeLog { get; set; }
        public DbSet<tbm_DocumentTemplate> tbm_DocumentTemplate { get; set; }
        public DbSet<tbm_Supplier> tbm_Supplier { get; set; }
        public DbSet<tbs_Configuration> tbs_Configuration { get; set; }
        public DbSet<tbt_DocumentDownloadLog> tbt_DocumentDownloadLog { get; set; }
        public DbSet<tbt_AttachFile> tbt_AttachFile { get; set; }
        public DbSet<tbt_DocumentReports> tbt_DocumentReports { get; set; }
        public DbSet<tbt_DocumentList> tbt_DocumentList { get; set; }
        public DbSet<tbt_ManageCarryOverProfit> tbt_ManageCarryOverProfit { get; set; }
        public DbSet<tbs_BatchQueue> tbs_BatchQueue { get; set; }
        public DbSet<tbs_BatchSchedule> tbs_BatchSchedule { get; set; }
    
        public virtual ObjectResult<tbs_ProductType> GetTbs_ProductType(string pchrServiceTypeCode, string pchrProductTypeCode)
        {
            var pchrServiceTypeCodeParameter = pchrServiceTypeCode != null ?
                new ObjectParameter("pchrServiceTypeCode", pchrServiceTypeCode) :
                new ObjectParameter("pchrServiceTypeCode", typeof(string));
    
            var pchrProductTypeCodeParameter = pchrProductTypeCode != null ?
                new ObjectParameter("pchrProductTypeCode", pchrProductTypeCode) :
                new ObjectParameter("pchrProductTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbs_ProductType>("GetTbs_ProductType", pchrServiceTypeCodeParameter, pchrProductTypeCodeParameter);
        }
    
        public virtual ObjectResult<tbs_ProductType> GetTbs_ProductType(string pchrServiceTypeCode, string pchrProductTypeCode, MergeOption mergeOption)
        {
            var pchrServiceTypeCodeParameter = pchrServiceTypeCode != null ?
                new ObjectParameter("pchrServiceTypeCode", pchrServiceTypeCode) :
                new ObjectParameter("pchrServiceTypeCode", typeof(string));
    
            var pchrProductTypeCodeParameter = pchrProductTypeCode != null ?
                new ObjectParameter("pchrProductTypeCode", pchrProductTypeCode) :
                new ObjectParameter("pchrProductTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbs_ProductType>("GetTbs_ProductType", mergeOption, pchrServiceTypeCodeParameter, pchrProductTypeCodeParameter);
        }
    
        public virtual ObjectResult<dtDocumentType> GetDocumentTypeDataList(string c_DOCUMENT_TYPE, string pObjectIDList)
        {
            var c_DOCUMENT_TYPEParameter = c_DOCUMENT_TYPE != null ?
                new ObjectParameter("C_DOCUMENT_TYPE", c_DOCUMENT_TYPE) :
                new ObjectParameter("C_DOCUMENT_TYPE", typeof(string));
    
            var pObjectIDListParameter = pObjectIDList != null ?
                new ObjectParameter("pObjectIDList", pObjectIDList) :
                new ObjectParameter("pObjectIDList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtDocumentType>("GetDocumentTypeDataList", c_DOCUMENT_TYPEParameter, pObjectIDListParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> WriteTransactionLog(string gUID, string screenID, string tableName, string transactionData, Nullable<System.DateTime> createDate, string createBy)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            var screenIDParameter = screenID != null ?
                new ObjectParameter("ScreenID", screenID) :
                new ObjectParameter("ScreenID", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var transactionDataParameter = transactionData != null ?
                new ObjectParameter("TransactionData", transactionData) :
                new ObjectParameter("TransactionData", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("WriteTransactionLog", gUIDParameter, screenIDParameter, tableNameParameter, transactionDataParameter, createDateParameter, createByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateSystemStatus(Nullable<bool> bSuspendFlag, Nullable<bool> bManualFlag, string pUpdateBy, string pSuspendResumeSystemJobName)
        {
            var bSuspendFlagParameter = bSuspendFlag.HasValue ?
                new ObjectParameter("bSuspendFlag", bSuspendFlag) :
                new ObjectParameter("bSuspendFlag", typeof(bool));
    
            var bManualFlagParameter = bManualFlag.HasValue ?
                new ObjectParameter("bManualFlag", bManualFlag) :
                new ObjectParameter("bManualFlag", typeof(bool));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var pSuspendResumeSystemJobNameParameter = pSuspendResumeSystemJobName != null ?
                new ObjectParameter("pSuspendResumeSystemJobName", pSuspendResumeSystemJobName) :
                new ObjectParameter("pSuspendResumeSystemJobName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateSystemStatus", bSuspendFlagParameter, bManualFlagParameter, pUpdateByParameter, pSuspendResumeSystemJobNameParameter);
        }
    
        public virtual ObjectResult<doSystemStatus> sp_CM_GetSystemStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doSystemStatus>("sp_CM_GetSystemStatus");
        }
    
        public virtual ObjectResult<tbt_PurgeLog> DeleteLog(Nullable<System.DateTime> monthYear, string empNo)
        {
            var monthYearParameter = monthYear.HasValue ?
                new ObjectParameter("MonthYear", monthYear) :
                new ObjectParameter("MonthYear", typeof(System.DateTime));
    
            var empNoParameter = empNo != null ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_PurgeLog>("DeleteLog", monthYearParameter, empNoParameter);
        }
    
        public virtual ObjectResult<tbt_PurgeLog> DeleteLog(Nullable<System.DateTime> monthYear, string empNo, MergeOption mergeOption)
        {
            var monthYearParameter = monthYear.HasValue ?
                new ObjectParameter("MonthYear", monthYear) :
                new ObjectParameter("MonthYear", typeof(System.DateTime));
    
            var empNoParameter = empNo != null ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_PurgeLog>("DeleteLog", mergeOption, monthYearParameter, empNoParameter);
        }
    
        public virtual ObjectResult<dtDocumentData> GetDocumentDataList(string pchvDocumentType, string pchvDocumentCode, Nullable<System.DateTime> pdatGenerateDateFrom, Nullable<System.DateTime> pdatGenerateDateTo, Nullable<int> pdatMonth, Nullable<int> pdatYear, string pchrContractOfficeCode, string pchrOperationOfficeCode, string pchrBillingOfficeCode, string pchrIssueOfficeCode, string pchrDocumentNo, string pchrQuotationTargetCode, string pchrAlphabet, string pchrProjectCode, string pchrContractCode, string pchrOCC, string pchrBillingTargetCode, string pchvInstrumentCode, string pC_DOCUMENT_TYPE_CONTRACT, string pC_DOCUMENT_TYPE_MA, string pC_DOCUMENT_TYPE_INSTALLATION, string pC_DOCUMENT_TYPE_INVENTORY, string pC_DOCUMENT_TYPE_INCOME, string pOfficeCodeList, string pC_DOCUMENT_TYPE_COMMON, string pLocationCode)
        {
            var pchvDocumentTypeParameter = pchvDocumentType != null ?
                new ObjectParameter("pchvDocumentType", pchvDocumentType) :
                new ObjectParameter("pchvDocumentType", typeof(string));
    
            var pchvDocumentCodeParameter = pchvDocumentCode != null ?
                new ObjectParameter("pchvDocumentCode", pchvDocumentCode) :
                new ObjectParameter("pchvDocumentCode", typeof(string));
    
            var pdatGenerateDateFromParameter = pdatGenerateDateFrom.HasValue ?
                new ObjectParameter("pdatGenerateDateFrom", pdatGenerateDateFrom) :
                new ObjectParameter("pdatGenerateDateFrom", typeof(System.DateTime));
    
            var pdatGenerateDateToParameter = pdatGenerateDateTo.HasValue ?
                new ObjectParameter("pdatGenerateDateTo", pdatGenerateDateTo) :
                new ObjectParameter("pdatGenerateDateTo", typeof(System.DateTime));
    
            var pdatMonthParameter = pdatMonth.HasValue ?
                new ObjectParameter("pdatMonth", pdatMonth) :
                new ObjectParameter("pdatMonth", typeof(int));
    
            var pdatYearParameter = pdatYear.HasValue ?
                new ObjectParameter("pdatYear", pdatYear) :
                new ObjectParameter("pdatYear", typeof(int));
    
            var pchrContractOfficeCodeParameter = pchrContractOfficeCode != null ?
                new ObjectParameter("pchrContractOfficeCode", pchrContractOfficeCode) :
                new ObjectParameter("pchrContractOfficeCode", typeof(string));
    
            var pchrOperationOfficeCodeParameter = pchrOperationOfficeCode != null ?
                new ObjectParameter("pchrOperationOfficeCode", pchrOperationOfficeCode) :
                new ObjectParameter("pchrOperationOfficeCode", typeof(string));
    
            var pchrBillingOfficeCodeParameter = pchrBillingOfficeCode != null ?
                new ObjectParameter("pchrBillingOfficeCode", pchrBillingOfficeCode) :
                new ObjectParameter("pchrBillingOfficeCode", typeof(string));
    
            var pchrIssueOfficeCodeParameter = pchrIssueOfficeCode != null ?
                new ObjectParameter("pchrIssueOfficeCode", pchrIssueOfficeCode) :
                new ObjectParameter("pchrIssueOfficeCode", typeof(string));
    
            var pchrDocumentNoParameter = pchrDocumentNo != null ?
                new ObjectParameter("pchrDocumentNo", pchrDocumentNo) :
                new ObjectParameter("pchrDocumentNo", typeof(string));
    
            var pchrQuotationTargetCodeParameter = pchrQuotationTargetCode != null ?
                new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode) :
                new ObjectParameter("pchrQuotationTargetCode", typeof(string));
    
            var pchrAlphabetParameter = pchrAlphabet != null ?
                new ObjectParameter("pchrAlphabet", pchrAlphabet) :
                new ObjectParameter("pchrAlphabet", typeof(string));
    
            var pchrProjectCodeParameter = pchrProjectCode != null ?
                new ObjectParameter("pchrProjectCode", pchrProjectCode) :
                new ObjectParameter("pchrProjectCode", typeof(string));
    
            var pchrContractCodeParameter = pchrContractCode != null ?
                new ObjectParameter("pchrContractCode", pchrContractCode) :
                new ObjectParameter("pchrContractCode", typeof(string));
    
            var pchrOCCParameter = pchrOCC != null ?
                new ObjectParameter("pchrOCC", pchrOCC) :
                new ObjectParameter("pchrOCC", typeof(string));
    
            var pchrBillingTargetCodeParameter = pchrBillingTargetCode != null ?
                new ObjectParameter("pchrBillingTargetCode", pchrBillingTargetCode) :
                new ObjectParameter("pchrBillingTargetCode", typeof(string));
    
            var pchvInstrumentCodeParameter = pchvInstrumentCode != null ?
                new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode) :
                new ObjectParameter("pchvInstrumentCode", typeof(string));
    
            var pC_DOCUMENT_TYPE_CONTRACTParameter = pC_DOCUMENT_TYPE_CONTRACT != null ?
                new ObjectParameter("pC_DOCUMENT_TYPE_CONTRACT", pC_DOCUMENT_TYPE_CONTRACT) :
                new ObjectParameter("pC_DOCUMENT_TYPE_CONTRACT", typeof(string));
    
            var pC_DOCUMENT_TYPE_MAParameter = pC_DOCUMENT_TYPE_MA != null ?
                new ObjectParameter("pC_DOCUMENT_TYPE_MA", pC_DOCUMENT_TYPE_MA) :
                new ObjectParameter("pC_DOCUMENT_TYPE_MA", typeof(string));
    
            var pC_DOCUMENT_TYPE_INSTALLATIONParameter = pC_DOCUMENT_TYPE_INSTALLATION != null ?
                new ObjectParameter("pC_DOCUMENT_TYPE_INSTALLATION", pC_DOCUMENT_TYPE_INSTALLATION) :
                new ObjectParameter("pC_DOCUMENT_TYPE_INSTALLATION", typeof(string));
    
            var pC_DOCUMENT_TYPE_INVENTORYParameter = pC_DOCUMENT_TYPE_INVENTORY != null ?
                new ObjectParameter("pC_DOCUMENT_TYPE_INVENTORY", pC_DOCUMENT_TYPE_INVENTORY) :
                new ObjectParameter("pC_DOCUMENT_TYPE_INVENTORY", typeof(string));
    
            var pC_DOCUMENT_TYPE_INCOMEParameter = pC_DOCUMENT_TYPE_INCOME != null ?
                new ObjectParameter("pC_DOCUMENT_TYPE_INCOME", pC_DOCUMENT_TYPE_INCOME) :
                new ObjectParameter("pC_DOCUMENT_TYPE_INCOME", typeof(string));
    
            var pOfficeCodeListParameter = pOfficeCodeList != null ?
                new ObjectParameter("pOfficeCodeList", pOfficeCodeList) :
                new ObjectParameter("pOfficeCodeList", typeof(string));
    
            var pC_DOCUMENT_TYPE_COMMONParameter = pC_DOCUMENT_TYPE_COMMON != null ?
                new ObjectParameter("pC_DOCUMENT_TYPE_COMMON", pC_DOCUMENT_TYPE_COMMON) :
                new ObjectParameter("pC_DOCUMENT_TYPE_COMMON", typeof(string));
    
            var pLocationCodeParameter = pLocationCode != null ?
                new ObjectParameter("pLocationCode", pLocationCode) :
                new ObjectParameter("pLocationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtDocumentData>("GetDocumentDataList", pchvDocumentTypeParameter, pchvDocumentCodeParameter, pdatGenerateDateFromParameter, pdatGenerateDateToParameter, pdatMonthParameter, pdatYearParameter, pchrContractOfficeCodeParameter, pchrOperationOfficeCodeParameter, pchrBillingOfficeCodeParameter, pchrIssueOfficeCodeParameter, pchrDocumentNoParameter, pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pchrProjectCodeParameter, pchrContractCodeParameter, pchrOCCParameter, pchrBillingTargetCodeParameter, pchvInstrumentCodeParameter, pC_DOCUMENT_TYPE_CONTRACTParameter, pC_DOCUMENT_TYPE_MAParameter, pC_DOCUMENT_TYPE_INSTALLATIONParameter, pC_DOCUMENT_TYPE_INVENTORYParameter, pC_DOCUMENT_TYPE_INCOMEParameter, pOfficeCodeListParameter, pC_DOCUMENT_TYPE_COMMONParameter, pLocationCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateSystemConfig(string configName, string configValue, string empNo, string pSuspendResumeSystemJobName)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var configValueParameter = configValue != null ?
                new ObjectParameter("ConfigValue", configValue) :
                new ObjectParameter("ConfigValue", typeof(string));
    
            var empNoParameter = empNo != null ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(string));
    
            var pSuspendResumeSystemJobNameParameter = pSuspendResumeSystemJobName != null ?
                new ObjectParameter("pSuspendResumeSystemJobName", pSuspendResumeSystemJobName) :
                new ObjectParameter("pSuspendResumeSystemJobName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateSystemConfig", configNameParameter, configValueParameter, empNoParameter, pSuspendResumeSystemJobNameParameter);
        }
    
        public virtual int WriteWindowLog(string eventType, string strMessage)
        {
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var strMessageParameter = strMessage != null ?
                new ObjectParameter("strMessage", strMessage) :
                new ObjectParameter("strMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteWindowLog", eventTypeParameter, strMessageParameter);
        }
    
        public virtual int WriteErrorLog(string screenID, string desc, string detail, Nullable<System.DateTime> modifiedDate, string modifiedBy)
        {
            var screenIDParameter = screenID != null ?
                new ObjectParameter("ScreenID", screenID) :
                new ObjectParameter("ScreenID", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteErrorLog", screenIDParameter, descParameter, detailParameter, modifiedDateParameter, modifiedByParameter);
        }
    
        public virtual int WriteDocumentDownloadLog(string pDocumentNo, string pDocumentCode, Nullable<System.DateTime> processDateTime, string empNo, string pDocumentOCC)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            var processDateTimeParameter = processDateTime.HasValue ?
                new ObjectParameter("ProcessDateTime", processDateTime) :
                new ObjectParameter("ProcessDateTime", typeof(System.DateTime));
    
            var empNoParameter = empNo != null ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteDocumentDownloadLog", pDocumentNoParameter, pDocumentCodeParameter, processDateTimeParameter, empNoParameter, pDocumentOCCParameter);
        }
    
        public virtual ObjectResult<doMiscTypeCode> GetMiscTypeCodeList(string xml0)
        {
            var xml0Parameter = xml0 != null ?
                new ObjectParameter("xml0", xml0) :
                new ObjectParameter("xml0", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doMiscTypeCode>("GetMiscTypeCodeList", xml0Parameter);
        }
    
        public virtual ObjectResult<tbm_DocumentTemplate> GetTbm_DocumentTemplate(string pchvDocumentType, Nullable<bool> bReportFlag)
        {
            var pchvDocumentTypeParameter = pchvDocumentType != null ?
                new ObjectParameter("pchvDocumentType", pchvDocumentType) :
                new ObjectParameter("pchvDocumentType", typeof(string));
    
            var bReportFlagParameter = bReportFlag.HasValue ?
                new ObjectParameter("bReportFlag", bReportFlag) :
                new ObjectParameter("bReportFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbm_DocumentTemplate>("GetTbm_DocumentTemplate", pchvDocumentTypeParameter, bReportFlagParameter);
        }
    
        public virtual ObjectResult<tbm_DocumentTemplate> GetTbm_DocumentTemplate(string pchvDocumentType, Nullable<bool> bReportFlag, MergeOption mergeOption)
        {
            var pchvDocumentTypeParameter = pchvDocumentType != null ?
                new ObjectParameter("pchvDocumentType", pchvDocumentType) :
                new ObjectParameter("pchvDocumentType", typeof(string));
    
            var bReportFlagParameter = bReportFlag.HasValue ?
                new ObjectParameter("bReportFlag", bReportFlag) :
                new ObjectParameter("bReportFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbm_DocumentTemplate>("GetTbm_DocumentTemplate", mergeOption, pchvDocumentTypeParameter, bReportFlagParameter);
        }
    
        public virtual ObjectResult<tbm_Supplier> GetTbm_SupplierCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbm_Supplier>("GetTbm_SupplierCode");
        }
    
        public virtual ObjectResult<tbm_Supplier> GetTbm_SupplierCode(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbm_Supplier>("GetTbm_SupplierCode", mergeOption);
        }
    
        public virtual ObjectResult<doReportTemplatePath> GetReportTemplatePath(string documentCode)
        {
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doReportTemplatePath>("GetReportTemplatePath", documentCodeParameter);
        }
    
        public virtual ObjectResult<doRunningNo> GetNextRunningCode(string nameCode, Nullable<bool> isLockRow)
        {
            var nameCodeParameter = nameCode != null ?
                new ObjectParameter("NameCode", nameCode) :
                new ObjectParameter("NameCode", typeof(string));
    
            var isLockRowParameter = isLockRow.HasValue ?
                new ObjectParameter("IsLockRow", isLockRow) :
                new ObjectParameter("IsLockRow", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doRunningNo>("GetNextRunningCode", nameCodeParameter, isLockRowParameter);
        }
    
        public virtual ObjectResult<doSystemConfig> GetSystemConfig(string configName)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doSystemConfig>("GetSystemConfig", configNameParameter);
        }
    
        public virtual ObjectResult<dtDocumentList> InsertDocumentList(string documentNo, string documentOCC, string documentCode, string contractCode, string oCC, string quotationTargetCode, string alphabet, string projectCode, string billingTargetCode, string instrumentCode, string contractOfficeCode, string operationOfficeCode, string billingOfficeCode, string issueOfficeCode, Nullable<System.DateTime> generateDate, Nullable<int> reportMonth, Nullable<int> reportYear, string filePath, Nullable<int> downloadCount, Nullable<int> managementNo, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string locationCode, Nullable<int> minManagementNo, Nullable<int> maxManagementNo)
        {
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var documentOCCParameter = documentOCC != null ?
                new ObjectParameter("DocumentOCC", documentOCC) :
                new ObjectParameter("DocumentOCC", typeof(string));
    
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var oCCParameter = oCC != null ?
                new ObjectParameter("OCC", oCC) :
                new ObjectParameter("OCC", typeof(string));
    
            var quotationTargetCodeParameter = quotationTargetCode != null ?
                new ObjectParameter("QuotationTargetCode", quotationTargetCode) :
                new ObjectParameter("QuotationTargetCode", typeof(string));
    
            var alphabetParameter = alphabet != null ?
                new ObjectParameter("Alphabet", alphabet) :
                new ObjectParameter("Alphabet", typeof(string));
    
            var projectCodeParameter = projectCode != null ?
                new ObjectParameter("ProjectCode", projectCode) :
                new ObjectParameter("ProjectCode", typeof(string));
    
            var billingTargetCodeParameter = billingTargetCode != null ?
                new ObjectParameter("BillingTargetCode", billingTargetCode) :
                new ObjectParameter("BillingTargetCode", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var contractOfficeCodeParameter = contractOfficeCode != null ?
                new ObjectParameter("ContractOfficeCode", contractOfficeCode) :
                new ObjectParameter("ContractOfficeCode", typeof(string));
    
            var operationOfficeCodeParameter = operationOfficeCode != null ?
                new ObjectParameter("OperationOfficeCode", operationOfficeCode) :
                new ObjectParameter("OperationOfficeCode", typeof(string));
    
            var billingOfficeCodeParameter = billingOfficeCode != null ?
                new ObjectParameter("BillingOfficeCode", billingOfficeCode) :
                new ObjectParameter("BillingOfficeCode", typeof(string));
    
            var issueOfficeCodeParameter = issueOfficeCode != null ?
                new ObjectParameter("IssueOfficeCode", issueOfficeCode) :
                new ObjectParameter("IssueOfficeCode", typeof(string));
    
            var generateDateParameter = generateDate.HasValue ?
                new ObjectParameter("GenerateDate", generateDate) :
                new ObjectParameter("GenerateDate", typeof(System.DateTime));
    
            var reportMonthParameter = reportMonth.HasValue ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(int));
    
            var reportYearParameter = reportYear.HasValue ?
                new ObjectParameter("ReportYear", reportYear) :
                new ObjectParameter("ReportYear", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var downloadCountParameter = downloadCount.HasValue ?
                new ObjectParameter("DownloadCount", downloadCount) :
                new ObjectParameter("DownloadCount", typeof(int));
    
            var managementNoParameter = managementNo.HasValue ?
                new ObjectParameter("ManagementNo", managementNo) :
                new ObjectParameter("ManagementNo", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var minManagementNoParameter = minManagementNo.HasValue ?
                new ObjectParameter("MinManagementNo", minManagementNo) :
                new ObjectParameter("MinManagementNo", typeof(int));
    
            var maxManagementNoParameter = maxManagementNo.HasValue ?
                new ObjectParameter("MaxManagementNo", maxManagementNo) :
                new ObjectParameter("MaxManagementNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtDocumentList>("InsertDocumentList", documentNoParameter, documentOCCParameter, documentCodeParameter, contractCodeParameter, oCCParameter, quotationTargetCodeParameter, alphabetParameter, projectCodeParameter, billingTargetCodeParameter, instrumentCodeParameter, contractOfficeCodeParameter, operationOfficeCodeParameter, billingOfficeCodeParameter, issueOfficeCodeParameter, generateDateParameter, reportMonthParameter, reportYearParameter, filePathParameter, downloadCountParameter, managementNoParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, locationCodeParameter, minManagementNoParameter, maxManagementNoParameter);
        }
    
        public virtual ObjectResult<doDocumentNoName> GetDocumentNoNameByDocumentCode(string pchrDocumentCode)
        {
            var pchrDocumentCodeParameter = pchrDocumentCode != null ?
                new ObjectParameter("pchrDocumentCode", pchrDocumentCode) :
                new ObjectParameter("pchrDocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doDocumentNoName>("GetDocumentNoNameByDocumentCode", pchrDocumentCodeParameter);
        }
    
        public virtual ObjectResult<doOperationType> GetOperationTypeList(string pcharC_OPERATION_TYPE)
        {
            var pcharC_OPERATION_TYPEParameter = pcharC_OPERATION_TYPE != null ?
                new ObjectParameter("pcharC_OPERATION_TYPE", pcharC_OPERATION_TYPE) :
                new ObjectParameter("pcharC_OPERATION_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doOperationType>("GetOperationTypeList", pcharC_OPERATION_TYPEParameter);
        }
    
        public virtual ObjectResult<dtBatchProcess> GetBatchProcessDataList(string pC_CONFIG_SUSPEND_FLAG, string pC_BATCH_STATUS, string pC_BATCH_LAST_RESULT, string pC_BATCH_STATUS_PROCESSING, Nullable<bool> pC_FLAG_ON, Nullable<bool> pC_FLAG_OFF)
        {
            var pC_CONFIG_SUSPEND_FLAGParameter = pC_CONFIG_SUSPEND_FLAG != null ?
                new ObjectParameter("pC_CONFIG_SUSPEND_FLAG", pC_CONFIG_SUSPEND_FLAG) :
                new ObjectParameter("pC_CONFIG_SUSPEND_FLAG", typeof(string));
    
            var pC_BATCH_STATUSParameter = pC_BATCH_STATUS != null ?
                new ObjectParameter("pC_BATCH_STATUS", pC_BATCH_STATUS) :
                new ObjectParameter("pC_BATCH_STATUS", typeof(string));
    
            var pC_BATCH_LAST_RESULTParameter = pC_BATCH_LAST_RESULT != null ?
                new ObjectParameter("pC_BATCH_LAST_RESULT", pC_BATCH_LAST_RESULT) :
                new ObjectParameter("pC_BATCH_LAST_RESULT", typeof(string));
    
            var pC_BATCH_STATUS_PROCESSINGParameter = pC_BATCH_STATUS_PROCESSING != null ?
                new ObjectParameter("pC_BATCH_STATUS_PROCESSING", pC_BATCH_STATUS_PROCESSING) :
                new ObjectParameter("pC_BATCH_STATUS_PROCESSING", typeof(string));
    
            var pC_FLAG_ONParameter = pC_FLAG_ON.HasValue ?
                new ObjectParameter("pC_FLAG_ON", pC_FLAG_ON) :
                new ObjectParameter("pC_FLAG_ON", typeof(bool));
    
            var pC_FLAG_OFFParameter = pC_FLAG_OFF.HasValue ?
                new ObjectParameter("pC_FLAG_OFF", pC_FLAG_OFF) :
                new ObjectParameter("pC_FLAG_OFF", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtBatchProcess>("GetBatchProcessDataList", pC_CONFIG_SUSPEND_FLAGParameter, pC_BATCH_STATUSParameter, pC_BATCH_LAST_RESULTParameter, pC_BATCH_STATUS_PROCESSINGParameter, pC_FLAG_ONParameter, pC_FLAG_OFFParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RunBatch(string pBatchCode, string pBatchName, string pBatchDescription, string pBatchLastResult, string pBatchStatus, Nullable<int> pTotal, Nullable<int> pComplete, Nullable<int> pFailed, string pBatchJobName, Nullable<System.DateTime> pBatchDate, string pBatchUser, string pC_BATCH_STATUS_FAILED, string pC_BATCH_STATUS_PROCESSING, string pC_BATCH_STATUS_SUCCEEDED, string pC_EVENT_TYPE_INFORMATION, string pC_LOG_NIGHT_BATCH_ERROR)
        {
            var pBatchCodeParameter = pBatchCode != null ?
                new ObjectParameter("pBatchCode", pBatchCode) :
                new ObjectParameter("pBatchCode", typeof(string));
    
            var pBatchNameParameter = pBatchName != null ?
                new ObjectParameter("pBatchName", pBatchName) :
                new ObjectParameter("pBatchName", typeof(string));
    
            var pBatchDescriptionParameter = pBatchDescription != null ?
                new ObjectParameter("pBatchDescription", pBatchDescription) :
                new ObjectParameter("pBatchDescription", typeof(string));
    
            var pBatchLastResultParameter = pBatchLastResult != null ?
                new ObjectParameter("pBatchLastResult", pBatchLastResult) :
                new ObjectParameter("pBatchLastResult", typeof(string));
    
            var pBatchStatusParameter = pBatchStatus != null ?
                new ObjectParameter("pBatchStatus", pBatchStatus) :
                new ObjectParameter("pBatchStatus", typeof(string));
    
            var pTotalParameter = pTotal.HasValue ?
                new ObjectParameter("pTotal", pTotal) :
                new ObjectParameter("pTotal", typeof(int));
    
            var pCompleteParameter = pComplete.HasValue ?
                new ObjectParameter("pComplete", pComplete) :
                new ObjectParameter("pComplete", typeof(int));
    
            var pFailedParameter = pFailed.HasValue ?
                new ObjectParameter("pFailed", pFailed) :
                new ObjectParameter("pFailed", typeof(int));
    
            var pBatchJobNameParameter = pBatchJobName != null ?
                new ObjectParameter("pBatchJobName", pBatchJobName) :
                new ObjectParameter("pBatchJobName", typeof(string));
    
            var pBatchDateParameter = pBatchDate.HasValue ?
                new ObjectParameter("pBatchDate", pBatchDate) :
                new ObjectParameter("pBatchDate", typeof(System.DateTime));
    
            var pBatchUserParameter = pBatchUser != null ?
                new ObjectParameter("pBatchUser", pBatchUser) :
                new ObjectParameter("pBatchUser", typeof(string));
    
            var pC_BATCH_STATUS_FAILEDParameter = pC_BATCH_STATUS_FAILED != null ?
                new ObjectParameter("pC_BATCH_STATUS_FAILED", pC_BATCH_STATUS_FAILED) :
                new ObjectParameter("pC_BATCH_STATUS_FAILED", typeof(string));
    
            var pC_BATCH_STATUS_PROCESSINGParameter = pC_BATCH_STATUS_PROCESSING != null ?
                new ObjectParameter("pC_BATCH_STATUS_PROCESSING", pC_BATCH_STATUS_PROCESSING) :
                new ObjectParameter("pC_BATCH_STATUS_PROCESSING", typeof(string));
    
            var pC_BATCH_STATUS_SUCCEEDEDParameter = pC_BATCH_STATUS_SUCCEEDED != null ?
                new ObjectParameter("pC_BATCH_STATUS_SUCCEEDED", pC_BATCH_STATUS_SUCCEEDED) :
                new ObjectParameter("pC_BATCH_STATUS_SUCCEEDED", typeof(string));
    
            var pC_EVENT_TYPE_INFORMATIONParameter = pC_EVENT_TYPE_INFORMATION != null ?
                new ObjectParameter("pC_EVENT_TYPE_INFORMATION", pC_EVENT_TYPE_INFORMATION) :
                new ObjectParameter("pC_EVENT_TYPE_INFORMATION", typeof(string));
    
            var pC_LOG_NIGHT_BATCH_ERRORParameter = pC_LOG_NIGHT_BATCH_ERROR != null ?
                new ObjectParameter("pC_LOG_NIGHT_BATCH_ERROR", pC_LOG_NIGHT_BATCH_ERROR) :
                new ObjectParameter("pC_LOG_NIGHT_BATCH_ERROR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RunBatch", pBatchCodeParameter, pBatchNameParameter, pBatchDescriptionParameter, pBatchLastResultParameter, pBatchStatusParameter, pTotalParameter, pCompleteParameter, pFailedParameter, pBatchJobNameParameter, pBatchDateParameter, pBatchUserParameter, pC_BATCH_STATUS_FAILEDParameter, pC_BATCH_STATUS_PROCESSINGParameter, pC_BATCH_STATUS_SUCCEEDEDParameter, pC_EVENT_TYPE_INFORMATIONParameter, pC_LOG_NIGHT_BATCH_ERRORParameter);
        }
    
        public virtual ObjectResult<string> IsSystemSuspending(string pcharC_CONFIG_SUSPEND_FLAG)
        {
            var pcharC_CONFIG_SUSPEND_FLAGParameter = pcharC_CONFIG_SUSPEND_FLAG != null ?
                new ObjectParameter("pcharC_CONFIG_SUSPEND_FLAG", pcharC_CONFIG_SUSPEND_FLAG) :
                new ObjectParameter("pcharC_CONFIG_SUSPEND_FLAG", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("IsSystemSuspending", pcharC_CONFIG_SUSPEND_FLAGParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> KeepHistory_ef(string pchrEmpNo, string pchrLogType)
        {
            var pchrEmpNoParameter = pchrEmpNo != null ?
                new ObjectParameter("pchrEmpNo", pchrEmpNo) :
                new ObjectParameter("pchrEmpNo", typeof(string));
    
            var pchrLogTypeParameter = pchrLogType != null ?
                new ObjectParameter("pchrLogType", pchrLogType) :
                new ObjectParameter("pchrLogType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("KeepHistory_ef", pchrEmpNoParameter, pchrLogTypeParameter);
        }
    
        public virtual ObjectResult<dtMonthYear> GetLogMonthYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtMonthYear>("GetLogMonthYear");
        }
    
        public virtual ObjectResult<doMisPurge> GetMisPurge(string purgeStatus)
        {
            var purgeStatusParameter = purgeStatus != null ?
                new ObjectParameter("PurgeStatus", purgeStatus) :
                new ObjectParameter("PurgeStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doMisPurge>("GetMisPurge", purgeStatusParameter);
        }
    
        public virtual ObjectResult<dtTPL> GetTbt_Purgelog(Nullable<System.DateTime> pPurgeMonthYear)
        {
            var pPurgeMonthYearParameter = pPurgeMonthYear.HasValue ?
                new ObjectParameter("pPurgeMonthYear", pPurgeMonthYear) :
                new ObjectParameter("pPurgeMonthYear", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtTPL>("GetTbt_Purgelog", pPurgeMonthYearParameter);
        }
    
        public virtual ObjectResult<dtUserPermission> RefreshPermissionData(string pEmpNo, string xml_dtBelonging)
        {
            var pEmpNoParameter = pEmpNo != null ?
                new ObjectParameter("pEmpNo", pEmpNo) :
                new ObjectParameter("pEmpNo", typeof(string));
    
            var xml_dtBelongingParameter = xml_dtBelonging != null ?
                new ObjectParameter("xml_dtBelonging", xml_dtBelonging) :
                new ObjectParameter("xml_dtBelonging", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtUserPermission>("RefreshPermissionData", pEmpNoParameter, xml_dtBelongingParameter);
        }
    
        public virtual ObjectResult<dtDocumentNameDataList> GetDocumentNameDataList(string pchvDocumentType, string pObjectIDList)
        {
            var pchvDocumentTypeParameter = pchvDocumentType != null ?
                new ObjectParameter("pchvDocumentType", pchvDocumentType) :
                new ObjectParameter("pchvDocumentType", typeof(string));
    
            var pObjectIDListParameter = pObjectIDList != null ?
                new ObjectParameter("pObjectIDList", pObjectIDList) :
                new ObjectParameter("pObjectIDList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtDocumentNameDataList>("GetDocumentNameDataList", pchvDocumentTypeParameter, pObjectIDListParameter);
        }
    
        public virtual ObjectResult<doEmpCodeName> GetEmpCodeName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doEmpCodeName>("GetEmpCodeName");
        }
    
        public virtual int DeleteAttachFileByID(Nullable<int> attachFileID)
        {
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAttachFileByID", attachFileIDParameter);
        }
    
        public virtual int DeleteAttachFileByRelatedID(string relatedID)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAttachFileByRelatedID", relatedIDParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> GetAttachFile(string relatedID)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("GetAttachFile", relatedIDParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> GetAttachFile(string relatedID, MergeOption mergeOption)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("GetAttachFile", mergeOption, relatedIDParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> InsertAttachFile(string relatedID, string fileName, string fileType, Nullable<int> fileSize, string filePath, Nullable<bool> uploadCompleteFlag, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var uploadCompleteFlagParameter = uploadCompleteFlag.HasValue ?
                new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag) :
                new ObjectParameter("UploadCompleteFlag", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("InsertAttachFile", relatedIDParameter, fileNameParameter, fileTypeParameter, fileSizeParameter, filePathParameter, uploadCompleteFlagParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> InsertAttachFile(string relatedID, string fileName, string fileType, Nullable<int> fileSize, string filePath, Nullable<bool> uploadCompleteFlag, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, MergeOption mergeOption)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var uploadCompleteFlagParameter = uploadCompleteFlag.HasValue ?
                new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag) :
                new ObjectParameter("UploadCompleteFlag", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("InsertAttachFile", mergeOption, relatedIDParameter, fileNameParameter, fileTypeParameter, fileSizeParameter, filePathParameter, uploadCompleteFlagParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<dtTotalAttachFileSize> GetTotalAttachFileSize(string relatedID)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtTotalAttachFileSize>("GetTotalAttachFileSize", relatedIDParameter);
        }
    
        public virtual int UpdateFlagAttachFile(string relatedID, string newRelatedID, string newFileName, string filePath, Nullable<int> attachFileID)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var newRelatedIDParameter = newRelatedID != null ?
                new ObjectParameter("NewRelatedID", newRelatedID) :
                new ObjectParameter("NewRelatedID", typeof(string));
    
            var newFileNameParameter = newFileName != null ?
                new ObjectParameter("NewFileName", newFileName) :
                new ObjectParameter("NewFileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFlagAttachFile", relatedIDParameter, newRelatedIDParameter, newFileNameParameter, filePathParameter, attachFileIDParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentReports> GetDocumentReportsList(string pDocumentNo, string pDocumentOCC, string pDocumentCode)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentReports>("GetDocumentReportsList", pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentReports> GetDocumentReportsList(string pDocumentNo, string pDocumentOCC, string pDocumentCode, MergeOption mergeOption)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentReports>("GetDocumentReportsList", mergeOption, pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentReports> InsertDocumentReports(string pDocumentNo, string pDocumentOCC, string pDocumentCode, byte[] pFileBinary, Nullable<System.DateTime> pCreateDate, string pCreateBy)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            var pFileBinaryParameter = pFileBinary != null ?
                new ObjectParameter("pFileBinary", pFileBinary) :
                new ObjectParameter("pFileBinary", typeof(byte[]));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentReports>("InsertDocumentReports", pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter, pFileBinaryParameter, pCreateDateParameter, pCreateByParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentReports> InsertDocumentReports(string pDocumentNo, string pDocumentOCC, string pDocumentCode, byte[] pFileBinary, Nullable<System.DateTime> pCreateDate, string pCreateBy, MergeOption mergeOption)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            var pFileBinaryParameter = pFileBinary != null ?
                new ObjectParameter("pFileBinary", pFileBinary) :
                new ObjectParameter("pFileBinary", typeof(byte[]));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentReports>("InsertDocumentReports", mergeOption, pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter, pFileBinaryParameter, pCreateDateParameter, pCreateByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IsExistReport(string pDocumentNo, string pDocumentOCC, string pDocumentCode)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IsExistReport", pDocumentNoParameter, pDocumentOCCParameter, pDocumentCodeParameter);
        }
    
        public virtual int RunBatchAll(string pEmpNo, Nullable<System.DateTime> pBatchDate)
        {
            var pEmpNoParameter = pEmpNo != null ?
                new ObjectParameter("pEmpNo", pEmpNo) :
                new ObjectParameter("pEmpNo", typeof(string));
    
            var pBatchDateParameter = pBatchDate.HasValue ?
                new ObjectParameter("pBatchDate", pBatchDate) :
                new ObjectParameter("pBatchDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunBatchAll", pEmpNoParameter, pBatchDateParameter);
        }
    
        public virtual int RemoveAttachFile(Nullable<int> attachFileId, string relateId, Nullable<bool> uploadCompleteFlag)
        {
            var attachFileIdParameter = attachFileId.HasValue ?
                new ObjectParameter("AttachFileId", attachFileId) :
                new ObjectParameter("AttachFileId", typeof(int));
    
            var relateIdParameter = relateId != null ?
                new ObjectParameter("RelateId", relateId) :
                new ObjectParameter("RelateId", typeof(string));
    
            var uploadCompleteFlagParameter = uploadCompleteFlag.HasValue ?
                new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag) :
                new ObjectParameter("UploadCompleteFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveAttachFile", attachFileIdParameter, relateIdParameter, uploadCompleteFlagParameter);
        }
    
        public virtual ObjectResult<dtAttachFileNameID> GetAttachFileName(string relatedID, Nullable<int> attachFileID, Nullable<bool> uploadCompleteFlag)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            var uploadCompleteFlagParameter = uploadCompleteFlag.HasValue ?
                new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag) :
                new ObjectParameter("UploadCompleteFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtAttachFileNameID>("GetAttachFileName", relatedIDParameter, attachFileIDParameter, uploadCompleteFlagParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> GetTbt_AttachFile(string relatedID, Nullable<int> attachFileID, Nullable<bool> uploadCompleteFlag)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            var uploadCompleteFlagParameter = uploadCompleteFlag.HasValue ?
                new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag) :
                new ObjectParameter("UploadCompleteFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("GetTbt_AttachFile", relatedIDParameter, attachFileIDParameter, uploadCompleteFlagParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> GetTbt_AttachFile(string relatedID, Nullable<int> attachFileID, Nullable<bool> uploadCompleteFlag, MergeOption mergeOption)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            var uploadCompleteFlagParameter = uploadCompleteFlag.HasValue ?
                new ObjectParameter("UploadCompleteFlag", uploadCompleteFlag) :
                new ObjectParameter("UploadCompleteFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("GetTbt_AttachFile", mergeOption, relatedIDParameter, attachFileIDParameter, uploadCompleteFlagParameter);
        }
    
        public virtual int GetTbt_EmailTemplate(string strEmailTemplateName)
        {
            var strEmailTemplateNameParameter = strEmailTemplateName != null ?
                new ObjectParameter("strEmailTemplateName", strEmailTemplateName) :
                new ObjectParameter("strEmailTemplateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTbt_EmailTemplate", strEmailTemplateNameParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentList> GetTbt_DocumentList(string pDocumentNo, string pDocumentCode, string pDocumentOCC)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentList>("GetTbt_DocumentList", pDocumentNoParameter, pDocumentCodeParameter, pDocumentOCCParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentList> GetTbt_DocumentList(string pDocumentNo, string pDocumentCode, string pDocumentOCC, MergeOption mergeOption)
        {
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("pDocumentNo", pDocumentNo) :
                new ObjectParameter("pDocumentNo", typeof(string));
    
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            var pDocumentOCCParameter = pDocumentOCC != null ?
                new ObjectParameter("pDocumentOCC", pDocumentOCC) :
                new ObjectParameter("pDocumentOCC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentList>("GetTbt_DocumentList", mergeOption, pDocumentNoParameter, pDocumentCodeParameter, pDocumentOCCParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> CopyAttachFile(string relatedID, string newRelatedID, string module)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var newRelatedIDParameter = newRelatedID != null ?
                new ObjectParameter("NewRelatedID", newRelatedID) :
                new ObjectParameter("NewRelatedID", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("CopyAttachFile", relatedIDParameter, newRelatedIDParameter, moduleParameter);
        }
    
        public virtual ObjectResult<tbt_AttachFile> CopyAttachFile(string relatedID, string newRelatedID, string module, MergeOption mergeOption)
        {
            var relatedIDParameter = relatedID != null ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(string));
    
            var newRelatedIDParameter = newRelatedID != null ?
                new ObjectParameter("NewRelatedID", newRelatedID) :
                new ObjectParameter("NewRelatedID", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_AttachFile>("CopyAttachFile", mergeOption, relatedIDParameter, newRelatedIDParameter, moduleParameter);
        }
    
        public virtual ObjectResult<tbm_DocumentTemplate> GetDocumentTemplateByDocumentCode(string pDocumentCode)
        {
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbm_DocumentTemplate>("GetDocumentTemplateByDocumentCode", pDocumentCodeParameter);
        }
    
        public virtual ObjectResult<tbm_DocumentTemplate> GetDocumentTemplateByDocumentCode(string pDocumentCode, MergeOption mergeOption)
        {
            var pDocumentCodeParameter = pDocumentCode != null ?
                new ObjectParameter("pDocumentCode", pDocumentCode) :
                new ObjectParameter("pDocumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbm_DocumentTemplate>("GetDocumentTemplateByDocumentCode", mergeOption, pDocumentCodeParameter);
        }
    
        public virtual ObjectResult<dtAttachFileTemporary> InsertTbt_AttachFileTemporary(Nullable<int> pAttachFileID, string pRelatedID, string pFileName, string pFileType, Nullable<int> pFileSize, string pFilePath, Nullable<bool> pUploadCompleteFlag, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, string pSessionID)
        {
            var pAttachFileIDParameter = pAttachFileID.HasValue ?
                new ObjectParameter("pAttachFileID", pAttachFileID) :
                new ObjectParameter("pAttachFileID", typeof(int));
    
            var pRelatedIDParameter = pRelatedID != null ?
                new ObjectParameter("pRelatedID", pRelatedID) :
                new ObjectParameter("pRelatedID", typeof(string));
    
            var pFileNameParameter = pFileName != null ?
                new ObjectParameter("pFileName", pFileName) :
                new ObjectParameter("pFileName", typeof(string));
    
            var pFileTypeParameter = pFileType != null ?
                new ObjectParameter("pFileType", pFileType) :
                new ObjectParameter("pFileType", typeof(string));
    
            var pFileSizeParameter = pFileSize.HasValue ?
                new ObjectParameter("pFileSize", pFileSize) :
                new ObjectParameter("pFileSize", typeof(int));
    
            var pFilePathParameter = pFilePath != null ?
                new ObjectParameter("pFilePath", pFilePath) :
                new ObjectParameter("pFilePath", typeof(string));
    
            var pUploadCompleteFlagParameter = pUploadCompleteFlag.HasValue ?
                new ObjectParameter("pUploadCompleteFlag", pUploadCompleteFlag) :
                new ObjectParameter("pUploadCompleteFlag", typeof(bool));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            var pUpdateDateParameter = pUpdateDate.HasValue ?
                new ObjectParameter("pUpdateDate", pUpdateDate) :
                new ObjectParameter("pUpdateDate", typeof(System.DateTime));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtAttachFileTemporary>("InsertTbt_AttachFileTemporary", pAttachFileIDParameter, pRelatedIDParameter, pFileNameParameter, pFileTypeParameter, pFileSizeParameter, pFilePathParameter, pUploadCompleteFlagParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pSessionIDParameter);
        }
    
        public virtual int BackUpAttachFile(Nullable<int> pAttachFileID, string pSessionID)
        {
            var pAttachFileIDParameter = pAttachFileID.HasValue ?
                new ObjectParameter("pAttachFileID", pAttachFileID) :
                new ObjectParameter("pAttachFileID", typeof(int));
    
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BackUpAttachFile", pAttachFileIDParameter, pSessionIDParameter);
        }
    
        public virtual ObjectResult<dtAttachFileTemporary> GetTbt_AttachFileTemporary(string pSessionID)
        {
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtAttachFileTemporary>("GetTbt_AttachFileTemporary", pSessionIDParameter);
        }
    
        public virtual int RemoveAttachFileTemporary(string pSessionID, Nullable<bool> pIsDeleteRealAttachFile)
        {
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            var pIsDeleteRealAttachFileParameter = pIsDeleteRealAttachFile.HasValue ?
                new ObjectParameter("pIsDeleteRealAttachFile", pIsDeleteRealAttachFile) :
                new ObjectParameter("pIsDeleteRealAttachFile", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveAttachFileTemporary", pSessionIDParameter, pIsDeleteRealAttachFileParameter);
        }
    
        public virtual ObjectResult<dtAttachFileForGridView> GetAttachFileForGridView(string pRelatedID)
        {
            var pRelatedIDParameter = pRelatedID != null ?
                new ObjectParameter("pRelatedID", pRelatedID) :
                new ObjectParameter("pRelatedID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtAttachFileForGridView>("GetAttachFileForGridView", pRelatedIDParameter);
        }
    
        public virtual ObjectResult<dtGetAccumulateFileSize> GetAccumulateFileSize(string pRelatedID, string pSession)
        {
            var pRelatedIDParameter = pRelatedID != null ?
                new ObjectParameter("pRelatedID", pRelatedID) :
                new ObjectParameter("pRelatedID", typeof(string));
    
            var pSessionParameter = pSession != null ?
                new ObjectParameter("pSession", pSession) :
                new ObjectParameter("pSession", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetAccumulateFileSize>("GetAccumulateFileSize", pRelatedIDParameter, pSessionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateBatchResult(string vBatchCode, string vBatchStatus, string vBatchLastResult, Nullable<int> vTotal, Nullable<int> vComplete, Nullable<int> vFailed, string vBatchUser)
        {
            var vBatchCodeParameter = vBatchCode != null ?
                new ObjectParameter("vBatchCode", vBatchCode) :
                new ObjectParameter("vBatchCode", typeof(string));
    
            var vBatchStatusParameter = vBatchStatus != null ?
                new ObjectParameter("vBatchStatus", vBatchStatus) :
                new ObjectParameter("vBatchStatus", typeof(string));
    
            var vBatchLastResultParameter = vBatchLastResult != null ?
                new ObjectParameter("vBatchLastResult", vBatchLastResult) :
                new ObjectParameter("vBatchLastResult", typeof(string));
    
            var vTotalParameter = vTotal.HasValue ?
                new ObjectParameter("vTotal", vTotal) :
                new ObjectParameter("vTotal", typeof(int));
    
            var vCompleteParameter = vComplete.HasValue ?
                new ObjectParameter("vComplete", vComplete) :
                new ObjectParameter("vComplete", typeof(int));
    
            var vFailedParameter = vFailed.HasValue ?
                new ObjectParameter("vFailed", vFailed) :
                new ObjectParameter("vFailed", typeof(int));
    
            var vBatchUserParameter = vBatchUser != null ?
                new ObjectParameter("vBatchUser", vBatchUser) :
                new ObjectParameter("vBatchUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateBatchResult", vBatchCodeParameter, vBatchStatusParameter, vBatchLastResultParameter, vTotalParameter, vCompleteParameter, vFailedParameter, vBatchUserParameter);
        }
    
        public virtual ObjectResult<GetBatchProcessRunAll_Result> GetBatchProcessRunAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProcessRunAll_Result>("GetBatchProcessRunAll");
        }
    
        public virtual int InsertTbt_BatchLog(Nullable<System.DateTime> pBatchDate, string pBatchCode, string pErrorMessage, Nullable<bool> pErrorFlag, string pBatchUser)
        {
            var pBatchDateParameter = pBatchDate.HasValue ?
                new ObjectParameter("pBatchDate", pBatchDate) :
                new ObjectParameter("pBatchDate", typeof(System.DateTime));
    
            var pBatchCodeParameter = pBatchCode != null ?
                new ObjectParameter("pBatchCode", pBatchCode) :
                new ObjectParameter("pBatchCode", typeof(string));
    
            var pErrorMessageParameter = pErrorMessage != null ?
                new ObjectParameter("pErrorMessage", pErrorMessage) :
                new ObjectParameter("pErrorMessage", typeof(string));
    
            var pErrorFlagParameter = pErrorFlag.HasValue ?
                new ObjectParameter("pErrorFlag", pErrorFlag) :
                new ObjectParameter("pErrorFlag", typeof(bool));
    
            var pBatchUserParameter = pBatchUser != null ?
                new ObjectParameter("pBatchUser", pBatchUser) :
                new ObjectParameter("pBatchUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTbt_BatchLog", pBatchDateParameter, pBatchCodeParameter, pErrorMessageParameter, pErrorFlagParameter, pBatchUserParameter);
        }
    
        public virtual ObjectResult<dtDocumentListForPrining> GetDocumentListForPrining(string c_DOCUMENT_TYPE_INCOME, string c_DOCUMENT_TYPE_COMMON, Nullable<System.DateTime> datIssueDate, Nullable<int> intManagementNoFrom, Nullable<int> intManagementNoTo)
        {
            var c_DOCUMENT_TYPE_INCOMEParameter = c_DOCUMENT_TYPE_INCOME != null ?
                new ObjectParameter("C_DOCUMENT_TYPE_INCOME", c_DOCUMENT_TYPE_INCOME) :
                new ObjectParameter("C_DOCUMENT_TYPE_INCOME", typeof(string));
    
            var c_DOCUMENT_TYPE_COMMONParameter = c_DOCUMENT_TYPE_COMMON != null ?
                new ObjectParameter("C_DOCUMENT_TYPE_COMMON", c_DOCUMENT_TYPE_COMMON) :
                new ObjectParameter("C_DOCUMENT_TYPE_COMMON", typeof(string));
    
            var datIssueDateParameter = datIssueDate.HasValue ?
                new ObjectParameter("datIssueDate", datIssueDate) :
                new ObjectParameter("datIssueDate", typeof(System.DateTime));
    
            var intManagementNoFromParameter = intManagementNoFrom.HasValue ?
                new ObjectParameter("intManagementNoFrom", intManagementNoFrom) :
                new ObjectParameter("intManagementNoFrom", typeof(int));
    
            var intManagementNoToParameter = intManagementNoTo.HasValue ?
                new ObjectParameter("intManagementNoTo", intManagementNoTo) :
                new ObjectParameter("intManagementNoTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtDocumentListForPrining>("GetDocumentListForPrining", c_DOCUMENT_TYPE_INCOMEParameter, c_DOCUMENT_TYPE_COMMONParameter, datIssueDateParameter, intManagementNoFromParameter, intManagementNoToParameter);
        }
    
        public virtual ObjectResult<dtIssueListData> GetTmpIssueListData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtIssueListData>("GetTmpIssueListData");
        }
    
        public virtual ObjectResult<dtBillingOffice> GetBillingOffice(string documentType, Nullable<System.DateTime> datBatchDate)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var datBatchDateParameter = datBatchDate.HasValue ?
                new ObjectParameter("datBatchDate", datBatchDate) :
                new ObjectParameter("datBatchDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtBillingOffice>("GetBillingOffice", documentTypeParameter, datBatchDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetMaxManagementNo(string documentType, Nullable<System.DateTime> batchDate)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var batchDateParameter = batchDate.HasValue ?
                new ObjectParameter("BatchDate", batchDate) :
                new ObjectParameter("BatchDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMaxManagementNo", documentTypeParameter, batchDateParameter);
        }
    
        public virtual ObjectResult<dtIssueListData> GetIssueList(string documentType, string documentCode, Nullable<System.DateTime> batchDate, string billingOfficeCode, Nullable<int> intMaxManagementNo)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var batchDateParameter = batchDate.HasValue ?
                new ObjectParameter("BatchDate", batchDate) :
                new ObjectParameter("BatchDate", typeof(System.DateTime));
    
            var billingOfficeCodeParameter = billingOfficeCode != null ?
                new ObjectParameter("BillingOfficeCode", billingOfficeCode) :
                new ObjectParameter("BillingOfficeCode", typeof(string));
    
            var intMaxManagementNoParameter = intMaxManagementNo.HasValue ?
                new ObjectParameter("intMaxManagementNo", intMaxManagementNo) :
                new ObjectParameter("intMaxManagementNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtIssueListData>("GetIssueList", documentTypeParameter, documentCodeParameter, batchDateParameter, billingOfficeCodeParameter, intMaxManagementNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetNextIssueListNo(string nameCode)
        {
            var nameCodeParameter = nameCode != null ?
                new ObjectParameter("NameCode", nameCode) :
                new ObjectParameter("NameCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetNextIssueListNo", nameCodeParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentList> UpdateManageNo(string xml)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentList>("UpdateManageNo", xmlParameter);
        }
    
        public virtual ObjectResult<tbt_DocumentList> UpdateManageNo(string xml, MergeOption mergeOption)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_DocumentList>("UpdateManageNo", mergeOption, xmlParameter);
        }
    
        public virtual ObjectResult<doPopupSubMenuList> GetPopupSubMenuList(string popupSubmenuID)
        {
            var popupSubmenuIDParameter = popupSubmenuID != null ?
                new ObjectParameter("PopupSubmenuID", popupSubmenuID) :
                new ObjectParameter("PopupSubmenuID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doPopupSubMenuList>("GetPopupSubMenuList", popupSubmenuIDParameter);
        }
    
        public virtual ObjectResult<dtAccountDataOfCarryOverAndProfit> GetAccountDataOfCarryOverAndProfit(Nullable<System.DateTime> startTargetDate, Nullable<System.DateTime> endTargetDate, Nullable<System.DateTime> fiveBusinessDate, string productTypeCode, string c_PROD_TYPE_AL, string c_PROD_TYPE_ONLINE, string c_PROD_TYPE_BE, string c_PROD_TYPE_SG, string c_PROD_TYPE_MA, string c_PROD_TYPE_RENTAL_SALE, string c_GROUP_PRODUCT_TYPE_N, string c_GROUP_PRODUCT_TYPE_SG, string c_GROUP_PRODUCT_TYPE_MA, string c_BILLING_TYPE_SERVICE, string c_RENTAL_CHANGE_TYPE)
        {
            var startTargetDateParameter = startTargetDate.HasValue ?
                new ObjectParameter("StartTargetDate", startTargetDate) :
                new ObjectParameter("StartTargetDate", typeof(System.DateTime));
    
            var endTargetDateParameter = endTargetDate.HasValue ?
                new ObjectParameter("EndTargetDate", endTargetDate) :
                new ObjectParameter("EndTargetDate", typeof(System.DateTime));
    
            var fiveBusinessDateParameter = fiveBusinessDate.HasValue ?
                new ObjectParameter("FiveBusinessDate", fiveBusinessDate) :
                new ObjectParameter("FiveBusinessDate", typeof(System.DateTime));
    
            var productTypeCodeParameter = productTypeCode != null ?
                new ObjectParameter("ProductTypeCode", productTypeCode) :
                new ObjectParameter("ProductTypeCode", typeof(string));
    
            var c_PROD_TYPE_ALParameter = c_PROD_TYPE_AL != null ?
                new ObjectParameter("C_PROD_TYPE_AL", c_PROD_TYPE_AL) :
                new ObjectParameter("C_PROD_TYPE_AL", typeof(string));
    
            var c_PROD_TYPE_ONLINEParameter = c_PROD_TYPE_ONLINE != null ?
                new ObjectParameter("C_PROD_TYPE_ONLINE", c_PROD_TYPE_ONLINE) :
                new ObjectParameter("C_PROD_TYPE_ONLINE", typeof(string));
    
            var c_PROD_TYPE_BEParameter = c_PROD_TYPE_BE != null ?
                new ObjectParameter("C_PROD_TYPE_BE", c_PROD_TYPE_BE) :
                new ObjectParameter("C_PROD_TYPE_BE", typeof(string));
    
            var c_PROD_TYPE_SGParameter = c_PROD_TYPE_SG != null ?
                new ObjectParameter("C_PROD_TYPE_SG", c_PROD_TYPE_SG) :
                new ObjectParameter("C_PROD_TYPE_SG", typeof(string));
    
            var c_PROD_TYPE_MAParameter = c_PROD_TYPE_MA != null ?
                new ObjectParameter("C_PROD_TYPE_MA", c_PROD_TYPE_MA) :
                new ObjectParameter("C_PROD_TYPE_MA", typeof(string));
    
            var c_PROD_TYPE_RENTAL_SALEParameter = c_PROD_TYPE_RENTAL_SALE != null ?
                new ObjectParameter("C_PROD_TYPE_RENTAL_SALE", c_PROD_TYPE_RENTAL_SALE) :
                new ObjectParameter("C_PROD_TYPE_RENTAL_SALE", typeof(string));
    
            var c_GROUP_PRODUCT_TYPE_NParameter = c_GROUP_PRODUCT_TYPE_N != null ?
                new ObjectParameter("C_GROUP_PRODUCT_TYPE_N", c_GROUP_PRODUCT_TYPE_N) :
                new ObjectParameter("C_GROUP_PRODUCT_TYPE_N", typeof(string));
    
            var c_GROUP_PRODUCT_TYPE_SGParameter = c_GROUP_PRODUCT_TYPE_SG != null ?
                new ObjectParameter("C_GROUP_PRODUCT_TYPE_SG", c_GROUP_PRODUCT_TYPE_SG) :
                new ObjectParameter("C_GROUP_PRODUCT_TYPE_SG", typeof(string));
    
            var c_GROUP_PRODUCT_TYPE_MAParameter = c_GROUP_PRODUCT_TYPE_MA != null ?
                new ObjectParameter("C_GROUP_PRODUCT_TYPE_MA", c_GROUP_PRODUCT_TYPE_MA) :
                new ObjectParameter("C_GROUP_PRODUCT_TYPE_MA", typeof(string));
    
            var c_BILLING_TYPE_SERVICEParameter = c_BILLING_TYPE_SERVICE != null ?
                new ObjectParameter("C_BILLING_TYPE_SERVICE", c_BILLING_TYPE_SERVICE) :
                new ObjectParameter("C_BILLING_TYPE_SERVICE", typeof(string));
    
            var c_RENTAL_CHANGE_TYPEParameter = c_RENTAL_CHANGE_TYPE != null ?
                new ObjectParameter("C_RENTAL_CHANGE_TYPE", c_RENTAL_CHANGE_TYPE) :
                new ObjectParameter("C_RENTAL_CHANGE_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtAccountDataOfCarryOverAndProfit>("GetAccountDataOfCarryOverAndProfit", startTargetDateParameter, endTargetDateParameter, fiveBusinessDateParameter, productTypeCodeParameter, c_PROD_TYPE_ALParameter, c_PROD_TYPE_ONLINEParameter, c_PROD_TYPE_BEParameter, c_PROD_TYPE_SGParameter, c_PROD_TYPE_MAParameter, c_PROD_TYPE_RENTAL_SALEParameter, c_GROUP_PRODUCT_TYPE_NParameter, c_GROUP_PRODUCT_TYPE_SGParameter, c_GROUP_PRODUCT_TYPE_MAParameter, c_BILLING_TYPE_SERVICEParameter, c_RENTAL_CHANGE_TYPEParameter);
        }
    
        public virtual ObjectResult<tbt_ManageCarryOverProfit> GetTbt_ManageCarryOverProfit(string reportYear, string reportMonth, string productType)
        {
            var reportYearParameter = reportYear != null ?
                new ObjectParameter("ReportYear", reportYear) :
                new ObjectParameter("ReportYear", typeof(string));
    
            var reportMonthParameter = reportMonth != null ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_ManageCarryOverProfit>("GetTbt_ManageCarryOverProfit", reportYearParameter, reportMonthParameter, productTypeParameter);
        }
    
        public virtual ObjectResult<tbt_ManageCarryOverProfit> GetTbt_ManageCarryOverProfit(string reportYear, string reportMonth, string productType, MergeOption mergeOption)
        {
            var reportYearParameter = reportYear != null ?
                new ObjectParameter("ReportYear", reportYear) :
                new ObjectParameter("ReportYear", typeof(string));
    
            var reportMonthParameter = reportMonth != null ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_ManageCarryOverProfit>("GetTbt_ManageCarryOverProfit", mergeOption, reportYearParameter, reportMonthParameter, productTypeParameter);
        }
    
        public virtual ObjectResult<dtBusinessDateForAccountDataOfCarryOverAndProfit> GetBusinessDateForAccountDataOfCarryOverAndProfitProcess(Nullable<System.DateTime> batchDate)
        {
            var batchDateParameter = batchDate.HasValue ?
                new ObjectParameter("BatchDate", batchDate) :
                new ObjectParameter("BatchDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtBusinessDateForAccountDataOfCarryOverAndProfit>("GetBusinessDateForAccountDataOfCarryOverAndProfitProcess", batchDateParameter);
        }
    
        public virtual ObjectResult<tbt_ManageCarryOverProfit> InsertTbt_ManageCarryOverProfit(string xmlTbt_ManageCarryOverProfit)
        {
            var xmlTbt_ManageCarryOverProfitParameter = xmlTbt_ManageCarryOverProfit != null ?
                new ObjectParameter("xmlTbt_ManageCarryOverProfit", xmlTbt_ManageCarryOverProfit) :
                new ObjectParameter("xmlTbt_ManageCarryOverProfit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_ManageCarryOverProfit>("InsertTbt_ManageCarryOverProfit", xmlTbt_ManageCarryOverProfitParameter);
        }
    
        public virtual ObjectResult<tbt_ManageCarryOverProfit> InsertTbt_ManageCarryOverProfit(string xmlTbt_ManageCarryOverProfit, MergeOption mergeOption)
        {
            var xmlTbt_ManageCarryOverProfitParameter = xmlTbt_ManageCarryOverProfit != null ?
                new ObjectParameter("xmlTbt_ManageCarryOverProfit", xmlTbt_ManageCarryOverProfit) :
                new ObjectParameter("xmlTbt_ManageCarryOverProfit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_ManageCarryOverProfit>("InsertTbt_ManageCarryOverProfit", mergeOption, xmlTbt_ManageCarryOverProfitParameter);
        }
    
        public virtual ObjectResult<dtRptAccountDataOfCarryOverAndProfit> GetRptAccountDataOfCarryOverAndProfit(string reportYear, string reportMonth, string productType)
        {
            var reportYearParameter = reportYear != null ?
                new ObjectParameter("ReportYear", reportYear) :
                new ObjectParameter("ReportYear", typeof(string));
    
            var reportMonthParameter = reportMonth != null ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtRptAccountDataOfCarryOverAndProfit>("GetRptAccountDataOfCarryOverAndProfit", reportYearParameter, reportMonthParameter, productTypeParameter);
        }
    
        public virtual int DeleteAttachFileTemporaryByFileName(string pSessionID, string pFileName)
        {
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            var pFileNameParameter = pFileName != null ?
                new ObjectParameter("pFileName", pFileName) :
                new ObjectParameter("pFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAttachFileTemporaryByFileName", pSessionIDParameter, pFileNameParameter);
        }
    
        public virtual int UpdateBillingHistoryOfManageCarryOverProfit(string reportYear, string reportMonth, string productType, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var reportYearParameter = reportYear != null ?
                new ObjectParameter("ReportYear", reportYear) :
                new ObjectParameter("ReportYear", typeof(string));
    
            var reportMonthParameter = reportMonth != null ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBillingHistoryOfManageCarryOverProfit", reportYearParameter, reportMonthParameter, productTypeParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<doYearOfCarryOverProfit> GetYearOfCarryOverProfit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doYearOfCarryOverProfit>("GetYearOfCarryOverProfit");
        }
    
        public virtual ObjectResult<doResultManageCarryOverProfitForEdit> GetManageCarryOverProfitForEdit(string reportYear, string reportMonth, string productType, string contractCode, string billingOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
            var reportYearParameter = reportYear != null ?
                new ObjectParameter("ReportYear", reportYear) :
                new ObjectParameter("ReportYear", typeof(string));
    
            var reportMonthParameter = reportMonth != null ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var c_CURRENCY_LOCALParameter = c_CURRENCY_LOCAL != null ?
                new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL) :
                new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
    
            var c_CURRENCY_USParameter = c_CURRENCY_US != null ?
                new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US) :
                new ObjectParameter("C_CURRENCY_US", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doResultManageCarryOverProfitForEdit>("GetManageCarryOverProfitForEdit", reportYearParameter, reportMonthParameter, productTypeParameter, contractCodeParameter, billingOCCParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
    
        public virtual int UpdateTbtManageCarryOverProfit(string reportYear, string reportMonth, string contractCode, string billingOCC, Nullable<decimal> receiveAmount, Nullable<decimal> receiveAmountUsd, string receiveAmountCurrencyType, Nullable<decimal> incomeRentalFee, Nullable<decimal> incomeRentalFeeUsd, string incomeRentalFeeCurrencyType, Nullable<decimal> accumulatedReceiveAmount, Nullable<decimal> accumulatedReceiveAmountUsd, string accumulatedReceiveAmountCurrencyType, Nullable<decimal> accumulatedUnpaid, Nullable<decimal> accumulatedUnpaidUsd, string accumulatedUnpaidCurrencyType, Nullable<decimal> incomeVat, Nullable<decimal> incomeVatUsd, string incomeVatCurrencyType, Nullable<decimal> unpaidPeriod, Nullable<System.DateTime> incomeDate, string updateBy)
        {
            var reportYearParameter = reportYear != null ?
                new ObjectParameter("ReportYear", reportYear) :
                new ObjectParameter("ReportYear", typeof(string));
    
            var reportMonthParameter = reportMonth != null ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var receiveAmountParameter = receiveAmount.HasValue ?
                new ObjectParameter("ReceiveAmount", receiveAmount) :
                new ObjectParameter("ReceiveAmount", typeof(decimal));
    
            var receiveAmountUsdParameter = receiveAmountUsd.HasValue ?
                new ObjectParameter("ReceiveAmountUsd", receiveAmountUsd) :
                new ObjectParameter("ReceiveAmountUsd", typeof(decimal));
    
            var receiveAmountCurrencyTypeParameter = receiveAmountCurrencyType != null ?
                new ObjectParameter("ReceiveAmountCurrencyType", receiveAmountCurrencyType) :
                new ObjectParameter("ReceiveAmountCurrencyType", typeof(string));
    
            var incomeRentalFeeParameter = incomeRentalFee.HasValue ?
                new ObjectParameter("IncomeRentalFee", incomeRentalFee) :
                new ObjectParameter("IncomeRentalFee", typeof(decimal));
    
            var incomeRentalFeeUsdParameter = incomeRentalFeeUsd.HasValue ?
                new ObjectParameter("IncomeRentalFeeUsd", incomeRentalFeeUsd) :
                new ObjectParameter("IncomeRentalFeeUsd", typeof(decimal));
    
            var incomeRentalFeeCurrencyTypeParameter = incomeRentalFeeCurrencyType != null ?
                new ObjectParameter("IncomeRentalFeeCurrencyType", incomeRentalFeeCurrencyType) :
                new ObjectParameter("IncomeRentalFeeCurrencyType", typeof(string));
    
            var accumulatedReceiveAmountParameter = accumulatedReceiveAmount.HasValue ?
                new ObjectParameter("AccumulatedReceiveAmount", accumulatedReceiveAmount) :
                new ObjectParameter("AccumulatedReceiveAmount", typeof(decimal));
    
            var accumulatedReceiveAmountUsdParameter = accumulatedReceiveAmountUsd.HasValue ?
                new ObjectParameter("AccumulatedReceiveAmountUsd", accumulatedReceiveAmountUsd) :
                new ObjectParameter("AccumulatedReceiveAmountUsd", typeof(decimal));
    
            var accumulatedReceiveAmountCurrencyTypeParameter = accumulatedReceiveAmountCurrencyType != null ?
                new ObjectParameter("AccumulatedReceiveAmountCurrencyType", accumulatedReceiveAmountCurrencyType) :
                new ObjectParameter("AccumulatedReceiveAmountCurrencyType", typeof(string));
    
            var accumulatedUnpaidParameter = accumulatedUnpaid.HasValue ?
                new ObjectParameter("AccumulatedUnpaid", accumulatedUnpaid) :
                new ObjectParameter("AccumulatedUnpaid", typeof(decimal));
    
            var accumulatedUnpaidUsdParameter = accumulatedUnpaidUsd.HasValue ?
                new ObjectParameter("AccumulatedUnpaidUsd", accumulatedUnpaidUsd) :
                new ObjectParameter("AccumulatedUnpaidUsd", typeof(decimal));
    
            var accumulatedUnpaidCurrencyTypeParameter = accumulatedUnpaidCurrencyType != null ?
                new ObjectParameter("AccumulatedUnpaidCurrencyType", accumulatedUnpaidCurrencyType) :
                new ObjectParameter("AccumulatedUnpaidCurrencyType", typeof(string));
    
            var incomeVatParameter = incomeVat.HasValue ?
                new ObjectParameter("IncomeVat", incomeVat) :
                new ObjectParameter("IncomeVat", typeof(decimal));
    
            var incomeVatUsdParameter = incomeVatUsd.HasValue ?
                new ObjectParameter("IncomeVatUsd", incomeVatUsd) :
                new ObjectParameter("IncomeVatUsd", typeof(decimal));
    
            var incomeVatCurrencyTypeParameter = incomeVatCurrencyType != null ?
                new ObjectParameter("IncomeVatCurrencyType", incomeVatCurrencyType) :
                new ObjectParameter("IncomeVatCurrencyType", typeof(string));
    
            var unpaidPeriodParameter = unpaidPeriod.HasValue ?
                new ObjectParameter("UnpaidPeriod", unpaidPeriod) :
                new ObjectParameter("UnpaidPeriod", typeof(decimal));
    
            var incomeDateParameter = incomeDate.HasValue ?
                new ObjectParameter("IncomeDate", incomeDate) :
                new ObjectParameter("IncomeDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTbtManageCarryOverProfit", reportYearParameter, reportMonthParameter, contractCodeParameter, billingOCCParameter, receiveAmountParameter, receiveAmountUsdParameter, receiveAmountCurrencyTypeParameter, incomeRentalFeeParameter, incomeRentalFeeUsdParameter, incomeRentalFeeCurrencyTypeParameter, accumulatedReceiveAmountParameter, accumulatedReceiveAmountUsdParameter, accumulatedReceiveAmountCurrencyTypeParameter, accumulatedUnpaidParameter, accumulatedUnpaidUsdParameter, accumulatedUnpaidCurrencyTypeParameter, incomeVatParameter, incomeVatUsdParameter, incomeVatCurrencyTypeParameter, unpaidPeriodParameter, incomeDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<dtDocumentData> GetDocumentDataListByInventorySlipNo(string inventorySlipNo)
        {
            var inventorySlipNoParameter = inventorySlipNo != null ?
                new ObjectParameter("InventorySlipNo", inventorySlipNo) :
                new ObjectParameter("InventorySlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtDocumentData>("GetDocumentDataListByInventorySlipNo", inventorySlipNoParameter);
        }
    
        public virtual ObjectResult<tbs_BatchQueue> GetTbs_BatchQueue(Nullable<int> runId, Nullable<System.DateTime> nextRunFrom, Nullable<System.DateTime> nextRunTo)
        {
            var runIdParameter = runId.HasValue ?
                new ObjectParameter("RunId", runId) :
                new ObjectParameter("RunId", typeof(int));
    
            var nextRunFromParameter = nextRunFrom.HasValue ?
                new ObjectParameter("NextRunFrom", nextRunFrom) :
                new ObjectParameter("NextRunFrom", typeof(System.DateTime));
    
            var nextRunToParameter = nextRunTo.HasValue ?
                new ObjectParameter("NextRunTo", nextRunTo) :
                new ObjectParameter("NextRunTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbs_BatchQueue>("GetTbs_BatchQueue", runIdParameter, nextRunFromParameter, nextRunToParameter);
        }
    
        public virtual ObjectResult<tbs_BatchQueue> GetTbs_BatchQueue(Nullable<int> runId, Nullable<System.DateTime> nextRunFrom, Nullable<System.DateTime> nextRunTo, MergeOption mergeOption)
        {
            var runIdParameter = runId.HasValue ?
                new ObjectParameter("RunId", runId) :
                new ObjectParameter("RunId", typeof(int));
    
            var nextRunFromParameter = nextRunFrom.HasValue ?
                new ObjectParameter("NextRunFrom", nextRunFrom) :
                new ObjectParameter("NextRunFrom", typeof(System.DateTime));
    
            var nextRunToParameter = nextRunTo.HasValue ?
                new ObjectParameter("NextRunTo", nextRunTo) :
                new ObjectParameter("NextRunTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbs_BatchQueue>("GetTbs_BatchQueue", mergeOption, runIdParameter, nextRunFromParameter, nextRunToParameter);
        }
    
        public virtual ObjectResult<tbs_BatchQueue> UpdateTbs_BatchQueue(string xml_doTbsBatchQueue)
        {
            var xml_doTbsBatchQueueParameter = xml_doTbsBatchQueue != null ?
                new ObjectParameter("xml_doTbsBatchQueue", xml_doTbsBatchQueue) :
                new ObjectParameter("xml_doTbsBatchQueue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbs_BatchQueue>("UpdateTbs_BatchQueue", xml_doTbsBatchQueueParameter);
        }
    
        public virtual ObjectResult<tbs_BatchQueue> UpdateTbs_BatchQueue(string xml_doTbsBatchQueue, MergeOption mergeOption)
        {
            var xml_doTbsBatchQueueParameter = xml_doTbsBatchQueue != null ?
                new ObjectParameter("xml_doTbsBatchQueue", xml_doTbsBatchQueue) :
                new ObjectParameter("xml_doTbsBatchQueue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbs_BatchQueue>("UpdateTbs_BatchQueue", mergeOption, xml_doTbsBatchQueueParameter);
        }
    
        public virtual ObjectResult<dtDocumentData> GetDocumentDataListByDocumentCode(string documentNo, string documentCode, string documentOCC)
        {
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var documentOCCParameter = documentOCC != null ?
                new ObjectParameter("DocumentOCC", documentOCC) :
                new ObjectParameter("DocumentOCC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtDocumentData>("GetDocumentDataListByDocumentCode", documentNoParameter, documentCodeParameter, documentOCCParameter);
        }
    
        public virtual ObjectResult<dtReIssueInvoice> sp_CM_ReIssue_Invoice(string docNo, string updateBy)
        {
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtReIssueInvoice>("sp_CM_ReIssue_Invoice", docNoParameter, updateByParameter);
        }
    
        public virtual ObjectResult<dtReIssueReceipt> sp_CM_ReIssue_Receipt(string docNo, string updateBy)
        {
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtReIssueReceipt>("sp_CM_ReIssue_Receipt", docNoParameter, updateByParameter);
        }
    
        public virtual ObjectResult<dtReIssueCreditNote> sp_CM_ReIssue_CreditNote(string docNo, string updateBy)
        {
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtReIssueCreditNote>("sp_CM_ReIssue_CreditNote", docNoParameter, updateByParameter);
        }
    
        public virtual ObjectResult<dtReIssueTaxInvoice> sp_CM_ReIssue_TaxInvoice(string docNo, string updateBy)
        {
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtReIssueTaxInvoice>("sp_CM_ReIssue_TaxInvoice", docNoParameter, updateByParameter);
        }
    
        public virtual ObjectResult<sp_CM_GetTbs_DocumentOutput_Result> GetTbs_DocumentOutput(string documentCode, Nullable<int> documentCodeSeq, Nullable<System.DateTime> startDay)
        {
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var documentCodeSeqParameter = documentCodeSeq.HasValue ?
                new ObjectParameter("DocumentCodeSeq", documentCodeSeq) :
                new ObjectParameter("DocumentCodeSeq", typeof(int));
    
            var startDayParameter = startDay.HasValue ?
                new ObjectParameter("StartDay", startDay) :
                new ObjectParameter("StartDay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CM_GetTbs_DocumentOutput_Result>("GetTbs_DocumentOutput", documentCodeParameter, documentCodeSeqParameter, startDayParameter);
        }
    }
}
