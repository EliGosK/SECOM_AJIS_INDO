//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Income
{
    public partial class BizICDataEntities
    {
        #region Methods
    		public virtual List<SECOMBankBranchData> GetSECOMBankBranch()
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetSECOMBankBranch().ToList();
    		}
    		public virtual List<doReceipt> GetAdvanceReceipt(string receiptNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetAdvanceReceipt(receiptNo).ToList();
    		}
    		public virtual List<doReceipt> GetReceipt(string receiptNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetReceipt(receiptNo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<tbt_Payment> InsertTbt_Payment(string xmlTbt_Payment)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_Payment(xmlTbt_Payment).ToList();
    		}
    		public virtual List<tbt_CreditNote> GetTbt_CreditNote(string creditNoteNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbt_CreditNote(creditNoteNo).ToList();
    		}
    		public virtual List<tbt_Payment> GetPayment(string paymentTransNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetPayment(paymentTransNo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetBillingTargetByCode(string billingTargetCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingTargetByCode(billingTargetCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetBillingTargetByBillingCode(string billingCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingTargetByBillingCode(billingCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetBillingTargetByInvoiceNo(string invoiceNo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingTargetByInvoiceNo(invoiceNo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetBillingTargetByReceiptNo(string receiptNo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingTargetByReceiptNo(receiptNo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> SearchUnpaidBillingTarget(string billingClientName, string invoiceAmountCurrencyType, Nullable<decimal> invoiceAmountFrom, Nullable<decimal> invoiceAmountTo, Nullable<System.DateTime> issueInvoiceDateFrom, Nullable<System.DateTime> issueInvoiceDateTo, Nullable<bool> haveCreditNoteIssued, string billingDetailAmountCurrencyType, Nullable<decimal> billingDetailAmountFrom, Nullable<decimal> billingDetailAmountTo, string billingType_ContractFee, string billingType_InstallationFee, string billingType_DepositFee, string billingType_SalePrice, string billingType_OtherFee, string paymentMethod_BankTransfer, string paymentMethod_Messenger, string paymentMethod_AutoTransfer, string paymentMethod_CreditCard, Nullable<int> billingCycle, Nullable<int> lastPaymentDayFrom, Nullable<int> lastPaymentDayTo, Nullable<System.DateTime> expectedPaymentDateFrom, Nullable<System.DateTime> expectedPaymentDateTo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.SearchUnpaidBillingTarget(billingClientName, invoiceAmountCurrencyType, invoiceAmountFrom, invoiceAmountTo, issueInvoiceDateFrom, issueInvoiceDateTo, haveCreditNoteIssued, billingDetailAmountCurrencyType, billingDetailAmountFrom, billingDetailAmountTo, billingType_ContractFee, billingType_InstallationFee, billingType_DepositFee, billingType_SalePrice, billingType_OtherFee, paymentMethod_BankTransfer, paymentMethod_Messenger, paymentMethod_AutoTransfer, paymentMethod_CreditCard, billingCycle, lastPaymentDayFrom, lastPaymentDayTo, expectedPaymentDateFrom, expectedPaymentDateTo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doUnpaidInvoice> GetUnpaidInvoice(string invoiceNo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidInvoice(invoiceNo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doUnpaidInvoice> GetUnpaidInvoiceByBillingTarget(string billingTargetCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidInvoiceByBillingTarget(billingTargetCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<tbt_MatchPaymentDetail> InsertTbt_MatchPaymentDetail(string xmlTbt_MatchPaymentDetail)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_MatchPaymentDetail(xmlTbt_MatchPaymentDetail).ToList();
    		}
    		public virtual List<tbt_MatchPaymentHeader> InsertTbt_MatchPaymentHeader(string xmlTbt_MatchPaymentHeader)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_MatchPaymentHeader(xmlTbt_MatchPaymentHeader).ToList();
    		}
    		public virtual List<tbt_Receipt> UpdateAdvanceReceiptMatchPayment(string receiptNo, string advanceReceiptStatus, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateAdvanceReceiptMatchPayment(receiptNo, advanceReceiptStatus, updateBy, updateDate).ToList();
    		}
    		public virtual List<doReceipt> GetReceiptByInvoiceNo(string invoiceNo, Nullable<int> invoiceOCC, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetReceiptByInvoiceNo(invoiceNo, invoiceOCC, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual int GetRefundInfo(string paymentTransNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetRefundInfo(paymentTransNo);
    		}
    		public virtual List<tbt_Payment> DeletePaymentTransaction(string paymentTransNo, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.DeletePaymentTransaction(paymentTransNo, updateBy, updateDate).ToList();
    		}
    		public virtual List<tbt_Receipt> UpdateAdvanceReceiptDeletePayment(string receiptNo, string advanceReceiptStatus, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateAdvanceReceiptDeletePayment(receiptNo, advanceReceiptStatus, updateBy, updateDate).ToList();
    		}
    		public virtual List<doPaymentMatchingDesc> GetPaymentMatchingDesc(string valueCode, string c_PAYMENT_MATCHING_DESC)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetPaymentMatchingDesc(valueCode, c_PAYMENT_MATCHING_DESC).ToList();
    		}
    		public virtual List<doPaymentMatchingResult> GetPaymentMatchingResult(string paymentTransNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetPaymentMatchingResult(paymentTransNo).ToList();
    		}
    		public virtual List<doPaymentMatchingResultDetail> GetPaymentMatchingResult_Detail(string matchID)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetPaymentMatchingResult_Detail(matchID).ToList();
    		}
    		public virtual List<doPayment> SearchPayment(string paymentType, string status, Nullable<int> sECOMAccountID, string paymentTransNo, string payer, Nullable<System.DateTime> paymentDateFrom, Nullable<System.DateTime> paymentDateTo, Nullable<decimal> matchableBalanceFrom, Nullable<decimal> matchableBalanceTo, string invoiceNo, string receiptNo, string sendingBankCode, string cONST_PAYMENT_TYPE, string matchRGroupName, string empNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US, string matchableBalancCurrencyType)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.SearchPayment(paymentType, status, sECOMAccountID, paymentTransNo, payer, paymentDateFrom, paymentDateTo, matchableBalanceFrom, matchableBalanceTo, invoiceNo, receiptNo, sendingBankCode, cONST_PAYMENT_TYPE, matchRGroupName, empNo, c_CURRENCY_LOCAL, c_CURRENCY_US, matchableBalancCurrencyType).ToList();
    		}
    		public virtual List<doUnpaidBillingDetail> GetUnpaidBillingDetailByBillingTarget(string billingTargetCode, string c_PAYMENT_STATUS, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingDetailByBillingTarget(billingTargetCode, c_PAYMENT_STATUS, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doUnpaidBillingDetail> GetUnpaidBillingDetailByInvoice(string invoiceNo, Nullable<int> invoiceOCC, string c_PAYMENT_STATUS, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingDetailByInvoice(invoiceNo, invoiceOCC, c_PAYMENT_STATUS, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetUnpaidBillingTargetByBillingCode(string billingCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByBillingCode(billingCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetUnpaidBillingTargetByCode(string billingTargetCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByCode(billingTargetCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetUnpaidBillingTargetByInvoiceNo(string invoiceNo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByInvoiceNo(invoiceNo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetUnpaidBillingTargetByReceiptNo(string receiptNo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByReceiptNo(receiptNo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<tbt_MoneyCollectionInfo> InsertTbt_MoneyCollectionInfo(string xml_Tbt_MoneyCollectionInfo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_MoneyCollectionInfo(xml_Tbt_MoneyCollectionInfo).ToList();
    		}
    		public virtual List<tbt_Receipt> UpdateAdvanceReceiptRegisterPayment(string receiptNo, string advanceReceiptStatus, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateAdvanceReceiptRegisterPayment(receiptNo, advanceReceiptStatus, updateBy, updateDate).ToList();
    		}
    		public virtual List<tbt_Payment> UpdatePaymentMatchableBalance(string paymentTransNo, Nullable<decimal> adjustMatchableBalance, string updateBy, Nullable<System.DateTime> updateDate, Nullable<decimal> adjustMatchableBalanceUsd, string matchableBalanceCurrencyType)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdatePaymentMatchableBalance(paymentTransNo, adjustMatchableBalance, updateBy, updateDate, adjustMatchableBalanceUsd, matchableBalanceCurrencyType).ToList();
    		}
    		public virtual List<tbt_MoneyCollectionInfo> DeleteTbt_MoneyCollectionInfo(string receiptNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.DeleteTbt_MoneyCollectionInfo(receiptNo).ToList();
    		}
    		public virtual List<doGetMoneyCollectionManagementInfo> GetMoneyCollectionManagementInfo(Nullable<System.DateTime> expectedCollectDateFrom, Nullable<System.DateTime> expectedCollectDateTo, string collectionAreaCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetMoneyCollectionManagementInfo(expectedCollectDateFrom, expectedCollectDateTo, collectionAreaCode).ToList();
    		}
    		public virtual List<tbt_Payment> UpdatePaymentBankFeeFlag(string paymentTransNo, Nullable<bool> bankFeeFlag, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdatePaymentBankFeeFlag(paymentTransNo, bankFeeFlag, updateBy, updateDate).ToList();
    		}
    		public virtual List<tbt_Payment> UpdatePaymentOtherIncomeFlag(string paymentTransNo, Nullable<bool> otherIncomeFlag, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdatePaymentOtherIncomeFlag(paymentTransNo, otherIncomeFlag, updateBy, updateDate).ToList();
    		}
    		public virtual List<tbt_Payment> UpdatePaymentOtherExpenseFlag(string paymentTransNo, Nullable<bool> otherExpenseFlag, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdatePaymentOtherExpenseFlag(paymentTransNo, otherExpenseFlag, updateBy, updateDate).ToList();
    		}
    		public virtual int ValidateBankTransferContent(Nullable<System.Guid> importID, string c_PAYMENT_IMPORT_NO_ERROR, string c_PAYMENT_IMPORT_ERROR_INVALID_INVOICE, string c_PAYMENT_IMPORT_ERROR_IMPORTED_INVOICE, string c_PAYMENT_IMPORT_ERROR_PAID_INVOICE, string c_PAYMENT_IMPORT_ERROR_INCORRECT_STATUS, string c_INC_PAYMENT_IMPORT, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_PAYMENT_STATUS_CANCEL, string c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED, string c_PAYMENT_STATUS_NOTE_FAIL, string c_PAYMENT_STATUS_POST_FAIL, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.ValidateBankTransferContent(importID, c_PAYMENT_IMPORT_NO_ERROR, c_PAYMENT_IMPORT_ERROR_INVALID_INVOICE, c_PAYMENT_IMPORT_ERROR_IMPORTED_INVOICE, c_PAYMENT_IMPORT_ERROR_PAID_INVOICE, c_PAYMENT_IMPORT_ERROR_INCORRECT_STATUS, c_INC_PAYMENT_IMPORT, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_PAYMENT_STATUS_CANCEL, c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED, c_PAYMENT_STATUS_NOTE_FAIL, c_PAYMENT_STATUS_POST_FAIL, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT);
    		}
    		public virtual int ValidateAutoTransferContent(Nullable<System.Guid> importID, Nullable<int> sECOMAccountID, string c_PAYMENT_IMPORT_NO_ERROR, string c_PAYMENT_IMPORT_ERROR_INVOICE_AMOUNT_UNMATCH, string c_PAYMENT_IMPORT_ERROR_PAY_DATE_UNMATCH, string c_PAYMENT_IMPORT_ERROR_BANK_UNMATCH, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.ValidateAutoTransferContent(importID, sECOMAccountID, c_PAYMENT_IMPORT_NO_ERROR, c_PAYMENT_IMPORT_ERROR_INVOICE_AMOUNT_UNMATCH, c_PAYMENT_IMPORT_ERROR_PAY_DATE_UNMATCH, c_PAYMENT_IMPORT_ERROR_BANK_UNMATCH, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT);
    		}
    		public virtual int CheckAutoTransferFileImported(Nullable<System.Guid> importID, Nullable<int> sECOMAccountID, string c_PAYMENT_TYPE_AUTO_TRANSFER, ObjectParameter iS_IMPORTED)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckAutoTransferFileImported(importID, sECOMAccountID, c_PAYMENT_TYPE_AUTO_TRANSFER, iS_IMPORTED);
    		}
    		public virtual List<doGetBillingCodeDebtSummary> GetBillingCodeDebtSummary(string billingCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingCodeDebtSummary(billingCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doGetBillingOfficeDebtSummary> GetBillingOfficeDebtSummary(Nullable<int> intMonth, Nullable<int> intYear)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingOfficeDebtSummary(intMonth, intYear).ToList();
    		}
    		public virtual List<doGetBillingTargetDebtSummaryByOffice> GetBillingTargetDebtSummaryByOffice(string strBillingTargetCode, Nullable<int> intMonth, Nullable<int> intYear)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingTargetDebtSummaryByOffice(strBillingTargetCode, intMonth, intYear).ToList();
    		}
    		public virtual List<doGetUnpaidDetailDebtSummary> GetUnpaidDetailDebtSummaryByBillingCode(string strBillingCode, string c_PAYMENT_STATUS, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidDetailDebtSummaryByBillingCode(strBillingCode, c_PAYMENT_STATUS, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doGetUnpaidDetailDebtSummary> GetUnpaidDetailDebtSummaryByBillingTarget(string strBillingTargetCode, string c_PAYMENT_STATUS, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string strOfficeCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidDetailDebtSummaryByBillingTarget(strBillingTargetCode, c_PAYMENT_STATUS, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, strOfficeCode).ToList();
    		}
    		public virtual List<doGetUnpaidDetailDebtSummary> GetUnpaidDetailDebtSummaryByInvoice(string invoiceNo, Nullable<int> invoiceOCC, string c_PAYMENT_STATUS, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string strOfficeCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidDetailDebtSummaryByInvoice(invoiceNo, invoiceOCC, c_PAYMENT_STATUS, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, strOfficeCode).ToList();
    		}
    		public virtual List<doGetUnpaidInvoiceDebtSummaryByBillingTarget> GetUnpaidInvoiceDebtSummaryByBillingTarget(string strBillingTargetCode, string c_PAYMENT_STATUS, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string strOfficeCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidInvoiceDebtSummaryByBillingTarget(strBillingTargetCode, c_PAYMENT_STATUS, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, strOfficeCode).ToList();
    		}
    		public virtual List<tbt_BillingTargetDebtTracing> InsertTbt_BillingTargetDebtTracing(string xmlTbt_BillingTargetDebtTracing)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_BillingTargetDebtTracing(xmlTbt_BillingTargetDebtTracing).ToList();
    		}
    		public virtual List<tbt_InvoiceDebtTracing> InsertTbt_InvoiceDebtTracing(string xmlTbt_InvoiceDebtTracing)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_InvoiceDebtTracing(xmlTbt_InvoiceDebtTracing).ToList();
    		}
    		public virtual List<tbt_DebtTarget> UpdateTbt_DebtTarget(string xmlTbt_DebtTarget)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateTbt_DebtTarget(xmlTbt_DebtTarget).ToList();
    		}
    		public virtual List<doGetDebtTarget> GetDebtTarget()
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTarget().ToList();
    		}
    		public virtual List<tbt_PaymentImportFile> InsertTbt_PaymentImportFile(string xmlTbt_tmpImportContent)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_PaymentImportFile(xmlTbt_tmpImportContent).ToList();
    		}
    		public virtual List<doGetDebtTracingMemo> GetDebtTracingMemo(string strBillingTargetCode, string strInvoiceNo, Nullable<int> strInvoiceOCC)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingMemo(strBillingTargetCode, strInvoiceNo, strInvoiceOCC).ToList();
    		}
    		public virtual List<tbt_CreditNote> UpdateTbt_CreditNote(string xmlTbt_CreditNote)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateTbt_CreditNote(xmlTbt_CreditNote).ToList();
    		}
    		public virtual List<tbt_CreditNote> InsertTbt_CreditNote(string xmlTbt_CreditNote)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_CreditNote(xmlTbt_CreditNote).ToList();
    		}
    		public virtual List<tbt_Revenue> InsertTbt_Revenue(string xmlTbt_Revenue)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_Revenue(xmlTbt_Revenue).ToList();
    		}
    		public virtual List<string> CheckCreditNoteCanCancel(string strCreditNoteNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckCreditNoteCanCancel(strCreditNoteNo).ToList();
    		}
    		public virtual List<doGetRegContent> GetRegContent(string c_REG_CONTENT, string strRegContentCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetRegContent(c_REG_CONTENT, strRegContentCode).ToList();
    		}
    		public virtual List<tbt_tmpImportContent> GetTbt_tmpImportContent(Nullable<System.Guid> importID)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbt_tmpImportContent(importID).ToList();
    		}
    		public virtual List<tbt_tmpImportContent> InsertTbt_tmpImportContent(string xmlTbt_tmpImportContent)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_tmpImportContent(xmlTbt_tmpImportContent).ToList();
    		}
    		public virtual List<doGetCreditNote> GetCreditNote(string creditNoteNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetCreditNote(creditNoteNo).ToList();
    		}
    		public virtual int CheckAllMatchingToRefund(string invoiceNo, Nullable<int> invoiceOCC, string c_PAYMENT_TYPE_CN_REFUND, ObjectParameter oUT_ALL_REFUND)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckAllMatchingToRefund(invoiceNo, invoiceOCC, c_PAYMENT_TYPE_CN_REFUND, oUT_ALL_REFUND);
    		}
    		public virtual List<doPaidInvoiceNoReceipt> GetPaidInvoiceNoReceipt(string c_PAYMENT_STATUS_BANK_PAID, string c_PAYMENT_STATUS_AUTO_PAID, string c_PAYMENT_STATUS_CASH_PAID, string c_PAYMENT_STATUS_CHEQUE_PAID, string c_PAYMENT_STATUS_CASHIER_PAID, string c_PAYMENT_STATUS_NOTE_MATCHED, string c_PAYMENT_STATUS_NOTE_ENCASHED, string c_PAYMENT_STATUS_POST_MATCHED, string c_PAYMENT_STATUS_POST_ENCASHED, string c_PAYMENT_STATUS_PAID_WITH_PARTIAL_CN, string c_PAYMENT_STATUS_PAID_WITH_PARTIAL_REFUND, string c_PAYMENT_STATUS_REFUND_PAID, string c_PAYMENT_STATUS_AUTO_FAIL_BANK_PAID, string c_PAYMENT_STATUS_NOTE_FAIL_BANK_PAID, string c_PAYMENT_STATUS_POST_FAIL_BANK_PAID)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetPaidInvoiceNoReceipt(c_PAYMENT_STATUS_BANK_PAID, c_PAYMENT_STATUS_AUTO_PAID, c_PAYMENT_STATUS_CASH_PAID, c_PAYMENT_STATUS_CHEQUE_PAID, c_PAYMENT_STATUS_CASHIER_PAID, c_PAYMENT_STATUS_NOTE_MATCHED, c_PAYMENT_STATUS_NOTE_ENCASHED, c_PAYMENT_STATUS_POST_MATCHED, c_PAYMENT_STATUS_POST_ENCASHED, c_PAYMENT_STATUS_PAID_WITH_PARTIAL_CN, c_PAYMENT_STATUS_PAID_WITH_PARTIAL_REFUND, c_PAYMENT_STATUS_REFUND_PAID, c_PAYMENT_STATUS_AUTO_FAIL_BANK_PAID, c_PAYMENT_STATUS_NOTE_FAIL_BANK_PAID, c_PAYMENT_STATUS_POST_FAIL_BANK_PAID).ToList();
    		}
    		public virtual List<tbt_Receipt> InsertTbt_Receipt(string xmlTbt_Receipt)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_Receipt(xmlTbt_Receipt).ToList();
    		}
    		public virtual List<doRptReceipt> GetRptReceipt(string receiptNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetRptReceipt(receiptNo).ToList();
    		}
    		public virtual List<doInvoiceAdvanceReceipt> GetInvoiceAdvanceReceipt(string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_BILLING_TYPE_GROUP_SALE, string c_ISSUE_REC_TIME_SAME_INV, string c_PAYMENT_METHOD_MESSENGER)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetInvoiceAdvanceReceipt(c_PAYMENT_STATUS_INV_BANK_COLLECT, c_BILLING_TYPE_GROUP_SALE, c_ISSUE_REC_TIME_SAME_INV, c_PAYMENT_METHOD_MESSENGER).ToList();
    		}
    		public virtual int BatchGenDebtSummary(string batchId, Nullable<System.DateTime> batchDate, string c_BILLING_TYPE_GROUP_CONTINUES, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, ObjectParameter totalEffectRow)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.BatchGenDebtSummary(batchId, batchDate, c_BILLING_TYPE_GROUP_CONTINUES, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, totalEffectRow);
    		}
    		public virtual int BatchDeleteDebtTracing(string c_PAYMENT_STATUS_BANK_PAID, string c_PAYMENT_STATUS_AUTO_PAID, string c_PAYMENT_STATUS_CANCEL, string c_PAYMENT_STATUS_CASH_PAID, string c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED, string c_PAYMENT_STATUS_BILLING_EXEMPTION, string c_PAYMENT_STATUS_CHEQUE_PAID, string c_PAYMENT_STATUS_NOTE_MATCHED, string c_PAYMENT_STATUS_NOTE_ENCASHED, string c_PAYMENT_STATUS_NOTE_FAIL, string c_PAYMENT_STATUS_CASHIER_PAID, string c_PAYMENT_STATUS_POST_MATCHED, string c_PAYMENT_STATUS_POST_ENCASHED, string c_PAYMENT_STATUS_POST_FAIL, string c_PAYMENT_STATUS_AUTO_FAIL_BANK_PAID, string c_PAYMENT_STATUS_NOTE_FAIL_BANK_PAID, string c_PAYMENT_STATUS_POST_FAIL_BANK_PAID, string c_PAYMENT_STATUS_PAID_WITH_PARTIAL_CN, string c_PAYMENT_STATUS_PAID_WITH_PARTIAL_REFUND, string c_PAYMENT_STATUS_REFUND_PAID, ObjectParameter totalRow, ObjectParameter completedRow)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.BatchDeleteDebtTracing(c_PAYMENT_STATUS_BANK_PAID, c_PAYMENT_STATUS_AUTO_PAID, c_PAYMENT_STATUS_CANCEL, c_PAYMENT_STATUS_CASH_PAID, c_PAYMENT_STATUS_PAYMENT_MATCH_CANCELLED, c_PAYMENT_STATUS_BILLING_EXEMPTION, c_PAYMENT_STATUS_CHEQUE_PAID, c_PAYMENT_STATUS_NOTE_MATCHED, c_PAYMENT_STATUS_NOTE_ENCASHED, c_PAYMENT_STATUS_NOTE_FAIL, c_PAYMENT_STATUS_CASHIER_PAID, c_PAYMENT_STATUS_POST_MATCHED, c_PAYMENT_STATUS_POST_ENCASHED, c_PAYMENT_STATUS_POST_FAIL, c_PAYMENT_STATUS_AUTO_FAIL_BANK_PAID, c_PAYMENT_STATUS_NOTE_FAIL_BANK_PAID, c_PAYMENT_STATUS_POST_FAIL_BANK_PAID, c_PAYMENT_STATUS_PAID_WITH_PARTIAL_CN, c_PAYMENT_STATUS_PAID_WITH_PARTIAL_REFUND, c_PAYMENT_STATUS_REFUND_PAID, totalRow, completedRow);
    		}
    		public virtual List<tbt_MoneyCollectionInfo> GetTbt_MoneyCollectionInfo(string receiptNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbt_MoneyCollectionInfo(receiptNo).ToList();
    		}
    		public virtual int CheckInvoiceIssuedReceipt(string invoiceNo, Nullable<int> invoiceOCC, ObjectParameter isIssued)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckInvoiceIssuedReceipt(invoiceNo, invoiceOCC, isIssued);
    		}
    		public virtual List<tbt_Receipt> CancelReceipt(string receiptNo, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CancelReceipt(receiptNo, updateBy, updateDate).ToList();
    		}
    		public virtual List<doReceipt> GetReceiptIncludeCancel(string receiptNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetReceiptIncludeCancel(receiptNo).ToList();
    		}
    		public virtual List<doMatchPaymentHeader> GetMatchPaymentHeaderByInvoice(string invoiceNo, Nullable<int> invoiceOCC)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetMatchPaymentHeaderByInvoice(invoiceNo, invoiceOCC).ToList();
    		}
    		public virtual List<doMatchPaymentDetail> GetMatchPaymentHeaderByInvoiceDetail(string matchId)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetMatchPaymentHeaderByInvoiceDetail(matchId).ToList();
    		}
    		public virtual List<tbt_MatchPaymentHeader> UpdateTbt_MatchPaymentHeader(string xmlTbt_MatchPaymentHeader)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateTbt_MatchPaymentHeader(xmlTbt_MatchPaymentHeader).ToList();
    		}
    		public virtual List<tbt_MatchPaymentDetail> UpdateTbt_MatchPaymentDetail(string xmlTbt_MatchPaymentDetail)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateTbt_MatchPaymentDetail(xmlTbt_MatchPaymentDetail).ToList();
    		}
    		public virtual List<doGetUnpaidInvoiceDebtSummaryByBillingTarget> GetUnpaidInvoiceDebtSummaryByInvoiceNo(string strInvoiceNo, string c_PAYMENT_STATUS, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidInvoiceDebtSummaryByInvoiceNo(strInvoiceNo, c_PAYMENT_STATUS, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<doRptCreditNote> GetRptCreditNote(string creditNoteNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetRptCreditNote(creditNoteNo).ToList();
    		}
    		public virtual List<Nullable<int>> GetWorkingDayNoOfMonth(Nullable<System.DateTime> getNextWorkingDay)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetWorkingDayNoOfMonth(getNextWorkingDay).ToList();
    		}
    		public virtual List<doValidateWholeFile> ValidateWholeFile(Nullable<System.Guid> importID)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.ValidateWholeFile(importID).ToList();
    		}
    		public virtual List<doInvoicePaymentMatchingList> GetInvoicePaymentMatchingList(string paymentTransNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetInvoicePaymentMatchingList(paymentTransNo).ToList();
    		}
    		public virtual List<doUnpaidBillingTarget> GetUnpaidBillingTargetByCustomerCode(string custCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByCustomerCode(custCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN).ToList();
    		}
    		public virtual List<tbt_Receipt> UpdateTbt_Receipt(string xml_doTbtReceipt)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateTbt_Receipt(xml_doTbtReceipt).ToList();
    		}
    		public virtual List<tbt_Payment> UpdatePaymentEncashFlag(string paymentTransNo, Nullable<byte> encahsedFlag, Nullable<System.DateTime> chequeReturnDate, string chequeReturnReason, string chequeReturnRemark, string chequeEncashRemark, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdatePaymentEncashFlag(paymentTransNo, encahsedFlag, chequeReturnDate, chequeReturnReason, chequeReturnRemark, chequeEncashRemark, updateBy, updateDate).ToList();
    		}
    		public virtual int CheckCancelTaxInvoiceOption(string invoiceNo, Nullable<int> invoiceOCC, ObjectParameter isCancelTaxInvoiceOption)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckCancelTaxInvoiceOption(invoiceNo, invoiceOCC, isCancelTaxInvoiceOption);
    		}
    		public virtual int CheckCanRegisterCreditNote(string taxInvoiceNo, ObjectParameter isCanRegisterCN)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckCanRegisterCreditNote(taxInvoiceNo, isCanRegisterCN);
    		}
    		public virtual List<Nullable<decimal>> GetTotalCreditAmtIncVAT(string taxInvoiceNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTotalCreditAmtIncVAT(taxInvoiceNo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual int CheckDepositStatusReturn(string creditNoteNo, ObjectParameter isStatusReturn)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckDepositStatusReturn(creditNoteNo, isStatusReturn);
    		}
    		public virtual List<doPaymentForWHT> SearchPaymentForWHT(Nullable<System.DateTime> paymentDateFrom, Nullable<System.DateTime> paymentDateTo, string paymentTransNo, string payerName, string vATRegistantName, string invoiceNo, string contractCode, string wHTNo, string iDNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.SearchPaymentForWHT(paymentDateFrom, paymentDateTo, paymentTransNo, payerName, vATRegistantName, invoiceNo, contractCode, wHTNo, iDNo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<tbt_IncomeWHT> GetTbt_IncomeWHT(string wHTNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbt_IncomeWHT(wHTNo).ToList();
    		}
    		public virtual List<doMatchWHTDetail> GetMatchWHTDetail(string wHTNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetMatchWHTDetail(wHTNo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<tbt_IncomeWHT> InsertTbt_IncomeWHT(string xml_table)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_IncomeWHT(xml_table).ToList();
    		}
    		public virtual List<tbt_IncomeWHT> UpdateTbt_IncomeWHT(string xml_table)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateTbt_IncomeWHT(xml_table).ToList();
    		}
    		public virtual List<string> GenerateWHTNo(Nullable<System.DateTime> matchingDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GenerateWHTNo(matchingDate).ToList();
    		}
    		public virtual List<tbt_Payment> UpdateWHTNoToPayment(string wHTNo, string paymentTransNo, string updateBy, Nullable<System.DateTime> updateDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateWHTNoToPayment(wHTNo, paymentTransNo, updateBy, updateDate).ToList();
    		}
    		public virtual List<doIncomeWHT> SearchIncomeWHT(string wHTNo, string paymentTransNo, string payerName, string vATRegistantName, Nullable<System.DateTime> documentDateFrom, Nullable<System.DateTime> documentDateTo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.SearchIncomeWHT(wHTNo, paymentTransNo, payerName, vATRegistantName, documentDateFrom, documentDateTo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doWHTReportForAccount> GetWHTReportForAccount(Nullable<System.DateTime> yearMonthFrom, Nullable<System.DateTime> yearMonthTo, string c_CURRENCY_LOCAL, string c_CURRECY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetWHTReportForAccount(yearMonthFrom, yearMonthTo, c_CURRENCY_LOCAL, c_CURRECY_US).ToList();
    		}
    		public virtual List<doWHTYearMonth> GetWHTYearMonth()
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetWHTYearMonth().ToList();
    		}
    		public virtual List<doWHTReportForIMS> GetWHTReportForIMS(Nullable<System.DateTime> yearMonthFrom, Nullable<System.DateTime> yearMonthTo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetWHTReportForIMS(yearMonthFrom, yearMonthTo).ToList();
    		}
    		public virtual List<doDebtTracingPermission> GetDebtTracingPermission(string empNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingPermission(empNo).ToList();
    		}
    		public virtual List<doDebtTracingCustList> GetDebtTracingCustList(string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_PAYMENT_STATUS_NOTE_MATCHED_RETURN, string c_PAYMENT_STATUS_POST_MATCHED_RETURN, string empNo, string billingOfficeCode, string debtTracingSubStatusList, string contractCode, string billingClientName, string invoiceNo, Nullable<bool> firstFeeFlag)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingCustList(c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_PAYMENT_STATUS_NOTE_MATCHED_RETURN, c_PAYMENT_STATUS_POST_MATCHED_RETURN, empNo, billingOfficeCode, debtTracingSubStatusList, contractCode, billingClientName, invoiceNo, firstFeeFlag).ToList();
    		}
    		public virtual List<doTbm_DebtTracingPermission> GetTbm_DebtTracingPermission(string empNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbm_DebtTracingPermission(empNo).ToList();
    		}
    		public virtual List<doReturnedCheque> GetReturnedCheque(string billingTargetCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetReturnedCheque(billingTargetCode).ToList();
    		}
    		public virtual List<doDebtTracingInvoiceList> GetDebtTracingInvoiceList(string billingTargetCode, string serviceTypeCode, string debtTracingSubStatus, string empNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingInvoiceList(billingTargetCode, serviceTypeCode, debtTracingSubStatus, empNo).ToList();
    		}
    		public virtual List<doDebtTracingInvoiceDetail> GetDebtTracingInvoiceDetail(string billingTargetCode, string invoiceNo, Nullable<int> invoiceOCC)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingInvoiceDetail(billingTargetCode, invoiceNo, invoiceOCC).ToList();
    		}
    		public virtual List<tbt_DebtTracingHistory> GetTbt_DebtTracingHistory(string billingTargetCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbt_DebtTracingHistory(billingTargetCode).ToList();
    		}
    		public virtual List<tbt_DebtTracingHistoryDetail> GetTbt_DebtTracingHistoryDetail(Nullable<int> historyID)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbt_DebtTracingHistoryDetail(historyID).ToList();
    		}
    		public virtual List<tbt_DebtTracingHistory> InsertTbt_DebtTracingHistory(string xml)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_DebtTracingHistory(xml).ToList();
    		}
    		public virtual List<tbt_DebtTracingHistoryDetail> InsertTbt_DebtTracingHistoryDetail(string xml)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_DebtTracingHistoryDetail(xml).ToList();
    		}
    		public virtual List<tbt_DebtTracingCustCondition> GetTbt_DebtTracingCustCondition(string billingTargetCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetTbt_DebtTracingCustCondition(billingTargetCode).ToList();
    		}
    		public virtual List<tbt_DebtTracingCustCondition> UpdateTbt_DebtTracingCustCondition(string xml)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateTbt_DebtTracingCustCondition(xml).ToList();
    		}
    		public virtual List<tbt_DebtTracingCustCondition> InsertTbt_DebtTracingCustCondition(string xml)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.InsertTbt_DebtTracingCustCondition(xml).ToList();
    		}
    		public virtual List<doDebtTracingHistory> GetDebtTracingHistory(string billingTargetCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingHistory(billingTargetCode).ToList();
    		}
    		public virtual int CheckAllPaymentEncashed(string invoiceNo, Nullable<int> invoiceOCC, string c_PAYMENT_TYPE_PROMISSORY_NOTE, string c_PAYMENT_TYPE_CHEQUE_POST_DATED, ObjectParameter encashedFlag)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.CheckAllPaymentEncashed(invoiceNo, invoiceOCC, c_PAYMENT_TYPE_PROMISSORY_NOTE, c_PAYMENT_TYPE_CHEQUE_POST_DATED, encashedFlag);
    		}
    		public virtual List<doGenerateDebtTracingNotice> GenerateDebtTracingNotice(Nullable<System.DateTime> batchDate, string documentType, string serviceTypeCode, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GenerateDebtTracingNotice(batchDate, documentType, serviceTypeCode, updateDate, updateBy).ToList();
    		}
    		public virtual List<doICR030> GetICR030(string documentNo, string c_DOC_LANG_ENG, string c_DOC_LANG_LOCAL, string c_SHOW_ISSUE_DATE_CHRISTIAN, string c_SHOW_ISSUE_DATE_BUDDHIST)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetICR030(documentNo, c_DOC_LANG_ENG, c_DOC_LANG_LOCAL, c_SHOW_ISSUE_DATE_CHRISTIAN, c_SHOW_ISSUE_DATE_BUDDHIST).ToList();
    		}
    		public virtual List<doDebtTracingDocNoForPrinting> GetDebtTracingDocNoForPrinting(Nullable<System.DateTime> noticeDate, string serviceTypeCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingDocNoForPrinting(noticeDate, serviceTypeCode).ToList();
    		}
    		public virtual int UpdateDebtTracingNoticePrintFlag(string docNoList)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateDebtTracingNoticePrintFlag(docNoList);
    		}
    		public virtual List<doDebtTracingDocNoForGenerate> GetDebtTracingDocNoForGenerate(Nullable<System.DateTime> noticeDate, string serviceTypeCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetDebtTracingDocNoForGenerate(noticeDate, serviceTypeCode).ToList();
    		}
    		public virtual int UpdateDebtTracingNoticeGenerateFlag(string docNoList)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.UpdateDebtTracingNoticeGenerateFlag(docNoList);
    		}
    		public virtual List<doGetMatchGroupNamePayment> GetMatchGroupNamePayment(string empNo, Nullable<System.DateTime> paymentDate)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetMatchGroupNamePayment(empNo, paymentDate).ToList();
    		}
    		public virtual List<doGetICR050> GetICR050(Nullable<System.DateTime> paymentDate, string groupname, string createBy)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetICR050(paymentDate, groupname, createBy).ToList();
    		}
    		public virtual List<doGetBillingDetail> GetBillingDetail(string invoiceNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetBillingDetail(invoiceNo).ToList();
    		}
    		public virtual List<doGetRentalContractBasic> GetRentalContractBasic(string contractCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetRentalContractBasic(contractCode).ToList();
    		}
    		public virtual List<doGetSaleBasic> GetSaleBasic(string contractCode)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetSaleBasic(contractCode).ToList();
    		}
    		public virtual List<doGetICR050_Detail> GetICR050_Detail(string paymentNo)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetICR050_Detail(paymentNo).ToList();
    		}
    		public virtual List<doGetAccountCode> GetAccountCode()
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetAccountCode().ToList();
    		}
    		public virtual List<doGetUnpaidBillingTargetByCodeWithExchange> GetUnpaidBillingTargetByCodeWithExchange(string billingTargetCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByCodeWithExchange(billingTargetCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doGetUnpaidBillingTargetByCodeWithExchange> GetUnpaidBillingTargetByBillingCodeWithExchange(string billingCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByBillingCodeWithExchange(billingCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doGetUnpaidBillingTargetByCodeWithExchange> GetUnpaidBillingTargetByCustomerCodeWithExchange(string custCode, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByCustomerCodeWithExchange(custCode, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doGetUnpaidBillingTargetByCodeWithExchange> GetUnpaidBillingTargetByInvoiceNoWithExchange(string invoiceNo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByInvoiceNoWithExchange(invoiceNo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doGetUnpaidBillingTargetByCodeWithExchange> GetUnpaidBillingTargetByReceiptNoWithExchange(string receiptNo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.GetUnpaidBillingTargetByReceiptNoWithExchange(receiptNo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doGetUnpaidBillingTargetByCodeWithExchange> SearchUnpaidBillingTargetWithExchange(string billingClientName, string invoiceAmountCurrencyType, Nullable<decimal> invoiceAmountFrom, Nullable<decimal> invoiceAmountTo, Nullable<System.DateTime> issueInvoiceDateFrom, Nullable<System.DateTime> issueInvoiceDateTo, Nullable<bool> haveCreditNoteIssued, string billingDetailAmountCurrencyType, Nullable<decimal> billingDetailAmountFrom, Nullable<decimal> billingDetailAmountTo, string billingType_ContractFee, string billingType_InstallationFee, string billingType_DepositFee, string billingType_SalePrice, string billingType_OtherFee, string paymentMethod_BankTransfer, string paymentMethod_Messenger, string paymentMethod_AutoTransfer, string paymentMethod_CreditCard, Nullable<int> billingCycle, Nullable<int> lastPaymentDayFrom, Nullable<int> lastPaymentDayTo, Nullable<System.DateTime> expectedPaymentDateFrom, Nullable<System.DateTime> expectedPaymentDateTo, string c_PAYMENT_STATUS_INV_BANK_COLLECT, string c_PAYMENT_STATUS_GEN_AUTO_CREDIT, string c_PAYMENT_STATUS_INV_AUTO_CREDIT, string c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, string c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, string c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, string c_PAYMENT_STATUS_PARTIALLY_PAID, string c_PAYMENT_STATUS_PARTIALLY_PAID_CN, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ICDataEntities context = new ICDataEntities();
    			return context.SearchUnpaidBillingTargetWithExchange(billingClientName, invoiceAmountCurrencyType, invoiceAmountFrom, invoiceAmountTo, issueInvoiceDateFrom, issueInvoiceDateTo, haveCreditNoteIssued, billingDetailAmountCurrencyType, billingDetailAmountFrom, billingDetailAmountTo, billingType_ContractFee, billingType_InstallationFee, billingType_DepositFee, billingType_SalePrice, billingType_OtherFee, paymentMethod_BankTransfer, paymentMethod_Messenger, paymentMethod_AutoTransfer, paymentMethod_CreditCard, billingCycle, lastPaymentDayFrom, lastPaymentDayTo, expectedPaymentDateFrom, expectedPaymentDateTo, c_PAYMENT_STATUS_INV_BANK_COLLECT, c_PAYMENT_STATUS_GEN_AUTO_CREDIT, c_PAYMENT_STATUS_INV_AUTO_CREDIT, c_PAYMENT_STATUS_FAIL_AUTO_INV_BANK, c_PAYMENT_STATUS_FAIL_NOTE_INV_BANK, c_PAYMENT_STATUS_FAIL_CHEQUE_INV_BANK, c_PAYMENT_STATUS_PARTIALLY_PAID, c_PAYMENT_STATUS_PARTIALLY_PAID_CN, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}

        #endregion

    }
}
