//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Quotation
{
    public partial class QUDataEntities : ObjectContext
    {
        public const string ConnectionString = "name=QUDataEntities";
        public const string ContainerName = "QUDataEntities";
    
        #region Constructors
    
        public QUDataEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public QUDataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public QUDataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<tbt_QuotationTarget> tbt_QuotationTarget
        {
            get { return _tbt_QuotationTarget  ?? (_tbt_QuotationTarget = CreateObjectSet<tbt_QuotationTarget>("tbt_QuotationTarget")); }
        }
        private ObjectSet<tbt_QuotationTarget> _tbt_QuotationTarget;
    
        public ObjectSet<tbt_QuotationBeatGuardDetails> tbt_QuotationBeatGuardDetails
        {
            get { return _tbt_QuotationBeatGuardDetails  ?? (_tbt_QuotationBeatGuardDetails = CreateObjectSet<tbt_QuotationBeatGuardDetails>("tbt_QuotationBeatGuardDetails")); }
        }
        private ObjectSet<tbt_QuotationBeatGuardDetails> _tbt_QuotationBeatGuardDetails;
    
        public ObjectSet<tbt_QuotationCustomer> tbt_QuotationCustomer
        {
            get { return _tbt_QuotationCustomer  ?? (_tbt_QuotationCustomer = CreateObjectSet<tbt_QuotationCustomer>("tbt_QuotationCustomer")); }
        }
        private ObjectSet<tbt_QuotationCustomer> _tbt_QuotationCustomer;
    
        public ObjectSet<tbt_QuotationFacilityDetails> tbt_QuotationFacilityDetails
        {
            get { return _tbt_QuotationFacilityDetails  ?? (_tbt_QuotationFacilityDetails = CreateObjectSet<tbt_QuotationFacilityDetails>("tbt_QuotationFacilityDetails")); }
        }
        private ObjectSet<tbt_QuotationFacilityDetails> _tbt_QuotationFacilityDetails;
    
        public ObjectSet<tbt_QuotationInstrumentDetails> tbt_QuotationInstrumentDetails
        {
            get { return _tbt_QuotationInstrumentDetails  ?? (_tbt_QuotationInstrumentDetails = CreateObjectSet<tbt_QuotationInstrumentDetails>("tbt_QuotationInstrumentDetails")); }
        }
        private ObjectSet<tbt_QuotationInstrumentDetails> _tbt_QuotationInstrumentDetails;
    
        public ObjectSet<tbt_QuotationMaintenanceLinkage> tbt_QuotationMaintenanceLinkage
        {
            get { return _tbt_QuotationMaintenanceLinkage  ?? (_tbt_QuotationMaintenanceLinkage = CreateObjectSet<tbt_QuotationMaintenanceLinkage>("tbt_QuotationMaintenanceLinkage")); }
        }
        private ObjectSet<tbt_QuotationMaintenanceLinkage> _tbt_QuotationMaintenanceLinkage;
    
        public ObjectSet<tbt_QuotationOperationType> tbt_QuotationOperationType
        {
            get { return _tbt_QuotationOperationType  ?? (_tbt_QuotationOperationType = CreateObjectSet<tbt_QuotationOperationType>("tbt_QuotationOperationType")); }
        }
        private ObjectSet<tbt_QuotationOperationType> _tbt_QuotationOperationType;
    
        public ObjectSet<tbt_QuotationSentryGuardDetails> tbt_QuotationSentryGuardDetails
        {
            get { return _tbt_QuotationSentryGuardDetails  ?? (_tbt_QuotationSentryGuardDetails = CreateObjectSet<tbt_QuotationSentryGuardDetails>("tbt_QuotationSentryGuardDetails")); }
        }
        private ObjectSet<tbt_QuotationSentryGuardDetails> _tbt_QuotationSentryGuardDetails;
    
        public ObjectSet<tbt_QuotationSite> tbt_QuotationSite
        {
            get { return _tbt_QuotationSite  ?? (_tbt_QuotationSite = CreateObjectSet<tbt_QuotationSite>("tbt_QuotationSite")); }
        }
        private ObjectSet<tbt_QuotationSite> _tbt_QuotationSite;
    
        public ObjectSet<tbt_QuotationBasic> tbt_QuotationBasic
        {
            get { return _tbt_QuotationBasic  ?? (_tbt_QuotationBasic = CreateObjectSet<tbt_QuotationBasic>("tbt_QuotationBasic")); }
        }
        private ObjectSet<tbt_QuotationBasic> _tbt_QuotationBasic;
    
        public ObjectSet<tbt_QuotationInstallationDetail> tbt_QuotationInstallationDetail
        {
            get { return _tbt_QuotationInstallationDetail  ?? (_tbt_QuotationInstallationDetail = CreateObjectSet<tbt_QuotationInstallationDetail>("tbt_QuotationInstallationDetail")); }
        }
        private ObjectSet<tbt_QuotationInstallationDetail> _tbt_QuotationInstallationDetail;

        #endregion

        #region Function Imports
        public ObjectResult<dtSearchQuotationTargetListResult> SearchQuotationTargetList(string quotationTargetCode, string productTypeCode, string quotationOfficeCode, string operationOfficeCode, string contractTargetCode, string contractTargetName, string contractTargetAddr, string siteCode, string siteName, string siteAddr, string empNo, string empName, Nullable<System.DateTime> quotationDateFrom, Nullable<System.DateTime> quotationDateTo, string c_CUST_PART_TYPE_CONTRACT_TARGET, string c_TARGET_CODE_TYPE_QTN_CODE, string c_CONTRACT_TRANS_STATUS_CONTRACT_APP, string c_TARGET_CODE_TYPE_CONTRACT_CODE, string xmlOfficeData)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter productTypeCodeParameter;
    
            if (productTypeCode != null)
            {
                productTypeCodeParameter = new ObjectParameter("ProductTypeCode", productTypeCode);
            }
            else
            {
                productTypeCodeParameter = new ObjectParameter("ProductTypeCode", typeof(string));
            }
    
            ObjectParameter quotationOfficeCodeParameter;
    
            if (quotationOfficeCode != null)
            {
                quotationOfficeCodeParameter = new ObjectParameter("QuotationOfficeCode", quotationOfficeCode);
            }
            else
            {
                quotationOfficeCodeParameter = new ObjectParameter("QuotationOfficeCode", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
    
            ObjectParameter contractTargetCodeParameter;
    
            if (contractTargetCode != null)
            {
                contractTargetCodeParameter = new ObjectParameter("ContractTargetCode", contractTargetCode);
            }
            else
            {
                contractTargetCodeParameter = new ObjectParameter("ContractTargetCode", typeof(string));
            }
    
            ObjectParameter contractTargetNameParameter;
    
            if (contractTargetName != null)
            {
                contractTargetNameParameter = new ObjectParameter("ContractTargetName", contractTargetName);
            }
            else
            {
                contractTargetNameParameter = new ObjectParameter("ContractTargetName", typeof(string));
            }
    
            ObjectParameter contractTargetAddrParameter;
    
            if (contractTargetAddr != null)
            {
                contractTargetAddrParameter = new ObjectParameter("ContractTargetAddr", contractTargetAddr);
            }
            else
            {
                contractTargetAddrParameter = new ObjectParameter("ContractTargetAddr", typeof(string));
            }
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
    
            ObjectParameter siteNameParameter;
    
            if (siteName != null)
            {
                siteNameParameter = new ObjectParameter("SiteName", siteName);
            }
            else
            {
                siteNameParameter = new ObjectParameter("SiteName", typeof(string));
            }
    
            ObjectParameter siteAddrParameter;
    
            if (siteAddr != null)
            {
                siteAddrParameter = new ObjectParameter("SiteAddr", siteAddr);
            }
            else
            {
                siteAddrParameter = new ObjectParameter("SiteAddr", typeof(string));
            }
    
            ObjectParameter empNoParameter;
    
            if (empNo != null)
            {
                empNoParameter = new ObjectParameter("EmpNo", empNo);
            }
            else
            {
                empNoParameter = new ObjectParameter("EmpNo", typeof(string));
            }
    
            ObjectParameter empNameParameter;
    
            if (empName != null)
            {
                empNameParameter = new ObjectParameter("EmpName", empName);
            }
            else
            {
                empNameParameter = new ObjectParameter("EmpName", typeof(string));
            }
    
            ObjectParameter quotationDateFromParameter;
    
            if (quotationDateFrom.HasValue)
            {
                quotationDateFromParameter = new ObjectParameter("QuotationDateFrom", quotationDateFrom);
            }
            else
            {
                quotationDateFromParameter = new ObjectParameter("QuotationDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter quotationDateToParameter;
    
            if (quotationDateTo.HasValue)
            {
                quotationDateToParameter = new ObjectParameter("QuotationDateTo", quotationDateTo);
            }
            else
            {
                quotationDateToParameter = new ObjectParameter("QuotationDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter c_CUST_PART_TYPE_CONTRACT_TARGETParameter;
    
            if (c_CUST_PART_TYPE_CONTRACT_TARGET != null)
            {
                c_CUST_PART_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("C_CUST_PART_TYPE_CONTRACT_TARGET", c_CUST_PART_TYPE_CONTRACT_TARGET);
            }
            else
            {
                c_CUST_PART_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("C_CUST_PART_TYPE_CONTRACT_TARGET", typeof(string));
            }
    
            ObjectParameter c_TARGET_CODE_TYPE_QTN_CODEParameter;
    
            if (c_TARGET_CODE_TYPE_QTN_CODE != null)
            {
                c_TARGET_CODE_TYPE_QTN_CODEParameter = new ObjectParameter("C_TARGET_CODE_TYPE_QTN_CODE", c_TARGET_CODE_TYPE_QTN_CODE);
            }
            else
            {
                c_TARGET_CODE_TYPE_QTN_CODEParameter = new ObjectParameter("C_TARGET_CODE_TYPE_QTN_CODE", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_TRANS_STATUS_CONTRACT_APPParameter;
    
            if (c_CONTRACT_TRANS_STATUS_CONTRACT_APP != null)
            {
                c_CONTRACT_TRANS_STATUS_CONTRACT_APPParameter = new ObjectParameter("C_CONTRACT_TRANS_STATUS_CONTRACT_APP", c_CONTRACT_TRANS_STATUS_CONTRACT_APP);
            }
            else
            {
                c_CONTRACT_TRANS_STATUS_CONTRACT_APPParameter = new ObjectParameter("C_CONTRACT_TRANS_STATUS_CONTRACT_APP", typeof(string));
            }
    
            ObjectParameter c_TARGET_CODE_TYPE_CONTRACT_CODEParameter;
    
            if (c_TARGET_CODE_TYPE_CONTRACT_CODE != null)
            {
                c_TARGET_CODE_TYPE_CONTRACT_CODEParameter = new ObjectParameter("C_TARGET_CODE_TYPE_CONTRACT_CODE", c_TARGET_CODE_TYPE_CONTRACT_CODE);
            }
            else
            {
                c_TARGET_CODE_TYPE_CONTRACT_CODEParameter = new ObjectParameter("C_TARGET_CODE_TYPE_CONTRACT_CODE", typeof(string));
            }
    
            ObjectParameter xmlOfficeDataParameter;
    
            if (xmlOfficeData != null)
            {
                xmlOfficeDataParameter = new ObjectParameter("xmlOfficeData", xmlOfficeData);
            }
            else
            {
                xmlOfficeDataParameter = new ObjectParameter("xmlOfficeData", typeof(string));
            }
            return base.ExecuteFunction<dtSearchQuotationTargetListResult>("SearchQuotationTargetList", quotationTargetCodeParameter, productTypeCodeParameter, quotationOfficeCodeParameter, operationOfficeCodeParameter, contractTargetCodeParameter, contractTargetNameParameter, contractTargetAddrParameter, siteCodeParameter, siteNameParameter, siteAddrParameter, empNoParameter, empNameParameter, quotationDateFromParameter, quotationDateToParameter, c_CUST_PART_TYPE_CONTRACT_TARGETParameter, c_TARGET_CODE_TYPE_QTN_CODEParameter, c_CONTRACT_TRANS_STATUS_CONTRACT_APPParameter, c_TARGET_CODE_TYPE_CONTRACT_CODEParameter, xmlOfficeDataParameter);
        }
        public ObjectResult<dtSearchQuotationListResult> SearchQuotationList(string pC_CUST_PART_TYPE_CONTRACT_TARGET, string pQuotationTargetCode, string pAlphabet, string pProductTypeCode, string pLockStatus, string pQuotationOfficeCode, string pOperationOfficeCode, string pContractTargetCode, string pContractTargetName, string pContractTargetAddr, string pSiteCode, string pSiteName, string pSiteAddr, string pEmpNo, string pEmpName, Nullable<System.DateTime> pQuotationDateFrom, Nullable<System.DateTime> pQuotationDateTo, string pServiceTypeCode, string pTargetCodeTypeCode, string pContractTransferStatus)
        {
    
            ObjectParameter pC_CUST_PART_TYPE_CONTRACT_TARGETParameter;
    
            if (pC_CUST_PART_TYPE_CONTRACT_TARGET != null)
            {
                pC_CUST_PART_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pC_CUST_PART_TYPE_CONTRACT_TARGET", pC_CUST_PART_TYPE_CONTRACT_TARGET);
            }
            else
            {
                pC_CUST_PART_TYPE_CONTRACT_TARGETParameter = new ObjectParameter("pC_CUST_PART_TYPE_CONTRACT_TARGET", typeof(string));
            }
    
            ObjectParameter pQuotationTargetCodeParameter;
    
            if (pQuotationTargetCode != null)
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", pQuotationTargetCode);
            }
            else
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pAlphabetParameter;
    
            if (pAlphabet != null)
            {
                pAlphabetParameter = new ObjectParameter("pAlphabet", pAlphabet);
            }
            else
            {
                pAlphabetParameter = new ObjectParameter("pAlphabet", typeof(string));
            }
    
            ObjectParameter pProductTypeCodeParameter;
    
            if (pProductTypeCode != null)
            {
                pProductTypeCodeParameter = new ObjectParameter("pProductTypeCode", pProductTypeCode);
            }
            else
            {
                pProductTypeCodeParameter = new ObjectParameter("pProductTypeCode", typeof(string));
            }
    
            ObjectParameter pLockStatusParameter;
    
            if (pLockStatus != null)
            {
                pLockStatusParameter = new ObjectParameter("pLockStatus", pLockStatus);
            }
            else
            {
                pLockStatusParameter = new ObjectParameter("pLockStatus", typeof(string));
            }
    
            ObjectParameter pQuotationOfficeCodeParameter;
    
            if (pQuotationOfficeCode != null)
            {
                pQuotationOfficeCodeParameter = new ObjectParameter("pQuotationOfficeCode", pQuotationOfficeCode);
            }
            else
            {
                pQuotationOfficeCodeParameter = new ObjectParameter("pQuotationOfficeCode", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCodeParameter;
    
            if (pOperationOfficeCode != null)
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode);
            }
            else
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pContractTargetCodeParameter;
    
            if (pContractTargetCode != null)
            {
                pContractTargetCodeParameter = new ObjectParameter("pContractTargetCode", pContractTargetCode);
            }
            else
            {
                pContractTargetCodeParameter = new ObjectParameter("pContractTargetCode", typeof(string));
            }
    
            ObjectParameter pContractTargetNameParameter;
    
            if (pContractTargetName != null)
            {
                pContractTargetNameParameter = new ObjectParameter("pContractTargetName", pContractTargetName);
            }
            else
            {
                pContractTargetNameParameter = new ObjectParameter("pContractTargetName", typeof(string));
            }
    
            ObjectParameter pContractTargetAddrParameter;
    
            if (pContractTargetAddr != null)
            {
                pContractTargetAddrParameter = new ObjectParameter("pContractTargetAddr", pContractTargetAddr);
            }
            else
            {
                pContractTargetAddrParameter = new ObjectParameter("pContractTargetAddr", typeof(string));
            }
    
            ObjectParameter pSiteCodeParameter;
    
            if (pSiteCode != null)
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", pSiteCode);
            }
            else
            {
                pSiteCodeParameter = new ObjectParameter("pSiteCode", typeof(string));
            }
    
            ObjectParameter pSiteNameParameter;
    
            if (pSiteName != null)
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", pSiteName);
            }
            else
            {
                pSiteNameParameter = new ObjectParameter("pSiteName", typeof(string));
            }
    
            ObjectParameter pSiteAddrParameter;
    
            if (pSiteAddr != null)
            {
                pSiteAddrParameter = new ObjectParameter("pSiteAddr", pSiteAddr);
            }
            else
            {
                pSiteAddrParameter = new ObjectParameter("pSiteAddr", typeof(string));
            }
    
            ObjectParameter pEmpNoParameter;
    
            if (pEmpNo != null)
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", pEmpNo);
            }
            else
            {
                pEmpNoParameter = new ObjectParameter("pEmpNo", typeof(string));
            }
    
            ObjectParameter pEmpNameParameter;
    
            if (pEmpName != null)
            {
                pEmpNameParameter = new ObjectParameter("pEmpName", pEmpName);
            }
            else
            {
                pEmpNameParameter = new ObjectParameter("pEmpName", typeof(string));
            }
    
            ObjectParameter pQuotationDateFromParameter;
    
            if (pQuotationDateFrom.HasValue)
            {
                pQuotationDateFromParameter = new ObjectParameter("pQuotationDateFrom", pQuotationDateFrom);
            }
            else
            {
                pQuotationDateFromParameter = new ObjectParameter("pQuotationDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter pQuotationDateToParameter;
    
            if (pQuotationDateTo.HasValue)
            {
                pQuotationDateToParameter = new ObjectParameter("pQuotationDateTo", pQuotationDateTo);
            }
            else
            {
                pQuotationDateToParameter = new ObjectParameter("pQuotationDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter pServiceTypeCodeParameter;
    
            if (pServiceTypeCode != null)
            {
                pServiceTypeCodeParameter = new ObjectParameter("pServiceTypeCode", pServiceTypeCode);
            }
            else
            {
                pServiceTypeCodeParameter = new ObjectParameter("pServiceTypeCode", typeof(string));
            }
    
            ObjectParameter pTargetCodeTypeCodeParameter;
    
            if (pTargetCodeTypeCode != null)
            {
                pTargetCodeTypeCodeParameter = new ObjectParameter("pTargetCodeTypeCode", pTargetCodeTypeCode);
            }
            else
            {
                pTargetCodeTypeCodeParameter = new ObjectParameter("pTargetCodeTypeCode", typeof(string));
            }
    
            ObjectParameter pContractTransferStatusParameter;
    
            if (pContractTransferStatus != null)
            {
                pContractTransferStatusParameter = new ObjectParameter("pContractTransferStatus", pContractTransferStatus);
            }
            else
            {
                pContractTransferStatusParameter = new ObjectParameter("pContractTransferStatus", typeof(string));
            }
            return base.ExecuteFunction<dtSearchQuotationListResult>("SearchQuotationList", pC_CUST_PART_TYPE_CONTRACT_TARGETParameter, pQuotationTargetCodeParameter, pAlphabetParameter, pProductTypeCodeParameter, pLockStatusParameter, pQuotationOfficeCodeParameter, pOperationOfficeCodeParameter, pContractTargetCodeParameter, pContractTargetNameParameter, pContractTargetAddrParameter, pSiteCodeParameter, pSiteNameParameter, pSiteAddrParameter, pEmpNoParameter, pEmpNameParameter, pQuotationDateFromParameter, pQuotationDateToParameter, pServiceTypeCodeParameter, pTargetCodeTypeCodeParameter, pContractTransferStatusParameter);
        }
        public ObjectResult<tbt_QuotationTarget> GetTbt_QuotationTarget(string quotationTargetCode, string serviceTypeCode, string targetCodeTypeCode, string contractCode)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter serviceTypeCodeParameter;
    
            if (serviceTypeCode != null)
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", serviceTypeCode);
            }
            else
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", typeof(string));
            }
    
            ObjectParameter targetCodeTypeCodeParameter;
    
            if (targetCodeTypeCode != null)
            {
                targetCodeTypeCodeParameter = new ObjectParameter("TargetCodeTypeCode", targetCodeTypeCode);
            }
            else
            {
                targetCodeTypeCodeParameter = new ObjectParameter("TargetCodeTypeCode", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationTarget>("GetTbt_QuotationTarget", quotationTargetCodeParameter, serviceTypeCodeParameter, targetCodeTypeCodeParameter, contractCodeParameter);
        }
        public ObjectResult<Nullable<int>> CountQuotationBasicSQL(string pchvQuotationTargetCode)
        {
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CountQuotationBasicSQL", pchvQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_QuotationBasic> LockAll(string pchr_C_LOCK_STATUS_LOCK, string pchr_C_LOCK_STATUS_UNLOCK, Nullable<System.DateTime> pdtmProcessDateTime, string pchrEmpNo, string pchvQuotationTargetCode)
        {
    
            ObjectParameter pchr_C_LOCK_STATUS_LOCKParameter;
    
            if (pchr_C_LOCK_STATUS_LOCK != null)
            {
                pchr_C_LOCK_STATUS_LOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_LOCK", pchr_C_LOCK_STATUS_LOCK);
            }
            else
            {
                pchr_C_LOCK_STATUS_LOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_LOCK", typeof(string));
            }
    
            ObjectParameter pchr_C_LOCK_STATUS_UNLOCKParameter;
    
            if (pchr_C_LOCK_STATUS_UNLOCK != null)
            {
                pchr_C_LOCK_STATUS_UNLOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_UNLOCK", pchr_C_LOCK_STATUS_UNLOCK);
            }
            else
            {
                pchr_C_LOCK_STATUS_UNLOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_UNLOCK", typeof(string));
            }
    
            ObjectParameter pdtmProcessDateTimeParameter;
    
            if (pdtmProcessDateTime.HasValue)
            {
                pdtmProcessDateTimeParameter = new ObjectParameter("pdtmProcessDateTime", pdtmProcessDateTime);
            }
            else
            {
                pdtmProcessDateTimeParameter = new ObjectParameter("pdtmProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pchrEmpNoParameter;
    
            if (pchrEmpNo != null)
            {
                pchrEmpNoParameter = new ObjectParameter("pchrEmpNo", pchrEmpNo);
            }
            else
            {
                pchrEmpNoParameter = new ObjectParameter("pchrEmpNo", typeof(string));
            }
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBasic>("LockAll", pchr_C_LOCK_STATUS_LOCKParameter, pchr_C_LOCK_STATUS_UNLOCKParameter, pdtmProcessDateTimeParameter, pchrEmpNoParameter, pchvQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_QuotationBasic> LockBackward(string pchr_C_LOCK_STATUS_LOCK, string pchr_C_LOCK_STATUS_UNLOCK, Nullable<System.DateTime> pdtmProcessDateTime, string pchrEmpNo, string pchvQuotationTargetCode, string pchrAlphabet)
        {
    
            ObjectParameter pchr_C_LOCK_STATUS_LOCKParameter;
    
            if (pchr_C_LOCK_STATUS_LOCK != null)
            {
                pchr_C_LOCK_STATUS_LOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_LOCK", pchr_C_LOCK_STATUS_LOCK);
            }
            else
            {
                pchr_C_LOCK_STATUS_LOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_LOCK", typeof(string));
            }
    
            ObjectParameter pchr_C_LOCK_STATUS_UNLOCKParameter;
    
            if (pchr_C_LOCK_STATUS_UNLOCK != null)
            {
                pchr_C_LOCK_STATUS_UNLOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_UNLOCK", pchr_C_LOCK_STATUS_UNLOCK);
            }
            else
            {
                pchr_C_LOCK_STATUS_UNLOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_UNLOCK", typeof(string));
            }
    
            ObjectParameter pdtmProcessDateTimeParameter;
    
            if (pdtmProcessDateTime.HasValue)
            {
                pdtmProcessDateTimeParameter = new ObjectParameter("pdtmProcessDateTime", pdtmProcessDateTime);
            }
            else
            {
                pdtmProcessDateTimeParameter = new ObjectParameter("pdtmProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pchrEmpNoParameter;
    
            if (pchrEmpNo != null)
            {
                pchrEmpNoParameter = new ObjectParameter("pchrEmpNo", pchrEmpNo);
            }
            else
            {
                pchrEmpNoParameter = new ObjectParameter("pchrEmpNo", typeof(string));
            }
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBasic>("LockBackward", pchr_C_LOCK_STATUS_LOCKParameter, pchr_C_LOCK_STATUS_UNLOCKParameter, pdtmProcessDateTimeParameter, pchrEmpNoParameter, pchvQuotationTargetCodeParameter, pchrAlphabetParameter);
        }
        public ObjectResult<tbt_QuotationBasic> LockIndividual(string pchvnQuotationTargetCode, string pchrAlphabet, string pchrC_LOCK_STATUS_LOCK, string pchr_C_LOCK_STATUS_UNLOCK, Nullable<System.DateTime> pdatProcessDateTime, string pchvEmpno)
        {
    
            ObjectParameter pchvnQuotationTargetCodeParameter;
    
            if (pchvnQuotationTargetCode != null)
            {
                pchvnQuotationTargetCodeParameter = new ObjectParameter("pchvnQuotationTargetCode", pchvnQuotationTargetCode);
            }
            else
            {
                pchvnQuotationTargetCodeParameter = new ObjectParameter("pchvnQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchrC_LOCK_STATUS_LOCKParameter;
    
            if (pchrC_LOCK_STATUS_LOCK != null)
            {
                pchrC_LOCK_STATUS_LOCKParameter = new ObjectParameter("pchrC_LOCK_STATUS_LOCK", pchrC_LOCK_STATUS_LOCK);
            }
            else
            {
                pchrC_LOCK_STATUS_LOCKParameter = new ObjectParameter("pchrC_LOCK_STATUS_LOCK", typeof(string));
            }
    
            ObjectParameter pchr_C_LOCK_STATUS_UNLOCKParameter;
    
            if (pchr_C_LOCK_STATUS_UNLOCK != null)
            {
                pchr_C_LOCK_STATUS_UNLOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_UNLOCK", pchr_C_LOCK_STATUS_UNLOCK);
            }
            else
            {
                pchr_C_LOCK_STATUS_UNLOCKParameter = new ObjectParameter("pchr_C_LOCK_STATUS_UNLOCK", typeof(string));
            }
    
            ObjectParameter pdatProcessDateTimeParameter;
    
            if (pdatProcessDateTime.HasValue)
            {
                pdatProcessDateTimeParameter = new ObjectParameter("pdatProcessDateTime", pdatProcessDateTime);
            }
            else
            {
                pdatProcessDateTimeParameter = new ObjectParameter("pdatProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pchvEmpnoParameter;
    
            if (pchvEmpno != null)
            {
                pchvEmpnoParameter = new ObjectParameter("pchvEmpno", pchvEmpno);
            }
            else
            {
                pchvEmpnoParameter = new ObjectParameter("pchvEmpno", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBasic>("LockIndividual", pchvnQuotationTargetCodeParameter, pchrAlphabetParameter, pchrC_LOCK_STATUS_LOCKParameter, pchr_C_LOCK_STATUS_UNLOCKParameter, pdatProcessDateTimeParameter, pchvEmpnoParameter);
        }
        public ObjectResult<tbt_QuotationBasic> GetQuotationBasicData(string pchvQuotationTargetCode, string pchrAlphabet)
        {
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBasic>("GetQuotationBasicData", pchvQuotationTargetCodeParameter, pchrAlphabetParameter);
        }
        public ObjectResult<tbt_QuotationCustomer> GetTbt_QuotationCustomer(string quotationTargetCode)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationCustomer>("GetTbt_QuotationCustomer", quotationTargetCodeParameter);
        }
        public ObjectResult<tbt_QuotationSite> GetTbt_QuotationSite(string quotationTargetCode)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationSite>("GetTbt_QuotationSite", quotationTargetCodeParameter);
        }
        public ObjectResult<tbt_QuotationInstrumentDetails> GetTbt_QuotationInstrumentDetails(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationInstrumentDetails>("GetTbt_QuotationInstrumentDetails", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<tbt_QuotationOperationType> GetTbt_QuotationOperationType(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationOperationType>("GetTbt_QuotationOperationType", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<tbt_QuotationFacilityDetails> GetTbt_QuotationFacilityDetails(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationFacilityDetails>("GetTbt_QuotationFacilityDetails", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<tbt_QuotationSentryGuardDetails> GetTbt_QuotationSentryGuardDetails(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationSentryGuardDetails>("GetTbt_QuotationSentryGuardDetails", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<tbt_QuotationBeatGuardDetails> GetTbt_QuotationBeatGuardDetails(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBeatGuardDetails>("GetTbt_QuotationBeatGuardDetails", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<tbt_QuotationMaintenanceLinkage> GetTbt_QuotationMaintenanceLinkage(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationMaintenanceLinkage>("GetTbt_QuotationMaintenanceLinkage", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<doQuotationTarget> GetQuotationTarget(string pchr_C_ACQUISITION_TYPE, string pchr_C_MOTIVATION_TYPE, string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchr_C_ACQUISITION_TYPEParameter;
    
            if (pchr_C_ACQUISITION_TYPE != null)
            {
                pchr_C_ACQUISITION_TYPEParameter = new ObjectParameter("pchr_C_ACQUISITION_TYPE", pchr_C_ACQUISITION_TYPE);
            }
            else
            {
                pchr_C_ACQUISITION_TYPEParameter = new ObjectParameter("pchr_C_ACQUISITION_TYPE", typeof(string));
            }
    
            ObjectParameter pchr_C_MOTIVATION_TYPEParameter;
    
            if (pchr_C_MOTIVATION_TYPE != null)
            {
                pchr_C_MOTIVATION_TYPEParameter = new ObjectParameter("pchr_C_MOTIVATION_TYPE", pchr_C_MOTIVATION_TYPE);
            }
            else
            {
                pchr_C_MOTIVATION_TYPEParameter = new ObjectParameter("pchr_C_MOTIVATION_TYPE", typeof(string));
            }
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<doQuotationTarget>("GetQuotationTarget", pchr_C_ACQUISITION_TYPEParameter, pchr_C_MOTIVATION_TYPEParameter, pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<doQuotationSite> GetQuotationSite(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<doQuotationSite>("GetQuotationSite", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<doQuotationCustomer> GetQuotationCustomer(string pchrQuotationTargetCode)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<doQuotationCustomer>("GetQuotationCustomer", pchrQuotationTargetCodeParameter);
        }
        public ObjectResult<doInstrumentDetail> GetInstrumentDetail(string pchr_C_LINE_UP_TYPE, string pchr_C_PROD_TYPE_SALE, string pchrQuotationTargetCode, string pchrAlphabet, string pchrProductTypeCode)
        {
    
            ObjectParameter pchr_C_LINE_UP_TYPEParameter;
    
            if (pchr_C_LINE_UP_TYPE != null)
            {
                pchr_C_LINE_UP_TYPEParameter = new ObjectParameter("pchr_C_LINE_UP_TYPE", pchr_C_LINE_UP_TYPE);
            }
            else
            {
                pchr_C_LINE_UP_TYPEParameter = new ObjectParameter("pchr_C_LINE_UP_TYPE", typeof(string));
            }
    
            ObjectParameter pchr_C_PROD_TYPE_SALEParameter;
    
            if (pchr_C_PROD_TYPE_SALE != null)
            {
                pchr_C_PROD_TYPE_SALEParameter = new ObjectParameter("pchr_C_PROD_TYPE_SALE", pchr_C_PROD_TYPE_SALE);
            }
            else
            {
                pchr_C_PROD_TYPE_SALEParameter = new ObjectParameter("pchr_C_PROD_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchrProductTypeCodeParameter;
    
            if (pchrProductTypeCode != null)
            {
                pchrProductTypeCodeParameter = new ObjectParameter("pchrProductTypeCode", pchrProductTypeCode);
            }
            else
            {
                pchrProductTypeCodeParameter = new ObjectParameter("pchrProductTypeCode", typeof(string));
            }
            return base.ExecuteFunction<doInstrumentDetail>("GetInstrumentDetail", pchr_C_LINE_UP_TYPEParameter, pchr_C_PROD_TYPE_SALEParameter, pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pchrProductTypeCodeParameter);
        }
        public ObjectResult<tbt_QuotationBasic> UpdateQuotationBasic(Nullable<System.DateTime> pdatProcessDateTime, string pchvEmpno, string pchrAlphabet, string pchrContractTransferStatus, string pchvnQuotationTargetCode)
        {
    
            ObjectParameter pdatProcessDateTimeParameter;
    
            if (pdatProcessDateTime.HasValue)
            {
                pdatProcessDateTimeParameter = new ObjectParameter("pdatProcessDateTime", pdatProcessDateTime);
            }
            else
            {
                pdatProcessDateTimeParameter = new ObjectParameter("pdatProcessDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter pchvEmpnoParameter;
    
            if (pchvEmpno != null)
            {
                pchvEmpnoParameter = new ObjectParameter("pchvEmpno", pchvEmpno);
            }
            else
            {
                pchvEmpnoParameter = new ObjectParameter("pchvEmpno", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchrContractTransferStatusParameter;
    
            if (pchrContractTransferStatus != null)
            {
                pchrContractTransferStatusParameter = new ObjectParameter("pchrContractTransferStatus", pchrContractTransferStatus);
            }
            else
            {
                pchrContractTransferStatusParameter = new ObjectParameter("pchrContractTransferStatus", typeof(string));
            }
    
            ObjectParameter pchvnQuotationTargetCodeParameter;
    
            if (pchvnQuotationTargetCode != null)
            {
                pchvnQuotationTargetCodeParameter = new ObjectParameter("pchvnQuotationTargetCode", pchvnQuotationTargetCode);
            }
            else
            {
                pchvnQuotationTargetCodeParameter = new ObjectParameter("pchvnQuotationTargetCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBasic>("UpdateQuotationBasic", pdatProcessDateTimeParameter, pchvEmpnoParameter, pchrAlphabetParameter, pchrContractTransferStatusParameter, pchvnQuotationTargetCodeParameter);
        }
        public ObjectResult<tbt_QuotationTarget> UpdateQuotationTarget(string pchrQuotationOfficeCode, string pchrLastAlphabet, string pchrContractTransferStatus, string pchrContractCode, Nullable<System.DateTime> pchrTransferDate, string pchrTransferAlphabet, Nullable<System.DateTime> pdtmUpdateDate, string pchvUpdateBy, string pchvQuotationTargetCode, string operationOfficeCode)
        {
    
            ObjectParameter pchrQuotationOfficeCodeParameter;
    
            if (pchrQuotationOfficeCode != null)
            {
                pchrQuotationOfficeCodeParameter = new ObjectParameter("pchrQuotationOfficeCode", pchrQuotationOfficeCode);
            }
            else
            {
                pchrQuotationOfficeCodeParameter = new ObjectParameter("pchrQuotationOfficeCode", typeof(string));
            }
    
            ObjectParameter pchrLastAlphabetParameter;
    
            if (pchrLastAlphabet != null)
            {
                pchrLastAlphabetParameter = new ObjectParameter("pchrLastAlphabet", pchrLastAlphabet);
            }
            else
            {
                pchrLastAlphabetParameter = new ObjectParameter("pchrLastAlphabet", typeof(string));
            }
    
            ObjectParameter pchrContractTransferStatusParameter;
    
            if (pchrContractTransferStatus != null)
            {
                pchrContractTransferStatusParameter = new ObjectParameter("pchrContractTransferStatus", pchrContractTransferStatus);
            }
            else
            {
                pchrContractTransferStatusParameter = new ObjectParameter("pchrContractTransferStatus", typeof(string));
            }
    
            ObjectParameter pchrContractCodeParameter;
    
            if (pchrContractCode != null)
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", pchrContractCode);
            }
            else
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", typeof(string));
            }
    
            ObjectParameter pchrTransferDateParameter;
    
            if (pchrTransferDate.HasValue)
            {
                pchrTransferDateParameter = new ObjectParameter("pchrTransferDate", pchrTransferDate);
            }
            else
            {
                pchrTransferDateParameter = new ObjectParameter("pchrTransferDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchrTransferAlphabetParameter;
    
            if (pchrTransferAlphabet != null)
            {
                pchrTransferAlphabetParameter = new ObjectParameter("pchrTransferAlphabet", pchrTransferAlphabet);
            }
            else
            {
                pchrTransferAlphabetParameter = new ObjectParameter("pchrTransferAlphabet", typeof(string));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchvUpdateByParameter;
    
            if (pchvUpdateBy != null)
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", pchvUpdateBy);
            }
            else
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", typeof(string));
            }
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationTarget>("UpdateQuotationTarget", pchrQuotationOfficeCodeParameter, pchrLastAlphabetParameter, pchrContractTransferStatusParameter, pchrContractCodeParameter, pchrTransferDateParameter, pchrTransferAlphabetParameter, pdtmUpdateDateParameter, pchvUpdateByParameter, pchvQuotationTargetCodeParameter, operationOfficeCodeParameter);
        }
        public ObjectResult<dtBatchProcessResult> DeleteQuotation(Nullable<bool> pbit_C_FLAG_ON, Nullable<bool> pbit_C_FLAG_OFF)
        {
    
            ObjectParameter pbit_C_FLAG_ONParameter;
    
            if (pbit_C_FLAG_ON.HasValue)
            {
                pbit_C_FLAG_ONParameter = new ObjectParameter("pbit_C_FLAG_ON", pbit_C_FLAG_ON);
            }
            else
            {
                pbit_C_FLAG_ONParameter = new ObjectParameter("pbit_C_FLAG_ON", typeof(bool));
            }
    
            ObjectParameter pbit_C_FLAG_OFFParameter;
    
            if (pbit_C_FLAG_OFF.HasValue)
            {
                pbit_C_FLAG_OFFParameter = new ObjectParameter("pbit_C_FLAG_OFF", pbit_C_FLAG_OFF);
            }
            else
            {
                pbit_C_FLAG_OFFParameter = new ObjectParameter("pbit_C_FLAG_OFF", typeof(bool));
            }
            return base.ExecuteFunction<dtBatchProcessResult>("DeleteQuotation", pbit_C_FLAG_ONParameter, pbit_C_FLAG_OFFParameter);
        }
        public ObjectResult<tbt_QuotationOperationType> InsertQuotationOperationType(string pchvQuotationTargetCode, string pchrAlphabet, string pchrOperationTypeCode, Nullable<System.DateTime> pdtmCreateDate, string pchvCreateBy, Nullable<System.DateTime> pdtmUpdateDate, string pchvUpdateBy)
        {
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchrOperationTypeCodeParameter;
    
            if (pchrOperationTypeCode != null)
            {
                pchrOperationTypeCodeParameter = new ObjectParameter("pchrOperationTypeCode", pchrOperationTypeCode);
            }
            else
            {
                pchrOperationTypeCodeParameter = new ObjectParameter("pchrOperationTypeCode", typeof(string));
            }
    
            ObjectParameter pdtmCreateDateParameter;
    
            if (pdtmCreateDate.HasValue)
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", pdtmCreateDate);
            }
            else
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchvCreateByParameter;
    
            if (pchvCreateBy != null)
            {
                pchvCreateByParameter = new ObjectParameter("pchvCreateBy", pchvCreateBy);
            }
            else
            {
                pchvCreateByParameter = new ObjectParameter("pchvCreateBy", typeof(string));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchvUpdateByParameter;
    
            if (pchvUpdateBy != null)
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", pchvUpdateBy);
            }
            else
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationOperationType>("InsertQuotationOperationType", pchvQuotationTargetCodeParameter, pchrAlphabetParameter, pchrOperationTypeCodeParameter, pdtmCreateDateParameter, pchvCreateByParameter, pdtmUpdateDateParameter, pchvUpdateByParameter);
        }
        public ObjectResult<tbt_QuotationInstrumentDetails> InsertQuotationInstrumentDetails(string pchvQuotationTargetCode, string pchrAlphabet, string pchvInstrumentCode, Nullable<int> pintInstrumentQty, Nullable<int> pintAddedQty, Nullable<int> pintRemovedQty, Nullable<System.DateTime> pdtmCreateDate, string pchvCreateBy, Nullable<System.DateTime> pdtmUpdateDate, string pchvUpdateBy)
        {
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchvInstrumentCodeParameter;
    
            if (pchvInstrumentCode != null)
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", pchvInstrumentCode);
            }
            else
            {
                pchvInstrumentCodeParameter = new ObjectParameter("pchvInstrumentCode", typeof(string));
            }
    
            ObjectParameter pintInstrumentQtyParameter;
    
            if (pintInstrumentQty.HasValue)
            {
                pintInstrumentQtyParameter = new ObjectParameter("pintInstrumentQty", pintInstrumentQty);
            }
            else
            {
                pintInstrumentQtyParameter = new ObjectParameter("pintInstrumentQty", typeof(int));
            }
    
            ObjectParameter pintAddedQtyParameter;
    
            if (pintAddedQty.HasValue)
            {
                pintAddedQtyParameter = new ObjectParameter("pintAddedQty", pintAddedQty);
            }
            else
            {
                pintAddedQtyParameter = new ObjectParameter("pintAddedQty", typeof(int));
            }
    
            ObjectParameter pintRemovedQtyParameter;
    
            if (pintRemovedQty.HasValue)
            {
                pintRemovedQtyParameter = new ObjectParameter("pintRemovedQty", pintRemovedQty);
            }
            else
            {
                pintRemovedQtyParameter = new ObjectParameter("pintRemovedQty", typeof(int));
            }
    
            ObjectParameter pdtmCreateDateParameter;
    
            if (pdtmCreateDate.HasValue)
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", pdtmCreateDate);
            }
            else
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchvCreateByParameter;
    
            if (pchvCreateBy != null)
            {
                pchvCreateByParameter = new ObjectParameter("pchvCreateBy", pchvCreateBy);
            }
            else
            {
                pchvCreateByParameter = new ObjectParameter("pchvCreateBy", typeof(string));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchvUpdateByParameter;
    
            if (pchvUpdateBy != null)
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", pchvUpdateBy);
            }
            else
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationInstrumentDetails>("InsertQuotationInstrumentDetails", pchvQuotationTargetCodeParameter, pchrAlphabetParameter, pchvInstrumentCodeParameter, pintInstrumentQtyParameter, pintAddedQtyParameter, pintRemovedQtyParameter, pdtmCreateDateParameter, pchvCreateByParameter, pdtmUpdateDateParameter, pchvUpdateByParameter);
        }
        public ObjectResult<tbt_QuotationFacilityDetails> InsertQuotationFacilityDetails(string pchvQuotationTargetCode, string pchrAlphabet, string pchvFacilityCode, Nullable<int> pintFacilityQty, Nullable<System.DateTime> pdtmCreateDate, string pchvCreateBy, Nullable<System.DateTime> pdtmUpdateDate, string pchvUpdateBy)
        {
    
            ObjectParameter pchvQuotationTargetCodeParameter;
    
            if (pchvQuotationTargetCode != null)
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", pchvQuotationTargetCode);
            }
            else
            {
                pchvQuotationTargetCodeParameter = new ObjectParameter("pchvQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchvFacilityCodeParameter;
    
            if (pchvFacilityCode != null)
            {
                pchvFacilityCodeParameter = new ObjectParameter("pchvFacilityCode", pchvFacilityCode);
            }
            else
            {
                pchvFacilityCodeParameter = new ObjectParameter("pchvFacilityCode", typeof(string));
            }
    
            ObjectParameter pintFacilityQtyParameter;
    
            if (pintFacilityQty.HasValue)
            {
                pintFacilityQtyParameter = new ObjectParameter("pintFacilityQty", pintFacilityQty);
            }
            else
            {
                pintFacilityQtyParameter = new ObjectParameter("pintFacilityQty", typeof(int));
            }
    
            ObjectParameter pdtmCreateDateParameter;
    
            if (pdtmCreateDate.HasValue)
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", pdtmCreateDate);
            }
            else
            {
                pdtmCreateDateParameter = new ObjectParameter("pdtmCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchvCreateByParameter;
    
            if (pchvCreateBy != null)
            {
                pchvCreateByParameter = new ObjectParameter("pchvCreateBy", pchvCreateBy);
            }
            else
            {
                pchvCreateByParameter = new ObjectParameter("pchvCreateBy", typeof(string));
            }
    
            ObjectParameter pdtmUpdateDateParameter;
    
            if (pdtmUpdateDate.HasValue)
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", pdtmUpdateDate);
            }
            else
            {
                pdtmUpdateDateParameter = new ObjectParameter("pdtmUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchvUpdateByParameter;
    
            if (pchvUpdateBy != null)
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", pchvUpdateBy);
            }
            else
            {
                pchvUpdateByParameter = new ObjectParameter("pchvUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationFacilityDetails>("InsertQuotationFacilityDetails", pchvQuotationTargetCodeParameter, pchrAlphabetParameter, pchvFacilityCodeParameter, pintFacilityQtyParameter, pdtmCreateDateParameter, pchvCreateByParameter, pdtmUpdateDateParameter, pchvUpdateByParameter);
        }
        public ObjectResult<tbt_QuotationBasic> InsertQuotationBasic(string xml_doTbtQuotationBasic)
        {
    
            ObjectParameter xml_doTbtQuotationBasicParameter;
    
            if (xml_doTbtQuotationBasic != null)
            {
                xml_doTbtQuotationBasicParameter = new ObjectParameter("xml_doTbtQuotationBasic", xml_doTbtQuotationBasic);
            }
            else
            {
                xml_doTbtQuotationBasicParameter = new ObjectParameter("xml_doTbtQuotationBasic", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBasic>("InsertQuotationBasic", xml_doTbtQuotationBasicParameter);
        }
        public ObjectResult<tbt_QuotationTarget> InsertQuotationTarget(string xml_QuotationTarget)
        {
    
            ObjectParameter xml_QuotationTargetParameter;
    
            if (xml_QuotationTarget != null)
            {
                xml_QuotationTargetParameter = new ObjectParameter("xml_QuotationTarget", xml_QuotationTarget);
            }
            else
            {
                xml_QuotationTargetParameter = new ObjectParameter("xml_QuotationTarget", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationTarget>("InsertQuotationTarget", xml_QuotationTargetParameter);
        }
        public ObjectResult<tbt_QuotationCustomer> InsertQuotationCustomer(string xml_doTbt_QuotationCustomer)
        {
    
            ObjectParameter xml_doTbt_QuotationCustomerParameter;
    
            if (xml_doTbt_QuotationCustomer != null)
            {
                xml_doTbt_QuotationCustomerParameter = new ObjectParameter("xml_doTbt_QuotationCustomer", xml_doTbt_QuotationCustomer);
            }
            else
            {
                xml_doTbt_QuotationCustomerParameter = new ObjectParameter("xml_doTbt_QuotationCustomer", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationCustomer>("InsertQuotationCustomer", xml_doTbt_QuotationCustomerParameter);
        }
        public ObjectResult<tbt_QuotationSite> InsertQuotationSite(string xml_doTbt_QuotationSite)
        {
    
            ObjectParameter xml_doTbt_QuotationSiteParameter;
    
            if (xml_doTbt_QuotationSite != null)
            {
                xml_doTbt_QuotationSiteParameter = new ObjectParameter("xml_doTbt_QuotationSite", xml_doTbt_QuotationSite);
            }
            else
            {
                xml_doTbt_QuotationSiteParameter = new ObjectParameter("xml_doTbt_QuotationSite", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationSite>("InsertQuotationSite", xml_doTbt_QuotationSiteParameter);
        }
        public ObjectResult<doQuotationOperationType> GetQuotationOperationType(string pchrQuotationTargetCode, string pchrAlphabet, string pcharC_OPERATION_TYPE)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pcharC_OPERATION_TYPEParameter;
    
            if (pcharC_OPERATION_TYPE != null)
            {
                pcharC_OPERATION_TYPEParameter = new ObjectParameter("pcharC_OPERATION_TYPE", pcharC_OPERATION_TYPE);
            }
            else
            {
                pcharC_OPERATION_TYPEParameter = new ObjectParameter("pcharC_OPERATION_TYPE", typeof(string));
            }
            return base.ExecuteFunction<doQuotationOperationType>("GetQuotationOperationType", pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pcharC_OPERATION_TYPEParameter);
        }
        public ObjectResult<doFacilityDetail> GetFacilityDetail(string pchrQuotationTargetCode, string pchrAlphabet)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
            return base.ExecuteFunction<doFacilityDetail>("GetFacilityDetail", pchrQuotationTargetCodeParameter, pchrAlphabetParameter);
        }
        public ObjectResult<doBeatGuardDetail> GetBeatGuardDetail(string pchrQuotationTargetCode, string pchrAlphabet, string pcharC_NUM_OF_DATE)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pcharC_NUM_OF_DATEParameter;
    
            if (pcharC_NUM_OF_DATE != null)
            {
                pcharC_NUM_OF_DATEParameter = new ObjectParameter("pcharC_NUM_OF_DATE", pcharC_NUM_OF_DATE);
            }
            else
            {
                pcharC_NUM_OF_DATEParameter = new ObjectParameter("pcharC_NUM_OF_DATE", typeof(string));
            }
            return base.ExecuteFunction<doBeatGuardDetail>("GetBeatGuardDetail", pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pcharC_NUM_OF_DATEParameter);
        }
        public ObjectResult<doSentryGuardDetail> GetSentryGuardDetail(string pchrQuotationTargetCode, string pchrAlphabet, string pcharC_SG_TYPE)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pcharC_SG_TYPEParameter;
    
            if (pcharC_SG_TYPE != null)
            {
                pcharC_SG_TYPEParameter = new ObjectParameter("pcharC_SG_TYPE", pcharC_SG_TYPE);
            }
            else
            {
                pcharC_SG_TYPEParameter = new ObjectParameter("pcharC_SG_TYPE", typeof(string));
            }
            return base.ExecuteFunction<doSentryGuardDetail>("GetSentryGuardDetail", pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pcharC_SG_TYPEParameter);
        }
        public ObjectResult<doDefaultInstrument> GetDefaultInstrument(string pchrProductCode, string pchrProductTypeCode, string c_LINE_UP_TYPE, string c_LINE_UP_TYPE_STOP_SALE, string c_LINE_UP_TYPE_LOGICAL_DELETE, string c_PROD_TYPE_SALE, string c_INST_TYPE_GENERAL, string c_EXPANSION_TYPE_PARENT, Nullable<bool> blnSaleFlag, Nullable<bool> blnRentalFlag)
        {
    
            ObjectParameter pchrProductCodeParameter;
    
            if (pchrProductCode != null)
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", pchrProductCode);
            }
            else
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", typeof(string));
            }
    
            ObjectParameter pchrProductTypeCodeParameter;
    
            if (pchrProductTypeCode != null)
            {
                pchrProductTypeCodeParameter = new ObjectParameter("pchrProductTypeCode", pchrProductTypeCode);
            }
            else
            {
                pchrProductTypeCodeParameter = new ObjectParameter("pchrProductTypeCode", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPEParameter;
    
            if (c_LINE_UP_TYPE != null)
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", c_LINE_UP_TYPE);
            }
            else
            {
                c_LINE_UP_TYPEParameter = new ObjectParameter("C_LINE_UP_TYPE", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPE_STOP_SALEParameter;
    
            if (c_LINE_UP_TYPE_STOP_SALE != null)
            {
                c_LINE_UP_TYPE_STOP_SALEParameter = new ObjectParameter("C_LINE_UP_TYPE_STOP_SALE", c_LINE_UP_TYPE_STOP_SALE);
            }
            else
            {
                c_LINE_UP_TYPE_STOP_SALEParameter = new ObjectParameter("C_LINE_UP_TYPE_STOP_SALE", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPE_LOGICAL_DELETEParameter;
    
            if (c_LINE_UP_TYPE_LOGICAL_DELETE != null)
            {
                c_LINE_UP_TYPE_LOGICAL_DELETEParameter = new ObjectParameter("C_LINE_UP_TYPE_LOGICAL_DELETE", c_LINE_UP_TYPE_LOGICAL_DELETE);
            }
            else
            {
                c_LINE_UP_TYPE_LOGICAL_DELETEParameter = new ObjectParameter("C_LINE_UP_TYPE_LOGICAL_DELETE", typeof(string));
            }
    
            ObjectParameter c_PROD_TYPE_SALEParameter;
    
            if (c_PROD_TYPE_SALE != null)
            {
                c_PROD_TYPE_SALEParameter = new ObjectParameter("C_PROD_TYPE_SALE", c_PROD_TYPE_SALE);
            }
            else
            {
                c_PROD_TYPE_SALEParameter = new ObjectParameter("C_PROD_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_INST_TYPE_GENERALParameter;
    
            if (c_INST_TYPE_GENERAL != null)
            {
                c_INST_TYPE_GENERALParameter = new ObjectParameter("C_INST_TYPE_GENERAL", c_INST_TYPE_GENERAL);
            }
            else
            {
                c_INST_TYPE_GENERALParameter = new ObjectParameter("C_INST_TYPE_GENERAL", typeof(string));
            }
    
            ObjectParameter c_EXPANSION_TYPE_PARENTParameter;
    
            if (c_EXPANSION_TYPE_PARENT != null)
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", c_EXPANSION_TYPE_PARENT);
            }
            else
            {
                c_EXPANSION_TYPE_PARENTParameter = new ObjectParameter("C_EXPANSION_TYPE_PARENT", typeof(string));
            }
    
            ObjectParameter blnSaleFlagParameter;
    
            if (blnSaleFlag.HasValue)
            {
                blnSaleFlagParameter = new ObjectParameter("blnSaleFlag", blnSaleFlag);
            }
            else
            {
                blnSaleFlagParameter = new ObjectParameter("blnSaleFlag", typeof(bool));
            }
    
            ObjectParameter blnRentalFlagParameter;
    
            if (blnRentalFlag.HasValue)
            {
                blnRentalFlagParameter = new ObjectParameter("blnRentalFlag", blnRentalFlag);
            }
            else
            {
                blnRentalFlagParameter = new ObjectParameter("blnRentalFlag", typeof(bool));
            }
            return base.ExecuteFunction<doDefaultInstrument>("GetDefaultInstrument", pchrProductCodeParameter, pchrProductTypeCodeParameter, c_LINE_UP_TYPEParameter, c_LINE_UP_TYPE_STOP_SALEParameter, c_LINE_UP_TYPE_LOGICAL_DELETEParameter, c_PROD_TYPE_SALEParameter, c_INST_TYPE_GENERALParameter, c_EXPANSION_TYPE_PARENTParameter, blnSaleFlagParameter, blnRentalFlagParameter);
        }
        public ObjectResult<tbt_QuotationBeatGuardDetails> InsertQuotationBeatGuardDetails(string xml_doTbt_QuotationSite)
        {
    
            ObjectParameter xml_doTbt_QuotationSiteParameter;
    
            if (xml_doTbt_QuotationSite != null)
            {
                xml_doTbt_QuotationSiteParameter = new ObjectParameter("xml_doTbt_QuotationSite", xml_doTbt_QuotationSite);
            }
            else
            {
                xml_doTbt_QuotationSiteParameter = new ObjectParameter("xml_doTbt_QuotationSite", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationBeatGuardDetails>("InsertQuotationBeatGuardDetails", xml_doTbt_QuotationSiteParameter);
        }
        public ObjectResult<tbt_QuotationSentryGuardDetails> InsertQuotationSentryGuardDetails(string pchrQuotationTargetCode, string pchrAlphabet, Nullable<int> pintRunningNo, string pchrSentryGuardTypeCode, Nullable<decimal> pdecNumOfDate, Nullable<System.TimeSpan> ptSecurityStartTime, Nullable<System.TimeSpan> ptSecurityFinishTime, Nullable<decimal> pdecWorkHourPerMonth, Nullable<decimal> pdecCostPerHour, Nullable<int> pintNumOfSentryGuard, Nullable<System.DateTime> pdtCreateDate, string pchrCreateBy, Nullable<System.DateTime> pdtUpdateDate, string pdtUpdateBy, Nullable<decimal> pdecCostPerHourUsd, string pdecCostPerCurrencyType)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pintRunningNoParameter;
    
            if (pintRunningNo.HasValue)
            {
                pintRunningNoParameter = new ObjectParameter("pintRunningNo", pintRunningNo);
            }
            else
            {
                pintRunningNoParameter = new ObjectParameter("pintRunningNo", typeof(int));
            }
    
            ObjectParameter pchrSentryGuardTypeCodeParameter;
    
            if (pchrSentryGuardTypeCode != null)
            {
                pchrSentryGuardTypeCodeParameter = new ObjectParameter("pchrSentryGuardTypeCode", pchrSentryGuardTypeCode);
            }
            else
            {
                pchrSentryGuardTypeCodeParameter = new ObjectParameter("pchrSentryGuardTypeCode", typeof(string));
            }
    
            ObjectParameter pdecNumOfDateParameter;
    
            if (pdecNumOfDate.HasValue)
            {
                pdecNumOfDateParameter = new ObjectParameter("pdecNumOfDate", pdecNumOfDate);
            }
            else
            {
                pdecNumOfDateParameter = new ObjectParameter("pdecNumOfDate", typeof(decimal));
            }
    
            ObjectParameter ptSecurityStartTimeParameter;
    
            if (ptSecurityStartTime.HasValue)
            {
                ptSecurityStartTimeParameter = new ObjectParameter("ptSecurityStartTime", ptSecurityStartTime);
            }
            else
            {
                ptSecurityStartTimeParameter = new ObjectParameter("ptSecurityStartTime", typeof(System.TimeSpan));
            }
    
            ObjectParameter ptSecurityFinishTimeParameter;
    
            if (ptSecurityFinishTime.HasValue)
            {
                ptSecurityFinishTimeParameter = new ObjectParameter("ptSecurityFinishTime", ptSecurityFinishTime);
            }
            else
            {
                ptSecurityFinishTimeParameter = new ObjectParameter("ptSecurityFinishTime", typeof(System.TimeSpan));
            }
    
            ObjectParameter pdecWorkHourPerMonthParameter;
    
            if (pdecWorkHourPerMonth.HasValue)
            {
                pdecWorkHourPerMonthParameter = new ObjectParameter("pdecWorkHourPerMonth", pdecWorkHourPerMonth);
            }
            else
            {
                pdecWorkHourPerMonthParameter = new ObjectParameter("pdecWorkHourPerMonth", typeof(decimal));
            }
    
            ObjectParameter pdecCostPerHourParameter;
    
            if (pdecCostPerHour.HasValue)
            {
                pdecCostPerHourParameter = new ObjectParameter("pdecCostPerHour", pdecCostPerHour);
            }
            else
            {
                pdecCostPerHourParameter = new ObjectParameter("pdecCostPerHour", typeof(decimal));
            }
    
            ObjectParameter pintNumOfSentryGuardParameter;
    
            if (pintNumOfSentryGuard.HasValue)
            {
                pintNumOfSentryGuardParameter = new ObjectParameter("pintNumOfSentryGuard", pintNumOfSentryGuard);
            }
            else
            {
                pintNumOfSentryGuardParameter = new ObjectParameter("pintNumOfSentryGuard", typeof(int));
            }
    
            ObjectParameter pdtCreateDateParameter;
    
            if (pdtCreateDate.HasValue)
            {
                pdtCreateDateParameter = new ObjectParameter("pdtCreateDate", pdtCreateDate);
            }
            else
            {
                pdtCreateDateParameter = new ObjectParameter("pdtCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchrCreateByParameter;
    
            if (pchrCreateBy != null)
            {
                pchrCreateByParameter = new ObjectParameter("pchrCreateBy", pchrCreateBy);
            }
            else
            {
                pchrCreateByParameter = new ObjectParameter("pchrCreateBy", typeof(string));
            }
    
            ObjectParameter pdtUpdateDateParameter;
    
            if (pdtUpdateDate.HasValue)
            {
                pdtUpdateDateParameter = new ObjectParameter("pdtUpdateDate", pdtUpdateDate);
            }
            else
            {
                pdtUpdateDateParameter = new ObjectParameter("pdtUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pdtUpdateByParameter;
    
            if (pdtUpdateBy != null)
            {
                pdtUpdateByParameter = new ObjectParameter("pdtUpdateBy", pdtUpdateBy);
            }
            else
            {
                pdtUpdateByParameter = new ObjectParameter("pdtUpdateBy", typeof(string));
            }
    
            ObjectParameter pdecCostPerHourUsdParameter;
    
            if (pdecCostPerHourUsd.HasValue)
            {
                pdecCostPerHourUsdParameter = new ObjectParameter("pdecCostPerHourUsd", pdecCostPerHourUsd);
            }
            else
            {
                pdecCostPerHourUsdParameter = new ObjectParameter("pdecCostPerHourUsd", typeof(decimal));
            }
    
            ObjectParameter pdecCostPerCurrencyTypeParameter;
    
            if (pdecCostPerCurrencyType != null)
            {
                pdecCostPerCurrencyTypeParameter = new ObjectParameter("pdecCostPerCurrencyType", pdecCostPerCurrencyType);
            }
            else
            {
                pdecCostPerCurrencyTypeParameter = new ObjectParameter("pdecCostPerCurrencyType", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationSentryGuardDetails>("InsertQuotationSentryGuardDetails", pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pintRunningNoParameter, pchrSentryGuardTypeCodeParameter, pdecNumOfDateParameter, ptSecurityStartTimeParameter, ptSecurityFinishTimeParameter, pdecWorkHourPerMonthParameter, pdecCostPerHourParameter, pintNumOfSentryGuardParameter, pdtCreateDateParameter, pchrCreateByParameter, pdtUpdateDateParameter, pdtUpdateByParameter, pdecCostPerHourUsdParameter, pdecCostPerCurrencyTypeParameter);
        }
        public ObjectResult<tbt_QuotationMaintenanceLinkage> InsertQuotationMaintenanceLinkage(string pchrQuotationTargetCode, string pchrAlphabet, string pchrContractCode, Nullable<System.DateTime> pdtCreateDate, string pchrCreateBy, Nullable<System.DateTime> pdtUpdateDate, string pchrUpdateBy)
        {
    
            ObjectParameter pchrQuotationTargetCodeParameter;
    
            if (pchrQuotationTargetCode != null)
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", pchrQuotationTargetCode);
            }
            else
            {
                pchrQuotationTargetCodeParameter = new ObjectParameter("pchrQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pchrAlphabetParameter;
    
            if (pchrAlphabet != null)
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", pchrAlphabet);
            }
            else
            {
                pchrAlphabetParameter = new ObjectParameter("pchrAlphabet", typeof(string));
            }
    
            ObjectParameter pchrContractCodeParameter;
    
            if (pchrContractCode != null)
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", pchrContractCode);
            }
            else
            {
                pchrContractCodeParameter = new ObjectParameter("pchrContractCode", typeof(string));
            }
    
            ObjectParameter pdtCreateDateParameter;
    
            if (pdtCreateDate.HasValue)
            {
                pdtCreateDateParameter = new ObjectParameter("pdtCreateDate", pdtCreateDate);
            }
            else
            {
                pdtCreateDateParameter = new ObjectParameter("pdtCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchrCreateByParameter;
    
            if (pchrCreateBy != null)
            {
                pchrCreateByParameter = new ObjectParameter("pchrCreateBy", pchrCreateBy);
            }
            else
            {
                pchrCreateByParameter = new ObjectParameter("pchrCreateBy", typeof(string));
            }
    
            ObjectParameter pdtUpdateDateParameter;
    
            if (pdtUpdateDate.HasValue)
            {
                pdtUpdateDateParameter = new ObjectParameter("pdtUpdateDate", pdtUpdateDate);
            }
            else
            {
                pdtUpdateDateParameter = new ObjectParameter("pdtUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pchrUpdateByParameter;
    
            if (pchrUpdateBy != null)
            {
                pchrUpdateByParameter = new ObjectParameter("pchrUpdateBy", pchrUpdateBy);
            }
            else
            {
                pchrUpdateByParameter = new ObjectParameter("pchrUpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationMaintenanceLinkage>("InsertQuotationMaintenanceLinkage", pchrQuotationTargetCodeParameter, pchrAlphabetParameter, pchrContractCodeParameter, pdtCreateDateParameter, pchrCreateByParameter, pdtUpdateDateParameter, pchrUpdateByParameter);
        }
        public ObjectResult<doDefaultFacility> GetDefaultFacility(string pchrProductCode, string c_LINE_UP_TYPE_STOP_SALE, string c_LINE_UP_TYPE_LOGICAL_DELETE, string c_INST_TYPE_MONITOR)
        {
    
            ObjectParameter pchrProductCodeParameter;
    
            if (pchrProductCode != null)
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", pchrProductCode);
            }
            else
            {
                pchrProductCodeParameter = new ObjectParameter("pchrProductCode", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPE_STOP_SALEParameter;
    
            if (c_LINE_UP_TYPE_STOP_SALE != null)
            {
                c_LINE_UP_TYPE_STOP_SALEParameter = new ObjectParameter("C_LINE_UP_TYPE_STOP_SALE", c_LINE_UP_TYPE_STOP_SALE);
            }
            else
            {
                c_LINE_UP_TYPE_STOP_SALEParameter = new ObjectParameter("C_LINE_UP_TYPE_STOP_SALE", typeof(string));
            }
    
            ObjectParameter c_LINE_UP_TYPE_LOGICAL_DELETEParameter;
    
            if (c_LINE_UP_TYPE_LOGICAL_DELETE != null)
            {
                c_LINE_UP_TYPE_LOGICAL_DELETEParameter = new ObjectParameter("C_LINE_UP_TYPE_LOGICAL_DELETE", c_LINE_UP_TYPE_LOGICAL_DELETE);
            }
            else
            {
                c_LINE_UP_TYPE_LOGICAL_DELETEParameter = new ObjectParameter("C_LINE_UP_TYPE_LOGICAL_DELETE", typeof(string));
            }
    
            ObjectParameter c_INST_TYPE_MONITORParameter;
    
            if (c_INST_TYPE_MONITOR != null)
            {
                c_INST_TYPE_MONITORParameter = new ObjectParameter("C_INST_TYPE_MONITOR", c_INST_TYPE_MONITOR);
            }
            else
            {
                c_INST_TYPE_MONITORParameter = new ObjectParameter("C_INST_TYPE_MONITOR", typeof(string));
            }
            return base.ExecuteFunction<doDefaultFacility>("GetDefaultFacility", pchrProductCodeParameter, c_LINE_UP_TYPE_STOP_SALEParameter, c_LINE_UP_TYPE_LOGICAL_DELETEParameter, c_INST_TYPE_MONITORParameter);
        }
        public ObjectResult<Nullable<int>> IsUsedSite(string pchrSiteCode)
        {
    
            ObjectParameter pchrSiteCodeParameter;
    
            if (pchrSiteCode != null)
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", pchrSiteCode);
            }
            else
            {
                pchrSiteCodeParameter = new ObjectParameter("pchrSiteCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("IsUsedSite", pchrSiteCodeParameter);
        }
        public ObjectResult<Nullable<int>> IsUsedCustomer(string pchrCustCode)
        {
    
            ObjectParameter pchrCustCodeParameter;
    
            if (pchrCustCode != null)
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", pchrCustCode);
            }
            else
            {
                pchrCustCodeParameter = new ObjectParameter("pchrCustCode", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("IsUsedCustomer", pchrCustCodeParameter);
        }
        public ObjectResult<tbt_QuotationInstrumentDetails> ConvertQuotationParentToChildInstrument(string pQuotationTargetCode, string pAlphabet)
        {
    
            ObjectParameter pQuotationTargetCodeParameter;
    
            if (pQuotationTargetCode != null)
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", pQuotationTargetCode);
            }
            else
            {
                pQuotationTargetCodeParameter = new ObjectParameter("pQuotationTargetCode", typeof(string));
            }
    
            ObjectParameter pAlphabetParameter;
    
            if (pAlphabet != null)
            {
                pAlphabetParameter = new ObjectParameter("pAlphabet", pAlphabet);
            }
            else
            {
                pAlphabetParameter = new ObjectParameter("pAlphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationInstrumentDetails>("ConvertQuotationParentToChildInstrument", pQuotationTargetCodeParameter, pAlphabetParameter);
        }
        public ObjectResult<tbt_QuotationInstallationDetail> GetTbt_QuotationInstallationDetail(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationInstallationDetail>("GetTbt_QuotationInstallationDetail", quotationTargetCodeParameter, alphabetParameter);
        }
        public ObjectResult<tbt_QuotationInstallationDetail> InsertTbt_QuotationInstallationDetail(string xml_Tbt_QuotationInstallationDetail)
        {
    
            ObjectParameter xml_Tbt_QuotationInstallationDetailParameter;
    
            if (xml_Tbt_QuotationInstallationDetail != null)
            {
                xml_Tbt_QuotationInstallationDetailParameter = new ObjectParameter("xml_Tbt_QuotationInstallationDetail", xml_Tbt_QuotationInstallationDetail);
            }
            else
            {
                xml_Tbt_QuotationInstallationDetailParameter = new ObjectParameter("xml_Tbt_QuotationInstallationDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationInstallationDetail>("InsertTbt_QuotationInstallationDetail", xml_Tbt_QuotationInstallationDetailParameter);
        }
        public ObjectResult<tbt_QuotationInstallationDetail> UpdateTbt_QuotationInstallationDetail(string xml_Tbt_QuotationInstallationDetail)
        {
    
            ObjectParameter xml_Tbt_QuotationInstallationDetailParameter;
    
            if (xml_Tbt_QuotationInstallationDetail != null)
            {
                xml_Tbt_QuotationInstallationDetailParameter = new ObjectParameter("xml_Tbt_QuotationInstallationDetail", xml_Tbt_QuotationInstallationDetail);
            }
            else
            {
                xml_Tbt_QuotationInstallationDetailParameter = new ObjectParameter("xml_Tbt_QuotationInstallationDetail", typeof(string));
            }
            return base.ExecuteFunction<tbt_QuotationInstallationDetail>("UpdateTbt_QuotationInstallationDetail", xml_Tbt_QuotationInstallationDetailParameter);
        }
        public ObjectResult<doQuotationOneShotFlag> GetQuotationOneShotFlag(string quotationTargetCode, string alphabet)
        {
    
            ObjectParameter quotationTargetCodeParameter;
    
            if (quotationTargetCode != null)
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", quotationTargetCode);
            }
            else
            {
                quotationTargetCodeParameter = new ObjectParameter("QuotationTargetCode", typeof(string));
            }
    
            ObjectParameter alphabetParameter;
    
            if (alphabet != null)
            {
                alphabetParameter = new ObjectParameter("Alphabet", alphabet);
            }
            else
            {
                alphabetParameter = new ObjectParameter("Alphabet", typeof(string));
            }
            return base.ExecuteFunction<doQuotationOneShotFlag>("GetQuotationOneShotFlag", quotationTargetCodeParameter, alphabetParameter);
        }

        #endregion

    }
}
