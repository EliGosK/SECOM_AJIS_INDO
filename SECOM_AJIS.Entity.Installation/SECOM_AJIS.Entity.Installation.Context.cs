//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Installation
{
    public partial class ISDataEntities : ObjectContext
    {
        public const string ConnectionString = "name=ISDataEntities";
        public const string ContainerName = "ISDataEntities";
    
        #region Constructors
    
        public ISDataEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public ISDataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        public ISDataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            this.CommandTimeout = 3600;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<tbt_InstallationAttachFile> tbt_InstallationAttachFile
        {
            get { return _tbt_InstallationAttachFile  ?? (_tbt_InstallationAttachFile = CreateObjectSet<tbt_InstallationAttachFile>("tbt_InstallationAttachFile")); }
        }
        private ObjectSet<tbt_InstallationAttachFile> _tbt_InstallationAttachFile;
    
        public ObjectSet<tbt_InstallationBasic> tbt_InstallationBasic
        {
            get { return _tbt_InstallationBasic  ?? (_tbt_InstallationBasic = CreateObjectSet<tbt_InstallationBasic>("tbt_InstallationBasic")); }
        }
        private ObjectSet<tbt_InstallationBasic> _tbt_InstallationBasic;
    
        public ObjectSet<tbt_InstallationEmail> tbt_InstallationEmail
        {
            get { return _tbt_InstallationEmail  ?? (_tbt_InstallationEmail = CreateObjectSet<tbt_InstallationEmail>("tbt_InstallationEmail")); }
        }
        private ObjectSet<tbt_InstallationEmail> _tbt_InstallationEmail;
    
        public ObjectSet<tbt_InstallationHistoryDetails> tbt_InstallationHistoryDetails
        {
            get { return _tbt_InstallationHistoryDetails  ?? (_tbt_InstallationHistoryDetails = CreateObjectSet<tbt_InstallationHistoryDetails>("tbt_InstallationHistoryDetails")); }
        }
        private ObjectSet<tbt_InstallationHistoryDetails> _tbt_InstallationHistoryDetails;
    
        public ObjectSet<tbt_InstallationInstrumentDetails> tbt_InstallationInstrumentDetails
        {
            get { return _tbt_InstallationInstrumentDetails  ?? (_tbt_InstallationInstrumentDetails = CreateObjectSet<tbt_InstallationInstrumentDetails>("tbt_InstallationInstrumentDetails")); }
        }
        private ObjectSet<tbt_InstallationInstrumentDetails> _tbt_InstallationInstrumentDetails;
    
        public ObjectSet<tbt_InstallationManagement> tbt_InstallationManagement
        {
            get { return _tbt_InstallationManagement  ?? (_tbt_InstallationManagement = CreateObjectSet<tbt_InstallationManagement>("tbt_InstallationManagement")); }
        }
        private ObjectSet<tbt_InstallationManagement> _tbt_InstallationManagement;
    
        public ObjectSet<tbt_InstallationPOManagement> tbt_InstallationPOManagement
        {
            get { return _tbt_InstallationPOManagement  ?? (_tbt_InstallationPOManagement = CreateObjectSet<tbt_InstallationPOManagement>("tbt_InstallationPOManagement")); }
        }
        private ObjectSet<tbt_InstallationPOManagement> _tbt_InstallationPOManagement;
    
        public ObjectSet<tbt_InstallationSlip> tbt_InstallationSlip
        {
            get { return _tbt_InstallationSlip  ?? (_tbt_InstallationSlip = CreateObjectSet<tbt_InstallationSlip>("tbt_InstallationSlip")); }
        }
        private ObjectSet<tbt_InstallationSlip> _tbt_InstallationSlip;
    
        public ObjectSet<tbt_InstallationSlipDetails> tbt_InstallationSlipDetails
        {
            get { return _tbt_InstallationSlipDetails  ?? (_tbt_InstallationSlipDetails = CreateObjectSet<tbt_InstallationSlipDetails>("tbt_InstallationSlipDetails")); }
        }
        private ObjectSet<tbt_InstallationSlipDetails> _tbt_InstallationSlipDetails;
    
        public ObjectSet<tbt_InstallationMemo> tbt_InstallationMemo
        {
            get { return _tbt_InstallationMemo  ?? (_tbt_InstallationMemo = CreateObjectSet<tbt_InstallationMemo>("tbt_InstallationMemo")); }
        }
        private ObjectSet<tbt_InstallationMemo> _tbt_InstallationMemo;
    
        public ObjectSet<tbt_InstallationHistory> tbt_InstallationHistory
        {
            get { return _tbt_InstallationHistory  ?? (_tbt_InstallationHistory = CreateObjectSet<tbt_InstallationHistory>("tbt_InstallationHistory")); }
        }
        private ObjectSet<tbt_InstallationHistory> _tbt_InstallationHistory;
    
        public ObjectSet<tbt_InstallationSlipExpansion> tbt_InstallationSlipExpansion
        {
            get { return _tbt_InstallationSlipExpansion  ?? (_tbt_InstallationSlipExpansion = CreateObjectSet<tbt_InstallationSlipExpansion>("tbt_InstallationSlipExpansion")); }
        }
        private ObjectSet<tbt_InstallationSlipExpansion> _tbt_InstallationSlipExpansion;
    
        public ObjectSet<tbt_InstallationReprint> tbt_InstallationReprint
        {
            get { return _tbt_InstallationReprint  ?? (_tbt_InstallationReprint = CreateObjectSet<tbt_InstallationReprint>("tbt_InstallationReprint")); }
        }
        private ObjectSet<tbt_InstallationReprint> _tbt_InstallationReprint;

        #endregion

        #region Function Imports
        public ObjectResult<InstallationMARunningNo> GetTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter prefixParameter;
    
            if (prefix != null)
            {
                prefixParameter = new ObjectParameter("Prefix", prefix);
            }
            else
            {
                prefixParameter = new ObjectParameter("Prefix", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year.HasValue)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(int));
            }
            return base.ExecuteFunction<InstallationMARunningNo>("GetTbs_InstallationMARunningNo", officeCodeParameter, prefixParameter, yearParameter);
        }
        public int UpdateTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year, Nullable<int> runningNo, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter prefixParameter;
    
            if (prefix != null)
            {
                prefixParameter = new ObjectParameter("Prefix", prefix);
            }
            else
            {
                prefixParameter = new ObjectParameter("Prefix", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year.HasValue)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(int));
            }
    
            ObjectParameter runningNoParameter;
    
            if (runningNo.HasValue)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(int));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction("UpdateTbs_InstallationMARunningNo", officeCodeParameter, prefixParameter, yearParameter, runningNoParameter, updateDateParameter, updateByParameter);
        }
        public int InsertTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> runningNo)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter prefixParameter;
    
            if (prefix != null)
            {
                prefixParameter = new ObjectParameter("Prefix", prefix);
            }
            else
            {
                prefixParameter = new ObjectParameter("Prefix", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year.HasValue)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(int));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter runningNoParameter;
    
            if (runningNo.HasValue)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(int));
            }
            return base.ExecuteFunction("InsertTbs_InstallationMARunningNo", officeCodeParameter, prefixParameter, yearParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, runningNoParameter);
        }
        public ObjectResult<InstallationSlipRunningNo_Result> GetTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter slipIDParameter;
    
            if (slipID != null)
            {
                slipIDParameter = new ObjectParameter("SlipID", slipID);
            }
            else
            {
                slipIDParameter = new ObjectParameter("SlipID", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(string));
            }
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("Month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("Month", typeof(string));
            }
            return base.ExecuteFunction<InstallationSlipRunningNo_Result>("GetTbs_InstallationSlipRunningNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter);
        }
        public int UpdateTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month, Nullable<int> runningNo, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter slipIDParameter;
    
            if (slipID != null)
            {
                slipIDParameter = new ObjectParameter("SlipID", slipID);
            }
            else
            {
                slipIDParameter = new ObjectParameter("SlipID", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(string));
            }
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("Month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("Month", typeof(string));
            }
    
            ObjectParameter runningNoParameter;
    
            if (runningNo.HasValue)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(int));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction("UpdateTbs_InstallationSlipRunningNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter, runningNoParameter, updateDateParameter, updateByParameter);
        }
        public int InsertTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month, Nullable<int> runningNo, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter slipIDParameter;
    
            if (slipID != null)
            {
                slipIDParameter = new ObjectParameter("SlipID", slipID);
            }
            else
            {
                slipIDParameter = new ObjectParameter("SlipID", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(string));
            }
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("Month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("Month", typeof(string));
            }
    
            ObjectParameter runningNoParameter;
    
            if (runningNo.HasValue)
            {
                runningNoParameter = new ObjectParameter("RunningNo", runningNo);
            }
            else
            {
                runningNoParameter = new ObjectParameter("RunningNo", typeof(int));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction("InsertTbs_InstallationSlipRunningNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter, runningNoParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<CheckInstallationRegistered_Result> CheckInstallationRegistered(string strContractCode, string c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTEDParameter;
    
            if (c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED != null)
            {
                c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTEDParameter = new ObjectParameter("C_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED", c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED);
            }
            else
            {
                c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTEDParameter = new ObjectParameter("C_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED", typeof(string));
            }
            return base.ExecuteFunction<CheckInstallationRegistered_Result>("CheckInstallationRegistered", strContractCodeParameter, c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTEDParameter);
        }
        public ObjectResult<tbt_InstallationBasic> InsertTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalContractFeeUsd, string pNormalContractFeeCurrencyType, Nullable<decimal> pNormalInstallFeeUsd, string pNormalInstallFeeCurrencyType, Nullable<decimal> pBillingInstallFeeUsd, string pBillingInstallFeeCurrencyType, Nullable<decimal> pNormalSaleProductPriceUsd, string pNormalSaleProductPriceCurrencyType)
        {
    
            ObjectParameter pContractProjectCodeParameter;
    
            if (pContractProjectCode != null)
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", pContractProjectCode);
            }
            else
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pServiceTypeCodeParameter;
    
            if (pServiceTypeCode != null)
            {
                pServiceTypeCodeParameter = new ObjectParameter("pServiceTypeCode", pServiceTypeCode);
            }
            else
            {
                pServiceTypeCodeParameter = new ObjectParameter("pServiceTypeCode", typeof(string));
            }
    
            ObjectParameter pInstallationStatusParameter;
    
            if (pInstallationStatus != null)
            {
                pInstallationStatusParameter = new ObjectParameter("pInstallationStatus", pInstallationStatus);
            }
            else
            {
                pInstallationStatusParameter = new ObjectParameter("pInstallationStatus", typeof(string));
            }
    
            ObjectParameter pInstallationTypeParameter;
    
            if (pInstallationType != null)
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", pInstallationType);
            }
            else
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", typeof(string));
            }
    
            ObjectParameter pPlanCodeParameter;
    
            if (pPlanCode != null)
            {
                pPlanCodeParameter = new ObjectParameter("pPlanCode", pPlanCode);
            }
            else
            {
                pPlanCodeParameter = new ObjectParameter("pPlanCode", typeof(string));
            }
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCodeParameter;
    
            if (pOperationOfficeCode != null)
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode);
            }
            else
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pSecurityTypeCodeParameter;
    
            if (pSecurityTypeCode != null)
            {
                pSecurityTypeCodeParameter = new ObjectParameter("pSecurityTypeCode", pSecurityTypeCode);
            }
            else
            {
                pSecurityTypeCodeParameter = new ObjectParameter("pSecurityTypeCode", typeof(string));
            }
    
            ObjectParameter pChangeReasonTypeCodeParameter;
    
            if (pChangeReasonTypeCode != null)
            {
                pChangeReasonTypeCodeParameter = new ObjectParameter("pChangeReasonTypeCode", pChangeReasonTypeCode);
            }
            else
            {
                pChangeReasonTypeCodeParameter = new ObjectParameter("pChangeReasonTypeCode", typeof(string));
            }
    
            ObjectParameter pNormalInstallFeeParameter;
    
            if (pNormalInstallFee.HasValue)
            {
                pNormalInstallFeeParameter = new ObjectParameter("pNormalInstallFee", pNormalInstallFee);
            }
            else
            {
                pNormalInstallFeeParameter = new ObjectParameter("pNormalInstallFee", typeof(decimal));
            }
    
            ObjectParameter pBillingInstallFeeParameter;
    
            if (pBillingInstallFee.HasValue)
            {
                pBillingInstallFeeParameter = new ObjectParameter("pBillingInstallFee", pBillingInstallFee);
            }
            else
            {
                pBillingInstallFeeParameter = new ObjectParameter("pBillingInstallFee", typeof(decimal));
            }
    
            ObjectParameter pInstallFeeBillingTypeParameter;
    
            if (pInstallFeeBillingType != null)
            {
                pInstallFeeBillingTypeParameter = new ObjectParameter("pInstallFeeBillingType", pInstallFeeBillingType);
            }
            else
            {
                pInstallFeeBillingTypeParameter = new ObjectParameter("pInstallFeeBillingType", typeof(string));
            }
    
            ObjectParameter pNormalSaleProductPriceParameter;
    
            if (pNormalSaleProductPrice.HasValue)
            {
                pNormalSaleProductPriceParameter = new ObjectParameter("pNormalSaleProductPrice", pNormalSaleProductPrice);
            }
            else
            {
                pNormalSaleProductPriceParameter = new ObjectParameter("pNormalSaleProductPrice", typeof(decimal));
            }
    
            ObjectParameter pBillingSalePriceParameter;
    
            if (pBillingSalePrice.HasValue)
            {
                pBillingSalePriceParameter = new ObjectParameter("pBillingSalePrice", pBillingSalePrice);
            }
            else
            {
                pBillingSalePriceParameter = new ObjectParameter("pBillingSalePrice", typeof(decimal));
            }
    
            ObjectParameter pInstallationSlipProcessingDateParameter;
    
            if (pInstallationSlipProcessingDate.HasValue)
            {
                pInstallationSlipProcessingDateParameter = new ObjectParameter("pInstallationSlipProcessingDate", pInstallationSlipProcessingDate);
            }
            else
            {
                pInstallationSlipProcessingDateParameter = new ObjectParameter("pInstallationSlipProcessingDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationCompleteDateParameter;
    
            if (pInstallationCompleteDate.HasValue)
            {
                pInstallationCompleteDateParameter = new ObjectParameter("pInstallationCompleteDate", pInstallationCompleteDate);
            }
            else
            {
                pInstallationCompleteDateParameter = new ObjectParameter("pInstallationCompleteDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationCompleteProcessingDateParameter;
    
            if (pInstallationCompleteProcessingDate.HasValue)
            {
                pInstallationCompleteProcessingDateParameter = new ObjectParameter("pInstallationCompleteProcessingDate", pInstallationCompleteProcessingDate);
            }
            else
            {
                pInstallationCompleteProcessingDateParameter = new ObjectParameter("pInstallationCompleteProcessingDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationByParameter;
    
            if (pInstallationBy != null)
            {
                pInstallationByParameter = new ObjectParameter("pInstallationBy", pInstallationBy);
            }
            else
            {
                pInstallationByParameter = new ObjectParameter("pInstallationBy", typeof(string));
            }
    
            ObjectParameter pSalesmanEmpNo1Parameter;
    
            if (pSalesmanEmpNo1 != null)
            {
                pSalesmanEmpNo1Parameter = new ObjectParameter("pSalesmanEmpNo1", pSalesmanEmpNo1);
            }
            else
            {
                pSalesmanEmpNo1Parameter = new ObjectParameter("pSalesmanEmpNo1", typeof(string));
            }
    
            ObjectParameter pSalesmanEmpNo2Parameter;
    
            if (pSalesmanEmpNo2 != null)
            {
                pSalesmanEmpNo2Parameter = new ObjectParameter("pSalesmanEmpNo2", pSalesmanEmpNo2);
            }
            else
            {
                pSalesmanEmpNo2Parameter = new ObjectParameter("pSalesmanEmpNo2", typeof(string));
            }
    
            ObjectParameter pApproveNo1Parameter;
    
            if (pApproveNo1 != null)
            {
                pApproveNo1Parameter = new ObjectParameter("pApproveNo1", pApproveNo1);
            }
            else
            {
                pApproveNo1Parameter = new ObjectParameter("pApproveNo1", typeof(string));
            }
    
            ObjectParameter pApproveNo2Parameter;
    
            if (pApproveNo2 != null)
            {
                pApproveNo2Parameter = new ObjectParameter("pApproveNo2", pApproveNo2);
            }
            else
            {
                pApproveNo2Parameter = new ObjectParameter("pApproveNo2", typeof(string));
            }
    
            ObjectParameter pInstallationStartDateParameter;
    
            if (pInstallationStartDate.HasValue)
            {
                pInstallationStartDateParameter = new ObjectParameter("pInstallationStartDate", pInstallationStartDate);
            }
            else
            {
                pInstallationStartDateParameter = new ObjectParameter("pInstallationStartDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationFinishDateParameter;
    
            if (pInstallationFinishDate.HasValue)
            {
                pInstallationFinishDateParameter = new ObjectParameter("pInstallationFinishDate", pInstallationFinishDate);
            }
            else
            {
                pInstallationFinishDateParameter = new ObjectParameter("pInstallationFinishDate", typeof(System.DateTime));
            }
    
            ObjectParameter pNormalContractFeeParameter;
    
            if (pNormalContractFee.HasValue)
            {
                pNormalContractFeeParameter = new ObjectParameter("pNormalContractFee", pNormalContractFee);
            }
            else
            {
                pNormalContractFeeParameter = new ObjectParameter("pNormalContractFee", typeof(decimal));
            }
    
            ObjectParameter pBillingOCCParameter;
    
            if (pBillingOCC != null)
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", pBillingOCC);
            }
            else
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", typeof(string));
            }
    
            ObjectParameter pCreateDateParameter;
    
            if (pCreateDate.HasValue)
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", pCreateDate);
            }
            else
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCreateByParameter;
    
            if (pCreateBy != null)
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", pCreateBy);
            }
            else
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", typeof(string));
            }
    
            ObjectParameter pUpdateDateParameter;
    
            if (pUpdateDate.HasValue)
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", pUpdateDate);
            }
            else
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
    
            ObjectParameter pNormalContractFeeUsdParameter;
    
            if (pNormalContractFeeUsd.HasValue)
            {
                pNormalContractFeeUsdParameter = new ObjectParameter("pNormalContractFeeUsd", pNormalContractFeeUsd);
            }
            else
            {
                pNormalContractFeeUsdParameter = new ObjectParameter("pNormalContractFeeUsd", typeof(decimal));
            }
    
            ObjectParameter pNormalContractFeeCurrencyTypeParameter;
    
            if (pNormalContractFeeCurrencyType != null)
            {
                pNormalContractFeeCurrencyTypeParameter = new ObjectParameter("pNormalContractFeeCurrencyType", pNormalContractFeeCurrencyType);
            }
            else
            {
                pNormalContractFeeCurrencyTypeParameter = new ObjectParameter("pNormalContractFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter pNormalInstallFeeUsdParameter;
    
            if (pNormalInstallFeeUsd.HasValue)
            {
                pNormalInstallFeeUsdParameter = new ObjectParameter("pNormalInstallFeeUsd", pNormalInstallFeeUsd);
            }
            else
            {
                pNormalInstallFeeUsdParameter = new ObjectParameter("pNormalInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter pNormalInstallFeeCurrencyTypeParameter;
    
            if (pNormalInstallFeeCurrencyType != null)
            {
                pNormalInstallFeeCurrencyTypeParameter = new ObjectParameter("pNormalInstallFeeCurrencyType", pNormalInstallFeeCurrencyType);
            }
            else
            {
                pNormalInstallFeeCurrencyTypeParameter = new ObjectParameter("pNormalInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter pBillingInstallFeeUsdParameter;
    
            if (pBillingInstallFeeUsd.HasValue)
            {
                pBillingInstallFeeUsdParameter = new ObjectParameter("pBillingInstallFeeUsd", pBillingInstallFeeUsd);
            }
            else
            {
                pBillingInstallFeeUsdParameter = new ObjectParameter("pBillingInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter pBillingInstallFeeCurrencyTypeParameter;
    
            if (pBillingInstallFeeCurrencyType != null)
            {
                pBillingInstallFeeCurrencyTypeParameter = new ObjectParameter("pBillingInstallFeeCurrencyType", pBillingInstallFeeCurrencyType);
            }
            else
            {
                pBillingInstallFeeCurrencyTypeParameter = new ObjectParameter("pBillingInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter pNormalSaleProductPriceUsdParameter;
    
            if (pNormalSaleProductPriceUsd.HasValue)
            {
                pNormalSaleProductPriceUsdParameter = new ObjectParameter("pNormalSaleProductPriceUsd", pNormalSaleProductPriceUsd);
            }
            else
            {
                pNormalSaleProductPriceUsdParameter = new ObjectParameter("pNormalSaleProductPriceUsd", typeof(decimal));
            }
    
            ObjectParameter pNormalSaleProductPriceCurrencyTypeParameter;
    
            if (pNormalSaleProductPriceCurrencyType != null)
            {
                pNormalSaleProductPriceCurrencyTypeParameter = new ObjectParameter("pNormalSaleProductPriceCurrencyType", pNormalSaleProductPriceCurrencyType);
            }
            else
            {
                pNormalSaleProductPriceCurrencyTypeParameter = new ObjectParameter("pNormalSaleProductPriceCurrencyType", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationBasic>("InsertTbt_InstallationBasic", pContractProjectCodeParameter, pOCCParameter, pServiceTypeCodeParameter, pInstallationStatusParameter, pInstallationTypeParameter, pPlanCodeParameter, pSlipNoParameter, pMaintenanceNoParameter, pOperationOfficeCodeParameter, pSecurityTypeCodeParameter, pChangeReasonTypeCodeParameter, pNormalInstallFeeParameter, pBillingInstallFeeParameter, pInstallFeeBillingTypeParameter, pNormalSaleProductPriceParameter, pBillingSalePriceParameter, pInstallationSlipProcessingDateParameter, pInstallationCompleteDateParameter, pInstallationCompleteProcessingDateParameter, pInstallationByParameter, pSalesmanEmpNo1Parameter, pSalesmanEmpNo2Parameter, pApproveNo1Parameter, pApproveNo2Parameter, pInstallationStartDateParameter, pInstallationFinishDateParameter, pNormalContractFeeParameter, pBillingOCCParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pNormalContractFeeUsdParameter, pNormalContractFeeCurrencyTypeParameter, pNormalInstallFeeUsdParameter, pNormalInstallFeeCurrencyTypeParameter, pBillingInstallFeeUsdParameter, pBillingInstallFeeCurrencyTypeParameter, pNormalSaleProductPriceUsdParameter, pNormalSaleProductPriceCurrencyTypeParameter);
        }
        public ObjectResult<tbt_InstallationBasic> GetTbt_InstallationBasic(string pContractProjectCode)
        {
    
            ObjectParameter pContractProjectCodeParameter;
    
            if (pContractProjectCode != null)
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", pContractProjectCode);
            }
            else
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationBasic>("GetTbt_InstallationBasic", pContractProjectCodeParameter);
        }
        public ObjectResult<CheckAllRemoval_Result> CheckAllRemoval(string strContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_INSTALL_STATUS_COMPLETED)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_SALE_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", c_SALE_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_INSTALL_STATUS_COMPLETEDParameter;
    
            if (c_INSTALL_STATUS_COMPLETED != null)
            {
                c_INSTALL_STATUS_COMPLETEDParameter = new ObjectParameter("C_INSTALL_STATUS_COMPLETED", c_INSTALL_STATUS_COMPLETED);
            }
            else
            {
                c_INSTALL_STATUS_COMPLETEDParameter = new ObjectParameter("C_INSTALL_STATUS_COMPLETED", typeof(string));
            }
            return base.ExecuteFunction<CheckAllRemoval_Result>("CheckAllRemoval", strContractCodeParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPE_REMOVE_ALLParameter, c_INSTALL_STATUS_COMPLETEDParameter);
        }
        public ObjectResult<tbt_InstallationManagement> InsertTbt_InstallationManagement(string maintenanceNo, string contractProjectCode, string managementStatus, Nullable<System.DateTime> proposeInstallStartDate, Nullable<System.DateTime> proposeInstallCompleteDate, string customerStaffBelonging, string customerStaffName, string customerStaffPhoneNo, Nullable<System.DateTime> newPhoneLineOpenDate, string newConnectionPhoneNo, string newPhoneLineOwnerTypeCode, string iEStaffEmpNo1, string iEStaffEmpNo2, Nullable<int> iEManPower, Nullable<decimal> materialFee, Nullable<decimal> materialFeeUsd, string materialFeeCurrencyType, string requestMemo, string pOMemo, string changeReasonCode, string changeReasonOther, string changeRequestorCode, string changeRequestorOther, Nullable<bool> newBldMgmtFlag, Nullable<decimal> newBldMgmtCost, Nullable<decimal> newBldMgmtCostUsd, string newBldMgmtCostCurrencyType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string approveNo)
        {
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
    
            ObjectParameter managementStatusParameter;
    
            if (managementStatus != null)
            {
                managementStatusParameter = new ObjectParameter("ManagementStatus", managementStatus);
            }
            else
            {
                managementStatusParameter = new ObjectParameter("ManagementStatus", typeof(string));
            }
    
            ObjectParameter proposeInstallStartDateParameter;
    
            if (proposeInstallStartDate.HasValue)
            {
                proposeInstallStartDateParameter = new ObjectParameter("ProposeInstallStartDate", proposeInstallStartDate);
            }
            else
            {
                proposeInstallStartDateParameter = new ObjectParameter("ProposeInstallStartDate", typeof(System.DateTime));
            }
    
            ObjectParameter proposeInstallCompleteDateParameter;
    
            if (proposeInstallCompleteDate.HasValue)
            {
                proposeInstallCompleteDateParameter = new ObjectParameter("ProposeInstallCompleteDate", proposeInstallCompleteDate);
            }
            else
            {
                proposeInstallCompleteDateParameter = new ObjectParameter("ProposeInstallCompleteDate", typeof(System.DateTime));
            }
    
            ObjectParameter customerStaffBelongingParameter;
    
            if (customerStaffBelonging != null)
            {
                customerStaffBelongingParameter = new ObjectParameter("CustomerStaffBelonging", customerStaffBelonging);
            }
            else
            {
                customerStaffBelongingParameter = new ObjectParameter("CustomerStaffBelonging", typeof(string));
            }
    
            ObjectParameter customerStaffNameParameter;
    
            if (customerStaffName != null)
            {
                customerStaffNameParameter = new ObjectParameter("CustomerStaffName", customerStaffName);
            }
            else
            {
                customerStaffNameParameter = new ObjectParameter("CustomerStaffName", typeof(string));
            }
    
            ObjectParameter customerStaffPhoneNoParameter;
    
            if (customerStaffPhoneNo != null)
            {
                customerStaffPhoneNoParameter = new ObjectParameter("CustomerStaffPhoneNo", customerStaffPhoneNo);
            }
            else
            {
                customerStaffPhoneNoParameter = new ObjectParameter("CustomerStaffPhoneNo", typeof(string));
            }
    
            ObjectParameter newPhoneLineOpenDateParameter;
    
            if (newPhoneLineOpenDate.HasValue)
            {
                newPhoneLineOpenDateParameter = new ObjectParameter("NewPhoneLineOpenDate", newPhoneLineOpenDate);
            }
            else
            {
                newPhoneLineOpenDateParameter = new ObjectParameter("NewPhoneLineOpenDate", typeof(System.DateTime));
            }
    
            ObjectParameter newConnectionPhoneNoParameter;
    
            if (newConnectionPhoneNo != null)
            {
                newConnectionPhoneNoParameter = new ObjectParameter("NewConnectionPhoneNo", newConnectionPhoneNo);
            }
            else
            {
                newConnectionPhoneNoParameter = new ObjectParameter("NewConnectionPhoneNo", typeof(string));
            }
    
            ObjectParameter newPhoneLineOwnerTypeCodeParameter;
    
            if (newPhoneLineOwnerTypeCode != null)
            {
                newPhoneLineOwnerTypeCodeParameter = new ObjectParameter("NewPhoneLineOwnerTypeCode", newPhoneLineOwnerTypeCode);
            }
            else
            {
                newPhoneLineOwnerTypeCodeParameter = new ObjectParameter("NewPhoneLineOwnerTypeCode", typeof(string));
            }
    
            ObjectParameter iEStaffEmpNo1Parameter;
    
            if (iEStaffEmpNo1 != null)
            {
                iEStaffEmpNo1Parameter = new ObjectParameter("IEStaffEmpNo1", iEStaffEmpNo1);
            }
            else
            {
                iEStaffEmpNo1Parameter = new ObjectParameter("IEStaffEmpNo1", typeof(string));
            }
    
            ObjectParameter iEStaffEmpNo2Parameter;
    
            if (iEStaffEmpNo2 != null)
            {
                iEStaffEmpNo2Parameter = new ObjectParameter("IEStaffEmpNo2", iEStaffEmpNo2);
            }
            else
            {
                iEStaffEmpNo2Parameter = new ObjectParameter("IEStaffEmpNo2", typeof(string));
            }
    
            ObjectParameter iEManPowerParameter;
    
            if (iEManPower.HasValue)
            {
                iEManPowerParameter = new ObjectParameter("IEManPower", iEManPower);
            }
            else
            {
                iEManPowerParameter = new ObjectParameter("IEManPower", typeof(int));
            }
    
            ObjectParameter materialFeeParameter;
    
            if (materialFee.HasValue)
            {
                materialFeeParameter = new ObjectParameter("MaterialFee", materialFee);
            }
            else
            {
                materialFeeParameter = new ObjectParameter("MaterialFee", typeof(decimal));
            }
    
            ObjectParameter materialFeeUsdParameter;
    
            if (materialFeeUsd.HasValue)
            {
                materialFeeUsdParameter = new ObjectParameter("MaterialFeeUsd", materialFeeUsd);
            }
            else
            {
                materialFeeUsdParameter = new ObjectParameter("MaterialFeeUsd", typeof(decimal));
            }
    
            ObjectParameter materialFeeCurrencyTypeParameter;
    
            if (materialFeeCurrencyType != null)
            {
                materialFeeCurrencyTypeParameter = new ObjectParameter("MaterialFeeCurrencyType", materialFeeCurrencyType);
            }
            else
            {
                materialFeeCurrencyTypeParameter = new ObjectParameter("MaterialFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter requestMemoParameter;
    
            if (requestMemo != null)
            {
                requestMemoParameter = new ObjectParameter("RequestMemo", requestMemo);
            }
            else
            {
                requestMemoParameter = new ObjectParameter("RequestMemo", typeof(string));
            }
    
            ObjectParameter pOMemoParameter;
    
            if (pOMemo != null)
            {
                pOMemoParameter = new ObjectParameter("POMemo", pOMemo);
            }
            else
            {
                pOMemoParameter = new ObjectParameter("POMemo", typeof(string));
            }
    
            ObjectParameter changeReasonCodeParameter;
    
            if (changeReasonCode != null)
            {
                changeReasonCodeParameter = new ObjectParameter("ChangeReasonCode", changeReasonCode);
            }
            else
            {
                changeReasonCodeParameter = new ObjectParameter("ChangeReasonCode", typeof(string));
            }
    
            ObjectParameter changeReasonOtherParameter;
    
            if (changeReasonOther != null)
            {
                changeReasonOtherParameter = new ObjectParameter("ChangeReasonOther", changeReasonOther);
            }
            else
            {
                changeReasonOtherParameter = new ObjectParameter("ChangeReasonOther", typeof(string));
            }
    
            ObjectParameter changeRequestorCodeParameter;
    
            if (changeRequestorCode != null)
            {
                changeRequestorCodeParameter = new ObjectParameter("ChangeRequestorCode", changeRequestorCode);
            }
            else
            {
                changeRequestorCodeParameter = new ObjectParameter("ChangeRequestorCode", typeof(string));
            }
    
            ObjectParameter changeRequestorOtherParameter;
    
            if (changeRequestorOther != null)
            {
                changeRequestorOtherParameter = new ObjectParameter("ChangeRequestorOther", changeRequestorOther);
            }
            else
            {
                changeRequestorOtherParameter = new ObjectParameter("ChangeRequestorOther", typeof(string));
            }
    
            ObjectParameter newBldMgmtFlagParameter;
    
            if (newBldMgmtFlag.HasValue)
            {
                newBldMgmtFlagParameter = new ObjectParameter("NewBldMgmtFlag", newBldMgmtFlag);
            }
            else
            {
                newBldMgmtFlagParameter = new ObjectParameter("NewBldMgmtFlag", typeof(bool));
            }
    
            ObjectParameter newBldMgmtCostParameter;
    
            if (newBldMgmtCost.HasValue)
            {
                newBldMgmtCostParameter = new ObjectParameter("NewBldMgmtCost", newBldMgmtCost);
            }
            else
            {
                newBldMgmtCostParameter = new ObjectParameter("NewBldMgmtCost", typeof(decimal));
            }
    
            ObjectParameter newBldMgmtCostUsdParameter;
    
            if (newBldMgmtCostUsd.HasValue)
            {
                newBldMgmtCostUsdParameter = new ObjectParameter("NewBldMgmtCostUsd", newBldMgmtCostUsd);
            }
            else
            {
                newBldMgmtCostUsdParameter = new ObjectParameter("NewBldMgmtCostUsd", typeof(decimal));
            }
    
            ObjectParameter newBldMgmtCostCurrencyTypeParameter;
    
            if (newBldMgmtCostCurrencyType != null)
            {
                newBldMgmtCostCurrencyTypeParameter = new ObjectParameter("NewBldMgmtCostCurrencyType", newBldMgmtCostCurrencyType);
            }
            else
            {
                newBldMgmtCostCurrencyTypeParameter = new ObjectParameter("NewBldMgmtCostCurrencyType", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter approveNoParameter;
    
            if (approveNo != null)
            {
                approveNoParameter = new ObjectParameter("ApproveNo", approveNo);
            }
            else
            {
                approveNoParameter = new ObjectParameter("ApproveNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationManagement>("InsertTbt_InstallationManagement", maintenanceNoParameter, contractProjectCodeParameter, managementStatusParameter, proposeInstallStartDateParameter, proposeInstallCompleteDateParameter, customerStaffBelongingParameter, customerStaffNameParameter, customerStaffPhoneNoParameter, newPhoneLineOpenDateParameter, newConnectionPhoneNoParameter, newPhoneLineOwnerTypeCodeParameter, iEStaffEmpNo1Parameter, iEStaffEmpNo2Parameter, iEManPowerParameter, materialFeeParameter, materialFeeUsdParameter, materialFeeCurrencyTypeParameter, requestMemoParameter, pOMemoParameter, changeReasonCodeParameter, changeReasonOtherParameter, changeRequestorCodeParameter, changeRequestorOtherParameter, newBldMgmtFlagParameter, newBldMgmtCostParameter, newBldMgmtCostUsdParameter, newBldMgmtCostCurrencyTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, approveNoParameter);
        }
        public ObjectResult<tbt_InstallationBasic> UpdateTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalInstallFeeUsd, Nullable<decimal> pBillingInstallFeeUsd, Nullable<decimal> pNormalSaleProductPriceUsd, Nullable<decimal> pNormalContractFeeUsd, string pNormalInstallFeeCurrencyType, string pBillingInstallFeeCurrencyType, string pNormalSaleProductPriceCurrencyType, string pNormalContractFeeCurrencyType)
        {
    
            ObjectParameter pContractProjectCodeParameter;
    
            if (pContractProjectCode != null)
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", pContractProjectCode);
            }
            else
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pServiceTypeCodeParameter;
    
            if (pServiceTypeCode != null)
            {
                pServiceTypeCodeParameter = new ObjectParameter("pServiceTypeCode", pServiceTypeCode);
            }
            else
            {
                pServiceTypeCodeParameter = new ObjectParameter("pServiceTypeCode", typeof(string));
            }
    
            ObjectParameter pInstallationStatusParameter;
    
            if (pInstallationStatus != null)
            {
                pInstallationStatusParameter = new ObjectParameter("pInstallationStatus", pInstallationStatus);
            }
            else
            {
                pInstallationStatusParameter = new ObjectParameter("pInstallationStatus", typeof(string));
            }
    
            ObjectParameter pInstallationTypeParameter;
    
            if (pInstallationType != null)
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", pInstallationType);
            }
            else
            {
                pInstallationTypeParameter = new ObjectParameter("pInstallationType", typeof(string));
            }
    
            ObjectParameter pPlanCodeParameter;
    
            if (pPlanCode != null)
            {
                pPlanCodeParameter = new ObjectParameter("pPlanCode", pPlanCode);
            }
            else
            {
                pPlanCodeParameter = new ObjectParameter("pPlanCode", typeof(string));
            }
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
    
            ObjectParameter pOperationOfficeCodeParameter;
    
            if (pOperationOfficeCode != null)
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode);
            }
            else
            {
                pOperationOfficeCodeParameter = new ObjectParameter("pOperationOfficeCode", typeof(string));
            }
    
            ObjectParameter pSecurityTypeCodeParameter;
    
            if (pSecurityTypeCode != null)
            {
                pSecurityTypeCodeParameter = new ObjectParameter("pSecurityTypeCode", pSecurityTypeCode);
            }
            else
            {
                pSecurityTypeCodeParameter = new ObjectParameter("pSecurityTypeCode", typeof(string));
            }
    
            ObjectParameter pChangeReasonTypeCodeParameter;
    
            if (pChangeReasonTypeCode != null)
            {
                pChangeReasonTypeCodeParameter = new ObjectParameter("pChangeReasonTypeCode", pChangeReasonTypeCode);
            }
            else
            {
                pChangeReasonTypeCodeParameter = new ObjectParameter("pChangeReasonTypeCode", typeof(string));
            }
    
            ObjectParameter pNormalInstallFeeParameter;
    
            if (pNormalInstallFee.HasValue)
            {
                pNormalInstallFeeParameter = new ObjectParameter("pNormalInstallFee", pNormalInstallFee);
            }
            else
            {
                pNormalInstallFeeParameter = new ObjectParameter("pNormalInstallFee", typeof(decimal));
            }
    
            ObjectParameter pBillingInstallFeeParameter;
    
            if (pBillingInstallFee.HasValue)
            {
                pBillingInstallFeeParameter = new ObjectParameter("pBillingInstallFee", pBillingInstallFee);
            }
            else
            {
                pBillingInstallFeeParameter = new ObjectParameter("pBillingInstallFee", typeof(decimal));
            }
    
            ObjectParameter pInstallFeeBillingTypeParameter;
    
            if (pInstallFeeBillingType != null)
            {
                pInstallFeeBillingTypeParameter = new ObjectParameter("pInstallFeeBillingType", pInstallFeeBillingType);
            }
            else
            {
                pInstallFeeBillingTypeParameter = new ObjectParameter("pInstallFeeBillingType", typeof(string));
            }
    
            ObjectParameter pNormalSaleProductPriceParameter;
    
            if (pNormalSaleProductPrice.HasValue)
            {
                pNormalSaleProductPriceParameter = new ObjectParameter("pNormalSaleProductPrice", pNormalSaleProductPrice);
            }
            else
            {
                pNormalSaleProductPriceParameter = new ObjectParameter("pNormalSaleProductPrice", typeof(decimal));
            }
    
            ObjectParameter pBillingSalePriceParameter;
    
            if (pBillingSalePrice.HasValue)
            {
                pBillingSalePriceParameter = new ObjectParameter("pBillingSalePrice", pBillingSalePrice);
            }
            else
            {
                pBillingSalePriceParameter = new ObjectParameter("pBillingSalePrice", typeof(decimal));
            }
    
            ObjectParameter pInstallationSlipProcessingDateParameter;
    
            if (pInstallationSlipProcessingDate.HasValue)
            {
                pInstallationSlipProcessingDateParameter = new ObjectParameter("pInstallationSlipProcessingDate", pInstallationSlipProcessingDate);
            }
            else
            {
                pInstallationSlipProcessingDateParameter = new ObjectParameter("pInstallationSlipProcessingDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationCompleteDateParameter;
    
            if (pInstallationCompleteDate.HasValue)
            {
                pInstallationCompleteDateParameter = new ObjectParameter("pInstallationCompleteDate", pInstallationCompleteDate);
            }
            else
            {
                pInstallationCompleteDateParameter = new ObjectParameter("pInstallationCompleteDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationCompleteProcessingDateParameter;
    
            if (pInstallationCompleteProcessingDate.HasValue)
            {
                pInstallationCompleteProcessingDateParameter = new ObjectParameter("pInstallationCompleteProcessingDate", pInstallationCompleteProcessingDate);
            }
            else
            {
                pInstallationCompleteProcessingDateParameter = new ObjectParameter("pInstallationCompleteProcessingDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationByParameter;
    
            if (pInstallationBy != null)
            {
                pInstallationByParameter = new ObjectParameter("pInstallationBy", pInstallationBy);
            }
            else
            {
                pInstallationByParameter = new ObjectParameter("pInstallationBy", typeof(string));
            }
    
            ObjectParameter pSalesmanEmpNo1Parameter;
    
            if (pSalesmanEmpNo1 != null)
            {
                pSalesmanEmpNo1Parameter = new ObjectParameter("pSalesmanEmpNo1", pSalesmanEmpNo1);
            }
            else
            {
                pSalesmanEmpNo1Parameter = new ObjectParameter("pSalesmanEmpNo1", typeof(string));
            }
    
            ObjectParameter pSalesmanEmpNo2Parameter;
    
            if (pSalesmanEmpNo2 != null)
            {
                pSalesmanEmpNo2Parameter = new ObjectParameter("pSalesmanEmpNo2", pSalesmanEmpNo2);
            }
            else
            {
                pSalesmanEmpNo2Parameter = new ObjectParameter("pSalesmanEmpNo2", typeof(string));
            }
    
            ObjectParameter pApproveNo1Parameter;
    
            if (pApproveNo1 != null)
            {
                pApproveNo1Parameter = new ObjectParameter("pApproveNo1", pApproveNo1);
            }
            else
            {
                pApproveNo1Parameter = new ObjectParameter("pApproveNo1", typeof(string));
            }
    
            ObjectParameter pApproveNo2Parameter;
    
            if (pApproveNo2 != null)
            {
                pApproveNo2Parameter = new ObjectParameter("pApproveNo2", pApproveNo2);
            }
            else
            {
                pApproveNo2Parameter = new ObjectParameter("pApproveNo2", typeof(string));
            }
    
            ObjectParameter pInstallationStartDateParameter;
    
            if (pInstallationStartDate.HasValue)
            {
                pInstallationStartDateParameter = new ObjectParameter("pInstallationStartDate", pInstallationStartDate);
            }
            else
            {
                pInstallationStartDateParameter = new ObjectParameter("pInstallationStartDate", typeof(System.DateTime));
            }
    
            ObjectParameter pInstallationFinishDateParameter;
    
            if (pInstallationFinishDate.HasValue)
            {
                pInstallationFinishDateParameter = new ObjectParameter("pInstallationFinishDate", pInstallationFinishDate);
            }
            else
            {
                pInstallationFinishDateParameter = new ObjectParameter("pInstallationFinishDate", typeof(System.DateTime));
            }
    
            ObjectParameter pNormalContractFeeParameter;
    
            if (pNormalContractFee.HasValue)
            {
                pNormalContractFeeParameter = new ObjectParameter("pNormalContractFee", pNormalContractFee);
            }
            else
            {
                pNormalContractFeeParameter = new ObjectParameter("pNormalContractFee", typeof(decimal));
            }
    
            ObjectParameter pBillingOCCParameter;
    
            if (pBillingOCC != null)
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", pBillingOCC);
            }
            else
            {
                pBillingOCCParameter = new ObjectParameter("pBillingOCC", typeof(string));
            }
    
            ObjectParameter pCreateDateParameter;
    
            if (pCreateDate.HasValue)
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", pCreateDate);
            }
            else
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCreateByParameter;
    
            if (pCreateBy != null)
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", pCreateBy);
            }
            else
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", typeof(string));
            }
    
            ObjectParameter pUpdateDateParameter;
    
            if (pUpdateDate.HasValue)
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", pUpdateDate);
            }
            else
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
    
            ObjectParameter pNormalInstallFeeUsdParameter;
    
            if (pNormalInstallFeeUsd.HasValue)
            {
                pNormalInstallFeeUsdParameter = new ObjectParameter("pNormalInstallFeeUsd", pNormalInstallFeeUsd);
            }
            else
            {
                pNormalInstallFeeUsdParameter = new ObjectParameter("pNormalInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter pBillingInstallFeeUsdParameter;
    
            if (pBillingInstallFeeUsd.HasValue)
            {
                pBillingInstallFeeUsdParameter = new ObjectParameter("pBillingInstallFeeUsd", pBillingInstallFeeUsd);
            }
            else
            {
                pBillingInstallFeeUsdParameter = new ObjectParameter("pBillingInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter pNormalSaleProductPriceUsdParameter;
    
            if (pNormalSaleProductPriceUsd.HasValue)
            {
                pNormalSaleProductPriceUsdParameter = new ObjectParameter("pNormalSaleProductPriceUsd", pNormalSaleProductPriceUsd);
            }
            else
            {
                pNormalSaleProductPriceUsdParameter = new ObjectParameter("pNormalSaleProductPriceUsd", typeof(decimal));
            }
    
            ObjectParameter pNormalContractFeeUsdParameter;
    
            if (pNormalContractFeeUsd.HasValue)
            {
                pNormalContractFeeUsdParameter = new ObjectParameter("pNormalContractFeeUsd", pNormalContractFeeUsd);
            }
            else
            {
                pNormalContractFeeUsdParameter = new ObjectParameter("pNormalContractFeeUsd", typeof(decimal));
            }
    
            ObjectParameter pNormalInstallFeeCurrencyTypeParameter;
    
            if (pNormalInstallFeeCurrencyType != null)
            {
                pNormalInstallFeeCurrencyTypeParameter = new ObjectParameter("pNormalInstallFeeCurrencyType", pNormalInstallFeeCurrencyType);
            }
            else
            {
                pNormalInstallFeeCurrencyTypeParameter = new ObjectParameter("pNormalInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter pBillingInstallFeeCurrencyTypeParameter;
    
            if (pBillingInstallFeeCurrencyType != null)
            {
                pBillingInstallFeeCurrencyTypeParameter = new ObjectParameter("pBillingInstallFeeCurrencyType", pBillingInstallFeeCurrencyType);
            }
            else
            {
                pBillingInstallFeeCurrencyTypeParameter = new ObjectParameter("pBillingInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter pNormalSaleProductPriceCurrencyTypeParameter;
    
            if (pNormalSaleProductPriceCurrencyType != null)
            {
                pNormalSaleProductPriceCurrencyTypeParameter = new ObjectParameter("pNormalSaleProductPriceCurrencyType", pNormalSaleProductPriceCurrencyType);
            }
            else
            {
                pNormalSaleProductPriceCurrencyTypeParameter = new ObjectParameter("pNormalSaleProductPriceCurrencyType", typeof(string));
            }
    
            ObjectParameter pNormalContractFeeCurrencyTypeParameter;
    
            if (pNormalContractFeeCurrencyType != null)
            {
                pNormalContractFeeCurrencyTypeParameter = new ObjectParameter("pNormalContractFeeCurrencyType", pNormalContractFeeCurrencyType);
            }
            else
            {
                pNormalContractFeeCurrencyTypeParameter = new ObjectParameter("pNormalContractFeeCurrencyType", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationBasic>("UpdateTbt_InstallationBasic", pContractProjectCodeParameter, pOCCParameter, pServiceTypeCodeParameter, pInstallationStatusParameter, pInstallationTypeParameter, pPlanCodeParameter, pSlipNoParameter, pMaintenanceNoParameter, pOperationOfficeCodeParameter, pSecurityTypeCodeParameter, pChangeReasonTypeCodeParameter, pNormalInstallFeeParameter, pBillingInstallFeeParameter, pInstallFeeBillingTypeParameter, pNormalSaleProductPriceParameter, pBillingSalePriceParameter, pInstallationSlipProcessingDateParameter, pInstallationCompleteDateParameter, pInstallationCompleteProcessingDateParameter, pInstallationByParameter, pSalesmanEmpNo1Parameter, pSalesmanEmpNo2Parameter, pApproveNo1Parameter, pApproveNo2Parameter, pInstallationStartDateParameter, pInstallationFinishDateParameter, pNormalContractFeeParameter, pBillingOCCParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pNormalInstallFeeUsdParameter, pBillingInstallFeeUsdParameter, pNormalSaleProductPriceUsdParameter, pNormalContractFeeUsdParameter, pNormalInstallFeeCurrencyTypeParameter, pBillingInstallFeeCurrencyTypeParameter, pNormalSaleProductPriceCurrencyTypeParameter, pNormalContractFeeCurrencyTypeParameter);
        }
        public ObjectResult<CheckCancelContractBeforeStartService_Result> CheckCancelContractBeforeStartService(string strContractCode, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
    
            ObjectParameter strContractCodeParameter;
    
            if (strContractCode != null)
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", strContractCode);
            }
            else
            {
                strContractCodeParameter = new ObjectParameter("strContractCode", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_ENDParameter;
    
            if (c_CONTRACT_STATUS_END != null)
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END);
            }
            else
            {
                c_CONTRACT_STATUS_ENDParameter = new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_CANCELParameter;
    
            if (c_CONTRACT_STATUS_CANCEL != null)
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
            }
    
            ObjectParameter c_CONTRACT_STATUS_FIXED_CANCELParameter;
    
            if (c_CONTRACT_STATUS_FIXED_CANCEL != null)
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL);
            }
            else
            {
                c_CONTRACT_STATUS_FIXED_CANCELParameter = new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<CheckCancelContractBeforeStartService_Result>("CheckCancelContractBeforeStartService", strContractCodeParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
        public ObjectResult<tbt_InstallationMemo> InsertTbt_InstallationMemo(Nullable<int> memoID, string contractProjectCode, string referenceID, string objectID, string memo, string officeCode, string departmentCode, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter memoIDParameter;
    
            if (memoID.HasValue)
            {
                memoIDParameter = new ObjectParameter("MemoID", memoID);
            }
            else
            {
                memoIDParameter = new ObjectParameter("MemoID", typeof(int));
            }
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
    
            ObjectParameter referenceIDParameter;
    
            if (referenceID != null)
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", referenceID);
            }
            else
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", typeof(string));
            }
    
            ObjectParameter objectIDParameter;
    
            if (objectID != null)
            {
                objectIDParameter = new ObjectParameter("ObjectID", objectID);
            }
            else
            {
                objectIDParameter = new ObjectParameter("ObjectID", typeof(string));
            }
    
            ObjectParameter memoParameter;
    
            if (memo != null)
            {
                memoParameter = new ObjectParameter("Memo", memo);
            }
            else
            {
                memoParameter = new ObjectParameter("Memo", typeof(string));
            }
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter departmentCodeParameter;
    
            if (departmentCode != null)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationMemo>("InsertTbt_InstallationMemo", memoIDParameter, contractProjectCodeParameter, referenceIDParameter, objectIDParameter, memoParameter, officeCodeParameter, departmentCodeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbt_InstallationEmail> InsertTbt_InstallationEmail(Nullable<int> emailID, string referenceID, string emailNoticeTarget, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter emailIDParameter;
    
            if (emailID.HasValue)
            {
                emailIDParameter = new ObjectParameter("EmailID", emailID);
            }
            else
            {
                emailIDParameter = new ObjectParameter("EmailID", typeof(int));
            }
    
            ObjectParameter referenceIDParameter;
    
            if (referenceID != null)
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", referenceID);
            }
            else
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", typeof(string));
            }
    
            ObjectParameter emailNoticeTargetParameter;
    
            if (emailNoticeTarget != null)
            {
                emailNoticeTargetParameter = new ObjectParameter("EmailNoticeTarget", emailNoticeTarget);
            }
            else
            {
                emailNoticeTargetParameter = new ObjectParameter("EmailNoticeTarget", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationEmail>("InsertTbt_InstallationEmail", emailIDParameter, referenceIDParameter, emailNoticeTargetParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbt_InstallationManagement> GetTbt_InstallationManagement(string pMaintenanceNo)
        {
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationManagement>("GetTbt_InstallationManagement", pMaintenanceNoParameter);
        }
        public ObjectResult<tbt_InstallationPOManagement> GetTbt_InstallationPOManagement(string pMaintenanceNo)
        {
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationPOManagement>("GetTbt_InstallationPOManagement", pMaintenanceNoParameter);
        }
        public ObjectResult<tbt_InstallationEmail> GetTbt_InstallationEmail(string pMaintenanceNo)
        {
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationEmail>("GetTbt_InstallationEmail", pMaintenanceNoParameter);
        }
        public ObjectResult<tbt_InstallationPOManagement> InsertTbt_InstallationPOManagement(string xml_POManagement)
        {
    
            ObjectParameter xml_POManagementParameter;
    
            if (xml_POManagement != null)
            {
                xml_POManagementParameter = new ObjectParameter("xml_POManagement", xml_POManagement);
            }
            else
            {
                xml_POManagementParameter = new ObjectParameter("xml_POManagement", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationPOManagement>("InsertTbt_InstallationPOManagement", xml_POManagementParameter);
        }
        public ObjectResult<tbt_InstallationPOManagement> UpdateTbt_InstallationPOManagement(string xml_POManagement)
        {
    
            ObjectParameter xml_POManagementParameter;
    
            if (xml_POManagement != null)
            {
                xml_POManagementParameter = new ObjectParameter("xml_POManagement", xml_POManagement);
            }
            else
            {
                xml_POManagementParameter = new ObjectParameter("xml_POManagement", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationPOManagement>("UpdateTbt_InstallationPOManagement", xml_POManagementParameter);
        }
        public ObjectResult<tbt_InstallationManagement> UpdateTbt_InstallationManagement(string pMaintenanceNo, string pContractProjectCode, string pManagementStatus, Nullable<System.DateTime> pProposeInstallStartDate, Nullable<System.DateTime> pProposeInstallCompleteDate, string pCustomerStaffBelonging, string pCustomerStaffName, string pCustomerStaffPhoneNo, Nullable<System.DateTime> pNewPhoneLineOpenDate, string pNewConnectionPhoneNo, string pNewPhoneLineOwnerTypeCode, string pIEStaffEmpNo1, string pIEStaffEmpNo2, Nullable<int> pIEManPower, Nullable<decimal> pMaterialFee, Nullable<decimal> pMaterialFeeUsd, string pMaterialFeeCurrencyType, string pRequestMemo, string pPOMemo, string pChangeReasonCode, string pChangeReasonOther, string pChangeRequestorCode, string pChangeRequestorOther, Nullable<bool> pNewBldMgmtFlag, Nullable<decimal> pNewBldMgmtCost, Nullable<decimal> pNewBldMgmtCostUsd, string pNewBldMgmtCostCurrencyType, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, string approveNo)
        {
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
    
            ObjectParameter pContractProjectCodeParameter;
    
            if (pContractProjectCode != null)
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", pContractProjectCode);
            }
            else
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", typeof(string));
            }
    
            ObjectParameter pManagementStatusParameter;
    
            if (pManagementStatus != null)
            {
                pManagementStatusParameter = new ObjectParameter("pManagementStatus", pManagementStatus);
            }
            else
            {
                pManagementStatusParameter = new ObjectParameter("pManagementStatus", typeof(string));
            }
    
            ObjectParameter pProposeInstallStartDateParameter;
    
            if (pProposeInstallStartDate.HasValue)
            {
                pProposeInstallStartDateParameter = new ObjectParameter("pProposeInstallStartDate", pProposeInstallStartDate);
            }
            else
            {
                pProposeInstallStartDateParameter = new ObjectParameter("pProposeInstallStartDate", typeof(System.DateTime));
            }
    
            ObjectParameter pProposeInstallCompleteDateParameter;
    
            if (pProposeInstallCompleteDate.HasValue)
            {
                pProposeInstallCompleteDateParameter = new ObjectParameter("pProposeInstallCompleteDate", pProposeInstallCompleteDate);
            }
            else
            {
                pProposeInstallCompleteDateParameter = new ObjectParameter("pProposeInstallCompleteDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCustomerStaffBelongingParameter;
    
            if (pCustomerStaffBelonging != null)
            {
                pCustomerStaffBelongingParameter = new ObjectParameter("pCustomerStaffBelonging", pCustomerStaffBelonging);
            }
            else
            {
                pCustomerStaffBelongingParameter = new ObjectParameter("pCustomerStaffBelonging", typeof(string));
            }
    
            ObjectParameter pCustomerStaffNameParameter;
    
            if (pCustomerStaffName != null)
            {
                pCustomerStaffNameParameter = new ObjectParameter("pCustomerStaffName", pCustomerStaffName);
            }
            else
            {
                pCustomerStaffNameParameter = new ObjectParameter("pCustomerStaffName", typeof(string));
            }
    
            ObjectParameter pCustomerStaffPhoneNoParameter;
    
            if (pCustomerStaffPhoneNo != null)
            {
                pCustomerStaffPhoneNoParameter = new ObjectParameter("pCustomerStaffPhoneNo", pCustomerStaffPhoneNo);
            }
            else
            {
                pCustomerStaffPhoneNoParameter = new ObjectParameter("pCustomerStaffPhoneNo", typeof(string));
            }
    
            ObjectParameter pNewPhoneLineOpenDateParameter;
    
            if (pNewPhoneLineOpenDate.HasValue)
            {
                pNewPhoneLineOpenDateParameter = new ObjectParameter("pNewPhoneLineOpenDate", pNewPhoneLineOpenDate);
            }
            else
            {
                pNewPhoneLineOpenDateParameter = new ObjectParameter("pNewPhoneLineOpenDate", typeof(System.DateTime));
            }
    
            ObjectParameter pNewConnectionPhoneNoParameter;
    
            if (pNewConnectionPhoneNo != null)
            {
                pNewConnectionPhoneNoParameter = new ObjectParameter("pNewConnectionPhoneNo", pNewConnectionPhoneNo);
            }
            else
            {
                pNewConnectionPhoneNoParameter = new ObjectParameter("pNewConnectionPhoneNo", typeof(string));
            }
    
            ObjectParameter pNewPhoneLineOwnerTypeCodeParameter;
    
            if (pNewPhoneLineOwnerTypeCode != null)
            {
                pNewPhoneLineOwnerTypeCodeParameter = new ObjectParameter("pNewPhoneLineOwnerTypeCode", pNewPhoneLineOwnerTypeCode);
            }
            else
            {
                pNewPhoneLineOwnerTypeCodeParameter = new ObjectParameter("pNewPhoneLineOwnerTypeCode", typeof(string));
            }
    
            ObjectParameter pIEStaffEmpNo1Parameter;
    
            if (pIEStaffEmpNo1 != null)
            {
                pIEStaffEmpNo1Parameter = new ObjectParameter("pIEStaffEmpNo1", pIEStaffEmpNo1);
            }
            else
            {
                pIEStaffEmpNo1Parameter = new ObjectParameter("pIEStaffEmpNo1", typeof(string));
            }
    
            ObjectParameter pIEStaffEmpNo2Parameter;
    
            if (pIEStaffEmpNo2 != null)
            {
                pIEStaffEmpNo2Parameter = new ObjectParameter("pIEStaffEmpNo2", pIEStaffEmpNo2);
            }
            else
            {
                pIEStaffEmpNo2Parameter = new ObjectParameter("pIEStaffEmpNo2", typeof(string));
            }
    
            ObjectParameter pIEManPowerParameter;
    
            if (pIEManPower.HasValue)
            {
                pIEManPowerParameter = new ObjectParameter("pIEManPower", pIEManPower);
            }
            else
            {
                pIEManPowerParameter = new ObjectParameter("pIEManPower", typeof(int));
            }
    
            ObjectParameter pMaterialFeeParameter;
    
            if (pMaterialFee.HasValue)
            {
                pMaterialFeeParameter = new ObjectParameter("pMaterialFee", pMaterialFee);
            }
            else
            {
                pMaterialFeeParameter = new ObjectParameter("pMaterialFee", typeof(decimal));
            }
    
            ObjectParameter pMaterialFeeUsdParameter;
    
            if (pMaterialFeeUsd.HasValue)
            {
                pMaterialFeeUsdParameter = new ObjectParameter("pMaterialFeeUsd", pMaterialFeeUsd);
            }
            else
            {
                pMaterialFeeUsdParameter = new ObjectParameter("pMaterialFeeUsd", typeof(decimal));
            }
    
            ObjectParameter pMaterialFeeCurrencyTypeParameter;
    
            if (pMaterialFeeCurrencyType != null)
            {
                pMaterialFeeCurrencyTypeParameter = new ObjectParameter("pMaterialFeeCurrencyType", pMaterialFeeCurrencyType);
            }
            else
            {
                pMaterialFeeCurrencyTypeParameter = new ObjectParameter("pMaterialFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter pRequestMemoParameter;
    
            if (pRequestMemo != null)
            {
                pRequestMemoParameter = new ObjectParameter("pRequestMemo", pRequestMemo);
            }
            else
            {
                pRequestMemoParameter = new ObjectParameter("pRequestMemo", typeof(string));
            }
    
            ObjectParameter pPOMemoParameter;
    
            if (pPOMemo != null)
            {
                pPOMemoParameter = new ObjectParameter("pPOMemo", pPOMemo);
            }
            else
            {
                pPOMemoParameter = new ObjectParameter("pPOMemo", typeof(string));
            }
    
            ObjectParameter pChangeReasonCodeParameter;
    
            if (pChangeReasonCode != null)
            {
                pChangeReasonCodeParameter = new ObjectParameter("pChangeReasonCode", pChangeReasonCode);
            }
            else
            {
                pChangeReasonCodeParameter = new ObjectParameter("pChangeReasonCode", typeof(string));
            }
    
            ObjectParameter pChangeReasonOtherParameter;
    
            if (pChangeReasonOther != null)
            {
                pChangeReasonOtherParameter = new ObjectParameter("pChangeReasonOther", pChangeReasonOther);
            }
            else
            {
                pChangeReasonOtherParameter = new ObjectParameter("pChangeReasonOther", typeof(string));
            }
    
            ObjectParameter pChangeRequestorCodeParameter;
    
            if (pChangeRequestorCode != null)
            {
                pChangeRequestorCodeParameter = new ObjectParameter("pChangeRequestorCode", pChangeRequestorCode);
            }
            else
            {
                pChangeRequestorCodeParameter = new ObjectParameter("pChangeRequestorCode", typeof(string));
            }
    
            ObjectParameter pChangeRequestorOtherParameter;
    
            if (pChangeRequestorOther != null)
            {
                pChangeRequestorOtherParameter = new ObjectParameter("pChangeRequestorOther", pChangeRequestorOther);
            }
            else
            {
                pChangeRequestorOtherParameter = new ObjectParameter("pChangeRequestorOther", typeof(string));
            }
    
            ObjectParameter pNewBldMgmtFlagParameter;
    
            if (pNewBldMgmtFlag.HasValue)
            {
                pNewBldMgmtFlagParameter = new ObjectParameter("pNewBldMgmtFlag", pNewBldMgmtFlag);
            }
            else
            {
                pNewBldMgmtFlagParameter = new ObjectParameter("pNewBldMgmtFlag", typeof(bool));
            }
    
            ObjectParameter pNewBldMgmtCostParameter;
    
            if (pNewBldMgmtCost.HasValue)
            {
                pNewBldMgmtCostParameter = new ObjectParameter("pNewBldMgmtCost", pNewBldMgmtCost);
            }
            else
            {
                pNewBldMgmtCostParameter = new ObjectParameter("pNewBldMgmtCost", typeof(decimal));
            }
    
            ObjectParameter pNewBldMgmtCostUsdParameter;
    
            if (pNewBldMgmtCostUsd.HasValue)
            {
                pNewBldMgmtCostUsdParameter = new ObjectParameter("pNewBldMgmtCostUsd", pNewBldMgmtCostUsd);
            }
            else
            {
                pNewBldMgmtCostUsdParameter = new ObjectParameter("pNewBldMgmtCostUsd", typeof(decimal));
            }
    
            ObjectParameter pNewBldMgmtCostCurrencyTypeParameter;
    
            if (pNewBldMgmtCostCurrencyType != null)
            {
                pNewBldMgmtCostCurrencyTypeParameter = new ObjectParameter("pNewBldMgmtCostCurrencyType", pNewBldMgmtCostCurrencyType);
            }
            else
            {
                pNewBldMgmtCostCurrencyTypeParameter = new ObjectParameter("pNewBldMgmtCostCurrencyType", typeof(string));
            }
    
            ObjectParameter pCreateDateParameter;
    
            if (pCreateDate.HasValue)
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", pCreateDate);
            }
            else
            {
                pCreateDateParameter = new ObjectParameter("pCreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pCreateByParameter;
    
            if (pCreateBy != null)
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", pCreateBy);
            }
            else
            {
                pCreateByParameter = new ObjectParameter("pCreateBy", typeof(string));
            }
    
            ObjectParameter pUpdateDateParameter;
    
            if (pUpdateDate.HasValue)
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", pUpdateDate);
            }
            else
            {
                pUpdateDateParameter = new ObjectParameter("pUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter pUpdateByParameter;
    
            if (pUpdateBy != null)
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", pUpdateBy);
            }
            else
            {
                pUpdateByParameter = new ObjectParameter("pUpdateBy", typeof(string));
            }
    
            ObjectParameter approveNoParameter;
    
            if (approveNo != null)
            {
                approveNoParameter = new ObjectParameter("ApproveNo", approveNo);
            }
            else
            {
                approveNoParameter = new ObjectParameter("ApproveNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationManagement>("UpdateTbt_InstallationManagement", pMaintenanceNoParameter, pContractProjectCodeParameter, pManagementStatusParameter, pProposeInstallStartDateParameter, pProposeInstallCompleteDateParameter, pCustomerStaffBelongingParameter, pCustomerStaffNameParameter, pCustomerStaffPhoneNoParameter, pNewPhoneLineOpenDateParameter, pNewConnectionPhoneNoParameter, pNewPhoneLineOwnerTypeCodeParameter, pIEStaffEmpNo1Parameter, pIEStaffEmpNo2Parameter, pIEManPowerParameter, pMaterialFeeParameter, pMaterialFeeUsdParameter, pMaterialFeeCurrencyTypeParameter, pRequestMemoParameter, pPOMemoParameter, pChangeReasonCodeParameter, pChangeReasonOtherParameter, pChangeRequestorCodeParameter, pChangeRequestorOtherParameter, pNewBldMgmtFlagParameter, pNewBldMgmtCostParameter, pNewBldMgmtCostUsdParameter, pNewBldMgmtCostCurrencyTypeParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, approveNoParameter);
        }
        public ObjectResult<tbt_InstallationSlip> GetTbt_InstallationSlip(string pSlipNo)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationSlip>("GetTbt_InstallationSlip", pSlipNoParameter);
        }
        public ObjectResult<tbt_InstallationInstrumentDetails> GetTbt_InstallationInstrumentDetails(string pContractCode, string pInstrumentCode)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter pInstrumentCodeParameter;
    
            if (pInstrumentCode != null)
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", pInstrumentCode);
            }
            else
            {
                pInstrumentCodeParameter = new ObjectParameter("pInstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationInstrumentDetails>("GetTbt_InstallationInstrumentDetails", pContractCodeParameter, pInstrumentCodeParameter);
        }
        public ObjectResult<tbt_InstallationSlip> InsertTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter serviceTypeCodeParameter;
    
            if (serviceTypeCode != null)
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", serviceTypeCode);
            }
            else
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", typeof(string));
            }
    
            ObjectParameter slipStatusParameter;
    
            if (slipStatus != null)
            {
                slipStatusParameter = new ObjectParameter("SlipStatus", slipStatus);
            }
            else
            {
                slipStatusParameter = new ObjectParameter("SlipStatus", typeof(string));
            }
    
            ObjectParameter changeReasonCodeParameter;
    
            if (changeReasonCode != null)
            {
                changeReasonCodeParameter = new ObjectParameter("ChangeReasonCode", changeReasonCode);
            }
            else
            {
                changeReasonCodeParameter = new ObjectParameter("ChangeReasonCode", typeof(string));
            }
    
            ObjectParameter installationTypeParameter;
    
            if (installationType != null)
            {
                installationTypeParameter = new ObjectParameter("InstallationType", installationType);
            }
            else
            {
                installationTypeParameter = new ObjectParameter("InstallationType", typeof(string));
            }
    
            ObjectParameter planCodeParameter;
    
            if (planCode != null)
            {
                planCodeParameter = new ObjectParameter("PlanCode", planCode);
            }
            else
            {
                planCodeParameter = new ObjectParameter("PlanCode", typeof(string));
            }
    
            ObjectParameter causeReasonParameter;
    
            if (causeReason != null)
            {
                causeReasonParameter = new ObjectParameter("CauseReason", causeReason);
            }
            else
            {
                causeReasonParameter = new ObjectParameter("CauseReason", typeof(string));
            }
    
            ObjectParameter normalContractFeeParameter;
    
            if (normalContractFee.HasValue)
            {
                normalContractFeeParameter = new ObjectParameter("NormalContractFee", normalContractFee);
            }
            else
            {
                normalContractFeeParameter = new ObjectParameter("NormalContractFee", typeof(decimal));
            }
    
            ObjectParameter normalContractFeeUsdParameter;
    
            if (normalContractFeeUsd.HasValue)
            {
                normalContractFeeUsdParameter = new ObjectParameter("NormalContractFeeUsd", normalContractFeeUsd);
            }
            else
            {
                normalContractFeeUsdParameter = new ObjectParameter("NormalContractFeeUsd", typeof(decimal));
            }
    
            ObjectParameter normalContractFeeCurrencyTypeParameter;
    
            if (normalContractFeeCurrencyType != null)
            {
                normalContractFeeCurrencyTypeParameter = new ObjectParameter("NormalContractFeeCurrencyType", normalContractFeeCurrencyType);
            }
            else
            {
                normalContractFeeCurrencyTypeParameter = new ObjectParameter("NormalContractFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter normalInstallFeeParameter;
    
            if (normalInstallFee.HasValue)
            {
                normalInstallFeeParameter = new ObjectParameter("NormalInstallFee", normalInstallFee);
            }
            else
            {
                normalInstallFeeParameter = new ObjectParameter("NormalInstallFee", typeof(decimal));
            }
    
            ObjectParameter normalInstallFeeUsdParameter;
    
            if (normalInstallFeeUsd.HasValue)
            {
                normalInstallFeeUsdParameter = new ObjectParameter("NormalInstallFeeUsd", normalInstallFeeUsd);
            }
            else
            {
                normalInstallFeeUsdParameter = new ObjectParameter("NormalInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter normalInstallFeeCurrencyTypeParameter;
    
            if (normalInstallFeeCurrencyType != null)
            {
                normalInstallFeeCurrencyTypeParameter = new ObjectParameter("NormalInstallFeeCurrencyType", normalInstallFeeCurrencyType);
            }
            else
            {
                normalInstallFeeCurrencyTypeParameter = new ObjectParameter("NormalInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter installFeeBillingTypeParameter;
    
            if (installFeeBillingType != null)
            {
                installFeeBillingTypeParameter = new ObjectParameter("InstallFeeBillingType", installFeeBillingType);
            }
            else
            {
                installFeeBillingTypeParameter = new ObjectParameter("InstallFeeBillingType", typeof(string));
            }
    
            ObjectParameter billingInstallFeeParameter;
    
            if (billingInstallFee.HasValue)
            {
                billingInstallFeeParameter = new ObjectParameter("BillingInstallFee", billingInstallFee);
            }
            else
            {
                billingInstallFeeParameter = new ObjectParameter("BillingInstallFee", typeof(decimal));
            }
    
            ObjectParameter billingInstallFeeUsdParameter;
    
            if (billingInstallFeeUsd.HasValue)
            {
                billingInstallFeeUsdParameter = new ObjectParameter("BillingInstallFeeUsd", billingInstallFeeUsd);
            }
            else
            {
                billingInstallFeeUsdParameter = new ObjectParameter("BillingInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter billingInstallFeeCurencyTypeParameter;
    
            if (billingInstallFeeCurencyType != null)
            {
                billingInstallFeeCurencyTypeParameter = new ObjectParameter("BillingInstallFeeCurencyType", billingInstallFeeCurencyType);
            }
            else
            {
                billingInstallFeeCurencyTypeParameter = new ObjectParameter("BillingInstallFeeCurencyType", typeof(string));
            }
    
            ObjectParameter orderInstallFeeParameter;
    
            if (orderInstallFee.HasValue)
            {
                orderInstallFeeParameter = new ObjectParameter("OrderInstallFee", orderInstallFee);
            }
            else
            {
                orderInstallFeeParameter = new ObjectParameter("OrderInstallFee", typeof(decimal));
            }
    
            ObjectParameter orderInstallFeeUsdParameter;
    
            if (orderInstallFeeUsd.HasValue)
            {
                orderInstallFeeUsdParameter = new ObjectParameter("OrderInstallFeeUsd", orderInstallFeeUsd);
            }
            else
            {
                orderInstallFeeUsdParameter = new ObjectParameter("OrderInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter orderInstallFeeCurrencyTypeParameter;
    
            if (orderInstallFeeCurrencyType != null)
            {
                orderInstallFeeCurrencyTypeParameter = new ObjectParameter("OrderInstallFeeCurrencyType", orderInstallFeeCurrencyType);
            }
            else
            {
                orderInstallFeeCurrencyTypeParameter = new ObjectParameter("OrderInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter previousSlipNoParameter;
    
            if (previousSlipNo != null)
            {
                previousSlipNoParameter = new ObjectParameter("PreviousSlipNo", previousSlipNo);
            }
            else
            {
                previousSlipNoParameter = new ObjectParameter("PreviousSlipNo", typeof(string));
            }
    
            ObjectParameter previousSlipStatusParameter;
    
            if (previousSlipStatus != null)
            {
                previousSlipStatusParameter = new ObjectParameter("PreviousSlipStatus", previousSlipStatus);
            }
            else
            {
                previousSlipStatusParameter = new ObjectParameter("PreviousSlipStatus", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter slipIssueDateParameter;
    
            if (slipIssueDate.HasValue)
            {
                slipIssueDateParameter = new ObjectParameter("SlipIssueDate", slipIssueDate);
            }
            else
            {
                slipIssueDateParameter = new ObjectParameter("SlipIssueDate", typeof(System.DateTime));
            }
    
            ObjectParameter slipIssueOfficeCodeParameter;
    
            if (slipIssueOfficeCode != null)
            {
                slipIssueOfficeCodeParameter = new ObjectParameter("SlipIssueOfficeCode", slipIssueOfficeCode);
            }
            else
            {
                slipIssueOfficeCodeParameter = new ObjectParameter("SlipIssueOfficeCode", typeof(string));
            }
    
            ObjectParameter stockOutDateParameter;
    
            if (stockOutDate.HasValue)
            {
                stockOutDateParameter = new ObjectParameter("StockOutDate", stockOutDate);
            }
            else
            {
                stockOutDateParameter = new ObjectParameter("StockOutDate", typeof(System.DateTime));
            }
    
            ObjectParameter stockOutOfficeCodeParameter;
    
            if (stockOutOfficeCode != null)
            {
                stockOutOfficeCodeParameter = new ObjectParameter("StockOutOfficeCode", stockOutOfficeCode);
            }
            else
            {
                stockOutOfficeCodeParameter = new ObjectParameter("StockOutOfficeCode", typeof(string));
            }
    
            ObjectParameter returnReceiveDateParameter;
    
            if (returnReceiveDate.HasValue)
            {
                returnReceiveDateParameter = new ObjectParameter("ReturnReceiveDate", returnReceiveDate);
            }
            else
            {
                returnReceiveDateParameter = new ObjectParameter("ReturnReceiveDate", typeof(System.DateTime));
            }
    
            ObjectParameter returnReceiveOfficeCodeParameter;
    
            if (returnReceiveOfficeCode != null)
            {
                returnReceiveOfficeCodeParameter = new ObjectParameter("ReturnReceiveOfficeCode", returnReceiveOfficeCode);
            }
            else
            {
                returnReceiveOfficeCodeParameter = new ObjectParameter("ReturnReceiveOfficeCode", typeof(string));
            }
    
            ObjectParameter approveNo1Parameter;
    
            if (approveNo1 != null)
            {
                approveNo1Parameter = new ObjectParameter("ApproveNo1", approveNo1);
            }
            else
            {
                approveNo1Parameter = new ObjectParameter("ApproveNo1", typeof(string));
            }
    
            ObjectParameter approveNo2Parameter;
    
            if (approveNo2 != null)
            {
                approveNo2Parameter = new ObjectParameter("ApproveNo2", approveNo2);
            }
            else
            {
                approveNo2Parameter = new ObjectParameter("ApproveNo2", typeof(string));
            }
    
            ObjectParameter changeContentsParameter;
    
            if (changeContents != null)
            {
                changeContentsParameter = new ObjectParameter("ChangeContents", changeContents);
            }
            else
            {
                changeContentsParameter = new ObjectParameter("ChangeContents", typeof(string));
            }
    
            ObjectParameter expectedInstrumentArrivalDateParameter;
    
            if (expectedInstrumentArrivalDate.HasValue)
            {
                expectedInstrumentArrivalDateParameter = new ObjectParameter("ExpectedInstrumentArrivalDate", expectedInstrumentArrivalDate);
            }
            else
            {
                expectedInstrumentArrivalDateParameter = new ObjectParameter("ExpectedInstrumentArrivalDate", typeof(System.DateTime));
            }
    
            ObjectParameter stockOutTypeCodeParameter;
    
            if (stockOutTypeCode != null)
            {
                stockOutTypeCodeParameter = new ObjectParameter("StockOutTypeCode", stockOutTypeCode);
            }
            else
            {
                stockOutTypeCodeParameter = new ObjectParameter("StockOutTypeCode", typeof(string));
            }
    
            ObjectParameter slipTypeParameter;
    
            if (slipType != null)
            {
                slipTypeParameter = new ObjectParameter("SlipType", slipType);
            }
            else
            {
                slipTypeParameter = new ObjectParameter("SlipType", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter additionalStockOutOfficeCodeParameter;
    
            if (additionalStockOutOfficeCode != null)
            {
                additionalStockOutOfficeCodeParameter = new ObjectParameter("AdditionalStockOutOfficeCode", additionalStockOutOfficeCode);
            }
            else
            {
                additionalStockOutOfficeCodeParameter = new ObjectParameter("AdditionalStockOutOfficeCode", typeof(string));
            }
    
            ObjectParameter slipIssueFlagParameter;
    
            if (slipIssueFlag.HasValue)
            {
                slipIssueFlagParameter = new ObjectParameter("SlipIssueFlag", slipIssueFlag);
            }
            else
            {
                slipIssueFlagParameter = new ObjectParameter("SlipIssueFlag", typeof(bool));
            }
    
            ObjectParameter unremoveApproveNoParameter;
    
            if (unremoveApproveNo != null)
            {
                unremoveApproveNoParameter = new ObjectParameter("UnremoveApproveNo", unremoveApproveNo);
            }
            else
            {
                unremoveApproveNoParameter = new ObjectParameter("UnremoveApproveNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationSlip>("InsertTbt_InstallationSlip", slipNoParameter, serviceTypeCodeParameter, slipStatusParameter, changeReasonCodeParameter, installationTypeParameter, planCodeParameter, causeReasonParameter, normalContractFeeParameter, normalContractFeeUsdParameter, normalContractFeeCurrencyTypeParameter, normalInstallFeeParameter, normalInstallFeeUsdParameter, normalInstallFeeCurrencyTypeParameter, installFeeBillingTypeParameter, billingInstallFeeParameter, billingInstallFeeUsdParameter, billingInstallFeeCurencyTypeParameter, orderInstallFeeParameter, orderInstallFeeUsdParameter, orderInstallFeeCurrencyTypeParameter, billingOCCParameter, previousSlipNoParameter, previousSlipStatusParameter, contractCodeParameter, slipIssueDateParameter, slipIssueOfficeCodeParameter, stockOutDateParameter, stockOutOfficeCodeParameter, returnReceiveDateParameter, returnReceiveOfficeCodeParameter, approveNo1Parameter, approveNo2Parameter, changeContentsParameter, expectedInstrumentArrivalDateParameter, stockOutTypeCodeParameter, slipTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, additionalStockOutOfficeCodeParameter, slipIssueFlagParameter, unremoveApproveNoParameter);
        }
        public ObjectResult<tbt_InstallationSlip> UpdateTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurrencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter serviceTypeCodeParameter;
    
            if (serviceTypeCode != null)
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", serviceTypeCode);
            }
            else
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", typeof(string));
            }
    
            ObjectParameter slipStatusParameter;
    
            if (slipStatus != null)
            {
                slipStatusParameter = new ObjectParameter("SlipStatus", slipStatus);
            }
            else
            {
                slipStatusParameter = new ObjectParameter("SlipStatus", typeof(string));
            }
    
            ObjectParameter changeReasonCodeParameter;
    
            if (changeReasonCode != null)
            {
                changeReasonCodeParameter = new ObjectParameter("ChangeReasonCode", changeReasonCode);
            }
            else
            {
                changeReasonCodeParameter = new ObjectParameter("ChangeReasonCode", typeof(string));
            }
    
            ObjectParameter installationTypeParameter;
    
            if (installationType != null)
            {
                installationTypeParameter = new ObjectParameter("InstallationType", installationType);
            }
            else
            {
                installationTypeParameter = new ObjectParameter("InstallationType", typeof(string));
            }
    
            ObjectParameter planCodeParameter;
    
            if (planCode != null)
            {
                planCodeParameter = new ObjectParameter("PlanCode", planCode);
            }
            else
            {
                planCodeParameter = new ObjectParameter("PlanCode", typeof(string));
            }
    
            ObjectParameter causeReasonParameter;
    
            if (causeReason != null)
            {
                causeReasonParameter = new ObjectParameter("CauseReason", causeReason);
            }
            else
            {
                causeReasonParameter = new ObjectParameter("CauseReason", typeof(string));
            }
    
            ObjectParameter normalContractFeeParameter;
    
            if (normalContractFee.HasValue)
            {
                normalContractFeeParameter = new ObjectParameter("NormalContractFee", normalContractFee);
            }
            else
            {
                normalContractFeeParameter = new ObjectParameter("NormalContractFee", typeof(decimal));
            }
    
            ObjectParameter normalContractFeeUsdParameter;
    
            if (normalContractFeeUsd.HasValue)
            {
                normalContractFeeUsdParameter = new ObjectParameter("NormalContractFeeUsd", normalContractFeeUsd);
            }
            else
            {
                normalContractFeeUsdParameter = new ObjectParameter("NormalContractFeeUsd", typeof(decimal));
            }
    
            ObjectParameter normalContractFeeCurrencyTypeParameter;
    
            if (normalContractFeeCurrencyType != null)
            {
                normalContractFeeCurrencyTypeParameter = new ObjectParameter("NormalContractFeeCurrencyType", normalContractFeeCurrencyType);
            }
            else
            {
                normalContractFeeCurrencyTypeParameter = new ObjectParameter("NormalContractFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter normalInstallFeeParameter;
    
            if (normalInstallFee.HasValue)
            {
                normalInstallFeeParameter = new ObjectParameter("NormalInstallFee", normalInstallFee);
            }
            else
            {
                normalInstallFeeParameter = new ObjectParameter("NormalInstallFee", typeof(decimal));
            }
    
            ObjectParameter normalInstallFeeUsdParameter;
    
            if (normalInstallFeeUsd.HasValue)
            {
                normalInstallFeeUsdParameter = new ObjectParameter("NormalInstallFeeUsd", normalInstallFeeUsd);
            }
            else
            {
                normalInstallFeeUsdParameter = new ObjectParameter("NormalInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter normalInstallFeeCurrencyTypeParameter;
    
            if (normalInstallFeeCurrencyType != null)
            {
                normalInstallFeeCurrencyTypeParameter = new ObjectParameter("NormalInstallFeeCurrencyType", normalInstallFeeCurrencyType);
            }
            else
            {
                normalInstallFeeCurrencyTypeParameter = new ObjectParameter("NormalInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter installFeeBillingTypeParameter;
    
            if (installFeeBillingType != null)
            {
                installFeeBillingTypeParameter = new ObjectParameter("InstallFeeBillingType", installFeeBillingType);
            }
            else
            {
                installFeeBillingTypeParameter = new ObjectParameter("InstallFeeBillingType", typeof(string));
            }
    
            ObjectParameter billingInstallFeeParameter;
    
            if (billingInstallFee.HasValue)
            {
                billingInstallFeeParameter = new ObjectParameter("BillingInstallFee", billingInstallFee);
            }
            else
            {
                billingInstallFeeParameter = new ObjectParameter("BillingInstallFee", typeof(decimal));
            }
    
            ObjectParameter billingInstallFeeUsdParameter;
    
            if (billingInstallFeeUsd.HasValue)
            {
                billingInstallFeeUsdParameter = new ObjectParameter("BillingInstallFeeUsd", billingInstallFeeUsd);
            }
            else
            {
                billingInstallFeeUsdParameter = new ObjectParameter("BillingInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter billingInstallFeeCurrencyTypeParameter;
    
            if (billingInstallFeeCurrencyType != null)
            {
                billingInstallFeeCurrencyTypeParameter = new ObjectParameter("BillingInstallFeeCurrencyType", billingInstallFeeCurrencyType);
            }
            else
            {
                billingInstallFeeCurrencyTypeParameter = new ObjectParameter("BillingInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter orderInstallFeeParameter;
    
            if (orderInstallFee.HasValue)
            {
                orderInstallFeeParameter = new ObjectParameter("OrderInstallFee", orderInstallFee);
            }
            else
            {
                orderInstallFeeParameter = new ObjectParameter("OrderInstallFee", typeof(decimal));
            }
    
            ObjectParameter orderInstallFeeUsdParameter;
    
            if (orderInstallFeeUsd.HasValue)
            {
                orderInstallFeeUsdParameter = new ObjectParameter("OrderInstallFeeUsd", orderInstallFeeUsd);
            }
            else
            {
                orderInstallFeeUsdParameter = new ObjectParameter("OrderInstallFeeUsd", typeof(decimal));
            }
    
            ObjectParameter orderInstallFeeCurrencyTypeParameter;
    
            if (orderInstallFeeCurrencyType != null)
            {
                orderInstallFeeCurrencyTypeParameter = new ObjectParameter("OrderInstallFeeCurrencyType", orderInstallFeeCurrencyType);
            }
            else
            {
                orderInstallFeeCurrencyTypeParameter = new ObjectParameter("OrderInstallFeeCurrencyType", typeof(string));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter previousSlipNoParameter;
    
            if (previousSlipNo != null)
            {
                previousSlipNoParameter = new ObjectParameter("PreviousSlipNo", previousSlipNo);
            }
            else
            {
                previousSlipNoParameter = new ObjectParameter("PreviousSlipNo", typeof(string));
            }
    
            ObjectParameter previousSlipStatusParameter;
    
            if (previousSlipStatus != null)
            {
                previousSlipStatusParameter = new ObjectParameter("PreviousSlipStatus", previousSlipStatus);
            }
            else
            {
                previousSlipStatusParameter = new ObjectParameter("PreviousSlipStatus", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter slipIssueDateParameter;
    
            if (slipIssueDate.HasValue)
            {
                slipIssueDateParameter = new ObjectParameter("SlipIssueDate", slipIssueDate);
            }
            else
            {
                slipIssueDateParameter = new ObjectParameter("SlipIssueDate", typeof(System.DateTime));
            }
    
            ObjectParameter slipIssueOfficeCodeParameter;
    
            if (slipIssueOfficeCode != null)
            {
                slipIssueOfficeCodeParameter = new ObjectParameter("SlipIssueOfficeCode", slipIssueOfficeCode);
            }
            else
            {
                slipIssueOfficeCodeParameter = new ObjectParameter("SlipIssueOfficeCode", typeof(string));
            }
    
            ObjectParameter stockOutDateParameter;
    
            if (stockOutDate.HasValue)
            {
                stockOutDateParameter = new ObjectParameter("StockOutDate", stockOutDate);
            }
            else
            {
                stockOutDateParameter = new ObjectParameter("StockOutDate", typeof(System.DateTime));
            }
    
            ObjectParameter stockOutOfficeCodeParameter;
    
            if (stockOutOfficeCode != null)
            {
                stockOutOfficeCodeParameter = new ObjectParameter("StockOutOfficeCode", stockOutOfficeCode);
            }
            else
            {
                stockOutOfficeCodeParameter = new ObjectParameter("StockOutOfficeCode", typeof(string));
            }
    
            ObjectParameter returnReceiveDateParameter;
    
            if (returnReceiveDate.HasValue)
            {
                returnReceiveDateParameter = new ObjectParameter("ReturnReceiveDate", returnReceiveDate);
            }
            else
            {
                returnReceiveDateParameter = new ObjectParameter("ReturnReceiveDate", typeof(System.DateTime));
            }
    
            ObjectParameter returnReceiveOfficeCodeParameter;
    
            if (returnReceiveOfficeCode != null)
            {
                returnReceiveOfficeCodeParameter = new ObjectParameter("ReturnReceiveOfficeCode", returnReceiveOfficeCode);
            }
            else
            {
                returnReceiveOfficeCodeParameter = new ObjectParameter("ReturnReceiveOfficeCode", typeof(string));
            }
    
            ObjectParameter approveNo1Parameter;
    
            if (approveNo1 != null)
            {
                approveNo1Parameter = new ObjectParameter("ApproveNo1", approveNo1);
            }
            else
            {
                approveNo1Parameter = new ObjectParameter("ApproveNo1", typeof(string));
            }
    
            ObjectParameter approveNo2Parameter;
    
            if (approveNo2 != null)
            {
                approveNo2Parameter = new ObjectParameter("ApproveNo2", approveNo2);
            }
            else
            {
                approveNo2Parameter = new ObjectParameter("ApproveNo2", typeof(string));
            }
    
            ObjectParameter changeContentsParameter;
    
            if (changeContents != null)
            {
                changeContentsParameter = new ObjectParameter("ChangeContents", changeContents);
            }
            else
            {
                changeContentsParameter = new ObjectParameter("ChangeContents", typeof(string));
            }
    
            ObjectParameter expectedInstrumentArrivalDateParameter;
    
            if (expectedInstrumentArrivalDate.HasValue)
            {
                expectedInstrumentArrivalDateParameter = new ObjectParameter("ExpectedInstrumentArrivalDate", expectedInstrumentArrivalDate);
            }
            else
            {
                expectedInstrumentArrivalDateParameter = new ObjectParameter("ExpectedInstrumentArrivalDate", typeof(System.DateTime));
            }
    
            ObjectParameter stockOutTypeCodeParameter;
    
            if (stockOutTypeCode != null)
            {
                stockOutTypeCodeParameter = new ObjectParameter("StockOutTypeCode", stockOutTypeCode);
            }
            else
            {
                stockOutTypeCodeParameter = new ObjectParameter("StockOutTypeCode", typeof(string));
            }
    
            ObjectParameter slipTypeParameter;
    
            if (slipType != null)
            {
                slipTypeParameter = new ObjectParameter("SlipType", slipType);
            }
            else
            {
                slipTypeParameter = new ObjectParameter("SlipType", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter additionalStockOutOfficeCodeParameter;
    
            if (additionalStockOutOfficeCode != null)
            {
                additionalStockOutOfficeCodeParameter = new ObjectParameter("AdditionalStockOutOfficeCode", additionalStockOutOfficeCode);
            }
            else
            {
                additionalStockOutOfficeCodeParameter = new ObjectParameter("AdditionalStockOutOfficeCode", typeof(string));
            }
    
            ObjectParameter slipIssueFlagParameter;
    
            if (slipIssueFlag.HasValue)
            {
                slipIssueFlagParameter = new ObjectParameter("SlipIssueFlag", slipIssueFlag);
            }
            else
            {
                slipIssueFlagParameter = new ObjectParameter("SlipIssueFlag", typeof(bool));
            }
    
            ObjectParameter unremoveApproveNoParameter;
    
            if (unremoveApproveNo != null)
            {
                unremoveApproveNoParameter = new ObjectParameter("UnremoveApproveNo", unremoveApproveNo);
            }
            else
            {
                unremoveApproveNoParameter = new ObjectParameter("UnremoveApproveNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationSlip>("UpdateTbt_InstallationSlip", slipNoParameter, serviceTypeCodeParameter, slipStatusParameter, changeReasonCodeParameter, installationTypeParameter, planCodeParameter, causeReasonParameter, normalContractFeeParameter, normalContractFeeUsdParameter, normalContractFeeCurrencyTypeParameter, normalInstallFeeParameter, normalInstallFeeUsdParameter, normalInstallFeeCurrencyTypeParameter, installFeeBillingTypeParameter, billingInstallFeeParameter, billingInstallFeeUsdParameter, billingInstallFeeCurrencyTypeParameter, orderInstallFeeParameter, orderInstallFeeUsdParameter, orderInstallFeeCurrencyTypeParameter, billingOCCParameter, previousSlipNoParameter, previousSlipStatusParameter, contractCodeParameter, slipIssueDateParameter, slipIssueOfficeCodeParameter, stockOutDateParameter, stockOutOfficeCodeParameter, returnReceiveDateParameter, returnReceiveOfficeCodeParameter, approveNo1Parameter, approveNo2Parameter, changeContentsParameter, expectedInstrumentArrivalDateParameter, stockOutTypeCodeParameter, slipTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, additionalStockOutOfficeCodeParameter, slipIssueFlagParameter, unremoveApproveNoParameter);
        }
        public ObjectResult<tbt_InstallationSlipDetails> InsertTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter instrumentTypeCodeParameter;
    
            if (instrumentTypeCode != null)
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", instrumentTypeCode);
            }
            else
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", typeof(string));
            }
    
            ObjectParameter contractInstalledQtyParameter;
    
            if (contractInstalledQty.HasValue)
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", contractInstalledQty);
            }
            else
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", typeof(int));
            }
    
            ObjectParameter currentStockOutQtyParameter;
    
            if (currentStockOutQty.HasValue)
            {
                currentStockOutQtyParameter = new ObjectParameter("CurrentStockOutQty", currentStockOutQty);
            }
            else
            {
                currentStockOutQtyParameter = new ObjectParameter("CurrentStockOutQty", typeof(int));
            }
    
            ObjectParameter totalStockOutQtyParameter;
    
            if (totalStockOutQty.HasValue)
            {
                totalStockOutQtyParameter = new ObjectParameter("TotalStockOutQty", totalStockOutQty);
            }
            else
            {
                totalStockOutQtyParameter = new ObjectParameter("TotalStockOutQty", typeof(int));
            }
    
            ObjectParameter addInstalledQtyParameter;
    
            if (addInstalledQty.HasValue)
            {
                addInstalledQtyParameter = new ObjectParameter("AddInstalledQty", addInstalledQty);
            }
            else
            {
                addInstalledQtyParameter = new ObjectParameter("AddInstalledQty", typeof(int));
            }
    
            ObjectParameter returnQtyParameter;
    
            if (returnQty.HasValue)
            {
                returnQtyParameter = new ObjectParameter("ReturnQty", returnQty);
            }
            else
            {
                returnQtyParameter = new ObjectParameter("ReturnQty", typeof(int));
            }
    
            ObjectParameter addRemovedQtyParameter;
    
            if (addRemovedQty.HasValue)
            {
                addRemovedQtyParameter = new ObjectParameter("AddRemovedQty", addRemovedQty);
            }
            else
            {
                addRemovedQtyParameter = new ObjectParameter("AddRemovedQty", typeof(int));
            }
    
            ObjectParameter notInstalledQtyParameter;
    
            if (notInstalledQty.HasValue)
            {
                notInstalledQtyParameter = new ObjectParameter("NotInstalledQty", notInstalledQty);
            }
            else
            {
                notInstalledQtyParameter = new ObjectParameter("NotInstalledQty", typeof(int));
            }
    
            ObjectParameter moveQtyParameter;
    
            if (moveQty.HasValue)
            {
                moveQtyParameter = new ObjectParameter("MoveQty", moveQty);
            }
            else
            {
                moveQtyParameter = new ObjectParameter("MoveQty", typeof(int));
            }
    
            ObjectParameter mAExchangeQtyParameter;
    
            if (mAExchangeQty.HasValue)
            {
                mAExchangeQtyParameter = new ObjectParameter("MAExchangeQty", mAExchangeQty);
            }
            else
            {
                mAExchangeQtyParameter = new ObjectParameter("MAExchangeQty", typeof(int));
            }
    
            ObjectParameter unremovableQtyParameter;
    
            if (unremovableQty.HasValue)
            {
                unremovableQtyParameter = new ObjectParameter("UnremovableQty", unremovableQty);
            }
            else
            {
                unremovableQtyParameter = new ObjectParameter("UnremovableQty", typeof(int));
            }
    
            ObjectParameter returnRemoveQtyParameter;
    
            if (returnRemoveQty.HasValue)
            {
                returnRemoveQtyParameter = new ObjectParameter("ReturnRemoveQty", returnRemoveQty);
            }
            else
            {
                returnRemoveQtyParameter = new ObjectParameter("ReturnRemoveQty", typeof(int));
            }
    
            ObjectParameter instrumentPriceParameter;
    
            if (instrumentPrice.HasValue)
            {
                instrumentPriceParameter = new ObjectParameter("InstrumentPrice", instrumentPrice);
            }
            else
            {
                instrumentPriceParameter = new ObjectParameter("InstrumentPrice", typeof(decimal));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter partialStockOutQtyParameter;
    
            if (partialStockOutQty.HasValue)
            {
                partialStockOutQtyParameter = new ObjectParameter("PartialStockOutQty", partialStockOutQty);
            }
            else
            {
                partialStockOutQtyParameter = new ObjectParameter("PartialStockOutQty", typeof(int));
            }
            return base.ExecuteFunction<tbt_InstallationSlipDetails>("InsertTbt_InstallationSlipDetails", slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, currentStockOutQtyParameter, totalStockOutQtyParameter, addInstalledQtyParameter, returnQtyParameter, addRemovedQtyParameter, notInstalledQtyParameter, moveQtyParameter, mAExchangeQtyParameter, unremovableQtyParameter, returnRemoveQtyParameter, instrumentPriceParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, partialStockOutQtyParameter);
        }
        public ObjectResult<tbt_InstallationSlipDetails> GetTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter instrumentTypeCodeParameter;
    
            if (instrumentTypeCode != null)
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", instrumentTypeCode);
            }
            else
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationSlipDetails>("GetTbt_InstallationSlipDetails", slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter);
        }
        public ObjectResult<tbt_InstallationSlipDetails> UpdateTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter instrumentTypeCodeParameter;
    
            if (instrumentTypeCode != null)
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", instrumentTypeCode);
            }
            else
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", typeof(string));
            }
    
            ObjectParameter contractInstalledQtyParameter;
    
            if (contractInstalledQty.HasValue)
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", contractInstalledQty);
            }
            else
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", typeof(int));
            }
    
            ObjectParameter currentStockOutQtyParameter;
    
            if (currentStockOutQty.HasValue)
            {
                currentStockOutQtyParameter = new ObjectParameter("CurrentStockOutQty", currentStockOutQty);
            }
            else
            {
                currentStockOutQtyParameter = new ObjectParameter("CurrentStockOutQty", typeof(int));
            }
    
            ObjectParameter totalStockOutQtyParameter;
    
            if (totalStockOutQty.HasValue)
            {
                totalStockOutQtyParameter = new ObjectParameter("TotalStockOutQty", totalStockOutQty);
            }
            else
            {
                totalStockOutQtyParameter = new ObjectParameter("TotalStockOutQty", typeof(int));
            }
    
            ObjectParameter addInstalledQtyParameter;
    
            if (addInstalledQty.HasValue)
            {
                addInstalledQtyParameter = new ObjectParameter("AddInstalledQty", addInstalledQty);
            }
            else
            {
                addInstalledQtyParameter = new ObjectParameter("AddInstalledQty", typeof(int));
            }
    
            ObjectParameter returnQtyParameter;
    
            if (returnQty.HasValue)
            {
                returnQtyParameter = new ObjectParameter("ReturnQty", returnQty);
            }
            else
            {
                returnQtyParameter = new ObjectParameter("ReturnQty", typeof(int));
            }
    
            ObjectParameter addRemovedQtyParameter;
    
            if (addRemovedQty.HasValue)
            {
                addRemovedQtyParameter = new ObjectParameter("AddRemovedQty", addRemovedQty);
            }
            else
            {
                addRemovedQtyParameter = new ObjectParameter("AddRemovedQty", typeof(int));
            }
    
            ObjectParameter notInstalledQtyParameter;
    
            if (notInstalledQty.HasValue)
            {
                notInstalledQtyParameter = new ObjectParameter("NotInstalledQty", notInstalledQty);
            }
            else
            {
                notInstalledQtyParameter = new ObjectParameter("NotInstalledQty", typeof(int));
            }
    
            ObjectParameter moveQtyParameter;
    
            if (moveQty.HasValue)
            {
                moveQtyParameter = new ObjectParameter("MoveQty", moveQty);
            }
            else
            {
                moveQtyParameter = new ObjectParameter("MoveQty", typeof(int));
            }
    
            ObjectParameter mAExchangeQtyParameter;
    
            if (mAExchangeQty.HasValue)
            {
                mAExchangeQtyParameter = new ObjectParameter("MAExchangeQty", mAExchangeQty);
            }
            else
            {
                mAExchangeQtyParameter = new ObjectParameter("MAExchangeQty", typeof(int));
            }
    
            ObjectParameter unremovableQtyParameter;
    
            if (unremovableQty.HasValue)
            {
                unremovableQtyParameter = new ObjectParameter("UnremovableQty", unremovableQty);
            }
            else
            {
                unremovableQtyParameter = new ObjectParameter("UnremovableQty", typeof(int));
            }
    
            ObjectParameter returnRemoveQtyParameter;
    
            if (returnRemoveQty.HasValue)
            {
                returnRemoveQtyParameter = new ObjectParameter("ReturnRemoveQty", returnRemoveQty);
            }
            else
            {
                returnRemoveQtyParameter = new ObjectParameter("ReturnRemoveQty", typeof(int));
            }
    
            ObjectParameter instrumentPriceParameter;
    
            if (instrumentPrice.HasValue)
            {
                instrumentPriceParameter = new ObjectParameter("InstrumentPrice", instrumentPrice);
            }
            else
            {
                instrumentPriceParameter = new ObjectParameter("InstrumentPrice", typeof(decimal));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
    
            ObjectParameter partialStockOutQtyParameter;
    
            if (partialStockOutQty.HasValue)
            {
                partialStockOutQtyParameter = new ObjectParameter("PartialStockOutQty", partialStockOutQty);
            }
            else
            {
                partialStockOutQtyParameter = new ObjectParameter("PartialStockOutQty", typeof(int));
            }
            return base.ExecuteFunction<tbt_InstallationSlipDetails>("UpdateTbt_InstallationSlipDetails", slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, currentStockOutQtyParameter, totalStockOutQtyParameter, addInstalledQtyParameter, returnQtyParameter, addRemovedQtyParameter, notInstalledQtyParameter, moveQtyParameter, mAExchangeQtyParameter, unremovableQtyParameter, returnRemoveQtyParameter, instrumentPriceParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, partialStockOutQtyParameter);
        }
        public ObjectResult<tbt_InstallationBasic> DeleteTbt_InstallationBasic(string contractProjectCode)
        {
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationBasic>("DeleteTbt_InstallationBasic", contractProjectCodeParameter);
        }
        public ObjectResult<tbt_InstallationInstrumentDetails> DeleteTbt_InstallationInstrumentDetail(string contractCode, string instrumentCode)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationInstrumentDetails>("DeleteTbt_InstallationInstrumentDetail", contractCodeParameter, instrumentCodeParameter);
        }
        public ObjectResult<tbt_InstallationHistory> InsertTbt_InstallationHistory(string contractProjectCode, string oCC, string serviceTypeCode, string installationStatus, string installationType, string planCode, string slipNo, string maintenanceNo, string operationOfficeCode, string securityTypeCode, string changeReasonTypeCode, Nullable<decimal> normalInstallFee, Nullable<decimal> billingInstallFee, string installFeeBillingType, Nullable<decimal> normalSaleProductPrice, Nullable<decimal> billingSalePrice, Nullable<System.DateTime> installationSlipProcessingDate, Nullable<System.DateTime> installationCompleteDate, Nullable<System.DateTime> installationCompleteProcessingDate, string installationBy, string salesmanEmpNo1, string salesmanEmpNo2, string approveNo1, string approveNo2, Nullable<System.DateTime> installationStartDate, Nullable<System.DateTime> installationFinishDate, Nullable<decimal> normalContractFee, string billingOCC, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
    
            ObjectParameter oCCParameter;
    
            if (oCC != null)
            {
                oCCParameter = new ObjectParameter("OCC", oCC);
            }
            else
            {
                oCCParameter = new ObjectParameter("OCC", typeof(string));
            }
    
            ObjectParameter serviceTypeCodeParameter;
    
            if (serviceTypeCode != null)
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", serviceTypeCode);
            }
            else
            {
                serviceTypeCodeParameter = new ObjectParameter("ServiceTypeCode", typeof(string));
            }
    
            ObjectParameter installationStatusParameter;
    
            if (installationStatus != null)
            {
                installationStatusParameter = new ObjectParameter("InstallationStatus", installationStatus);
            }
            else
            {
                installationStatusParameter = new ObjectParameter("InstallationStatus", typeof(string));
            }
    
            ObjectParameter installationTypeParameter;
    
            if (installationType != null)
            {
                installationTypeParameter = new ObjectParameter("InstallationType", installationType);
            }
            else
            {
                installationTypeParameter = new ObjectParameter("InstallationType", typeof(string));
            }
    
            ObjectParameter planCodeParameter;
    
            if (planCode != null)
            {
                planCodeParameter = new ObjectParameter("PlanCode", planCode);
            }
            else
            {
                planCodeParameter = new ObjectParameter("PlanCode", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
    
            ObjectParameter securityTypeCodeParameter;
    
            if (securityTypeCode != null)
            {
                securityTypeCodeParameter = new ObjectParameter("SecurityTypeCode", securityTypeCode);
            }
            else
            {
                securityTypeCodeParameter = new ObjectParameter("SecurityTypeCode", typeof(string));
            }
    
            ObjectParameter changeReasonTypeCodeParameter;
    
            if (changeReasonTypeCode != null)
            {
                changeReasonTypeCodeParameter = new ObjectParameter("ChangeReasonTypeCode", changeReasonTypeCode);
            }
            else
            {
                changeReasonTypeCodeParameter = new ObjectParameter("ChangeReasonTypeCode", typeof(string));
            }
    
            ObjectParameter normalInstallFeeParameter;
    
            if (normalInstallFee.HasValue)
            {
                normalInstallFeeParameter = new ObjectParameter("NormalInstallFee", normalInstallFee);
            }
            else
            {
                normalInstallFeeParameter = new ObjectParameter("NormalInstallFee", typeof(decimal));
            }
    
            ObjectParameter billingInstallFeeParameter;
    
            if (billingInstallFee.HasValue)
            {
                billingInstallFeeParameter = new ObjectParameter("BillingInstallFee", billingInstallFee);
            }
            else
            {
                billingInstallFeeParameter = new ObjectParameter("BillingInstallFee", typeof(decimal));
            }
    
            ObjectParameter installFeeBillingTypeParameter;
    
            if (installFeeBillingType != null)
            {
                installFeeBillingTypeParameter = new ObjectParameter("InstallFeeBillingType", installFeeBillingType);
            }
            else
            {
                installFeeBillingTypeParameter = new ObjectParameter("InstallFeeBillingType", typeof(string));
            }
    
            ObjectParameter normalSaleProductPriceParameter;
    
            if (normalSaleProductPrice.HasValue)
            {
                normalSaleProductPriceParameter = new ObjectParameter("NormalSaleProductPrice", normalSaleProductPrice);
            }
            else
            {
                normalSaleProductPriceParameter = new ObjectParameter("NormalSaleProductPrice", typeof(decimal));
            }
    
            ObjectParameter billingSalePriceParameter;
    
            if (billingSalePrice.HasValue)
            {
                billingSalePriceParameter = new ObjectParameter("BillingSalePrice", billingSalePrice);
            }
            else
            {
                billingSalePriceParameter = new ObjectParameter("BillingSalePrice", typeof(decimal));
            }
    
            ObjectParameter installationSlipProcessingDateParameter;
    
            if (installationSlipProcessingDate.HasValue)
            {
                installationSlipProcessingDateParameter = new ObjectParameter("InstallationSlipProcessingDate", installationSlipProcessingDate);
            }
            else
            {
                installationSlipProcessingDateParameter = new ObjectParameter("InstallationSlipProcessingDate", typeof(System.DateTime));
            }
    
            ObjectParameter installationCompleteDateParameter;
    
            if (installationCompleteDate.HasValue)
            {
                installationCompleteDateParameter = new ObjectParameter("InstallationCompleteDate", installationCompleteDate);
            }
            else
            {
                installationCompleteDateParameter = new ObjectParameter("InstallationCompleteDate", typeof(System.DateTime));
            }
    
            ObjectParameter installationCompleteProcessingDateParameter;
    
            if (installationCompleteProcessingDate.HasValue)
            {
                installationCompleteProcessingDateParameter = new ObjectParameter("InstallationCompleteProcessingDate", installationCompleteProcessingDate);
            }
            else
            {
                installationCompleteProcessingDateParameter = new ObjectParameter("InstallationCompleteProcessingDate", typeof(System.DateTime));
            }
    
            ObjectParameter installationByParameter;
    
            if (installationBy != null)
            {
                installationByParameter = new ObjectParameter("InstallationBy", installationBy);
            }
            else
            {
                installationByParameter = new ObjectParameter("InstallationBy", typeof(string));
            }
    
            ObjectParameter salesmanEmpNo1Parameter;
    
            if (salesmanEmpNo1 != null)
            {
                salesmanEmpNo1Parameter = new ObjectParameter("SalesmanEmpNo1", salesmanEmpNo1);
            }
            else
            {
                salesmanEmpNo1Parameter = new ObjectParameter("SalesmanEmpNo1", typeof(string));
            }
    
            ObjectParameter salesmanEmpNo2Parameter;
    
            if (salesmanEmpNo2 != null)
            {
                salesmanEmpNo2Parameter = new ObjectParameter("SalesmanEmpNo2", salesmanEmpNo2);
            }
            else
            {
                salesmanEmpNo2Parameter = new ObjectParameter("SalesmanEmpNo2", typeof(string));
            }
    
            ObjectParameter approveNo1Parameter;
    
            if (approveNo1 != null)
            {
                approveNo1Parameter = new ObjectParameter("ApproveNo1", approveNo1);
            }
            else
            {
                approveNo1Parameter = new ObjectParameter("ApproveNo1", typeof(string));
            }
    
            ObjectParameter approveNo2Parameter;
    
            if (approveNo2 != null)
            {
                approveNo2Parameter = new ObjectParameter("ApproveNo2", approveNo2);
            }
            else
            {
                approveNo2Parameter = new ObjectParameter("ApproveNo2", typeof(string));
            }
    
            ObjectParameter installationStartDateParameter;
    
            if (installationStartDate.HasValue)
            {
                installationStartDateParameter = new ObjectParameter("InstallationStartDate", installationStartDate);
            }
            else
            {
                installationStartDateParameter = new ObjectParameter("InstallationStartDate", typeof(System.DateTime));
            }
    
            ObjectParameter installationFinishDateParameter;
    
            if (installationFinishDate.HasValue)
            {
                installationFinishDateParameter = new ObjectParameter("InstallationFinishDate", installationFinishDate);
            }
            else
            {
                installationFinishDateParameter = new ObjectParameter("InstallationFinishDate", typeof(System.DateTime));
            }
    
            ObjectParameter normalContractFeeParameter;
    
            if (normalContractFee.HasValue)
            {
                normalContractFeeParameter = new ObjectParameter("NormalContractFee", normalContractFee);
            }
            else
            {
                normalContractFeeParameter = new ObjectParameter("NormalContractFee", typeof(decimal));
            }
    
            ObjectParameter billingOCCParameter;
    
            if (billingOCC != null)
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", billingOCC);
            }
            else
            {
                billingOCCParameter = new ObjectParameter("BillingOCC", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationHistory>("InsertTbt_InstallationHistory", contractProjectCodeParameter, oCCParameter, serviceTypeCodeParameter, installationStatusParameter, installationTypeParameter, planCodeParameter, slipNoParameter, maintenanceNoParameter, operationOfficeCodeParameter, securityTypeCodeParameter, changeReasonTypeCodeParameter, normalInstallFeeParameter, billingInstallFeeParameter, installFeeBillingTypeParameter, normalSaleProductPriceParameter, billingSalePriceParameter, installationSlipProcessingDateParameter, installationCompleteDateParameter, installationCompleteProcessingDateParameter, installationByParameter, salesmanEmpNo1Parameter, salesmanEmpNo2Parameter, approveNo1Parameter, approveNo2Parameter, installationStartDateParameter, installationFinishDateParameter, normalContractFeeParameter, billingOCCParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbt_InstallationHistoryDetails> InsertTbt_InstallationHistoryDetail(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter instrumentTypeCodeParameter;
    
            if (instrumentTypeCode != null)
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", instrumentTypeCode);
            }
            else
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", typeof(string));
            }
    
            ObjectParameter contractInstalledQtyParameter;
    
            if (contractInstalledQty.HasValue)
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", contractInstalledQty);
            }
            else
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", typeof(int));
            }
    
            ObjectParameter contractRemovedQtyParameter;
    
            if (contractRemovedQty.HasValue)
            {
                contractRemovedQtyParameter = new ObjectParameter("ContractRemovedQty", contractRemovedQty);
            }
            else
            {
                contractRemovedQtyParameter = new ObjectParameter("ContractRemovedQty", typeof(int));
            }
    
            ObjectParameter contractMovedQtyParameter;
    
            if (contractMovedQty.HasValue)
            {
                contractMovedQtyParameter = new ObjectParameter("ContractMovedQty", contractMovedQty);
            }
            else
            {
                contractMovedQtyParameter = new ObjectParameter("ContractMovedQty", typeof(int));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationHistoryDetails>("InsertTbt_InstallationHistoryDetail", contractCodeParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, contractRemovedQtyParameter, contractMovedQtyParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<tbt_InstallationMemo> DeleteTbt_InstallationMemo(string contractProjectCode, string referenceID, string objectID)
        {
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
    
            ObjectParameter referenceIDParameter;
    
            if (referenceID != null)
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", referenceID);
            }
            else
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", typeof(string));
            }
    
            ObjectParameter objectIDParameter;
    
            if (objectID != null)
            {
                objectIDParameter = new ObjectParameter("ObjectID", objectID);
            }
            else
            {
                objectIDParameter = new ObjectParameter("ObjectID", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationMemo>("DeleteTbt_InstallationMemo", contractProjectCodeParameter, referenceIDParameter, objectIDParameter);
        }
        public ObjectResult<tbt_InstallationPOManagement> DeleteTbt_InstallationPOManagement(string maintenanceNo)
        {
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationPOManagement>("DeleteTbt_InstallationPOManagement", maintenanceNoParameter);
        }
        public ObjectResult<doSearchInstallManagementResult> SearchInstallationManagementList(string c_FLAG_ON, string c_INSTALL_MANAGE_STATUS_CANCELED, string contractCode, string projectCode, string installationType, string iEStaffCode, string subContractorCode, string subcontractorGroupName, Nullable<System.DateTime> proposedInstallationCompleteDateFrom, Nullable<System.DateTime> proposedInstallationCompleteDateTo, Nullable<System.DateTime> installationCompleteDateFrom, Nullable<System.DateTime> installationCompleteDateTo, Nullable<System.DateTime> installationStartDateFrom, Nullable<System.DateTime> installationStartDateTo, Nullable<System.DateTime> installationFinishDateFrom, Nullable<System.DateTime> installationFinishDateTo, string siteName, string siteAddress, string operationOfficeCode, string installationManagementStatus, Nullable<System.DateTime> installationRequestDateFrom, Nullable<System.DateTime> installationRequestDateTo, Nullable<System.DateTime> expectedInstallationStartDateFrom, Nullable<System.DateTime> expectedInstallationStartDateTo, Nullable<System.DateTime> expectedInstallationFinishDateFrom, Nullable<System.DateTime> expectedInstallationFinishDateTo)
        {
    
            ObjectParameter c_FLAG_ONParameter;
    
            if (c_FLAG_ON != null)
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", c_FLAG_ON);
            }
            else
            {
                c_FLAG_ONParameter = new ObjectParameter("C_FLAG_ON", typeof(string));
            }
    
            ObjectParameter c_INSTALL_MANAGE_STATUS_CANCELEDParameter;
    
            if (c_INSTALL_MANAGE_STATUS_CANCELED != null)
            {
                c_INSTALL_MANAGE_STATUS_CANCELEDParameter = new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", c_INSTALL_MANAGE_STATUS_CANCELED);
            }
            else
            {
                c_INSTALL_MANAGE_STATUS_CANCELEDParameter = new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter projectCodeParameter;
    
            if (projectCode != null)
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", projectCode);
            }
            else
            {
                projectCodeParameter = new ObjectParameter("ProjectCode", typeof(string));
            }
    
            ObjectParameter installationTypeParameter;
    
            if (installationType != null)
            {
                installationTypeParameter = new ObjectParameter("InstallationType", installationType);
            }
            else
            {
                installationTypeParameter = new ObjectParameter("InstallationType", typeof(string));
            }
    
            ObjectParameter iEStaffCodeParameter;
    
            if (iEStaffCode != null)
            {
                iEStaffCodeParameter = new ObjectParameter("IEStaffCode", iEStaffCode);
            }
            else
            {
                iEStaffCodeParameter = new ObjectParameter("IEStaffCode", typeof(string));
            }
    
            ObjectParameter subContractorCodeParameter;
    
            if (subContractorCode != null)
            {
                subContractorCodeParameter = new ObjectParameter("SubContractorCode", subContractorCode);
            }
            else
            {
                subContractorCodeParameter = new ObjectParameter("SubContractorCode", typeof(string));
            }
    
            ObjectParameter subcontractorGroupNameParameter;
    
            if (subcontractorGroupName != null)
            {
                subcontractorGroupNameParameter = new ObjectParameter("SubcontractorGroupName", subcontractorGroupName);
            }
            else
            {
                subcontractorGroupNameParameter = new ObjectParameter("SubcontractorGroupName", typeof(string));
            }
    
            ObjectParameter proposedInstallationCompleteDateFromParameter;
    
            if (proposedInstallationCompleteDateFrom.HasValue)
            {
                proposedInstallationCompleteDateFromParameter = new ObjectParameter("ProposedInstallationCompleteDateFrom", proposedInstallationCompleteDateFrom);
            }
            else
            {
                proposedInstallationCompleteDateFromParameter = new ObjectParameter("ProposedInstallationCompleteDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter proposedInstallationCompleteDateToParameter;
    
            if (proposedInstallationCompleteDateTo.HasValue)
            {
                proposedInstallationCompleteDateToParameter = new ObjectParameter("ProposedInstallationCompleteDateTo", proposedInstallationCompleteDateTo);
            }
            else
            {
                proposedInstallationCompleteDateToParameter = new ObjectParameter("ProposedInstallationCompleteDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter installationCompleteDateFromParameter;
    
            if (installationCompleteDateFrom.HasValue)
            {
                installationCompleteDateFromParameter = new ObjectParameter("InstallationCompleteDateFrom", installationCompleteDateFrom);
            }
            else
            {
                installationCompleteDateFromParameter = new ObjectParameter("InstallationCompleteDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter installationCompleteDateToParameter;
    
            if (installationCompleteDateTo.HasValue)
            {
                installationCompleteDateToParameter = new ObjectParameter("InstallationCompleteDateTo", installationCompleteDateTo);
            }
            else
            {
                installationCompleteDateToParameter = new ObjectParameter("InstallationCompleteDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter installationStartDateFromParameter;
    
            if (installationStartDateFrom.HasValue)
            {
                installationStartDateFromParameter = new ObjectParameter("InstallationStartDateFrom", installationStartDateFrom);
            }
            else
            {
                installationStartDateFromParameter = new ObjectParameter("InstallationStartDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter installationStartDateToParameter;
    
            if (installationStartDateTo.HasValue)
            {
                installationStartDateToParameter = new ObjectParameter("InstallationStartDateTo", installationStartDateTo);
            }
            else
            {
                installationStartDateToParameter = new ObjectParameter("InstallationStartDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter installationFinishDateFromParameter;
    
            if (installationFinishDateFrom.HasValue)
            {
                installationFinishDateFromParameter = new ObjectParameter("InstallationFinishDateFrom", installationFinishDateFrom);
            }
            else
            {
                installationFinishDateFromParameter = new ObjectParameter("InstallationFinishDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter installationFinishDateToParameter;
    
            if (installationFinishDateTo.HasValue)
            {
                installationFinishDateToParameter = new ObjectParameter("InstallationFinishDateTo", installationFinishDateTo);
            }
            else
            {
                installationFinishDateToParameter = new ObjectParameter("InstallationFinishDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter siteNameParameter;
    
            if (siteName != null)
            {
                siteNameParameter = new ObjectParameter("SiteName", siteName);
            }
            else
            {
                siteNameParameter = new ObjectParameter("SiteName", typeof(string));
            }
    
            ObjectParameter siteAddressParameter;
    
            if (siteAddress != null)
            {
                siteAddressParameter = new ObjectParameter("SiteAddress", siteAddress);
            }
            else
            {
                siteAddressParameter = new ObjectParameter("SiteAddress", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
    
            ObjectParameter installationManagementStatusParameter;
    
            if (installationManagementStatus != null)
            {
                installationManagementStatusParameter = new ObjectParameter("InstallationManagementStatus", installationManagementStatus);
            }
            else
            {
                installationManagementStatusParameter = new ObjectParameter("InstallationManagementStatus", typeof(string));
            }
    
            ObjectParameter installationRequestDateFromParameter;
    
            if (installationRequestDateFrom.HasValue)
            {
                installationRequestDateFromParameter = new ObjectParameter("InstallationRequestDateFrom", installationRequestDateFrom);
            }
            else
            {
                installationRequestDateFromParameter = new ObjectParameter("InstallationRequestDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter installationRequestDateToParameter;
    
            if (installationRequestDateTo.HasValue)
            {
                installationRequestDateToParameter = new ObjectParameter("InstallationRequestDateTo", installationRequestDateTo);
            }
            else
            {
                installationRequestDateToParameter = new ObjectParameter("InstallationRequestDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter expectedInstallationStartDateFromParameter;
    
            if (expectedInstallationStartDateFrom.HasValue)
            {
                expectedInstallationStartDateFromParameter = new ObjectParameter("ExpectedInstallationStartDateFrom", expectedInstallationStartDateFrom);
            }
            else
            {
                expectedInstallationStartDateFromParameter = new ObjectParameter("ExpectedInstallationStartDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter expectedInstallationStartDateToParameter;
    
            if (expectedInstallationStartDateTo.HasValue)
            {
                expectedInstallationStartDateToParameter = new ObjectParameter("ExpectedInstallationStartDateTo", expectedInstallationStartDateTo);
            }
            else
            {
                expectedInstallationStartDateToParameter = new ObjectParameter("ExpectedInstallationStartDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter expectedInstallationFinishDateFromParameter;
    
            if (expectedInstallationFinishDateFrom.HasValue)
            {
                expectedInstallationFinishDateFromParameter = new ObjectParameter("ExpectedInstallationFinishDateFrom", expectedInstallationFinishDateFrom);
            }
            else
            {
                expectedInstallationFinishDateFromParameter = new ObjectParameter("ExpectedInstallationFinishDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter expectedInstallationFinishDateToParameter;
    
            if (expectedInstallationFinishDateTo.HasValue)
            {
                expectedInstallationFinishDateToParameter = new ObjectParameter("ExpectedInstallationFinishDateTo", expectedInstallationFinishDateTo);
            }
            else
            {
                expectedInstallationFinishDateToParameter = new ObjectParameter("ExpectedInstallationFinishDateTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<doSearchInstallManagementResult>("SearchInstallationManagementList", c_FLAG_ONParameter, c_INSTALL_MANAGE_STATUS_CANCELEDParameter, contractCodeParameter, projectCodeParameter, installationTypeParameter, iEStaffCodeParameter, subContractorCodeParameter, subcontractorGroupNameParameter, proposedInstallationCompleteDateFromParameter, proposedInstallationCompleteDateToParameter, installationCompleteDateFromParameter, installationCompleteDateToParameter, installationStartDateFromParameter, installationStartDateToParameter, installationFinishDateFromParameter, installationFinishDateToParameter, siteNameParameter, siteAddressParameter, operationOfficeCodeParameter, installationManagementStatusParameter, installationRequestDateFromParameter, installationRequestDateToParameter, expectedInstallationStartDateFromParameter, expectedInstallationStartDateToParameter, expectedInstallationFinishDateFromParameter, expectedInstallationFinishDateToParameter);
        }
        public ObjectResult<dtRequestApproveInstallation> GetEmailForApprove()
        {
            return base.ExecuteFunction<dtRequestApproveInstallation>("GetEmailForApprove");
        }
        public ObjectResult<RPTNewRentalSlipDo> GetRptNewRetalSlipData(string pSlipNo, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter c_SCREEN_ID_INSTALL_SLIPParameter;
    
            if (c_SCREEN_ID_INSTALL_SLIP != null)
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP);
            }
            else
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
            }
    
            ObjectParameter c_STOCK_OUT_TYPEParameter;
    
            if (c_STOCK_OUT_TYPE != null)
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE);
            }
            else
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RPTNewRentalSlipDo>("GetRptNewRetalSlipData", pSlipNoParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
        public ObjectResult<CheckCancelInstallationManagement_Result> CheckCancelInstallationManagement(string strInstallationMaintenanceNo, string c_INSTALL_MANAGE_STATUS_CANCELED)
        {
    
            ObjectParameter strInstallationMaintenanceNoParameter;
    
            if (strInstallationMaintenanceNo != null)
            {
                strInstallationMaintenanceNoParameter = new ObjectParameter("strInstallationMaintenanceNo", strInstallationMaintenanceNo);
            }
            else
            {
                strInstallationMaintenanceNoParameter = new ObjectParameter("strInstallationMaintenanceNo", typeof(string));
            }
    
            ObjectParameter c_INSTALL_MANAGE_STATUS_CANCELEDParameter;
    
            if (c_INSTALL_MANAGE_STATUS_CANCELED != null)
            {
                c_INSTALL_MANAGE_STATUS_CANCELEDParameter = new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", c_INSTALL_MANAGE_STATUS_CANCELED);
            }
            else
            {
                c_INSTALL_MANAGE_STATUS_CANCELEDParameter = new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", typeof(string));
            }
            return base.ExecuteFunction<CheckCancelInstallationManagement_Result>("CheckCancelInstallationManagement", strInstallationMaintenanceNoParameter, c_INSTALL_MANAGE_STATUS_CANCELEDParameter);
        }
        public ObjectResult<tbt_InstallationMemo> GetTbt_InstallationMemo(string pMaintenanceNo)
        {
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationMemo>("GetTbt_InstallationMemo", pMaintenanceNoParameter);
        }
        public ObjectResult<RPTChangeSlipDo> GetRptChangeSlipData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_SCREEN_ID_INSTALL_SLIPParameter;
    
            if (c_SCREEN_ID_INSTALL_SLIP != null)
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP);
            }
            else
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
            }
    
            ObjectParameter c_STOCK_OUT_TYPEParameter;
    
            if (c_STOCK_OUT_TYPE != null)
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE);
            }
            else
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RPTChangeSlipDo>("GetRptChangeSlipData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
        public ObjectResult<RPTRemoveSlipDo> GetRptRemoveSlipData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SCREEN_ID_INSTALL_SLIPParameter;
    
            if (c_SCREEN_ID_INSTALL_SLIP != null)
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP);
            }
            else
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
            }
    
            ObjectParameter c_STOCK_OUT_TYPEParameter;
    
            if (c_STOCK_OUT_TYPE != null)
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE);
            }
            else
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RPTRemoveSlipDo>("GetRptRemoveSlipData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
        public ObjectResult<tbt_InstallationInstrumentDetails> InsertTbt_InstallationInstrumentDetails(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
    
            ObjectParameter instrumentTypeCodeParameter;
    
            if (instrumentTypeCode != null)
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", instrumentTypeCode);
            }
            else
            {
                instrumentTypeCodeParameter = new ObjectParameter("InstrumentTypeCode", typeof(string));
            }
    
            ObjectParameter contractInstalledQtyParameter;
    
            if (contractInstalledQty.HasValue)
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", contractInstalledQty);
            }
            else
            {
                contractInstalledQtyParameter = new ObjectParameter("ContractInstalledQty", typeof(int));
            }
    
            ObjectParameter contractRemovedQtyParameter;
    
            if (contractRemovedQty.HasValue)
            {
                contractRemovedQtyParameter = new ObjectParameter("ContractRemovedQty", contractRemovedQty);
            }
            else
            {
                contractRemovedQtyParameter = new ObjectParameter("ContractRemovedQty", typeof(int));
            }
    
            ObjectParameter contractMovedQtyParameter;
    
            if (contractMovedQty.HasValue)
            {
                contractMovedQtyParameter = new ObjectParameter("ContractMovedQty", contractMovedQty);
            }
            else
            {
                contractMovedQtyParameter = new ObjectParameter("ContractMovedQty", typeof(int));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
    
            ObjectParameter updateDateParameter;
    
            if (updateDate.HasValue)
            {
                updateDateParameter = new ObjectParameter("UpdateDate", updateDate);
            }
            else
            {
                updateDateParameter = new ObjectParameter("UpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter updateByParameter;
    
            if (updateBy != null)
            {
                updateByParameter = new ObjectParameter("UpdateBy", updateBy);
            }
            else
            {
                updateByParameter = new ObjectParameter("UpdateBy", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationInstrumentDetails>("InsertTbt_InstallationInstrumentDetails", contractCodeParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, contractRemovedQtyParameter, contractMovedQtyParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
        public ObjectResult<RPTPOSubPriceDo> GetRptPOSubPriceData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
        {
    
            ObjectParameter cMaintenanceNoParameter;
    
            if (cMaintenanceNo != null)
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", cMaintenanceNo);
            }
            else
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", typeof(string));
            }
    
            ObjectParameter cSubcontractorCodeParameter;
    
            if (cSubcontractorCode != null)
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", cSubcontractorCode);
            }
            else
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_PROJECTParameter;
    
            if (c_SERVICE_TYPE_PROJECT != null)
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT);
            }
            else
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RPTPOSubPriceDo>("GetRptPOSubPriceData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter);
        }
        public ObjectResult<RPTNewSaleSlipDo> GetRptNewSaleSlipData(string pSlipNo, string c_SALE_INSTALL_TYPE, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_SCREEN_ID_INSTALL_SLIPParameter;
    
            if (c_SCREEN_ID_INSTALL_SLIP != null)
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP);
            }
            else
            {
                c_SCREEN_ID_INSTALL_SLIPParameter = new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
            }
    
            ObjectParameter c_STOCK_OUT_TYPEParameter;
    
            if (c_STOCK_OUT_TYPE != null)
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE);
            }
            else
            {
                c_STOCK_OUT_TYPEParameter = new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RPTNewSaleSlipDo>("GetRptNewSaleSlipData", pSlipNoParameter, c_SALE_INSTALL_TYPEParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
        public ObjectResult<RPTInstallRequestDo> GetRptInstallationRequestData(string cMaintenanceNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_NEW_BLD_MGMT_FLAG, string c_BUILDING_TYPE, string c_PHONE_LINE_OWNER_TYPE)
        {
    
            ObjectParameter cMaintenanceNoParameter;
    
            if (cMaintenanceNo != null)
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", cMaintenanceNo);
            }
            else
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_PROJECTParameter;
    
            if (c_SERVICE_TYPE_PROJECT != null)
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT);
            }
            else
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_NEW_BLD_MGMT_FLAGParameter;
    
            if (c_NEW_BLD_MGMT_FLAG != null)
            {
                c_NEW_BLD_MGMT_FLAGParameter = new ObjectParameter("C_NEW_BLD_MGMT_FLAG", c_NEW_BLD_MGMT_FLAG);
            }
            else
            {
                c_NEW_BLD_MGMT_FLAGParameter = new ObjectParameter("C_NEW_BLD_MGMT_FLAG", typeof(string));
            }
    
            ObjectParameter c_BUILDING_TYPEParameter;
    
            if (c_BUILDING_TYPE != null)
            {
                c_BUILDING_TYPEParameter = new ObjectParameter("C_BUILDING_TYPE", c_BUILDING_TYPE);
            }
            else
            {
                c_BUILDING_TYPEParameter = new ObjectParameter("C_BUILDING_TYPE", typeof(string));
            }
    
            ObjectParameter c_PHONE_LINE_OWNER_TYPEParameter;
    
            if (c_PHONE_LINE_OWNER_TYPE != null)
            {
                c_PHONE_LINE_OWNER_TYPEParameter = new ObjectParameter("C_PHONE_LINE_OWNER_TYPE", c_PHONE_LINE_OWNER_TYPE);
            }
            else
            {
                c_PHONE_LINE_OWNER_TYPEParameter = new ObjectParameter("C_PHONE_LINE_OWNER_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RPTInstallRequestDo>("GetRptInstallationRequestData", cMaintenanceNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, c_NEW_BLD_MGMT_FLAGParameter, c_BUILDING_TYPEParameter, c_PHONE_LINE_OWNER_TYPEParameter);
        }
        public ObjectResult<RPTInstallSpecCompleteDo> GetRptInstallSpecCompleteData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
        {
    
            ObjectParameter cMaintenanceNoParameter;
    
            if (cMaintenanceNo != null)
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", cMaintenanceNo);
            }
            else
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", typeof(string));
            }
    
            ObjectParameter cSubcontractorCodeParameter;
    
            if (cSubcontractorCode != null)
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", cSubcontractorCode);
            }
            else
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_PROJECTParameter;
    
            if (c_SERVICE_TYPE_PROJECT != null)
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT);
            }
            else
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
            }
            return base.ExecuteFunction<RPTInstallSpecCompleteDo>("GetRptInstallSpecCompleteData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter);
        }
        public ObjectResult<RPTIECheckSheetDo> GetRptIECheckSheetData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
        {
    
            ObjectParameter cMaintenanceNoParameter;
    
            if (cMaintenanceNo != null)
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", cMaintenanceNo);
            }
            else
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", typeof(string));
            }
    
            ObjectParameter cSubcontractorCodeParameter;
    
            if (cSubcontractorCode != null)
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", cSubcontractorCode);
            }
            else
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_PROJECTParameter;
    
            if (c_SERVICE_TYPE_PROJECT != null)
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT);
            }
            else
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
            }
            return base.ExecuteFunction<RPTIECheckSheetDo>("GetRptIECheckSheetData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter);
        }
        public ObjectResult<RPTInstallCompleteDo> GetRptInstallCompleteConfirmData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RPTInstallCompleteDo>("GetRptInstallCompleteConfirmData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter);
        }
        public ObjectResult<RPTAcceptInspecDo> GetRptAcceptInspecNocticeData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
        {
    
            ObjectParameter cMaintenanceNoParameter;
    
            if (cMaintenanceNo != null)
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", cMaintenanceNo);
            }
            else
            {
                cMaintenanceNoParameter = new ObjectParameter("cMaintenanceNo", typeof(string));
            }
    
            ObjectParameter cSubcontractorCodeParameter;
    
            if (cSubcontractorCode != null)
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", cSubcontractorCode);
            }
            else
            {
                cSubcontractorCodeParameter = new ObjectParameter("cSubcontractorCode", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_PROJECTParameter;
    
            if (c_SERVICE_TYPE_PROJECT != null)
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT);
            }
            else
            {
                c_SERVICE_TYPE_PROJECTParameter = new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
            }
            return base.ExecuteFunction<RPTAcceptInspecDo>("GetRptAcceptInspecNocticeData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter);
        }
        public ObjectResult<RPTDeliveryConfirmDo> GetRptDeliveryConfirmData(string cSlipNo, string c_CONFIG_INSTALL_WARRANTY_COND)
        {
    
            ObjectParameter cSlipNoParameter;
    
            if (cSlipNo != null)
            {
                cSlipNoParameter = new ObjectParameter("cSlipNo", cSlipNo);
            }
            else
            {
                cSlipNoParameter = new ObjectParameter("cSlipNo", typeof(string));
            }
    
            ObjectParameter c_CONFIG_INSTALL_WARRANTY_CONDParameter;
    
            if (c_CONFIG_INSTALL_WARRANTY_COND != null)
            {
                c_CONFIG_INSTALL_WARRANTY_CONDParameter = new ObjectParameter("C_CONFIG_INSTALL_WARRANTY_COND", c_CONFIG_INSTALL_WARRANTY_COND);
            }
            else
            {
                c_CONFIG_INSTALL_WARRANTY_CONDParameter = new ObjectParameter("C_CONFIG_INSTALL_WARRANTY_COND", typeof(string));
            }
            return base.ExecuteFunction<RPTDeliveryConfirmDo>("GetRptDeliveryConfirmData", cSlipNoParameter, c_CONFIG_INSTALL_WARRANTY_CONDParameter);
        }
        public ObjectResult<doCheckInstallationDataToOpenScreen> CheckInstallationDataToOpenScreen(string strCode)
        {
    
            ObjectParameter strCodeParameter;
    
            if (strCode != null)
            {
                strCodeParameter = new ObjectParameter("strCode", strCode);
            }
            else
            {
                strCodeParameter = new ObjectParameter("strCode", typeof(string));
            }
            return base.ExecuteFunction<doCheckInstallationDataToOpenScreen>("CheckInstallationDataToOpenScreen", strCodeParameter);
        }
        public ObjectResult<tbt_InstallationAttachFile> InsertTbt_InstallationAttachFile(string xml_POManagement)
        {
    
            ObjectParameter xml_POManagementParameter;
    
            if (xml_POManagement != null)
            {
                xml_POManagementParameter = new ObjectParameter("xml_POManagement", xml_POManagement);
            }
            else
            {
                xml_POManagementParameter = new ObjectParameter("xml_POManagement", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationAttachFile>("InsertTbt_InstallationAttachFile", xml_POManagementParameter);
        }
        public ObjectResult<doGetNormalRemovalFee> GetNormalRemovalFee(string pContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SLIP_STATUS_INSTALL_SLIP_CANCELED, string c_SLIP_STATUS_REPLACED)
        {
    
            ObjectParameter pContractCodeParameter;
    
            if (pContractCode != null)
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", pContractCode);
            }
            else
            {
                pContractCodeParameter = new ObjectParameter("pContractCode", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_SLIP_STATUS_INSTALL_SLIP_CANCELEDParameter;
    
            if (c_SLIP_STATUS_INSTALL_SLIP_CANCELED != null)
            {
                c_SLIP_STATUS_INSTALL_SLIP_CANCELEDParameter = new ObjectParameter("C_SLIP_STATUS_INSTALL_SLIP_CANCELED", c_SLIP_STATUS_INSTALL_SLIP_CANCELED);
            }
            else
            {
                c_SLIP_STATUS_INSTALL_SLIP_CANCELEDParameter = new ObjectParameter("C_SLIP_STATUS_INSTALL_SLIP_CANCELED", typeof(string));
            }
    
            ObjectParameter c_SLIP_STATUS_REPLACEDParameter;
    
            if (c_SLIP_STATUS_REPLACED != null)
            {
                c_SLIP_STATUS_REPLACEDParameter = new ObjectParameter("C_SLIP_STATUS_REPLACED", c_SLIP_STATUS_REPLACED);
            }
            else
            {
                c_SLIP_STATUS_REPLACEDParameter = new ObjectParameter("C_SLIP_STATUS_REPLACED", typeof(string));
            }
            return base.ExecuteFunction<doGetNormalRemovalFee>("GetNormalRemovalFee", pContractCodeParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SLIP_STATUS_INSTALL_SLIP_CANCELEDParameter, c_SLIP_STATUS_REPLACEDParameter);
        }
        public ObjectResult<dtInstallation> GetInstallationDataListForView(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_INSTALL_STATUS_COMPLETED, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string contractCode, string userCode, string planCode, string slipNo, string installationMaintenanceNo, string operationOfficeCode, string salesmanEmpNo, Nullable<System.DateTime> slipIssueDateFrom, Nullable<System.DateTime> slipIssueDateTo, string contractTargetPurchaserName, string siteCode, string siteName, string siteAddress, string installationStatus, string slipStatus, string managementStatus, Nullable<bool> slipNoNullFlag, Nullable<bool> viewFlag, string installationBy, Nullable<bool> notRegisteredYetSlipFlag, Nullable<bool> notRegisteredYetManagementFlag, string subContractorName)
        {
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INSTALL_STATUS_COMPLETEDParameter;
    
            if (c_INSTALL_STATUS_COMPLETED != null)
            {
                c_INSTALL_STATUS_COMPLETEDParameter = new ObjectParameter("C_INSTALL_STATUS_COMPLETED", c_INSTALL_STATUS_COMPLETED);
            }
            else
            {
                c_INSTALL_STATUS_COMPLETEDParameter = new ObjectParameter("C_INSTALL_STATUS_COMPLETED", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_SALE_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", c_SALE_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter userCodeParameter;
    
            if (userCode != null)
            {
                userCodeParameter = new ObjectParameter("UserCode", userCode);
            }
            else
            {
                userCodeParameter = new ObjectParameter("UserCode", typeof(string));
            }
    
            ObjectParameter planCodeParameter;
    
            if (planCode != null)
            {
                planCodeParameter = new ObjectParameter("PlanCode", planCode);
            }
            else
            {
                planCodeParameter = new ObjectParameter("PlanCode", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter installationMaintenanceNoParameter;
    
            if (installationMaintenanceNo != null)
            {
                installationMaintenanceNoParameter = new ObjectParameter("InstallationMaintenanceNo", installationMaintenanceNo);
            }
            else
            {
                installationMaintenanceNoParameter = new ObjectParameter("InstallationMaintenanceNo", typeof(string));
            }
    
            ObjectParameter operationOfficeCodeParameter;
    
            if (operationOfficeCode != null)
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", operationOfficeCode);
            }
            else
            {
                operationOfficeCodeParameter = new ObjectParameter("OperationOfficeCode", typeof(string));
            }
    
            ObjectParameter salesmanEmpNoParameter;
    
            if (salesmanEmpNo != null)
            {
                salesmanEmpNoParameter = new ObjectParameter("SalesmanEmpNo", salesmanEmpNo);
            }
            else
            {
                salesmanEmpNoParameter = new ObjectParameter("SalesmanEmpNo", typeof(string));
            }
    
            ObjectParameter slipIssueDateFromParameter;
    
            if (slipIssueDateFrom.HasValue)
            {
                slipIssueDateFromParameter = new ObjectParameter("SlipIssueDateFrom", slipIssueDateFrom);
            }
            else
            {
                slipIssueDateFromParameter = new ObjectParameter("SlipIssueDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter slipIssueDateToParameter;
    
            if (slipIssueDateTo.HasValue)
            {
                slipIssueDateToParameter = new ObjectParameter("SlipIssueDateTo", slipIssueDateTo);
            }
            else
            {
                slipIssueDateToParameter = new ObjectParameter("SlipIssueDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter contractTargetPurchaserNameParameter;
    
            if (contractTargetPurchaserName != null)
            {
                contractTargetPurchaserNameParameter = new ObjectParameter("ContractTargetPurchaserName", contractTargetPurchaserName);
            }
            else
            {
                contractTargetPurchaserNameParameter = new ObjectParameter("ContractTargetPurchaserName", typeof(string));
            }
    
            ObjectParameter siteCodeParameter;
    
            if (siteCode != null)
            {
                siteCodeParameter = new ObjectParameter("SiteCode", siteCode);
            }
            else
            {
                siteCodeParameter = new ObjectParameter("SiteCode", typeof(string));
            }
    
            ObjectParameter siteNameParameter;
    
            if (siteName != null)
            {
                siteNameParameter = new ObjectParameter("SiteName", siteName);
            }
            else
            {
                siteNameParameter = new ObjectParameter("SiteName", typeof(string));
            }
    
            ObjectParameter siteAddressParameter;
    
            if (siteAddress != null)
            {
                siteAddressParameter = new ObjectParameter("SiteAddress", siteAddress);
            }
            else
            {
                siteAddressParameter = new ObjectParameter("SiteAddress", typeof(string));
            }
    
            ObjectParameter installationStatusParameter;
    
            if (installationStatus != null)
            {
                installationStatusParameter = new ObjectParameter("InstallationStatus", installationStatus);
            }
            else
            {
                installationStatusParameter = new ObjectParameter("InstallationStatus", typeof(string));
            }
    
            ObjectParameter slipStatusParameter;
    
            if (slipStatus != null)
            {
                slipStatusParameter = new ObjectParameter("SlipStatus", slipStatus);
            }
            else
            {
                slipStatusParameter = new ObjectParameter("SlipStatus", typeof(string));
            }
    
            ObjectParameter managementStatusParameter;
    
            if (managementStatus != null)
            {
                managementStatusParameter = new ObjectParameter("ManagementStatus", managementStatus);
            }
            else
            {
                managementStatusParameter = new ObjectParameter("ManagementStatus", typeof(string));
            }
    
            ObjectParameter slipNoNullFlagParameter;
    
            if (slipNoNullFlag.HasValue)
            {
                slipNoNullFlagParameter = new ObjectParameter("SlipNoNullFlag", slipNoNullFlag);
            }
            else
            {
                slipNoNullFlagParameter = new ObjectParameter("SlipNoNullFlag", typeof(bool));
            }
    
            ObjectParameter viewFlagParameter;
    
            if (viewFlag.HasValue)
            {
                viewFlagParameter = new ObjectParameter("ViewFlag", viewFlag);
            }
            else
            {
                viewFlagParameter = new ObjectParameter("ViewFlag", typeof(bool));
            }
    
            ObjectParameter installationByParameter;
    
            if (installationBy != null)
            {
                installationByParameter = new ObjectParameter("InstallationBy", installationBy);
            }
            else
            {
                installationByParameter = new ObjectParameter("InstallationBy", typeof(string));
            }
    
            ObjectParameter notRegisteredYetSlipFlagParameter;
    
            if (notRegisteredYetSlipFlag.HasValue)
            {
                notRegisteredYetSlipFlagParameter = new ObjectParameter("NotRegisteredYetSlipFlag", notRegisteredYetSlipFlag);
            }
            else
            {
                notRegisteredYetSlipFlagParameter = new ObjectParameter("NotRegisteredYetSlipFlag", typeof(bool));
            }
    
            ObjectParameter notRegisteredYetManagementFlagParameter;
    
            if (notRegisteredYetManagementFlag.HasValue)
            {
                notRegisteredYetManagementFlagParameter = new ObjectParameter("NotRegisteredYetManagementFlag", notRegisteredYetManagementFlag);
            }
            else
            {
                notRegisteredYetManagementFlagParameter = new ObjectParameter("NotRegisteredYetManagementFlag", typeof(bool));
            }
    
            ObjectParameter subContractorNameParameter;
    
            if (subContractorName != null)
            {
                subContractorNameParameter = new ObjectParameter("SubContractorName", subContractorName);
            }
            else
            {
                subContractorNameParameter = new ObjectParameter("SubContractorName", typeof(string));
            }
            return base.ExecuteFunction<dtInstallation>("GetInstallationDataListForView", c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_INSTALL_STATUS_COMPLETEDParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, contractCodeParameter, userCodeParameter, planCodeParameter, slipNoParameter, installationMaintenanceNoParameter, operationOfficeCodeParameter, salesmanEmpNoParameter, slipIssueDateFromParameter, slipIssueDateToParameter, contractTargetPurchaserNameParameter, siteCodeParameter, siteNameParameter, siteAddressParameter, installationStatusParameter, slipStatusParameter, managementStatusParameter, slipNoNullFlagParameter, viewFlagParameter, installationByParameter, notRegisteredYetSlipFlagParameter, notRegisteredYetManagementFlagParameter, subContractorNameParameter);
        }
        public ObjectResult<tbt_InstallationHistory> GetTbt_InstallationHistory(string contractProjectCode, string maintenanceNo, Nullable<int> historyNo)
        {
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
    
            ObjectParameter historyNoParameter;
    
            if (historyNo.HasValue)
            {
                historyNoParameter = new ObjectParameter("HistoryNo", historyNo);
            }
            else
            {
                historyNoParameter = new ObjectParameter("HistoryNo", typeof(int));
            }
            return base.ExecuteFunction<tbt_InstallationHistory>("GetTbt_InstallationHistory", contractProjectCodeParameter, maintenanceNoParameter, historyNoParameter);
        }
        public ObjectResult<dtInstallationPOManagementForView> GetTbt_InstallationPOManagementForView(string pMaintenanceNo)
        {
    
            ObjectParameter pMaintenanceNoParameter;
    
            if (pMaintenanceNo != null)
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", pMaintenanceNo);
            }
            else
            {
                pMaintenanceNoParameter = new ObjectParameter("pMaintenanceNo", typeof(string));
            }
            return base.ExecuteFunction<dtInstallationPOManagementForView>("GetTbt_InstallationPOManagementForView", pMaintenanceNoParameter);
        }
        public ObjectResult<dtInstallationMemoForView> GetTbt_InstallationMemoForView(string contractProjectCode, string maintenanceNo, string slipNo)
        {
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtInstallationMemoForView>("GetTbt_InstallationMemoForView", contractProjectCodeParameter, maintenanceNoParameter, slipNoParameter);
        }
        public ObjectResult<dtInstallationHistoryForView> GetTbt_InstallationHistoryForView(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_CHANGE_REASON_TYPE_CUSTOMER, string c_CHANGE_REASON_TYPE_SECOM, string c_CUSTOMER_REASON, string c_SECOM_REASON, string contractProjectCode, string maintenanceNo, string slipNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_CHANGE_REASON_TYPE_CUSTOMERParameter;
    
            if (c_CHANGE_REASON_TYPE_CUSTOMER != null)
            {
                c_CHANGE_REASON_TYPE_CUSTOMERParameter = new ObjectParameter("C_CHANGE_REASON_TYPE_CUSTOMER", c_CHANGE_REASON_TYPE_CUSTOMER);
            }
            else
            {
                c_CHANGE_REASON_TYPE_CUSTOMERParameter = new ObjectParameter("C_CHANGE_REASON_TYPE_CUSTOMER", typeof(string));
            }
    
            ObjectParameter c_CHANGE_REASON_TYPE_SECOMParameter;
    
            if (c_CHANGE_REASON_TYPE_SECOM != null)
            {
                c_CHANGE_REASON_TYPE_SECOMParameter = new ObjectParameter("C_CHANGE_REASON_TYPE_SECOM", c_CHANGE_REASON_TYPE_SECOM);
            }
            else
            {
                c_CHANGE_REASON_TYPE_SECOMParameter = new ObjectParameter("C_CHANGE_REASON_TYPE_SECOM", typeof(string));
            }
    
            ObjectParameter c_CUSTOMER_REASONParameter;
    
            if (c_CUSTOMER_REASON != null)
            {
                c_CUSTOMER_REASONParameter = new ObjectParameter("C_CUSTOMER_REASON", c_CUSTOMER_REASON);
            }
            else
            {
                c_CUSTOMER_REASONParameter = new ObjectParameter("C_CUSTOMER_REASON", typeof(string));
            }
    
            ObjectParameter c_SECOM_REASONParameter;
    
            if (c_SECOM_REASON != null)
            {
                c_SECOM_REASONParameter = new ObjectParameter("C_SECOM_REASON", c_SECOM_REASON);
            }
            else
            {
                c_SECOM_REASONParameter = new ObjectParameter("C_SECOM_REASON", typeof(string));
            }
    
            ObjectParameter contractProjectCodeParameter;
    
            if (contractProjectCode != null)
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", contractProjectCode);
            }
            else
            {
                contractProjectCodeParameter = new ObjectParameter("ContractProjectCode", typeof(string));
            }
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<dtInstallationHistoryForView>("GetTbt_InstallationHistoryForView", c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, c_CHANGE_REASON_TYPE_CUSTOMERParameter, c_CHANGE_REASON_TYPE_SECOMParameter, c_CUSTOMER_REASONParameter, c_SECOM_REASONParameter, contractProjectCodeParameter, maintenanceNoParameter, slipNoParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<dtInstallation> GetInstallationDataListForCsvFile(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_INSTALL_STATUS_COMPLETED, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, Nullable<bool> slipNoNullFlag, string c_INSTALL_STATUS_INSTALL_NOT_REGISTERED)
        {
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_INSTALL_STATUS_COMPLETEDParameter;
    
            if (c_INSTALL_STATUS_COMPLETED != null)
            {
                c_INSTALL_STATUS_COMPLETEDParameter = new ObjectParameter("C_INSTALL_STATUS_COMPLETED", c_INSTALL_STATUS_COMPLETED);
            }
            else
            {
                c_INSTALL_STATUS_COMPLETEDParameter = new ObjectParameter("C_INSTALL_STATUS_COMPLETED", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_SALE_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", c_SALE_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter slipNoNullFlagParameter;
    
            if (slipNoNullFlag.HasValue)
            {
                slipNoNullFlagParameter = new ObjectParameter("SlipNoNullFlag", slipNoNullFlag);
            }
            else
            {
                slipNoNullFlagParameter = new ObjectParameter("SlipNoNullFlag", typeof(bool));
            }
    
            ObjectParameter c_INSTALL_STATUS_INSTALL_NOT_REGISTEREDParameter;
    
            if (c_INSTALL_STATUS_INSTALL_NOT_REGISTERED != null)
            {
                c_INSTALL_STATUS_INSTALL_NOT_REGISTEREDParameter = new ObjectParameter("C_INSTALL_STATUS_INSTALL_NOT_REGISTERED", c_INSTALL_STATUS_INSTALL_NOT_REGISTERED);
            }
            else
            {
                c_INSTALL_STATUS_INSTALL_NOT_REGISTEREDParameter = new ObjectParameter("C_INSTALL_STATUS_INSTALL_NOT_REGISTERED", typeof(string));
            }
            return base.ExecuteFunction<dtInstallation>("GetInstallationDataListForCsvFile", c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_INSTALL_STATUS_COMPLETEDParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, slipNoNullFlagParameter, c_INSTALL_STATUS_INSTALL_NOT_REGISTEREDParameter);
        }
        public ObjectResult<tbt_InstallationAttachFile> DeleteTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID)
        {
    
            ObjectParameter attachFileIDParameter;
    
            if (attachFileID.HasValue)
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", attachFileID);
            }
            else
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", typeof(int));
            }
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
    
            ObjectParameter objectIDParameter;
    
            if (objectID != null)
            {
                objectIDParameter = new ObjectParameter("ObjectID", objectID);
            }
            else
            {
                objectIDParameter = new ObjectParameter("ObjectID", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationAttachFile>("DeleteTbt_InstallationAttachFile", attachFileIDParameter, maintenanceNoParameter, objectIDParameter);
        }
        public ObjectResult<tbt_InstallationAttachFile> GetTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID)
        {
    
            ObjectParameter attachFileIDParameter;
    
            if (attachFileID.HasValue)
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", attachFileID);
            }
            else
            {
                attachFileIDParameter = new ObjectParameter("AttachFileID", typeof(int));
            }
    
            ObjectParameter maintenanceNoParameter;
    
            if (maintenanceNo != null)
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", maintenanceNo);
            }
            else
            {
                maintenanceNoParameter = new ObjectParameter("MaintenanceNo", typeof(string));
            }
    
            ObjectParameter objectIDParameter;
    
            if (objectID != null)
            {
                objectIDParameter = new ObjectParameter("ObjectID", objectID);
            }
            else
            {
                objectIDParameter = new ObjectParameter("ObjectID", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationAttachFile>("GetTbt_InstallationAttachFile", attachFileIDParameter, maintenanceNoParameter, objectIDParameter);
        }
        public ObjectResult<doInstallationDetailForCompleteInstallation> GetInstallationDetailForCompleteInstallation(string pC_INST_TYPE_GENERAL, string pSlipNo)
        {
    
            ObjectParameter pC_INST_TYPE_GENERALParameter;
    
            if (pC_INST_TYPE_GENERAL != null)
            {
                pC_INST_TYPE_GENERALParameter = new ObjectParameter("pC_INST_TYPE_GENERAL", pC_INST_TYPE_GENERAL);
            }
            else
            {
                pC_INST_TYPE_GENERALParameter = new ObjectParameter("pC_INST_TYPE_GENERAL", typeof(string));
            }
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
            return base.ExecuteFunction<doInstallationDetailForCompleteInstallation>("GetInstallationDetailForCompleteInstallation", pC_INST_TYPE_GENERALParameter, pSlipNoParameter);
        }
        public ObjectResult<dtInstallationSlipDetailsForView> GetTbt_InstallationSlipDetailsForView(string slipNo, string instrumentCode)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
    
            ObjectParameter instrumentCodeParameter;
    
            if (instrumentCode != null)
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", instrumentCode);
            }
            else
            {
                instrumentCodeParameter = new ObjectParameter("InstrumentCode", typeof(string));
            }
            return base.ExecuteFunction<dtInstallationSlipDetailsForView>("GetTbt_InstallationSlipDetailsForView", slipNoParameter, instrumentCodeParameter);
        }
        public ObjectResult<tbt_InstallationSlipExpansion> InsertTbt_InstallationSlipExpansion(string xml_SlipExpansion)
        {
    
            ObjectParameter xml_SlipExpansionParameter;
    
            if (xml_SlipExpansion != null)
            {
                xml_SlipExpansionParameter = new ObjectParameter("xml_SlipExpansion", xml_SlipExpansion);
            }
            else
            {
                xml_SlipExpansionParameter = new ObjectParameter("xml_SlipExpansion", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationSlipExpansion>("InsertTbt_InstallationSlipExpansion", xml_SlipExpansionParameter);
        }
        public ObjectResult<doPrepareCompleteInstallationData> Temp_CompleteInstallation_Rental(string vcContractCode)
        {
    
            ObjectParameter vcContractCodeParameter;
    
            if (vcContractCode != null)
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", vcContractCode);
            }
            else
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", typeof(string));
            }
            return base.ExecuteFunction<doPrepareCompleteInstallationData>("Temp_CompleteInstallation_Rental", vcContractCodeParameter);
        }
        public ObjectResult<doPrepareCompleteInstallationData> Temp_CompleteInstallation_Sale(string vcContractCode)
        {
    
            ObjectParameter vcContractCodeParameter;
    
            if (vcContractCode != null)
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", vcContractCode);
            }
            else
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", typeof(string));
            }
            return base.ExecuteFunction<doPrepareCompleteInstallationData>("Temp_CompleteInstallation_Sale", vcContractCodeParameter);
        }
        public ObjectResult<doRentalInstrumentdataList> GetRentalInstrumentdataList(string vcContractCode, string vcOCC, string vcSlipNo, string vcInstrumentTyepCode, string vcRentalInstallationType, string c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE)
        {
    
            ObjectParameter vcContractCodeParameter;
    
            if (vcContractCode != null)
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", vcContractCode);
            }
            else
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", typeof(string));
            }
    
            ObjectParameter vcOCCParameter;
    
            if (vcOCC != null)
            {
                vcOCCParameter = new ObjectParameter("vcOCC", vcOCC);
            }
            else
            {
                vcOCCParameter = new ObjectParameter("vcOCC", typeof(string));
            }
    
            ObjectParameter vcSlipNoParameter;
    
            if (vcSlipNo != null)
            {
                vcSlipNoParameter = new ObjectParameter("vcSlipNo", vcSlipNo);
            }
            else
            {
                vcSlipNoParameter = new ObjectParameter("vcSlipNo", typeof(string));
            }
    
            ObjectParameter vcInstrumentTyepCodeParameter;
    
            if (vcInstrumentTyepCode != null)
            {
                vcInstrumentTyepCodeParameter = new ObjectParameter("vcInstrumentTyepCode", vcInstrumentTyepCode);
            }
            else
            {
                vcInstrumentTyepCodeParameter = new ObjectParameter("vcInstrumentTyepCode", typeof(string));
            }
    
            ObjectParameter vcRentalInstallationTypeParameter;
    
            if (vcRentalInstallationType != null)
            {
                vcRentalInstallationTypeParameter = new ObjectParameter("vcRentalInstallationType", vcRentalInstallationType);
            }
            else
            {
                vcRentalInstallationTypeParameter = new ObjectParameter("vcRentalInstallationType", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter;
    
            if (c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE != null)
            {
                c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE", c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter;
    
            if (c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE != null)
            {
                c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE", c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE", typeof(string));
            }
            return base.ExecuteFunction<doRentalInstrumentdataList>("GetRentalInstrumentdataList", vcContractCodeParameter, vcOCCParameter, vcSlipNoParameter, vcInstrumentTyepCodeParameter, vcRentalInstallationTypeParameter, c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter, c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter);
        }
        public ObjectResult<doSaleInstrumentdataList> GetSaleInstrumentdataList(string vcContractCode, string vcOCC, string vcSlipNo, string vcInstrumentTyepCode, string vcChangeType, Nullable<bool> vcInstallCompleteFlag, string vcSaleInstallationType, string vcSaleProcessManageStatus, string c_SALE_CHANGE_TYPE_ADD_SALE, string c_SALE_CHANGE_TYPE_NEW_SALE, string c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_SALE_PROCESS_STATUS_CANCEL)
        {
    
            ObjectParameter vcContractCodeParameter;
    
            if (vcContractCode != null)
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", vcContractCode);
            }
            else
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", typeof(string));
            }
    
            ObjectParameter vcOCCParameter;
    
            if (vcOCC != null)
            {
                vcOCCParameter = new ObjectParameter("vcOCC", vcOCC);
            }
            else
            {
                vcOCCParameter = new ObjectParameter("vcOCC", typeof(string));
            }
    
            ObjectParameter vcSlipNoParameter;
    
            if (vcSlipNo != null)
            {
                vcSlipNoParameter = new ObjectParameter("vcSlipNo", vcSlipNo);
            }
            else
            {
                vcSlipNoParameter = new ObjectParameter("vcSlipNo", typeof(string));
            }
    
            ObjectParameter vcInstrumentTyepCodeParameter;
    
            if (vcInstrumentTyepCode != null)
            {
                vcInstrumentTyepCodeParameter = new ObjectParameter("vcInstrumentTyepCode", vcInstrumentTyepCode);
            }
            else
            {
                vcInstrumentTyepCodeParameter = new ObjectParameter("vcInstrumentTyepCode", typeof(string));
            }
    
            ObjectParameter vcChangeTypeParameter;
    
            if (vcChangeType != null)
            {
                vcChangeTypeParameter = new ObjectParameter("vcChangeType", vcChangeType);
            }
            else
            {
                vcChangeTypeParameter = new ObjectParameter("vcChangeType", typeof(string));
            }
    
            ObjectParameter vcInstallCompleteFlagParameter;
    
            if (vcInstallCompleteFlag.HasValue)
            {
                vcInstallCompleteFlagParameter = new ObjectParameter("vcInstallCompleteFlag", vcInstallCompleteFlag);
            }
            else
            {
                vcInstallCompleteFlagParameter = new ObjectParameter("vcInstallCompleteFlag", typeof(bool));
            }
    
            ObjectParameter vcSaleInstallationTypeParameter;
    
            if (vcSaleInstallationType != null)
            {
                vcSaleInstallationTypeParameter = new ObjectParameter("vcSaleInstallationType", vcSaleInstallationType);
            }
            else
            {
                vcSaleInstallationTypeParameter = new ObjectParameter("vcSaleInstallationType", typeof(string));
            }
    
            ObjectParameter vcSaleProcessManageStatusParameter;
    
            if (vcSaleProcessManageStatus != null)
            {
                vcSaleProcessManageStatusParameter = new ObjectParameter("vcSaleProcessManageStatus", vcSaleProcessManageStatus);
            }
            else
            {
                vcSaleProcessManageStatusParameter = new ObjectParameter("vcSaleProcessManageStatus", typeof(string));
            }
    
            ObjectParameter c_SALE_CHANGE_TYPE_ADD_SALEParameter;
    
            if (c_SALE_CHANGE_TYPE_ADD_SALE != null)
            {
                c_SALE_CHANGE_TYPE_ADD_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_ADD_SALE", c_SALE_CHANGE_TYPE_ADD_SALE);
            }
            else
            {
                c_SALE_CHANGE_TYPE_ADD_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_ADD_SALE", typeof(string));
            }
    
            ObjectParameter c_SALE_CHANGE_TYPE_NEW_SALEParameter;
    
            if (c_SALE_CHANGE_TYPE_NEW_SALE != null)
            {
                c_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", c_SALE_CHANGE_TYPE_NEW_SALE);
            }
            else
            {
                c_SALE_CHANGE_TYPE_NEW_SALEParameter = new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter;
    
            if (c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE != null)
            {
                c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE", c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE);
            }
            else
            {
                c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE", typeof(string));
            }
    
            ObjectParameter c_SALE_PROCESS_STATUS_CANCELParameter;
    
            if (c_SALE_PROCESS_STATUS_CANCEL != null)
            {
                c_SALE_PROCESS_STATUS_CANCELParameter = new ObjectParameter("C_SALE_PROCESS_STATUS_CANCEL", c_SALE_PROCESS_STATUS_CANCEL);
            }
            else
            {
                c_SALE_PROCESS_STATUS_CANCELParameter = new ObjectParameter("C_SALE_PROCESS_STATUS_CANCEL", typeof(string));
            }
            return base.ExecuteFunction<doSaleInstrumentdataList>("GetSaleInstrumentdataList", vcContractCodeParameter, vcOCCParameter, vcSlipNoParameter, vcInstrumentTyepCodeParameter, vcChangeTypeParameter, vcInstallCompleteFlagParameter, vcSaleInstallationTypeParameter, vcSaleProcessManageStatusParameter, c_SALE_CHANGE_TYPE_ADD_SALEParameter, c_SALE_CHANGE_TYPE_NEW_SALEParameter, c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter, c_SALE_PROCESS_STATUS_CANCELParameter);
        }
        public ObjectResult<ContractCodeList> GetInstallationBasicContractByProject(string cProjectCode)
        {
    
            ObjectParameter cProjectCodeParameter;
    
            if (cProjectCode != null)
            {
                cProjectCodeParameter = new ObjectParameter("cProjectCode", cProjectCode);
            }
            else
            {
                cProjectCodeParameter = new ObjectParameter("cProjectCode", typeof(string));
            }
            return base.ExecuteFunction<ContractCodeList>("GetInstallationBasicContractByProject", cProjectCodeParameter);
        }
        public ObjectResult<doRentalFeeResult> GetRentalFee(string vcContractCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
    
            ObjectParameter vcContractCodeParameter;
    
            if (vcContractCode != null)
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", vcContractCode);
            }
            else
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_LOCALParameter;
    
            if (c_CURRENCY_LOCAL != null)
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL);
            }
            else
            {
                c_CURRENCY_LOCALParameter = new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
            }
    
            ObjectParameter c_CURRENCY_USParameter;
    
            if (c_CURRENCY_US != null)
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US);
            }
            else
            {
                c_CURRENCY_USParameter = new ObjectParameter("C_CURRENCY_US", typeof(string));
            }
            return base.ExecuteFunction<doRentalFeeResult>("GetRentalFee", vcContractCodeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
        public ObjectResult<doGetRemovalData> GetRemovalData(string vcContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL, string c_INSTALL_STATUS_INSTALL_CANCELLED)
        {
    
            ObjectParameter vcContractCodeParameter;
    
            if (vcContractCode != null)
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", vcContractCode);
            }
            else
            {
                vcContractCodeParameter = new ObjectParameter("vcContractCode", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter;
    
            if (c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL != null)
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL);
            }
            else
            {
                c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL", typeof(string));
            }
    
            ObjectParameter c_INSTALL_STATUS_INSTALL_CANCELLEDParameter;
    
            if (c_INSTALL_STATUS_INSTALL_CANCELLED != null)
            {
                c_INSTALL_STATUS_INSTALL_CANCELLEDParameter = new ObjectParameter("C_INSTALL_STATUS_INSTALL_CANCELLED", c_INSTALL_STATUS_INSTALL_CANCELLED);
            }
            else
            {
                c_INSTALL_STATUS_INSTALL_CANCELLEDParameter = new ObjectParameter("C_INSTALL_STATUS_INSTALL_CANCELLED", typeof(string));
            }
            return base.ExecuteFunction<doGetRemovalData>("GetRemovalData", vcContractCodeParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter, c_INSTALL_STATUS_INSTALL_CANCELLEDParameter);
        }
        public ObjectResult<tbt_InstallationEmail> DeleteTbt_InstallationEmail(string referenceID)
        {
    
            ObjectParameter referenceIDParameter;
    
            if (referenceID != null)
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", referenceID);
            }
            else
            {
                referenceIDParameter = new ObjectParameter("ReferenceID", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationEmail>("DeleteTbt_InstallationEmail", referenceIDParameter);
        }
        public ObjectResult<doAllSlipNoSeries> GetAllSlipNoSeries(string pContractProjectCode, string pOCC, string pLatestSlipNo)
        {
    
            ObjectParameter pContractProjectCodeParameter;
    
            if (pContractProjectCode != null)
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", pContractProjectCode);
            }
            else
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pLatestSlipNoParameter;
    
            if (pLatestSlipNo != null)
            {
                pLatestSlipNoParameter = new ObjectParameter("pLatestSlipNo", pLatestSlipNo);
            }
            else
            {
                pLatestSlipNoParameter = new ObjectParameter("pLatestSlipNo", typeof(string));
            }
            return base.ExecuteFunction<doAllSlipNoSeries>("GetAllSlipNoSeries", pContractProjectCodeParameter, pOCCParameter, pLatestSlipNoParameter);
        }
        public ObjectResult<string> GetInstallationSlipNoForAcceptant(string pContractProjectCode, string pOCC, string pC_SALE_INSTALL_TYPE_ADD, string pC_SALE_INSTALL_TYPE_NEW, string pC_INSTALL_STATUS_INSTALL_CANCELLED)
        {
    
            ObjectParameter pContractProjectCodeParameter;
    
            if (pContractProjectCode != null)
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", pContractProjectCode);
            }
            else
            {
                pContractProjectCodeParameter = new ObjectParameter("pContractProjectCode", typeof(string));
            }
    
            ObjectParameter pOCCParameter;
    
            if (pOCC != null)
            {
                pOCCParameter = new ObjectParameter("pOCC", pOCC);
            }
            else
            {
                pOCCParameter = new ObjectParameter("pOCC", typeof(string));
            }
    
            ObjectParameter pC_SALE_INSTALL_TYPE_ADDParameter;
    
            if (pC_SALE_INSTALL_TYPE_ADD != null)
            {
                pC_SALE_INSTALL_TYPE_ADDParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE_ADD", pC_SALE_INSTALL_TYPE_ADD);
            }
            else
            {
                pC_SALE_INSTALL_TYPE_ADDParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE_ADD", typeof(string));
            }
    
            ObjectParameter pC_SALE_INSTALL_TYPE_NEWParameter;
    
            if (pC_SALE_INSTALL_TYPE_NEW != null)
            {
                pC_SALE_INSTALL_TYPE_NEWParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE_NEW", pC_SALE_INSTALL_TYPE_NEW);
            }
            else
            {
                pC_SALE_INSTALL_TYPE_NEWParameter = new ObjectParameter("pC_SALE_INSTALL_TYPE_NEW", typeof(string));
            }
    
            ObjectParameter pC_INSTALL_STATUS_INSTALL_CANCELLEDParameter;
    
            if (pC_INSTALL_STATUS_INSTALL_CANCELLED != null)
            {
                pC_INSTALL_STATUS_INSTALL_CANCELLEDParameter = new ObjectParameter("pC_INSTALL_STATUS_INSTALL_CANCELLED", pC_INSTALL_STATUS_INSTALL_CANCELLED);
            }
            else
            {
                pC_INSTALL_STATUS_INSTALL_CANCELLEDParameter = new ObjectParameter("pC_INSTALL_STATUS_INSTALL_CANCELLED", typeof(string));
            }
            return base.ExecuteFunction<string>("GetInstallationSlipNoForAcceptant", pContractProjectCodeParameter, pOCCParameter, pC_SALE_INSTALL_TYPE_ADDParameter, pC_SALE_INSTALL_TYPE_NEWParameter, pC_INSTALL_STATUS_INSTALL_CANCELLEDParameter);
        }
        public ObjectResult<dtInsHistory> GetSlipNoHistory(string slipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<dtInsHistory>("GetSlipNoHistory", slipNoParameter);
        }
        public ObjectResult<doGenerateInstallationSlipNo> GenerateInstallationSlipNo(string officeCode, string slipID, string year, string month, Nullable<System.DateTime> createDate, string createBy)
        {
    
            ObjectParameter officeCodeParameter;
    
            if (officeCode != null)
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", officeCode);
            }
            else
            {
                officeCodeParameter = new ObjectParameter("OfficeCode", typeof(string));
            }
    
            ObjectParameter slipIDParameter;
    
            if (slipID != null)
            {
                slipIDParameter = new ObjectParameter("SlipID", slipID);
            }
            else
            {
                slipIDParameter = new ObjectParameter("SlipID", typeof(string));
            }
    
            ObjectParameter yearParameter;
    
            if (year != null)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(string));
            }
    
            ObjectParameter monthParameter;
    
            if (month != null)
            {
                monthParameter = new ObjectParameter("Month", month);
            }
            else
            {
                monthParameter = new ObjectParameter("Month", typeof(string));
            }
    
            ObjectParameter createDateParameter;
    
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("CreateDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("CreateDate", typeof(System.DateTime));
            }
    
            ObjectParameter createByParameter;
    
            if (createBy != null)
            {
                createByParameter = new ObjectParameter("CreateBy", createBy);
            }
            else
            {
                createByParameter = new ObjectParameter("CreateBy", typeof(string));
            }
            return base.ExecuteFunction<doGenerateInstallationSlipNo>("GenerateInstallationSlipNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter, createDateParameter, createByParameter);
        }
        public ObjectResult<InstallationBooking> GetInstallationBooking(string slipNo)
        {
    
            ObjectParameter slipNoParameter;
    
            if (slipNo != null)
            {
                slipNoParameter = new ObjectParameter("SlipNo", slipNo);
            }
            else
            {
                slipNoParameter = new ObjectParameter("SlipNo", typeof(string));
            }
            return base.ExecuteFunction<InstallationBooking>("GetInstallationBooking", slipNoParameter);
        }
        public ObjectResult<dtGetInstallationReport> GetInstallationReport(string subConstractor, Nullable<System.DateTime> lastPaidDateFrom, Nullable<System.DateTime> lastPaidDateTo)
        {
    
            ObjectParameter subConstractorParameter;
    
            if (subConstractor != null)
            {
                subConstractorParameter = new ObjectParameter("SubConstractor", subConstractor);
            }
            else
            {
                subConstractorParameter = new ObjectParameter("SubConstractor", typeof(string));
            }
    
            ObjectParameter lastPaidDateFromParameter;
    
            if (lastPaidDateFrom.HasValue)
            {
                lastPaidDateFromParameter = new ObjectParameter("LastPaidDateFrom", lastPaidDateFrom);
            }
            else
            {
                lastPaidDateFromParameter = new ObjectParameter("LastPaidDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter lastPaidDateToParameter;
    
            if (lastPaidDateTo.HasValue)
            {
                lastPaidDateToParameter = new ObjectParameter("LastPaidDateTo", lastPaidDateTo);
            }
            else
            {
                lastPaidDateToParameter = new ObjectParameter("LastPaidDateTo", typeof(System.DateTime));
            }
            return base.ExecuteFunction<dtGetInstallationReport>("GetInstallationReport", subConstractorParameter, lastPaidDateFromParameter, lastPaidDateToParameter);
        }
        public ObjectResult<dtGetInstallationReportMonthly> GetInstallationReportMonthly(string reportType, Nullable<System.DateTime> receiveDateFrom, Nullable<System.DateTime> receiveDateTo, Nullable<System.DateTime> completeDateFrom, Nullable<System.DateTime> completeDateTo, Nullable<System.DateTime> expectedStartDateFrom, Nullable<System.DateTime> expectedStartDateTo, Nullable<System.DateTime> expectedCompleteDateFrom, Nullable<System.DateTime> expectedCompleteDateTo, string contractCode, string siteName, string subContractorCode, string productName, string installationStatus, string buildingType)
        {
    
            ObjectParameter reportTypeParameter;
    
            if (reportType != null)
            {
                reportTypeParameter = new ObjectParameter("ReportType", reportType);
            }
            else
            {
                reportTypeParameter = new ObjectParameter("ReportType", typeof(string));
            }
    
            ObjectParameter receiveDateFromParameter;
    
            if (receiveDateFrom.HasValue)
            {
                receiveDateFromParameter = new ObjectParameter("ReceiveDateFrom", receiveDateFrom);
            }
            else
            {
                receiveDateFromParameter = new ObjectParameter("ReceiveDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter receiveDateToParameter;
    
            if (receiveDateTo.HasValue)
            {
                receiveDateToParameter = new ObjectParameter("ReceiveDateTo", receiveDateTo);
            }
            else
            {
                receiveDateToParameter = new ObjectParameter("ReceiveDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter completeDateFromParameter;
    
            if (completeDateFrom.HasValue)
            {
                completeDateFromParameter = new ObjectParameter("CompleteDateFrom", completeDateFrom);
            }
            else
            {
                completeDateFromParameter = new ObjectParameter("CompleteDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter completeDateToParameter;
    
            if (completeDateTo.HasValue)
            {
                completeDateToParameter = new ObjectParameter("CompleteDateTo", completeDateTo);
            }
            else
            {
                completeDateToParameter = new ObjectParameter("CompleteDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter expectedStartDateFromParameter;
    
            if (expectedStartDateFrom.HasValue)
            {
                expectedStartDateFromParameter = new ObjectParameter("ExpectedStartDateFrom", expectedStartDateFrom);
            }
            else
            {
                expectedStartDateFromParameter = new ObjectParameter("ExpectedStartDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter expectedStartDateToParameter;
    
            if (expectedStartDateTo.HasValue)
            {
                expectedStartDateToParameter = new ObjectParameter("ExpectedStartDateTo", expectedStartDateTo);
            }
            else
            {
                expectedStartDateToParameter = new ObjectParameter("ExpectedStartDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter expectedCompleteDateFromParameter;
    
            if (expectedCompleteDateFrom.HasValue)
            {
                expectedCompleteDateFromParameter = new ObjectParameter("ExpectedCompleteDateFrom", expectedCompleteDateFrom);
            }
            else
            {
                expectedCompleteDateFromParameter = new ObjectParameter("ExpectedCompleteDateFrom", typeof(System.DateTime));
            }
    
            ObjectParameter expectedCompleteDateToParameter;
    
            if (expectedCompleteDateTo.HasValue)
            {
                expectedCompleteDateToParameter = new ObjectParameter("ExpectedCompleteDateTo", expectedCompleteDateTo);
            }
            else
            {
                expectedCompleteDateToParameter = new ObjectParameter("ExpectedCompleteDateTo", typeof(System.DateTime));
            }
    
            ObjectParameter contractCodeParameter;
    
            if (contractCode != null)
            {
                contractCodeParameter = new ObjectParameter("ContractCode", contractCode);
            }
            else
            {
                contractCodeParameter = new ObjectParameter("ContractCode", typeof(string));
            }
    
            ObjectParameter siteNameParameter;
    
            if (siteName != null)
            {
                siteNameParameter = new ObjectParameter("SiteName", siteName);
            }
            else
            {
                siteNameParameter = new ObjectParameter("SiteName", typeof(string));
            }
    
            ObjectParameter subContractorCodeParameter;
    
            if (subContractorCode != null)
            {
                subContractorCodeParameter = new ObjectParameter("SubContractorCode", subContractorCode);
            }
            else
            {
                subContractorCodeParameter = new ObjectParameter("SubContractorCode", typeof(string));
            }
    
            ObjectParameter productNameParameter;
    
            if (productName != null)
            {
                productNameParameter = new ObjectParameter("ProductName", productName);
            }
            else
            {
                productNameParameter = new ObjectParameter("ProductName", typeof(string));
            }
    
            ObjectParameter installationStatusParameter;
    
            if (installationStatus != null)
            {
                installationStatusParameter = new ObjectParameter("InstallationStatus", installationStatus);
            }
            else
            {
                installationStatusParameter = new ObjectParameter("InstallationStatus", typeof(string));
            }
    
            ObjectParameter buildingTypeParameter;
    
            if (buildingType != null)
            {
                buildingTypeParameter = new ObjectParameter("BuildingType", buildingType);
            }
            else
            {
                buildingTypeParameter = new ObjectParameter("BuildingType", typeof(string));
            }
            return base.ExecuteFunction<dtGetInstallationReportMonthly>("GetInstallationReportMonthly", reportTypeParameter, receiveDateFromParameter, receiveDateToParameter, completeDateFromParameter, completeDateToParameter, expectedStartDateFromParameter, expectedStartDateToParameter, expectedCompleteDateFromParameter, expectedCompleteDateToParameter, contractCodeParameter, siteNameParameter, subContractorCodeParameter, productNameParameter, installationStatusParameter, buildingTypeParameter);
        }
        public ObjectResult<tbt_InstallationHistory> UpdateTbt_InstallationHistory(string xmlTbt_InstallationHistory)
        {
    
            ObjectParameter xmlTbt_InstallationHistoryParameter;
    
            if (xmlTbt_InstallationHistory != null)
            {
                xmlTbt_InstallationHistoryParameter = new ObjectParameter("xmlTbt_InstallationHistory", xmlTbt_InstallationHistory);
            }
            else
            {
                xmlTbt_InstallationHistoryParameter = new ObjectParameter("xmlTbt_InstallationHistory", typeof(string));
            }
            return base.ExecuteFunction<tbt_InstallationHistory>("UpdateTbt_InstallationHistory", xmlTbt_InstallationHistoryParameter);
        }
        public ObjectResult<RptSignatureDo> GetRptSignature(string c_RPT_CODE, string c_RPT_Position)
        {
    
            ObjectParameter c_RPT_CODEParameter;
    
            if (c_RPT_CODE != null)
            {
                c_RPT_CODEParameter = new ObjectParameter("C_RPT_CODE", c_RPT_CODE);
            }
            else
            {
                c_RPT_CODEParameter = new ObjectParameter("C_RPT_CODE", typeof(string));
            }
    
            ObjectParameter c_RPT_PositionParameter;
    
            if (c_RPT_Position != null)
            {
                c_RPT_PositionParameter = new ObjectParameter("C_RPT_Position", c_RPT_Position);
            }
            else
            {
                c_RPT_PositionParameter = new ObjectParameter("C_RPT_Position", typeof(string));
            }
            return base.ExecuteFunction<RptSignatureDo>("GetRptSignature", c_RPT_CODEParameter, c_RPT_PositionParameter);
        }
        public ObjectResult<RptISR110InstallCompleteConfirmDo> GetRptISR110InstallCompleteConfirmData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
        {
    
            ObjectParameter pSlipNoParameter;
    
            if (pSlipNo != null)
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", pSlipNo);
            }
            else
            {
                pSlipNoParameter = new ObjectParameter("pSlipNo", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_SALEParameter;
    
            if (c_SERVICE_TYPE_SALE != null)
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE);
            }
            else
            {
                c_SERVICE_TYPE_SALEParameter = new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
            }
    
            ObjectParameter c_SERVICE_TYPE_RENTALParameter;
    
            if (c_SERVICE_TYPE_RENTAL != null)
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL);
            }
            else
            {
                c_SERVICE_TYPE_RENTALParameter = new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
            }
    
            ObjectParameter c_SALE_INSTALL_TYPEParameter;
    
            if (c_SALE_INSTALL_TYPE != null)
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE);
            }
            else
            {
                c_SALE_INSTALL_TYPEParameter = new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
            }
    
            ObjectParameter c_RENTAL_INSTALL_TYPEParameter;
    
            if (c_RENTAL_INSTALL_TYPE != null)
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE);
            }
            else
            {
                c_RENTAL_INSTALL_TYPEParameter = new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
            }
            return base.ExecuteFunction<RptISR110InstallCompleteConfirmDo>("GetRptISR110InstallCompleteConfirmData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter);
        }

        #endregion

    }
}
