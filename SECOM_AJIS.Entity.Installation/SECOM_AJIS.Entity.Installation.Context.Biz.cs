//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace SECOM_AJIS.DataEntity.Installation
{
    public partial class BizISDataEntities
    {
        #region Methods
    		public virtual List<InstallationMARunningNo> GetTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbs_InstallationMARunningNo(officeCode, prefix, year).ToList();
    		}
    		public virtual int UpdateTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year, Nullable<int> runningNo, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbs_InstallationMARunningNo(officeCode, prefix, year, runningNo, updateDate, updateBy);
    		}
    		public virtual int InsertTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> runningNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbs_InstallationMARunningNo(officeCode, prefix, year, createDate, createBy, updateDate, updateBy, runningNo);
    		}
    		public virtual List<InstallationSlipRunningNo_Result> GetTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbs_InstallationSlipRunningNo(officeCode, slipID, year, month).ToList();
    		}
    		public virtual int UpdateTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month, Nullable<int> runningNo, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbs_InstallationSlipRunningNo(officeCode, slipID, year, month, runningNo, updateDate, updateBy);
    		}
    		public virtual int InsertTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month, Nullable<int> runningNo, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbs_InstallationSlipRunningNo(officeCode, slipID, year, month, runningNo, createDate, createBy, updateDate, updateBy);
    		}
    		public virtual List<CheckInstallationRegistered_Result> CheckInstallationRegistered(string strContractCode, string c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.CheckInstallationRegistered(strContractCode, c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED).ToList();
    		}
    		public virtual List<tbt_InstallationBasic> InsertTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalContractFeeUsd, string pNormalContractFeeCurrencyType, Nullable<decimal> pNormalInstallFeeUsd, string pNormalInstallFeeCurrencyType, Nullable<decimal> pBillingInstallFeeUsd, string pBillingInstallFeeCurrencyType, Nullable<decimal> pNormalSaleProductPriceUsd, string pNormalSaleProductPriceCurrencyType)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationBasic(pContractProjectCode, pOCC, pServiceTypeCode, pInstallationStatus, pInstallationType, pPlanCode, pSlipNo, pMaintenanceNo, pOperationOfficeCode, pSecurityTypeCode, pChangeReasonTypeCode, pNormalInstallFee, pBillingInstallFee, pInstallFeeBillingType, pNormalSaleProductPrice, pBillingSalePrice, pInstallationSlipProcessingDate, pInstallationCompleteDate, pInstallationCompleteProcessingDate, pInstallationBy, pSalesmanEmpNo1, pSalesmanEmpNo2, pApproveNo1, pApproveNo2, pInstallationStartDate, pInstallationFinishDate, pNormalContractFee, pBillingOCC, pCreateDate, pCreateBy, pUpdateDate, pUpdateBy, pNormalContractFeeUsd, pNormalContractFeeCurrencyType, pNormalInstallFeeUsd, pNormalInstallFeeCurrencyType, pBillingInstallFeeUsd, pBillingInstallFeeCurrencyType, pNormalSaleProductPriceUsd, pNormalSaleProductPriceCurrencyType).ToList();
    		}
    		public virtual List<tbt_InstallationBasic> GetTbt_InstallationBasic(string pContractProjectCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationBasic(pContractProjectCode).ToList();
    		}
    		public virtual List<CheckAllRemoval_Result> CheckAllRemoval(string strContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_INSTALL_STATUS_COMPLETED)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.CheckAllRemoval(strContractCode, c_RENTAL_INSTALL_TYPE_REMOVE_ALL, c_SALE_INSTALL_TYPE_REMOVE_ALL, c_INSTALL_STATUS_COMPLETED).ToList();
    		}
    		public virtual List<tbt_InstallationManagement> InsertTbt_InstallationManagement(string maintenanceNo, string contractProjectCode, string managementStatus, Nullable<System.DateTime> proposeInstallStartDate, Nullable<System.DateTime> proposeInstallCompleteDate, string customerStaffBelonging, string customerStaffName, string customerStaffPhoneNo, Nullable<System.DateTime> newPhoneLineOpenDate, string newConnectionPhoneNo, string newPhoneLineOwnerTypeCode, string iEStaffEmpNo1, string iEStaffEmpNo2, Nullable<int> iEManPower, Nullable<decimal> materialFee, Nullable<decimal> materialFeeUsd, string materialFeeCurrencyType, string requestMemo, string pOMemo, string changeReasonCode, string changeReasonOther, string changeRequestorCode, string changeRequestorOther, Nullable<bool> newBldMgmtFlag, Nullable<decimal> newBldMgmtCost, Nullable<decimal> newBldMgmtCostUsd, string newBldMgmtCostCurrencyType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string approveNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationManagement(maintenanceNo, contractProjectCode, managementStatus, proposeInstallStartDate, proposeInstallCompleteDate, customerStaffBelonging, customerStaffName, customerStaffPhoneNo, newPhoneLineOpenDate, newConnectionPhoneNo, newPhoneLineOwnerTypeCode, iEStaffEmpNo1, iEStaffEmpNo2, iEManPower, materialFee, materialFeeUsd, materialFeeCurrencyType, requestMemo, pOMemo, changeReasonCode, changeReasonOther, changeRequestorCode, changeRequestorOther, newBldMgmtFlag, newBldMgmtCost, newBldMgmtCostUsd, newBldMgmtCostCurrencyType, createDate, createBy, updateDate, updateBy, approveNo).ToList();
    		}
    		public virtual List<tbt_InstallationBasic> UpdateTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalInstallFeeUsd, Nullable<decimal> pBillingInstallFeeUsd, Nullable<decimal> pNormalSaleProductPriceUsd, Nullable<decimal> pNormalContractFeeUsd, string pNormalInstallFeeCurrencyType, string pBillingInstallFeeCurrencyType, string pNormalSaleProductPriceCurrencyType, string pNormalContractFeeCurrencyType)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbt_InstallationBasic(pContractProjectCode, pOCC, pServiceTypeCode, pInstallationStatus, pInstallationType, pPlanCode, pSlipNo, pMaintenanceNo, pOperationOfficeCode, pSecurityTypeCode, pChangeReasonTypeCode, pNormalInstallFee, pBillingInstallFee, pInstallFeeBillingType, pNormalSaleProductPrice, pBillingSalePrice, pInstallationSlipProcessingDate, pInstallationCompleteDate, pInstallationCompleteProcessingDate, pInstallationBy, pSalesmanEmpNo1, pSalesmanEmpNo2, pApproveNo1, pApproveNo2, pInstallationStartDate, pInstallationFinishDate, pNormalContractFee, pBillingOCC, pCreateDate, pCreateBy, pUpdateDate, pUpdateBy, pNormalInstallFeeUsd, pBillingInstallFeeUsd, pNormalSaleProductPriceUsd, pNormalContractFeeUsd, pNormalInstallFeeCurrencyType, pBillingInstallFeeCurrencyType, pNormalSaleProductPriceCurrencyType, pNormalContractFeeCurrencyType).ToList();
    		}
    		public virtual List<CheckCancelContractBeforeStartService_Result> CheckCancelContractBeforeStartService(string strContractCode, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_FIXED_CANCEL)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.CheckCancelContractBeforeStartService(strContractCode, c_CONTRACT_STATUS_END, c_CONTRACT_STATUS_CANCEL, c_CONTRACT_STATUS_FIXED_CANCEL).ToList();
    		}
    		public virtual List<tbt_InstallationMemo> InsertTbt_InstallationMemo(Nullable<int> memoID, string contractProjectCode, string referenceID, string objectID, string memo, string officeCode, string departmentCode, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationMemo(memoID, contractProjectCode, referenceID, objectID, memo, officeCode, departmentCode, createDate, createBy, updateDate, updateBy).ToList();
    		}
    		public virtual List<tbt_InstallationEmail> InsertTbt_InstallationEmail(Nullable<int> emailID, string referenceID, string emailNoticeTarget, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationEmail(emailID, referenceID, emailNoticeTarget, createDate, createBy, updateDate, updateBy).ToList();
    		}
    		public virtual List<tbt_InstallationManagement> GetTbt_InstallationManagement(string pMaintenanceNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationManagement(pMaintenanceNo).ToList();
    		}
    		public virtual List<tbt_InstallationPOManagement> GetTbt_InstallationPOManagement(string pMaintenanceNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationPOManagement(pMaintenanceNo).ToList();
    		}
    		public virtual List<tbt_InstallationEmail> GetTbt_InstallationEmail(string pMaintenanceNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationEmail(pMaintenanceNo).ToList();
    		}
    		public virtual List<tbt_InstallationPOManagement> InsertTbt_InstallationPOManagement(string xml_POManagement)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationPOManagement(xml_POManagement).ToList();
    		}
    		public virtual List<tbt_InstallationPOManagement> UpdateTbt_InstallationPOManagement(string xml_POManagement)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbt_InstallationPOManagement(xml_POManagement).ToList();
    		}
    		public virtual List<tbt_InstallationManagement> UpdateTbt_InstallationManagement(string pMaintenanceNo, string pContractProjectCode, string pManagementStatus, Nullable<System.DateTime> pProposeInstallStartDate, Nullable<System.DateTime> pProposeInstallCompleteDate, string pCustomerStaffBelonging, string pCustomerStaffName, string pCustomerStaffPhoneNo, Nullable<System.DateTime> pNewPhoneLineOpenDate, string pNewConnectionPhoneNo, string pNewPhoneLineOwnerTypeCode, string pIEStaffEmpNo1, string pIEStaffEmpNo2, Nullable<int> pIEManPower, Nullable<decimal> pMaterialFee, Nullable<decimal> pMaterialFeeUsd, string pMaterialFeeCurrencyType, string pRequestMemo, string pPOMemo, string pChangeReasonCode, string pChangeReasonOther, string pChangeRequestorCode, string pChangeRequestorOther, Nullable<bool> pNewBldMgmtFlag, Nullable<decimal> pNewBldMgmtCost, Nullable<decimal> pNewBldMgmtCostUsd, string pNewBldMgmtCostCurrencyType, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, string approveNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbt_InstallationManagement(pMaintenanceNo, pContractProjectCode, pManagementStatus, pProposeInstallStartDate, pProposeInstallCompleteDate, pCustomerStaffBelonging, pCustomerStaffName, pCustomerStaffPhoneNo, pNewPhoneLineOpenDate, pNewConnectionPhoneNo, pNewPhoneLineOwnerTypeCode, pIEStaffEmpNo1, pIEStaffEmpNo2, pIEManPower, pMaterialFee, pMaterialFeeUsd, pMaterialFeeCurrencyType, pRequestMemo, pPOMemo, pChangeReasonCode, pChangeReasonOther, pChangeRequestorCode, pChangeRequestorOther, pNewBldMgmtFlag, pNewBldMgmtCost, pNewBldMgmtCostUsd, pNewBldMgmtCostCurrencyType, pCreateDate, pCreateBy, pUpdateDate, pUpdateBy, approveNo).ToList();
    		}
    		public virtual List<tbt_InstallationSlip> GetTbt_InstallationSlip(string pSlipNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationSlip(pSlipNo).ToList();
    		}
    		public virtual List<tbt_InstallationInstrumentDetails> GetTbt_InstallationInstrumentDetails(string pContractCode, string pInstrumentCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationInstrumentDetails(pContractCode, pInstrumentCode).ToList();
    		}
    		public virtual List<tbt_InstallationSlip> InsertTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationSlip(slipNo, serviceTypeCode, slipStatus, changeReasonCode, installationType, planCode, causeReason, normalContractFee, normalContractFeeUsd, normalContractFeeCurrencyType, normalInstallFee, normalInstallFeeUsd, normalInstallFeeCurrencyType, installFeeBillingType, billingInstallFee, billingInstallFeeUsd, billingInstallFeeCurencyType, orderInstallFee, orderInstallFeeUsd, orderInstallFeeCurrencyType, billingOCC, previousSlipNo, previousSlipStatus, contractCode, slipIssueDate, slipIssueOfficeCode, stockOutDate, stockOutOfficeCode, returnReceiveDate, returnReceiveOfficeCode, approveNo1, approveNo2, changeContents, expectedInstrumentArrivalDate, stockOutTypeCode, slipType, createDate, createBy, updateDate, updateBy, additionalStockOutOfficeCode, slipIssueFlag, unremoveApproveNo).ToList();
    		}
    		public virtual List<tbt_InstallationSlip> UpdateTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurrencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbt_InstallationSlip(slipNo, serviceTypeCode, slipStatus, changeReasonCode, installationType, planCode, causeReason, normalContractFee, normalContractFeeUsd, normalContractFeeCurrencyType, normalInstallFee, normalInstallFeeUsd, normalInstallFeeCurrencyType, installFeeBillingType, billingInstallFee, billingInstallFeeUsd, billingInstallFeeCurrencyType, orderInstallFee, orderInstallFeeUsd, orderInstallFeeCurrencyType, billingOCC, previousSlipNo, previousSlipStatus, contractCode, slipIssueDate, slipIssueOfficeCode, stockOutDate, stockOutOfficeCode, returnReceiveDate, returnReceiveOfficeCode, approveNo1, approveNo2, changeContents, expectedInstrumentArrivalDate, stockOutTypeCode, slipType, createDate, createBy, updateDate, updateBy, additionalStockOutOfficeCode, slipIssueFlag, unremoveApproveNo).ToList();
    		}
    		public virtual List<tbt_InstallationSlipDetails> InsertTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationSlipDetails(slipNo, instrumentCode, instrumentTypeCode, contractInstalledQty, currentStockOutQty, totalStockOutQty, addInstalledQty, returnQty, addRemovedQty, notInstalledQty, moveQty, mAExchangeQty, unremovableQty, returnRemoveQty, instrumentPrice, createDate, createBy, updateDate, updateBy, partialStockOutQty).ToList();
    		}
    		public virtual List<tbt_InstallationSlipDetails> GetTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationSlipDetails(slipNo, instrumentCode, instrumentTypeCode).ToList();
    		}
    		public virtual List<tbt_InstallationSlipDetails> UpdateTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbt_InstallationSlipDetails(slipNo, instrumentCode, instrumentTypeCode, contractInstalledQty, currentStockOutQty, totalStockOutQty, addInstalledQty, returnQty, addRemovedQty, notInstalledQty, moveQty, mAExchangeQty, unremovableQty, returnRemoveQty, instrumentPrice, createDate, createBy, updateDate, updateBy, partialStockOutQty).ToList();
    		}
    		public virtual List<tbt_InstallationBasic> DeleteTbt_InstallationBasic(string contractProjectCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.DeleteTbt_InstallationBasic(contractProjectCode).ToList();
    		}
    		public virtual List<tbt_InstallationInstrumentDetails> DeleteTbt_InstallationInstrumentDetail(string contractCode, string instrumentCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.DeleteTbt_InstallationInstrumentDetail(contractCode, instrumentCode).ToList();
    		}
    		public virtual List<tbt_InstallationHistory> InsertTbt_InstallationHistory(string contractProjectCode, string oCC, string serviceTypeCode, string installationStatus, string installationType, string planCode, string slipNo, string maintenanceNo, string operationOfficeCode, string securityTypeCode, string changeReasonTypeCode, Nullable<decimal> normalInstallFee, Nullable<decimal> billingInstallFee, string installFeeBillingType, Nullable<decimal> normalSaleProductPrice, Nullable<decimal> billingSalePrice, Nullable<System.DateTime> installationSlipProcessingDate, Nullable<System.DateTime> installationCompleteDate, Nullable<System.DateTime> installationCompleteProcessingDate, string installationBy, string salesmanEmpNo1, string salesmanEmpNo2, string approveNo1, string approveNo2, Nullable<System.DateTime> installationStartDate, Nullable<System.DateTime> installationFinishDate, Nullable<decimal> normalContractFee, string billingOCC, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationHistory(contractProjectCode, oCC, serviceTypeCode, installationStatus, installationType, planCode, slipNo, maintenanceNo, operationOfficeCode, securityTypeCode, changeReasonTypeCode, normalInstallFee, billingInstallFee, installFeeBillingType, normalSaleProductPrice, billingSalePrice, installationSlipProcessingDate, installationCompleteDate, installationCompleteProcessingDate, installationBy, salesmanEmpNo1, salesmanEmpNo2, approveNo1, approveNo2, installationStartDate, installationFinishDate, normalContractFee, billingOCC, createDate, createBy, updateDate, updateBy).ToList();
    		}
    		public virtual List<tbt_InstallationHistoryDetails> InsertTbt_InstallationHistoryDetail(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationHistoryDetail(contractCode, instrumentCode, instrumentTypeCode, contractInstalledQty, contractRemovedQty, contractMovedQty, createDate, createBy, updateDate, updateBy).ToList();
    		}
    		public virtual List<tbt_InstallationMemo> DeleteTbt_InstallationMemo(string contractProjectCode, string referenceID, string objectID)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.DeleteTbt_InstallationMemo(contractProjectCode, referenceID, objectID).ToList();
    		}
    		public virtual List<tbt_InstallationPOManagement> DeleteTbt_InstallationPOManagement(string maintenanceNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.DeleteTbt_InstallationPOManagement(maintenanceNo).ToList();
    		}
    		public virtual List<doSearchInstallManagementResult> SearchInstallationManagementList(string c_FLAG_ON, string c_INSTALL_MANAGE_STATUS_CANCELED, string contractCode, string projectCode, string installationType, string iEStaffCode, string subContractorCode, string subcontractorGroupName, Nullable<System.DateTime> proposedInstallationCompleteDateFrom, Nullable<System.DateTime> proposedInstallationCompleteDateTo, Nullable<System.DateTime> installationCompleteDateFrom, Nullable<System.DateTime> installationCompleteDateTo, Nullable<System.DateTime> installationStartDateFrom, Nullable<System.DateTime> installationStartDateTo, Nullable<System.DateTime> installationFinishDateFrom, Nullable<System.DateTime> installationFinishDateTo, string siteName, string siteAddress, string operationOfficeCode, string installationManagementStatus, Nullable<System.DateTime> installationRequestDateFrom, Nullable<System.DateTime> installationRequestDateTo, Nullable<System.DateTime> expectedInstallationStartDateFrom, Nullable<System.DateTime> expectedInstallationStartDateTo, Nullable<System.DateTime> expectedInstallationFinishDateFrom, Nullable<System.DateTime> expectedInstallationFinishDateTo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.SearchInstallationManagementList(c_FLAG_ON, c_INSTALL_MANAGE_STATUS_CANCELED, contractCode, projectCode, installationType, iEStaffCode, subContractorCode, subcontractorGroupName, proposedInstallationCompleteDateFrom, proposedInstallationCompleteDateTo, installationCompleteDateFrom, installationCompleteDateTo, installationStartDateFrom, installationStartDateTo, installationFinishDateFrom, installationFinishDateTo, siteName, siteAddress, operationOfficeCode, installationManagementStatus, installationRequestDateFrom, installationRequestDateTo, expectedInstallationStartDateFrom, expectedInstallationStartDateTo, expectedInstallationFinishDateFrom, expectedInstallationFinishDateTo).ToList();
    		}
    		public virtual List<dtRequestApproveInstallation> GetEmailForApprove()
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetEmailForApprove().ToList();
    		}
    		public virtual List<RPTNewRentalSlipDo> GetRptNewRetalSlipData(string pSlipNo, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptNewRetalSlipData(pSlipNo, c_SCREEN_ID_INSTALL_SLIP, c_STOCK_OUT_TYPE).ToList();
    		}
    		public virtual List<CheckCancelInstallationManagement_Result> CheckCancelInstallationManagement(string strInstallationMaintenanceNo, string c_INSTALL_MANAGE_STATUS_CANCELED)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.CheckCancelInstallationManagement(strInstallationMaintenanceNo, c_INSTALL_MANAGE_STATUS_CANCELED).ToList();
    		}
    		public virtual List<tbt_InstallationMemo> GetTbt_InstallationMemo(string pMaintenanceNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationMemo(pMaintenanceNo).ToList();
    		}
    		public virtual List<RPTChangeSlipDo> GetRptChangeSlipData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptChangeSlipData(pSlipNo, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE, c_SCREEN_ID_INSTALL_SLIP, c_STOCK_OUT_TYPE).ToList();
    		}
    		public virtual List<RPTRemoveSlipDo> GetRptRemoveSlipData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptRemoveSlipData(pSlipNo, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SCREEN_ID_INSTALL_SLIP, c_STOCK_OUT_TYPE).ToList();
    		}
    		public virtual List<tbt_InstallationInstrumentDetails> InsertTbt_InstallationInstrumentDetails(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationInstrumentDetails(contractCode, instrumentCode, instrumentTypeCode, contractInstalledQty, contractRemovedQty, contractMovedQty, createDate, createBy, updateDate, updateBy).ToList();
    		}
    		public virtual List<RPTPOSubPriceDo> GetRptPOSubPriceData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptPOSubPriceData(cMaintenanceNo, cSubcontractorCode, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SERVICE_TYPE_PROJECT, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE).ToList();
    		}
    		public virtual List<RPTNewSaleSlipDo> GetRptNewSaleSlipData(string pSlipNo, string c_SALE_INSTALL_TYPE, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptNewSaleSlipData(pSlipNo, c_SALE_INSTALL_TYPE, c_SCREEN_ID_INSTALL_SLIP, c_STOCK_OUT_TYPE).ToList();
    		}
    		public virtual List<RPTInstallRequestDo> GetRptInstallationRequestData(string cMaintenanceNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_NEW_BLD_MGMT_FLAG, string c_BUILDING_TYPE, string c_PHONE_LINE_OWNER_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptInstallationRequestData(cMaintenanceNo, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SERVICE_TYPE_PROJECT, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE, c_NEW_BLD_MGMT_FLAG, c_BUILDING_TYPE, c_PHONE_LINE_OWNER_TYPE).ToList();
    		}
    		public virtual List<RPTInstallSpecCompleteDo> GetRptInstallSpecCompleteData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptInstallSpecCompleteData(cMaintenanceNo, cSubcontractorCode, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SERVICE_TYPE_PROJECT).ToList();
    		}
    		public virtual List<RPTIECheckSheetDo> GetRptIECheckSheetData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptIECheckSheetData(cMaintenanceNo, cSubcontractorCode, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SERVICE_TYPE_PROJECT).ToList();
    		}
    		public virtual List<RPTInstallCompleteDo> GetRptInstallCompleteConfirmData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptInstallCompleteConfirmData(pSlipNo, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE).ToList();
    		}
    		public virtual List<RPTAcceptInspecDo> GetRptAcceptInspecNocticeData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptAcceptInspecNocticeData(cMaintenanceNo, cSubcontractorCode, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SERVICE_TYPE_PROJECT).ToList();
    		}
    		public virtual List<RPTDeliveryConfirmDo> GetRptDeliveryConfirmData(string cSlipNo, string c_CONFIG_INSTALL_WARRANTY_COND)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptDeliveryConfirmData(cSlipNo, c_CONFIG_INSTALL_WARRANTY_COND).ToList();
    		}
    		public virtual List<doCheckInstallationDataToOpenScreen> CheckInstallationDataToOpenScreen(string strCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.CheckInstallationDataToOpenScreen(strCode).ToList();
    		}
    		public virtual List<tbt_InstallationAttachFile> InsertTbt_InstallationAttachFile(string xml_POManagement)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationAttachFile(xml_POManagement).ToList();
    		}
    		public virtual List<doGetNormalRemovalFee> GetNormalRemovalFee(string pContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SLIP_STATUS_INSTALL_SLIP_CANCELED, string c_SLIP_STATUS_REPLACED)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetNormalRemovalFee(pContractCode, c_RENTAL_INSTALL_TYPE_REMOVE_ALL, c_SLIP_STATUS_INSTALL_SLIP_CANCELED, c_SLIP_STATUS_REPLACED).ToList();
    		}
    		public virtual List<dtInstallation> GetInstallationDataListForView(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_INSTALL_STATUS_COMPLETED, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string contractCode, string userCode, string planCode, string slipNo, string installationMaintenanceNo, string operationOfficeCode, string salesmanEmpNo, Nullable<System.DateTime> slipIssueDateFrom, Nullable<System.DateTime> slipIssueDateTo, string contractTargetPurchaserName, string siteCode, string siteName, string siteAddress, string installationStatus, string slipStatus, string managementStatus, Nullable<bool> slipNoNullFlag, Nullable<bool> viewFlag, string installationBy, Nullable<bool> notRegisteredYetSlipFlag, Nullable<bool> notRegisteredYetManagementFlag, string subContractorName)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationDataListForView(c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_INSTALL_STATUS_COMPLETED, c_RENTAL_INSTALL_TYPE_REMOVE_ALL, c_SALE_INSTALL_TYPE_REMOVE_ALL, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE, contractCode, userCode, planCode, slipNo, installationMaintenanceNo, operationOfficeCode, salesmanEmpNo, slipIssueDateFrom, slipIssueDateTo, contractTargetPurchaserName, siteCode, siteName, siteAddress, installationStatus, slipStatus, managementStatus, slipNoNullFlag, viewFlag, installationBy, notRegisteredYetSlipFlag, notRegisteredYetManagementFlag, subContractorName).ToList();
    		}
    		public virtual List<tbt_InstallationHistory> GetTbt_InstallationHistory(string contractProjectCode, string maintenanceNo, Nullable<int> historyNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationHistory(contractProjectCode, maintenanceNo, historyNo).ToList();
    		}
    		public virtual List<dtInstallationPOManagementForView> GetTbt_InstallationPOManagementForView(string pMaintenanceNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationPOManagementForView(pMaintenanceNo).ToList();
    		}
    		public virtual List<dtInstallationMemoForView> GetTbt_InstallationMemoForView(string contractProjectCode, string maintenanceNo, string slipNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationMemoForView(contractProjectCode, maintenanceNo, slipNo).ToList();
    		}
    		public virtual List<dtInstallationHistoryForView> GetTbt_InstallationHistoryForView(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_CHANGE_REASON_TYPE_CUSTOMER, string c_CHANGE_REASON_TYPE_SECOM, string c_CUSTOMER_REASON, string c_SECOM_REASON, string contractProjectCode, string maintenanceNo, string slipNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationHistoryForView(c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE, c_CHANGE_REASON_TYPE_CUSTOMER, c_CHANGE_REASON_TYPE_SECOM, c_CUSTOMER_REASON, c_SECOM_REASON, contractProjectCode, maintenanceNo, slipNo, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<dtInstallation> GetInstallationDataListForCsvFile(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_INSTALL_STATUS_COMPLETED, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, Nullable<bool> slipNoNullFlag, string c_INSTALL_STATUS_INSTALL_NOT_REGISTERED)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationDataListForCsvFile(c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_INSTALL_STATUS_COMPLETED, c_RENTAL_INSTALL_TYPE_REMOVE_ALL, c_SALE_INSTALL_TYPE_REMOVE_ALL, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE, slipNoNullFlag, c_INSTALL_STATUS_INSTALL_NOT_REGISTERED).ToList();
    		}
    		public virtual List<tbt_InstallationAttachFile> DeleteTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.DeleteTbt_InstallationAttachFile(attachFileID, maintenanceNo, objectID).ToList();
    		}
    		public virtual List<tbt_InstallationAttachFile> GetTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationAttachFile(attachFileID, maintenanceNo, objectID).ToList();
    		}
    		public virtual List<doInstallationDetailForCompleteInstallation> GetInstallationDetailForCompleteInstallation(string pC_INST_TYPE_GENERAL, string pSlipNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationDetailForCompleteInstallation(pC_INST_TYPE_GENERAL, pSlipNo).ToList();
    		}
    		public virtual List<dtInstallationSlipDetailsForView> GetTbt_InstallationSlipDetailsForView(string slipNo, string instrumentCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetTbt_InstallationSlipDetailsForView(slipNo, instrumentCode).ToList();
    		}
    		public virtual List<tbt_InstallationSlipExpansion> InsertTbt_InstallationSlipExpansion(string xml_SlipExpansion)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.InsertTbt_InstallationSlipExpansion(xml_SlipExpansion).ToList();
    		}
    		public virtual List<doPrepareCompleteInstallationData> Temp_CompleteInstallation_Rental(string vcContractCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.Temp_CompleteInstallation_Rental(vcContractCode).ToList();
    		}
    		public virtual List<doPrepareCompleteInstallationData> Temp_CompleteInstallation_Sale(string vcContractCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.Temp_CompleteInstallation_Sale(vcContractCode).ToList();
    		}
    		public virtual List<doRentalInstrumentdataList> GetRentalInstrumentdataList(string vcContractCode, string vcOCC, string vcSlipNo, string vcInstrumentTyepCode, string vcRentalInstallationType, string c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRentalInstrumentdataList(vcContractCode, vcOCC, vcSlipNo, vcInstrumentTyepCode, vcRentalInstallationType, c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE, c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE).ToList();
    		}
    		public virtual List<doSaleInstrumentdataList> GetSaleInstrumentdataList(string vcContractCode, string vcOCC, string vcSlipNo, string vcInstrumentTyepCode, string vcChangeType, Nullable<bool> vcInstallCompleteFlag, string vcSaleInstallationType, string vcSaleProcessManageStatus, string c_SALE_CHANGE_TYPE_ADD_SALE, string c_SALE_CHANGE_TYPE_NEW_SALE, string c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_SALE_PROCESS_STATUS_CANCEL)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetSaleInstrumentdataList(vcContractCode, vcOCC, vcSlipNo, vcInstrumentTyepCode, vcChangeType, vcInstallCompleteFlag, vcSaleInstallationType, vcSaleProcessManageStatus, c_SALE_CHANGE_TYPE_ADD_SALE, c_SALE_CHANGE_TYPE_NEW_SALE, c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE, c_SALE_PROCESS_STATUS_CANCEL).ToList();
    		}
    		public virtual List<ContractCodeList> GetInstallationBasicContractByProject(string cProjectCode)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationBasicContractByProject(cProjectCode).ToList();
    		}
    		public virtual List<doRentalFeeResult> GetRentalFee(string vcContractCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRentalFee(vcContractCode, c_CURRENCY_LOCAL, c_CURRENCY_US).ToList();
    		}
    		public virtual List<doGetRemovalData> GetRemovalData(string vcContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL, string c_INSTALL_STATUS_INSTALL_CANCELLED)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRemovalData(vcContractCode, c_RENTAL_INSTALL_TYPE_REMOVE_ALL, c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL, c_INSTALL_STATUS_INSTALL_CANCELLED).ToList();
    		}
    		public virtual List<tbt_InstallationEmail> DeleteTbt_InstallationEmail(string referenceID)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.DeleteTbt_InstallationEmail(referenceID).ToList();
    		}
    		public virtual List<doAllSlipNoSeries> GetAllSlipNoSeries(string pContractProjectCode, string pOCC, string pLatestSlipNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetAllSlipNoSeries(pContractProjectCode, pOCC, pLatestSlipNo).ToList();
    		}
    		public virtual List<string> GetInstallationSlipNoForAcceptant(string pContractProjectCode, string pOCC, string pC_SALE_INSTALL_TYPE_ADD, string pC_SALE_INSTALL_TYPE_NEW, string pC_INSTALL_STATUS_INSTALL_CANCELLED)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationSlipNoForAcceptant(pContractProjectCode, pOCC, pC_SALE_INSTALL_TYPE_ADD, pC_SALE_INSTALL_TYPE_NEW, pC_INSTALL_STATUS_INSTALL_CANCELLED).ToList();
    		}
    		public virtual List<dtInsHistory> GetSlipNoHistory(string slipNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetSlipNoHistory(slipNo).ToList();
    		}
    		public virtual List<doGenerateInstallationSlipNo> GenerateInstallationSlipNo(string officeCode, string slipID, string year, string month, Nullable<System.DateTime> createDate, string createBy)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GenerateInstallationSlipNo(officeCode, slipID, year, month, createDate, createBy).ToList();
    		}
    		public virtual List<InstallationBooking> GetInstallationBooking(string slipNo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationBooking(slipNo).ToList();
    		}
    		public virtual List<dtGetInstallationReport> GetInstallationReport(string subConstractor, Nullable<System.DateTime> lastPaidDateFrom, Nullable<System.DateTime> lastPaidDateTo)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationReport(subConstractor, lastPaidDateFrom, lastPaidDateTo).ToList();
    		}
    		public virtual List<dtGetInstallationReportMonthly> GetInstallationReportMonthly(string reportType, Nullable<System.DateTime> receiveDateFrom, Nullable<System.DateTime> receiveDateTo, Nullable<System.DateTime> completeDateFrom, Nullable<System.DateTime> completeDateTo, Nullable<System.DateTime> expectedStartDateFrom, Nullable<System.DateTime> expectedStartDateTo, Nullable<System.DateTime> expectedCompleteDateFrom, Nullable<System.DateTime> expectedCompleteDateTo, string contractCode, string siteName, string subContractorCode, string productName, string installationStatus, string buildingType)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetInstallationReportMonthly(reportType, receiveDateFrom, receiveDateTo, completeDateFrom, completeDateTo, expectedStartDateFrom, expectedStartDateTo, expectedCompleteDateFrom, expectedCompleteDateTo, contractCode, siteName, subContractorCode, productName, installationStatus, buildingType).ToList();
    		}
    		public virtual List<tbt_InstallationHistory> UpdateTbt_InstallationHistory(string xmlTbt_InstallationHistory)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.UpdateTbt_InstallationHistory(xmlTbt_InstallationHistory).ToList();
    		}
    		public virtual List<RptSignatureDo> GetRptSignature(string c_RPT_CODE, string c_RPT_Position)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptSignature(c_RPT_CODE, c_RPT_Position).ToList();
    		}
    		public virtual List<RptISR110InstallCompleteConfirmDo> GetRptISR110InstallCompleteConfirmData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
    		{
    			ISDataEntities context = new ISDataEntities();
    			return context.GetRptISR110InstallCompleteConfirmData(pSlipNo, c_SERVICE_TYPE_SALE, c_SERVICE_TYPE_RENTAL, c_SALE_INSTALL_TYPE, c_RENTAL_INSTALL_TYPE).ToList();
    		}

        #endregion

    }
}
