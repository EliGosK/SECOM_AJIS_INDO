//------------------------------------------------------------------------------
// <auto-generated>
//    このコードはテンプレートから生成されました。
//
//    このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//    このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SECOM_AJIS.DataEntity.Installation
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ISDataEntities : DbContext
    {
        public ISDataEntities()
            : base("name=ISDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tbt_InstallationAttachFile> tbt_InstallationAttachFile { get; set; }
        public DbSet<tbt_InstallationBasic> tbt_InstallationBasic { get; set; }
        public DbSet<tbt_InstallationEmail> tbt_InstallationEmail { get; set; }
        public DbSet<tbt_InstallationHistoryDetails> tbt_InstallationHistoryDetails { get; set; }
        public DbSet<tbt_InstallationInstrumentDetails> tbt_InstallationInstrumentDetails { get; set; }
        public DbSet<tbt_InstallationManagement> tbt_InstallationManagement { get; set; }
        public DbSet<tbt_InstallationPOManagement> tbt_InstallationPOManagement { get; set; }
        public DbSet<tbt_InstallationSlip> tbt_InstallationSlip { get; set; }
        public DbSet<tbt_InstallationSlipDetails> tbt_InstallationSlipDetails { get; set; }
        public DbSet<tbt_InstallationMemo> tbt_InstallationMemo { get; set; }
        public DbSet<tbt_InstallationHistory> tbt_InstallationHistory { get; set; }
        public DbSet<tbt_InstallationSlipExpansion> tbt_InstallationSlipExpansion { get; set; }
        public DbSet<tbt_InstallationReprint> tbt_InstallationReprint { get; set; }
    
        public virtual ObjectResult<InstallationMARunningNo> GetTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year)
        {
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InstallationMARunningNo>("GetTbs_InstallationMARunningNo", officeCodeParameter, prefixParameter, yearParameter);
        }
    
        public virtual int UpdateTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year, Nullable<int> runningNo, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var runningNoParameter = runningNo.HasValue ?
                new ObjectParameter("RunningNo", runningNo) :
                new ObjectParameter("RunningNo", typeof(int));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTbs_InstallationMARunningNo", officeCodeParameter, prefixParameter, yearParameter, runningNoParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual int InsertTbs_InstallationMARunningNo(string officeCode, string prefix, Nullable<int> year, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> runningNo)
        {
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var runningNoParameter = runningNo.HasValue ?
                new ObjectParameter("RunningNo", runningNo) :
                new ObjectParameter("RunningNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTbs_InstallationMARunningNo", officeCodeParameter, prefixParameter, yearParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, runningNoParameter);
        }
    
        public virtual ObjectResult<InstallationSlipRunningNo_Result> GetTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month)
        {
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var slipIDParameter = slipID != null ?
                new ObjectParameter("SlipID", slipID) :
                new ObjectParameter("SlipID", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InstallationSlipRunningNo_Result>("GetTbs_InstallationSlipRunningNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter);
        }
    
        public virtual int UpdateTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month, Nullable<int> runningNo, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var slipIDParameter = slipID != null ?
                new ObjectParameter("SlipID", slipID) :
                new ObjectParameter("SlipID", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var runningNoParameter = runningNo.HasValue ?
                new ObjectParameter("RunningNo", runningNo) :
                new ObjectParameter("RunningNo", typeof(int));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTbs_InstallationSlipRunningNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter, runningNoParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual int InsertTbs_InstallationSlipRunningNo(string officeCode, string slipID, string year, string month, Nullable<int> runningNo, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var slipIDParameter = slipID != null ?
                new ObjectParameter("SlipID", slipID) :
                new ObjectParameter("SlipID", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var runningNoParameter = runningNo.HasValue ?
                new ObjectParameter("RunningNo", runningNo) :
                new ObjectParameter("RunningNo", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTbs_InstallationSlipRunningNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter, runningNoParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<CheckInstallationRegistered_Result> CheckInstallationRegistered(string strContractCode, string c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED)
        {
            var strContractCodeParameter = strContractCode != null ?
                new ObjectParameter("strContractCode", strContractCode) :
                new ObjectParameter("strContractCode", typeof(string));
    
            var c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTEDParameter = c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED != null ?
                new ObjectParameter("C_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED", c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED) :
                new ObjectParameter("C_INSTALL_STATUS_INSTALLATION_NOT_REQUESTED", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckInstallationRegistered_Result>("CheckInstallationRegistered", strContractCodeParameter, c_INSTALL_STATUS_INSTALLATION_NOT_REQUESTEDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> InsertTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalContractFeeUsd, string pNormalContractFeeCurrencyType, Nullable<decimal> pNormalInstallFeeUsd, string pNormalInstallFeeCurrencyType, Nullable<decimal> pBillingInstallFeeUsd, string pBillingInstallFeeCurrencyType, Nullable<decimal> pNormalSaleProductPriceUsd, string pNormalSaleProductPriceCurrencyType)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pOCCParameter = pOCC != null ?
                new ObjectParameter("pOCC", pOCC) :
                new ObjectParameter("pOCC", typeof(string));
    
            var pServiceTypeCodeParameter = pServiceTypeCode != null ?
                new ObjectParameter("pServiceTypeCode", pServiceTypeCode) :
                new ObjectParameter("pServiceTypeCode", typeof(string));
    
            var pInstallationStatusParameter = pInstallationStatus != null ?
                new ObjectParameter("pInstallationStatus", pInstallationStatus) :
                new ObjectParameter("pInstallationStatus", typeof(string));
    
            var pInstallationTypeParameter = pInstallationType != null ?
                new ObjectParameter("pInstallationType", pInstallationType) :
                new ObjectParameter("pInstallationType", typeof(string));
    
            var pPlanCodeParameter = pPlanCode != null ?
                new ObjectParameter("pPlanCode", pPlanCode) :
                new ObjectParameter("pPlanCode", typeof(string));
    
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            var pOperationOfficeCodeParameter = pOperationOfficeCode != null ?
                new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode) :
                new ObjectParameter("pOperationOfficeCode", typeof(string));
    
            var pSecurityTypeCodeParameter = pSecurityTypeCode != null ?
                new ObjectParameter("pSecurityTypeCode", pSecurityTypeCode) :
                new ObjectParameter("pSecurityTypeCode", typeof(string));
    
            var pChangeReasonTypeCodeParameter = pChangeReasonTypeCode != null ?
                new ObjectParameter("pChangeReasonTypeCode", pChangeReasonTypeCode) :
                new ObjectParameter("pChangeReasonTypeCode", typeof(string));
    
            var pNormalInstallFeeParameter = pNormalInstallFee.HasValue ?
                new ObjectParameter("pNormalInstallFee", pNormalInstallFee) :
                new ObjectParameter("pNormalInstallFee", typeof(decimal));
    
            var pBillingInstallFeeParameter = pBillingInstallFee.HasValue ?
                new ObjectParameter("pBillingInstallFee", pBillingInstallFee) :
                new ObjectParameter("pBillingInstallFee", typeof(decimal));
    
            var pInstallFeeBillingTypeParameter = pInstallFeeBillingType != null ?
                new ObjectParameter("pInstallFeeBillingType", pInstallFeeBillingType) :
                new ObjectParameter("pInstallFeeBillingType", typeof(string));
    
            var pNormalSaleProductPriceParameter = pNormalSaleProductPrice.HasValue ?
                new ObjectParameter("pNormalSaleProductPrice", pNormalSaleProductPrice) :
                new ObjectParameter("pNormalSaleProductPrice", typeof(decimal));
    
            var pBillingSalePriceParameter = pBillingSalePrice.HasValue ?
                new ObjectParameter("pBillingSalePrice", pBillingSalePrice) :
                new ObjectParameter("pBillingSalePrice", typeof(decimal));
    
            var pInstallationSlipProcessingDateParameter = pInstallationSlipProcessingDate.HasValue ?
                new ObjectParameter("pInstallationSlipProcessingDate", pInstallationSlipProcessingDate) :
                new ObjectParameter("pInstallationSlipProcessingDate", typeof(System.DateTime));
    
            var pInstallationCompleteDateParameter = pInstallationCompleteDate.HasValue ?
                new ObjectParameter("pInstallationCompleteDate", pInstallationCompleteDate) :
                new ObjectParameter("pInstallationCompleteDate", typeof(System.DateTime));
    
            var pInstallationCompleteProcessingDateParameter = pInstallationCompleteProcessingDate.HasValue ?
                new ObjectParameter("pInstallationCompleteProcessingDate", pInstallationCompleteProcessingDate) :
                new ObjectParameter("pInstallationCompleteProcessingDate", typeof(System.DateTime));
    
            var pInstallationByParameter = pInstallationBy != null ?
                new ObjectParameter("pInstallationBy", pInstallationBy) :
                new ObjectParameter("pInstallationBy", typeof(string));
    
            var pSalesmanEmpNo1Parameter = pSalesmanEmpNo1 != null ?
                new ObjectParameter("pSalesmanEmpNo1", pSalesmanEmpNo1) :
                new ObjectParameter("pSalesmanEmpNo1", typeof(string));
    
            var pSalesmanEmpNo2Parameter = pSalesmanEmpNo2 != null ?
                new ObjectParameter("pSalesmanEmpNo2", pSalesmanEmpNo2) :
                new ObjectParameter("pSalesmanEmpNo2", typeof(string));
    
            var pApproveNo1Parameter = pApproveNo1 != null ?
                new ObjectParameter("pApproveNo1", pApproveNo1) :
                new ObjectParameter("pApproveNo1", typeof(string));
    
            var pApproveNo2Parameter = pApproveNo2 != null ?
                new ObjectParameter("pApproveNo2", pApproveNo2) :
                new ObjectParameter("pApproveNo2", typeof(string));
    
            var pInstallationStartDateParameter = pInstallationStartDate.HasValue ?
                new ObjectParameter("pInstallationStartDate", pInstallationStartDate) :
                new ObjectParameter("pInstallationStartDate", typeof(System.DateTime));
    
            var pInstallationFinishDateParameter = pInstallationFinishDate.HasValue ?
                new ObjectParameter("pInstallationFinishDate", pInstallationFinishDate) :
                new ObjectParameter("pInstallationFinishDate", typeof(System.DateTime));
    
            var pNormalContractFeeParameter = pNormalContractFee.HasValue ?
                new ObjectParameter("pNormalContractFee", pNormalContractFee) :
                new ObjectParameter("pNormalContractFee", typeof(decimal));
    
            var pBillingOCCParameter = pBillingOCC != null ?
                new ObjectParameter("pBillingOCC", pBillingOCC) :
                new ObjectParameter("pBillingOCC", typeof(string));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            var pUpdateDateParameter = pUpdateDate.HasValue ?
                new ObjectParameter("pUpdateDate", pUpdateDate) :
                new ObjectParameter("pUpdateDate", typeof(System.DateTime));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var pNormalContractFeeUsdParameter = pNormalContractFeeUsd.HasValue ?
                new ObjectParameter("pNormalContractFeeUsd", pNormalContractFeeUsd) :
                new ObjectParameter("pNormalContractFeeUsd", typeof(decimal));
    
            var pNormalContractFeeCurrencyTypeParameter = pNormalContractFeeCurrencyType != null ?
                new ObjectParameter("pNormalContractFeeCurrencyType", pNormalContractFeeCurrencyType) :
                new ObjectParameter("pNormalContractFeeCurrencyType", typeof(string));
    
            var pNormalInstallFeeUsdParameter = pNormalInstallFeeUsd.HasValue ?
                new ObjectParameter("pNormalInstallFeeUsd", pNormalInstallFeeUsd) :
                new ObjectParameter("pNormalInstallFeeUsd", typeof(decimal));
    
            var pNormalInstallFeeCurrencyTypeParameter = pNormalInstallFeeCurrencyType != null ?
                new ObjectParameter("pNormalInstallFeeCurrencyType", pNormalInstallFeeCurrencyType) :
                new ObjectParameter("pNormalInstallFeeCurrencyType", typeof(string));
    
            var pBillingInstallFeeUsdParameter = pBillingInstallFeeUsd.HasValue ?
                new ObjectParameter("pBillingInstallFeeUsd", pBillingInstallFeeUsd) :
                new ObjectParameter("pBillingInstallFeeUsd", typeof(decimal));
    
            var pBillingInstallFeeCurrencyTypeParameter = pBillingInstallFeeCurrencyType != null ?
                new ObjectParameter("pBillingInstallFeeCurrencyType", pBillingInstallFeeCurrencyType) :
                new ObjectParameter("pBillingInstallFeeCurrencyType", typeof(string));
    
            var pNormalSaleProductPriceUsdParameter = pNormalSaleProductPriceUsd.HasValue ?
                new ObjectParameter("pNormalSaleProductPriceUsd", pNormalSaleProductPriceUsd) :
                new ObjectParameter("pNormalSaleProductPriceUsd", typeof(decimal));
    
            var pNormalSaleProductPriceCurrencyTypeParameter = pNormalSaleProductPriceCurrencyType != null ?
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", pNormalSaleProductPriceCurrencyType) :
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("InsertTbt_InstallationBasic", pContractProjectCodeParameter, pOCCParameter, pServiceTypeCodeParameter, pInstallationStatusParameter, pInstallationTypeParameter, pPlanCodeParameter, pSlipNoParameter, pMaintenanceNoParameter, pOperationOfficeCodeParameter, pSecurityTypeCodeParameter, pChangeReasonTypeCodeParameter, pNormalInstallFeeParameter, pBillingInstallFeeParameter, pInstallFeeBillingTypeParameter, pNormalSaleProductPriceParameter, pBillingSalePriceParameter, pInstallationSlipProcessingDateParameter, pInstallationCompleteDateParameter, pInstallationCompleteProcessingDateParameter, pInstallationByParameter, pSalesmanEmpNo1Parameter, pSalesmanEmpNo2Parameter, pApproveNo1Parameter, pApproveNo2Parameter, pInstallationStartDateParameter, pInstallationFinishDateParameter, pNormalContractFeeParameter, pBillingOCCParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pNormalContractFeeUsdParameter, pNormalContractFeeCurrencyTypeParameter, pNormalInstallFeeUsdParameter, pNormalInstallFeeCurrencyTypeParameter, pBillingInstallFeeUsdParameter, pBillingInstallFeeCurrencyTypeParameter, pNormalSaleProductPriceUsdParameter, pNormalSaleProductPriceCurrencyTypeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> InsertTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalContractFeeUsd, string pNormalContractFeeCurrencyType, Nullable<decimal> pNormalInstallFeeUsd, string pNormalInstallFeeCurrencyType, Nullable<decimal> pBillingInstallFeeUsd, string pBillingInstallFeeCurrencyType, Nullable<decimal> pNormalSaleProductPriceUsd, string pNormalSaleProductPriceCurrencyType, MergeOption mergeOption)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pOCCParameter = pOCC != null ?
                new ObjectParameter("pOCC", pOCC) :
                new ObjectParameter("pOCC", typeof(string));
    
            var pServiceTypeCodeParameter = pServiceTypeCode != null ?
                new ObjectParameter("pServiceTypeCode", pServiceTypeCode) :
                new ObjectParameter("pServiceTypeCode", typeof(string));
    
            var pInstallationStatusParameter = pInstallationStatus != null ?
                new ObjectParameter("pInstallationStatus", pInstallationStatus) :
                new ObjectParameter("pInstallationStatus", typeof(string));
    
            var pInstallationTypeParameter = pInstallationType != null ?
                new ObjectParameter("pInstallationType", pInstallationType) :
                new ObjectParameter("pInstallationType", typeof(string));
    
            var pPlanCodeParameter = pPlanCode != null ?
                new ObjectParameter("pPlanCode", pPlanCode) :
                new ObjectParameter("pPlanCode", typeof(string));
    
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            var pOperationOfficeCodeParameter = pOperationOfficeCode != null ?
                new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode) :
                new ObjectParameter("pOperationOfficeCode", typeof(string));
    
            var pSecurityTypeCodeParameter = pSecurityTypeCode != null ?
                new ObjectParameter("pSecurityTypeCode", pSecurityTypeCode) :
                new ObjectParameter("pSecurityTypeCode", typeof(string));
    
            var pChangeReasonTypeCodeParameter = pChangeReasonTypeCode != null ?
                new ObjectParameter("pChangeReasonTypeCode", pChangeReasonTypeCode) :
                new ObjectParameter("pChangeReasonTypeCode", typeof(string));
    
            var pNormalInstallFeeParameter = pNormalInstallFee.HasValue ?
                new ObjectParameter("pNormalInstallFee", pNormalInstallFee) :
                new ObjectParameter("pNormalInstallFee", typeof(decimal));
    
            var pBillingInstallFeeParameter = pBillingInstallFee.HasValue ?
                new ObjectParameter("pBillingInstallFee", pBillingInstallFee) :
                new ObjectParameter("pBillingInstallFee", typeof(decimal));
    
            var pInstallFeeBillingTypeParameter = pInstallFeeBillingType != null ?
                new ObjectParameter("pInstallFeeBillingType", pInstallFeeBillingType) :
                new ObjectParameter("pInstallFeeBillingType", typeof(string));
    
            var pNormalSaleProductPriceParameter = pNormalSaleProductPrice.HasValue ?
                new ObjectParameter("pNormalSaleProductPrice", pNormalSaleProductPrice) :
                new ObjectParameter("pNormalSaleProductPrice", typeof(decimal));
    
            var pBillingSalePriceParameter = pBillingSalePrice.HasValue ?
                new ObjectParameter("pBillingSalePrice", pBillingSalePrice) :
                new ObjectParameter("pBillingSalePrice", typeof(decimal));
    
            var pInstallationSlipProcessingDateParameter = pInstallationSlipProcessingDate.HasValue ?
                new ObjectParameter("pInstallationSlipProcessingDate", pInstallationSlipProcessingDate) :
                new ObjectParameter("pInstallationSlipProcessingDate", typeof(System.DateTime));
    
            var pInstallationCompleteDateParameter = pInstallationCompleteDate.HasValue ?
                new ObjectParameter("pInstallationCompleteDate", pInstallationCompleteDate) :
                new ObjectParameter("pInstallationCompleteDate", typeof(System.DateTime));
    
            var pInstallationCompleteProcessingDateParameter = pInstallationCompleteProcessingDate.HasValue ?
                new ObjectParameter("pInstallationCompleteProcessingDate", pInstallationCompleteProcessingDate) :
                new ObjectParameter("pInstallationCompleteProcessingDate", typeof(System.DateTime));
    
            var pInstallationByParameter = pInstallationBy != null ?
                new ObjectParameter("pInstallationBy", pInstallationBy) :
                new ObjectParameter("pInstallationBy", typeof(string));
    
            var pSalesmanEmpNo1Parameter = pSalesmanEmpNo1 != null ?
                new ObjectParameter("pSalesmanEmpNo1", pSalesmanEmpNo1) :
                new ObjectParameter("pSalesmanEmpNo1", typeof(string));
    
            var pSalesmanEmpNo2Parameter = pSalesmanEmpNo2 != null ?
                new ObjectParameter("pSalesmanEmpNo2", pSalesmanEmpNo2) :
                new ObjectParameter("pSalesmanEmpNo2", typeof(string));
    
            var pApproveNo1Parameter = pApproveNo1 != null ?
                new ObjectParameter("pApproveNo1", pApproveNo1) :
                new ObjectParameter("pApproveNo1", typeof(string));
    
            var pApproveNo2Parameter = pApproveNo2 != null ?
                new ObjectParameter("pApproveNo2", pApproveNo2) :
                new ObjectParameter("pApproveNo2", typeof(string));
    
            var pInstallationStartDateParameter = pInstallationStartDate.HasValue ?
                new ObjectParameter("pInstallationStartDate", pInstallationStartDate) :
                new ObjectParameter("pInstallationStartDate", typeof(System.DateTime));
    
            var pInstallationFinishDateParameter = pInstallationFinishDate.HasValue ?
                new ObjectParameter("pInstallationFinishDate", pInstallationFinishDate) :
                new ObjectParameter("pInstallationFinishDate", typeof(System.DateTime));
    
            var pNormalContractFeeParameter = pNormalContractFee.HasValue ?
                new ObjectParameter("pNormalContractFee", pNormalContractFee) :
                new ObjectParameter("pNormalContractFee", typeof(decimal));
    
            var pBillingOCCParameter = pBillingOCC != null ?
                new ObjectParameter("pBillingOCC", pBillingOCC) :
                new ObjectParameter("pBillingOCC", typeof(string));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            var pUpdateDateParameter = pUpdateDate.HasValue ?
                new ObjectParameter("pUpdateDate", pUpdateDate) :
                new ObjectParameter("pUpdateDate", typeof(System.DateTime));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var pNormalContractFeeUsdParameter = pNormalContractFeeUsd.HasValue ?
                new ObjectParameter("pNormalContractFeeUsd", pNormalContractFeeUsd) :
                new ObjectParameter("pNormalContractFeeUsd", typeof(decimal));
    
            var pNormalContractFeeCurrencyTypeParameter = pNormalContractFeeCurrencyType != null ?
                new ObjectParameter("pNormalContractFeeCurrencyType", pNormalContractFeeCurrencyType) :
                new ObjectParameter("pNormalContractFeeCurrencyType", typeof(string));
    
            var pNormalInstallFeeUsdParameter = pNormalInstallFeeUsd.HasValue ?
                new ObjectParameter("pNormalInstallFeeUsd", pNormalInstallFeeUsd) :
                new ObjectParameter("pNormalInstallFeeUsd", typeof(decimal));
    
            var pNormalInstallFeeCurrencyTypeParameter = pNormalInstallFeeCurrencyType != null ?
                new ObjectParameter("pNormalInstallFeeCurrencyType", pNormalInstallFeeCurrencyType) :
                new ObjectParameter("pNormalInstallFeeCurrencyType", typeof(string));
    
            var pBillingInstallFeeUsdParameter = pBillingInstallFeeUsd.HasValue ?
                new ObjectParameter("pBillingInstallFeeUsd", pBillingInstallFeeUsd) :
                new ObjectParameter("pBillingInstallFeeUsd", typeof(decimal));
    
            var pBillingInstallFeeCurrencyTypeParameter = pBillingInstallFeeCurrencyType != null ?
                new ObjectParameter("pBillingInstallFeeCurrencyType", pBillingInstallFeeCurrencyType) :
                new ObjectParameter("pBillingInstallFeeCurrencyType", typeof(string));
    
            var pNormalSaleProductPriceUsdParameter = pNormalSaleProductPriceUsd.HasValue ?
                new ObjectParameter("pNormalSaleProductPriceUsd", pNormalSaleProductPriceUsd) :
                new ObjectParameter("pNormalSaleProductPriceUsd", typeof(decimal));
    
            var pNormalSaleProductPriceCurrencyTypeParameter = pNormalSaleProductPriceCurrencyType != null ?
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", pNormalSaleProductPriceCurrencyType) :
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("InsertTbt_InstallationBasic", mergeOption, pContractProjectCodeParameter, pOCCParameter, pServiceTypeCodeParameter, pInstallationStatusParameter, pInstallationTypeParameter, pPlanCodeParameter, pSlipNoParameter, pMaintenanceNoParameter, pOperationOfficeCodeParameter, pSecurityTypeCodeParameter, pChangeReasonTypeCodeParameter, pNormalInstallFeeParameter, pBillingInstallFeeParameter, pInstallFeeBillingTypeParameter, pNormalSaleProductPriceParameter, pBillingSalePriceParameter, pInstallationSlipProcessingDateParameter, pInstallationCompleteDateParameter, pInstallationCompleteProcessingDateParameter, pInstallationByParameter, pSalesmanEmpNo1Parameter, pSalesmanEmpNo2Parameter, pApproveNo1Parameter, pApproveNo2Parameter, pInstallationStartDateParameter, pInstallationFinishDateParameter, pNormalContractFeeParameter, pBillingOCCParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pNormalContractFeeUsdParameter, pNormalContractFeeCurrencyTypeParameter, pNormalInstallFeeUsdParameter, pNormalInstallFeeCurrencyTypeParameter, pBillingInstallFeeUsdParameter, pBillingInstallFeeCurrencyTypeParameter, pNormalSaleProductPriceUsdParameter, pNormalSaleProductPriceCurrencyTypeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> GetTbt_InstallationBasic(string pContractProjectCode)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("GetTbt_InstallationBasic", pContractProjectCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> GetTbt_InstallationBasic(string pContractProjectCode, MergeOption mergeOption)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("GetTbt_InstallationBasic", mergeOption, pContractProjectCodeParameter);
        }
    
        public virtual ObjectResult<CheckAllRemoval_Result> CheckAllRemoval(string strContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_INSTALL_STATUS_COMPLETED)
        {
            var strContractCodeParameter = strContractCode != null ?
                new ObjectParameter("strContractCode", strContractCode) :
                new ObjectParameter("strContractCode", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = c_SALE_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", c_SALE_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_INSTALL_STATUS_COMPLETEDParameter = c_INSTALL_STATUS_COMPLETED != null ?
                new ObjectParameter("C_INSTALL_STATUS_COMPLETED", c_INSTALL_STATUS_COMPLETED) :
                new ObjectParameter("C_INSTALL_STATUS_COMPLETED", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckAllRemoval_Result>("CheckAllRemoval", strContractCodeParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPE_REMOVE_ALLParameter, c_INSTALL_STATUS_COMPLETEDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationManagement> InsertTbt_InstallationManagement(string maintenanceNo, string contractProjectCode, string managementStatus, Nullable<System.DateTime> proposeInstallStartDate, Nullable<System.DateTime> proposeInstallCompleteDate, string customerStaffBelonging, string customerStaffName, string customerStaffPhoneNo, Nullable<System.DateTime> newPhoneLineOpenDate, string newConnectionPhoneNo, string newPhoneLineOwnerTypeCode, string iEStaffEmpNo1, string iEStaffEmpNo2, Nullable<int> iEManPower, Nullable<decimal> materialFee, Nullable<decimal> materialFeeUsd, string materialFeeCurrencyType, string requestMemo, string pOMemo, string changeReasonCode, string changeReasonOther, string changeRequestorCode, string changeRequestorOther, Nullable<bool> newBldMgmtFlag, Nullable<decimal> newBldMgmtCost, Nullable<decimal> newBldMgmtCostUsd, string newBldMgmtCostCurrencyType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string approveNo)
        {
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var managementStatusParameter = managementStatus != null ?
                new ObjectParameter("ManagementStatus", managementStatus) :
                new ObjectParameter("ManagementStatus", typeof(string));
    
            var proposeInstallStartDateParameter = proposeInstallStartDate.HasValue ?
                new ObjectParameter("ProposeInstallStartDate", proposeInstallStartDate) :
                new ObjectParameter("ProposeInstallStartDate", typeof(System.DateTime));
    
            var proposeInstallCompleteDateParameter = proposeInstallCompleteDate.HasValue ?
                new ObjectParameter("ProposeInstallCompleteDate", proposeInstallCompleteDate) :
                new ObjectParameter("ProposeInstallCompleteDate", typeof(System.DateTime));
    
            var customerStaffBelongingParameter = customerStaffBelonging != null ?
                new ObjectParameter("CustomerStaffBelonging", customerStaffBelonging) :
                new ObjectParameter("CustomerStaffBelonging", typeof(string));
    
            var customerStaffNameParameter = customerStaffName != null ?
                new ObjectParameter("CustomerStaffName", customerStaffName) :
                new ObjectParameter("CustomerStaffName", typeof(string));
    
            var customerStaffPhoneNoParameter = customerStaffPhoneNo != null ?
                new ObjectParameter("CustomerStaffPhoneNo", customerStaffPhoneNo) :
                new ObjectParameter("CustomerStaffPhoneNo", typeof(string));
    
            var newPhoneLineOpenDateParameter = newPhoneLineOpenDate.HasValue ?
                new ObjectParameter("NewPhoneLineOpenDate", newPhoneLineOpenDate) :
                new ObjectParameter("NewPhoneLineOpenDate", typeof(System.DateTime));
    
            var newConnectionPhoneNoParameter = newConnectionPhoneNo != null ?
                new ObjectParameter("NewConnectionPhoneNo", newConnectionPhoneNo) :
                new ObjectParameter("NewConnectionPhoneNo", typeof(string));
    
            var newPhoneLineOwnerTypeCodeParameter = newPhoneLineOwnerTypeCode != null ?
                new ObjectParameter("NewPhoneLineOwnerTypeCode", newPhoneLineOwnerTypeCode) :
                new ObjectParameter("NewPhoneLineOwnerTypeCode", typeof(string));
    
            var iEStaffEmpNo1Parameter = iEStaffEmpNo1 != null ?
                new ObjectParameter("IEStaffEmpNo1", iEStaffEmpNo1) :
                new ObjectParameter("IEStaffEmpNo1", typeof(string));
    
            var iEStaffEmpNo2Parameter = iEStaffEmpNo2 != null ?
                new ObjectParameter("IEStaffEmpNo2", iEStaffEmpNo2) :
                new ObjectParameter("IEStaffEmpNo2", typeof(string));
    
            var iEManPowerParameter = iEManPower.HasValue ?
                new ObjectParameter("IEManPower", iEManPower) :
                new ObjectParameter("IEManPower", typeof(int));
    
            var materialFeeParameter = materialFee.HasValue ?
                new ObjectParameter("MaterialFee", materialFee) :
                new ObjectParameter("MaterialFee", typeof(decimal));
    
            var materialFeeUsdParameter = materialFeeUsd.HasValue ?
                new ObjectParameter("MaterialFeeUsd", materialFeeUsd) :
                new ObjectParameter("MaterialFeeUsd", typeof(decimal));
    
            var materialFeeCurrencyTypeParameter = materialFeeCurrencyType != null ?
                new ObjectParameter("MaterialFeeCurrencyType", materialFeeCurrencyType) :
                new ObjectParameter("MaterialFeeCurrencyType", typeof(string));
    
            var requestMemoParameter = requestMemo != null ?
                new ObjectParameter("RequestMemo", requestMemo) :
                new ObjectParameter("RequestMemo", typeof(string));
    
            var pOMemoParameter = pOMemo != null ?
                new ObjectParameter("POMemo", pOMemo) :
                new ObjectParameter("POMemo", typeof(string));
    
            var changeReasonCodeParameter = changeReasonCode != null ?
                new ObjectParameter("ChangeReasonCode", changeReasonCode) :
                new ObjectParameter("ChangeReasonCode", typeof(string));
    
            var changeReasonOtherParameter = changeReasonOther != null ?
                new ObjectParameter("ChangeReasonOther", changeReasonOther) :
                new ObjectParameter("ChangeReasonOther", typeof(string));
    
            var changeRequestorCodeParameter = changeRequestorCode != null ?
                new ObjectParameter("ChangeRequestorCode", changeRequestorCode) :
                new ObjectParameter("ChangeRequestorCode", typeof(string));
    
            var changeRequestorOtherParameter = changeRequestorOther != null ?
                new ObjectParameter("ChangeRequestorOther", changeRequestorOther) :
                new ObjectParameter("ChangeRequestorOther", typeof(string));
    
            var newBldMgmtFlagParameter = newBldMgmtFlag.HasValue ?
                new ObjectParameter("NewBldMgmtFlag", newBldMgmtFlag) :
                new ObjectParameter("NewBldMgmtFlag", typeof(bool));
    
            var newBldMgmtCostParameter = newBldMgmtCost.HasValue ?
                new ObjectParameter("NewBldMgmtCost", newBldMgmtCost) :
                new ObjectParameter("NewBldMgmtCost", typeof(decimal));
    
            var newBldMgmtCostUsdParameter = newBldMgmtCostUsd.HasValue ?
                new ObjectParameter("NewBldMgmtCostUsd", newBldMgmtCostUsd) :
                new ObjectParameter("NewBldMgmtCostUsd", typeof(decimal));
    
            var newBldMgmtCostCurrencyTypeParameter = newBldMgmtCostCurrencyType != null ?
                new ObjectParameter("NewBldMgmtCostCurrencyType", newBldMgmtCostCurrencyType) :
                new ObjectParameter("NewBldMgmtCostCurrencyType", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var approveNoParameter = approveNo != null ?
                new ObjectParameter("ApproveNo", approveNo) :
                new ObjectParameter("ApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationManagement>("InsertTbt_InstallationManagement", maintenanceNoParameter, contractProjectCodeParameter, managementStatusParameter, proposeInstallStartDateParameter, proposeInstallCompleteDateParameter, customerStaffBelongingParameter, customerStaffNameParameter, customerStaffPhoneNoParameter, newPhoneLineOpenDateParameter, newConnectionPhoneNoParameter, newPhoneLineOwnerTypeCodeParameter, iEStaffEmpNo1Parameter, iEStaffEmpNo2Parameter, iEManPowerParameter, materialFeeParameter, materialFeeUsdParameter, materialFeeCurrencyTypeParameter, requestMemoParameter, pOMemoParameter, changeReasonCodeParameter, changeReasonOtherParameter, changeRequestorCodeParameter, changeRequestorOtherParameter, newBldMgmtFlagParameter, newBldMgmtCostParameter, newBldMgmtCostUsdParameter, newBldMgmtCostCurrencyTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, approveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationManagement> InsertTbt_InstallationManagement(string maintenanceNo, string contractProjectCode, string managementStatus, Nullable<System.DateTime> proposeInstallStartDate, Nullable<System.DateTime> proposeInstallCompleteDate, string customerStaffBelonging, string customerStaffName, string customerStaffPhoneNo, Nullable<System.DateTime> newPhoneLineOpenDate, string newConnectionPhoneNo, string newPhoneLineOwnerTypeCode, string iEStaffEmpNo1, string iEStaffEmpNo2, Nullable<int> iEManPower, Nullable<decimal> materialFee, Nullable<decimal> materialFeeUsd, string materialFeeCurrencyType, string requestMemo, string pOMemo, string changeReasonCode, string changeReasonOther, string changeRequestorCode, string changeRequestorOther, Nullable<bool> newBldMgmtFlag, Nullable<decimal> newBldMgmtCost, Nullable<decimal> newBldMgmtCostUsd, string newBldMgmtCostCurrencyType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string approveNo, MergeOption mergeOption)
        {
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var managementStatusParameter = managementStatus != null ?
                new ObjectParameter("ManagementStatus", managementStatus) :
                new ObjectParameter("ManagementStatus", typeof(string));
    
            var proposeInstallStartDateParameter = proposeInstallStartDate.HasValue ?
                new ObjectParameter("ProposeInstallStartDate", proposeInstallStartDate) :
                new ObjectParameter("ProposeInstallStartDate", typeof(System.DateTime));
    
            var proposeInstallCompleteDateParameter = proposeInstallCompleteDate.HasValue ?
                new ObjectParameter("ProposeInstallCompleteDate", proposeInstallCompleteDate) :
                new ObjectParameter("ProposeInstallCompleteDate", typeof(System.DateTime));
    
            var customerStaffBelongingParameter = customerStaffBelonging != null ?
                new ObjectParameter("CustomerStaffBelonging", customerStaffBelonging) :
                new ObjectParameter("CustomerStaffBelonging", typeof(string));
    
            var customerStaffNameParameter = customerStaffName != null ?
                new ObjectParameter("CustomerStaffName", customerStaffName) :
                new ObjectParameter("CustomerStaffName", typeof(string));
    
            var customerStaffPhoneNoParameter = customerStaffPhoneNo != null ?
                new ObjectParameter("CustomerStaffPhoneNo", customerStaffPhoneNo) :
                new ObjectParameter("CustomerStaffPhoneNo", typeof(string));
    
            var newPhoneLineOpenDateParameter = newPhoneLineOpenDate.HasValue ?
                new ObjectParameter("NewPhoneLineOpenDate", newPhoneLineOpenDate) :
                new ObjectParameter("NewPhoneLineOpenDate", typeof(System.DateTime));
    
            var newConnectionPhoneNoParameter = newConnectionPhoneNo != null ?
                new ObjectParameter("NewConnectionPhoneNo", newConnectionPhoneNo) :
                new ObjectParameter("NewConnectionPhoneNo", typeof(string));
    
            var newPhoneLineOwnerTypeCodeParameter = newPhoneLineOwnerTypeCode != null ?
                new ObjectParameter("NewPhoneLineOwnerTypeCode", newPhoneLineOwnerTypeCode) :
                new ObjectParameter("NewPhoneLineOwnerTypeCode", typeof(string));
    
            var iEStaffEmpNo1Parameter = iEStaffEmpNo1 != null ?
                new ObjectParameter("IEStaffEmpNo1", iEStaffEmpNo1) :
                new ObjectParameter("IEStaffEmpNo1", typeof(string));
    
            var iEStaffEmpNo2Parameter = iEStaffEmpNo2 != null ?
                new ObjectParameter("IEStaffEmpNo2", iEStaffEmpNo2) :
                new ObjectParameter("IEStaffEmpNo2", typeof(string));
    
            var iEManPowerParameter = iEManPower.HasValue ?
                new ObjectParameter("IEManPower", iEManPower) :
                new ObjectParameter("IEManPower", typeof(int));
    
            var materialFeeParameter = materialFee.HasValue ?
                new ObjectParameter("MaterialFee", materialFee) :
                new ObjectParameter("MaterialFee", typeof(decimal));
    
            var materialFeeUsdParameter = materialFeeUsd.HasValue ?
                new ObjectParameter("MaterialFeeUsd", materialFeeUsd) :
                new ObjectParameter("MaterialFeeUsd", typeof(decimal));
    
            var materialFeeCurrencyTypeParameter = materialFeeCurrencyType != null ?
                new ObjectParameter("MaterialFeeCurrencyType", materialFeeCurrencyType) :
                new ObjectParameter("MaterialFeeCurrencyType", typeof(string));
    
            var requestMemoParameter = requestMemo != null ?
                new ObjectParameter("RequestMemo", requestMemo) :
                new ObjectParameter("RequestMemo", typeof(string));
    
            var pOMemoParameter = pOMemo != null ?
                new ObjectParameter("POMemo", pOMemo) :
                new ObjectParameter("POMemo", typeof(string));
    
            var changeReasonCodeParameter = changeReasonCode != null ?
                new ObjectParameter("ChangeReasonCode", changeReasonCode) :
                new ObjectParameter("ChangeReasonCode", typeof(string));
    
            var changeReasonOtherParameter = changeReasonOther != null ?
                new ObjectParameter("ChangeReasonOther", changeReasonOther) :
                new ObjectParameter("ChangeReasonOther", typeof(string));
    
            var changeRequestorCodeParameter = changeRequestorCode != null ?
                new ObjectParameter("ChangeRequestorCode", changeRequestorCode) :
                new ObjectParameter("ChangeRequestorCode", typeof(string));
    
            var changeRequestorOtherParameter = changeRequestorOther != null ?
                new ObjectParameter("ChangeRequestorOther", changeRequestorOther) :
                new ObjectParameter("ChangeRequestorOther", typeof(string));
    
            var newBldMgmtFlagParameter = newBldMgmtFlag.HasValue ?
                new ObjectParameter("NewBldMgmtFlag", newBldMgmtFlag) :
                new ObjectParameter("NewBldMgmtFlag", typeof(bool));
    
            var newBldMgmtCostParameter = newBldMgmtCost.HasValue ?
                new ObjectParameter("NewBldMgmtCost", newBldMgmtCost) :
                new ObjectParameter("NewBldMgmtCost", typeof(decimal));
    
            var newBldMgmtCostUsdParameter = newBldMgmtCostUsd.HasValue ?
                new ObjectParameter("NewBldMgmtCostUsd", newBldMgmtCostUsd) :
                new ObjectParameter("NewBldMgmtCostUsd", typeof(decimal));
    
            var newBldMgmtCostCurrencyTypeParameter = newBldMgmtCostCurrencyType != null ?
                new ObjectParameter("NewBldMgmtCostCurrencyType", newBldMgmtCostCurrencyType) :
                new ObjectParameter("NewBldMgmtCostCurrencyType", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var approveNoParameter = approveNo != null ?
                new ObjectParameter("ApproveNo", approveNo) :
                new ObjectParameter("ApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationManagement>("InsertTbt_InstallationManagement", mergeOption, maintenanceNoParameter, contractProjectCodeParameter, managementStatusParameter, proposeInstallStartDateParameter, proposeInstallCompleteDateParameter, customerStaffBelongingParameter, customerStaffNameParameter, customerStaffPhoneNoParameter, newPhoneLineOpenDateParameter, newConnectionPhoneNoParameter, newPhoneLineOwnerTypeCodeParameter, iEStaffEmpNo1Parameter, iEStaffEmpNo2Parameter, iEManPowerParameter, materialFeeParameter, materialFeeUsdParameter, materialFeeCurrencyTypeParameter, requestMemoParameter, pOMemoParameter, changeReasonCodeParameter, changeReasonOtherParameter, changeRequestorCodeParameter, changeRequestorOtherParameter, newBldMgmtFlagParameter, newBldMgmtCostParameter, newBldMgmtCostUsdParameter, newBldMgmtCostCurrencyTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, approveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> UpdateTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalInstallFeeUsd, Nullable<decimal> pBillingInstallFeeUsd, Nullable<decimal> pNormalSaleProductPriceUsd, Nullable<decimal> pNormalContractFeeUsd, string pNormalInstallFeeCurrencyType, string pBillingInstallFeeCurrencyType, string pNormalSaleProductPriceCurrencyType, string pNormalContractFeeCurrencyType)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pOCCParameter = pOCC != null ?
                new ObjectParameter("pOCC", pOCC) :
                new ObjectParameter("pOCC", typeof(string));
    
            var pServiceTypeCodeParameter = pServiceTypeCode != null ?
                new ObjectParameter("pServiceTypeCode", pServiceTypeCode) :
                new ObjectParameter("pServiceTypeCode", typeof(string));
    
            var pInstallationStatusParameter = pInstallationStatus != null ?
                new ObjectParameter("pInstallationStatus", pInstallationStatus) :
                new ObjectParameter("pInstallationStatus", typeof(string));
    
            var pInstallationTypeParameter = pInstallationType != null ?
                new ObjectParameter("pInstallationType", pInstallationType) :
                new ObjectParameter("pInstallationType", typeof(string));
    
            var pPlanCodeParameter = pPlanCode != null ?
                new ObjectParameter("pPlanCode", pPlanCode) :
                new ObjectParameter("pPlanCode", typeof(string));
    
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            var pOperationOfficeCodeParameter = pOperationOfficeCode != null ?
                new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode) :
                new ObjectParameter("pOperationOfficeCode", typeof(string));
    
            var pSecurityTypeCodeParameter = pSecurityTypeCode != null ?
                new ObjectParameter("pSecurityTypeCode", pSecurityTypeCode) :
                new ObjectParameter("pSecurityTypeCode", typeof(string));
    
            var pChangeReasonTypeCodeParameter = pChangeReasonTypeCode != null ?
                new ObjectParameter("pChangeReasonTypeCode", pChangeReasonTypeCode) :
                new ObjectParameter("pChangeReasonTypeCode", typeof(string));
    
            var pNormalInstallFeeParameter = pNormalInstallFee.HasValue ?
                new ObjectParameter("pNormalInstallFee", pNormalInstallFee) :
                new ObjectParameter("pNormalInstallFee", typeof(decimal));
    
            var pBillingInstallFeeParameter = pBillingInstallFee.HasValue ?
                new ObjectParameter("pBillingInstallFee", pBillingInstallFee) :
                new ObjectParameter("pBillingInstallFee", typeof(decimal));
    
            var pInstallFeeBillingTypeParameter = pInstallFeeBillingType != null ?
                new ObjectParameter("pInstallFeeBillingType", pInstallFeeBillingType) :
                new ObjectParameter("pInstallFeeBillingType", typeof(string));
    
            var pNormalSaleProductPriceParameter = pNormalSaleProductPrice.HasValue ?
                new ObjectParameter("pNormalSaleProductPrice", pNormalSaleProductPrice) :
                new ObjectParameter("pNormalSaleProductPrice", typeof(decimal));
    
            var pBillingSalePriceParameter = pBillingSalePrice.HasValue ?
                new ObjectParameter("pBillingSalePrice", pBillingSalePrice) :
                new ObjectParameter("pBillingSalePrice", typeof(decimal));
    
            var pInstallationSlipProcessingDateParameter = pInstallationSlipProcessingDate.HasValue ?
                new ObjectParameter("pInstallationSlipProcessingDate", pInstallationSlipProcessingDate) :
                new ObjectParameter("pInstallationSlipProcessingDate", typeof(System.DateTime));
    
            var pInstallationCompleteDateParameter = pInstallationCompleteDate.HasValue ?
                new ObjectParameter("pInstallationCompleteDate", pInstallationCompleteDate) :
                new ObjectParameter("pInstallationCompleteDate", typeof(System.DateTime));
    
            var pInstallationCompleteProcessingDateParameter = pInstallationCompleteProcessingDate.HasValue ?
                new ObjectParameter("pInstallationCompleteProcessingDate", pInstallationCompleteProcessingDate) :
                new ObjectParameter("pInstallationCompleteProcessingDate", typeof(System.DateTime));
    
            var pInstallationByParameter = pInstallationBy != null ?
                new ObjectParameter("pInstallationBy", pInstallationBy) :
                new ObjectParameter("pInstallationBy", typeof(string));
    
            var pSalesmanEmpNo1Parameter = pSalesmanEmpNo1 != null ?
                new ObjectParameter("pSalesmanEmpNo1", pSalesmanEmpNo1) :
                new ObjectParameter("pSalesmanEmpNo1", typeof(string));
    
            var pSalesmanEmpNo2Parameter = pSalesmanEmpNo2 != null ?
                new ObjectParameter("pSalesmanEmpNo2", pSalesmanEmpNo2) :
                new ObjectParameter("pSalesmanEmpNo2", typeof(string));
    
            var pApproveNo1Parameter = pApproveNo1 != null ?
                new ObjectParameter("pApproveNo1", pApproveNo1) :
                new ObjectParameter("pApproveNo1", typeof(string));
    
            var pApproveNo2Parameter = pApproveNo2 != null ?
                new ObjectParameter("pApproveNo2", pApproveNo2) :
                new ObjectParameter("pApproveNo2", typeof(string));
    
            var pInstallationStartDateParameter = pInstallationStartDate.HasValue ?
                new ObjectParameter("pInstallationStartDate", pInstallationStartDate) :
                new ObjectParameter("pInstallationStartDate", typeof(System.DateTime));
    
            var pInstallationFinishDateParameter = pInstallationFinishDate.HasValue ?
                new ObjectParameter("pInstallationFinishDate", pInstallationFinishDate) :
                new ObjectParameter("pInstallationFinishDate", typeof(System.DateTime));
    
            var pNormalContractFeeParameter = pNormalContractFee.HasValue ?
                new ObjectParameter("pNormalContractFee", pNormalContractFee) :
                new ObjectParameter("pNormalContractFee", typeof(decimal));
    
            var pBillingOCCParameter = pBillingOCC != null ?
                new ObjectParameter("pBillingOCC", pBillingOCC) :
                new ObjectParameter("pBillingOCC", typeof(string));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            var pUpdateDateParameter = pUpdateDate.HasValue ?
                new ObjectParameter("pUpdateDate", pUpdateDate) :
                new ObjectParameter("pUpdateDate", typeof(System.DateTime));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var pNormalInstallFeeUsdParameter = pNormalInstallFeeUsd.HasValue ?
                new ObjectParameter("pNormalInstallFeeUsd", pNormalInstallFeeUsd) :
                new ObjectParameter("pNormalInstallFeeUsd", typeof(decimal));
    
            var pBillingInstallFeeUsdParameter = pBillingInstallFeeUsd.HasValue ?
                new ObjectParameter("pBillingInstallFeeUsd", pBillingInstallFeeUsd) :
                new ObjectParameter("pBillingInstallFeeUsd", typeof(decimal));
    
            var pNormalSaleProductPriceUsdParameter = pNormalSaleProductPriceUsd.HasValue ?
                new ObjectParameter("pNormalSaleProductPriceUsd", pNormalSaleProductPriceUsd) :
                new ObjectParameter("pNormalSaleProductPriceUsd", typeof(decimal));
    
            var pNormalContractFeeUsdParameter = pNormalContractFeeUsd.HasValue ?
                new ObjectParameter("pNormalContractFeeUsd", pNormalContractFeeUsd) :
                new ObjectParameter("pNormalContractFeeUsd", typeof(decimal));
    
            var pNormalInstallFeeCurrencyTypeParameter = pNormalInstallFeeCurrencyType != null ?
                new ObjectParameter("pNormalInstallFeeCurrencyType", pNormalInstallFeeCurrencyType) :
                new ObjectParameter("pNormalInstallFeeCurrencyType", typeof(string));
    
            var pBillingInstallFeeCurrencyTypeParameter = pBillingInstallFeeCurrencyType != null ?
                new ObjectParameter("pBillingInstallFeeCurrencyType", pBillingInstallFeeCurrencyType) :
                new ObjectParameter("pBillingInstallFeeCurrencyType", typeof(string));
    
            var pNormalSaleProductPriceCurrencyTypeParameter = pNormalSaleProductPriceCurrencyType != null ?
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", pNormalSaleProductPriceCurrencyType) :
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", typeof(string));
    
            var pNormalContractFeeCurrencyTypeParameter = pNormalContractFeeCurrencyType != null ?
                new ObjectParameter("pNormalContractFeeCurrencyType", pNormalContractFeeCurrencyType) :
                new ObjectParameter("pNormalContractFeeCurrencyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("UpdateTbt_InstallationBasic", pContractProjectCodeParameter, pOCCParameter, pServiceTypeCodeParameter, pInstallationStatusParameter, pInstallationTypeParameter, pPlanCodeParameter, pSlipNoParameter, pMaintenanceNoParameter, pOperationOfficeCodeParameter, pSecurityTypeCodeParameter, pChangeReasonTypeCodeParameter, pNormalInstallFeeParameter, pBillingInstallFeeParameter, pInstallFeeBillingTypeParameter, pNormalSaleProductPriceParameter, pBillingSalePriceParameter, pInstallationSlipProcessingDateParameter, pInstallationCompleteDateParameter, pInstallationCompleteProcessingDateParameter, pInstallationByParameter, pSalesmanEmpNo1Parameter, pSalesmanEmpNo2Parameter, pApproveNo1Parameter, pApproveNo2Parameter, pInstallationStartDateParameter, pInstallationFinishDateParameter, pNormalContractFeeParameter, pBillingOCCParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pNormalInstallFeeUsdParameter, pBillingInstallFeeUsdParameter, pNormalSaleProductPriceUsdParameter, pNormalContractFeeUsdParameter, pNormalInstallFeeCurrencyTypeParameter, pBillingInstallFeeCurrencyTypeParameter, pNormalSaleProductPriceCurrencyTypeParameter, pNormalContractFeeCurrencyTypeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> UpdateTbt_InstallationBasic(string pContractProjectCode, string pOCC, string pServiceTypeCode, string pInstallationStatus, string pInstallationType, string pPlanCode, string pSlipNo, string pMaintenanceNo, string pOperationOfficeCode, string pSecurityTypeCode, string pChangeReasonTypeCode, Nullable<decimal> pNormalInstallFee, Nullable<decimal> pBillingInstallFee, string pInstallFeeBillingType, Nullable<decimal> pNormalSaleProductPrice, Nullable<decimal> pBillingSalePrice, Nullable<System.DateTime> pInstallationSlipProcessingDate, Nullable<System.DateTime> pInstallationCompleteDate, Nullable<System.DateTime> pInstallationCompleteProcessingDate, string pInstallationBy, string pSalesmanEmpNo1, string pSalesmanEmpNo2, string pApproveNo1, string pApproveNo2, Nullable<System.DateTime> pInstallationStartDate, Nullable<System.DateTime> pInstallationFinishDate, Nullable<decimal> pNormalContractFee, string pBillingOCC, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, Nullable<decimal> pNormalInstallFeeUsd, Nullable<decimal> pBillingInstallFeeUsd, Nullable<decimal> pNormalSaleProductPriceUsd, Nullable<decimal> pNormalContractFeeUsd, string pNormalInstallFeeCurrencyType, string pBillingInstallFeeCurrencyType, string pNormalSaleProductPriceCurrencyType, string pNormalContractFeeCurrencyType, MergeOption mergeOption)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pOCCParameter = pOCC != null ?
                new ObjectParameter("pOCC", pOCC) :
                new ObjectParameter("pOCC", typeof(string));
    
            var pServiceTypeCodeParameter = pServiceTypeCode != null ?
                new ObjectParameter("pServiceTypeCode", pServiceTypeCode) :
                new ObjectParameter("pServiceTypeCode", typeof(string));
    
            var pInstallationStatusParameter = pInstallationStatus != null ?
                new ObjectParameter("pInstallationStatus", pInstallationStatus) :
                new ObjectParameter("pInstallationStatus", typeof(string));
    
            var pInstallationTypeParameter = pInstallationType != null ?
                new ObjectParameter("pInstallationType", pInstallationType) :
                new ObjectParameter("pInstallationType", typeof(string));
    
            var pPlanCodeParameter = pPlanCode != null ?
                new ObjectParameter("pPlanCode", pPlanCode) :
                new ObjectParameter("pPlanCode", typeof(string));
    
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            var pOperationOfficeCodeParameter = pOperationOfficeCode != null ?
                new ObjectParameter("pOperationOfficeCode", pOperationOfficeCode) :
                new ObjectParameter("pOperationOfficeCode", typeof(string));
    
            var pSecurityTypeCodeParameter = pSecurityTypeCode != null ?
                new ObjectParameter("pSecurityTypeCode", pSecurityTypeCode) :
                new ObjectParameter("pSecurityTypeCode", typeof(string));
    
            var pChangeReasonTypeCodeParameter = pChangeReasonTypeCode != null ?
                new ObjectParameter("pChangeReasonTypeCode", pChangeReasonTypeCode) :
                new ObjectParameter("pChangeReasonTypeCode", typeof(string));
    
            var pNormalInstallFeeParameter = pNormalInstallFee.HasValue ?
                new ObjectParameter("pNormalInstallFee", pNormalInstallFee) :
                new ObjectParameter("pNormalInstallFee", typeof(decimal));
    
            var pBillingInstallFeeParameter = pBillingInstallFee.HasValue ?
                new ObjectParameter("pBillingInstallFee", pBillingInstallFee) :
                new ObjectParameter("pBillingInstallFee", typeof(decimal));
    
            var pInstallFeeBillingTypeParameter = pInstallFeeBillingType != null ?
                new ObjectParameter("pInstallFeeBillingType", pInstallFeeBillingType) :
                new ObjectParameter("pInstallFeeBillingType", typeof(string));
    
            var pNormalSaleProductPriceParameter = pNormalSaleProductPrice.HasValue ?
                new ObjectParameter("pNormalSaleProductPrice", pNormalSaleProductPrice) :
                new ObjectParameter("pNormalSaleProductPrice", typeof(decimal));
    
            var pBillingSalePriceParameter = pBillingSalePrice.HasValue ?
                new ObjectParameter("pBillingSalePrice", pBillingSalePrice) :
                new ObjectParameter("pBillingSalePrice", typeof(decimal));
    
            var pInstallationSlipProcessingDateParameter = pInstallationSlipProcessingDate.HasValue ?
                new ObjectParameter("pInstallationSlipProcessingDate", pInstallationSlipProcessingDate) :
                new ObjectParameter("pInstallationSlipProcessingDate", typeof(System.DateTime));
    
            var pInstallationCompleteDateParameter = pInstallationCompleteDate.HasValue ?
                new ObjectParameter("pInstallationCompleteDate", pInstallationCompleteDate) :
                new ObjectParameter("pInstallationCompleteDate", typeof(System.DateTime));
    
            var pInstallationCompleteProcessingDateParameter = pInstallationCompleteProcessingDate.HasValue ?
                new ObjectParameter("pInstallationCompleteProcessingDate", pInstallationCompleteProcessingDate) :
                new ObjectParameter("pInstallationCompleteProcessingDate", typeof(System.DateTime));
    
            var pInstallationByParameter = pInstallationBy != null ?
                new ObjectParameter("pInstallationBy", pInstallationBy) :
                new ObjectParameter("pInstallationBy", typeof(string));
    
            var pSalesmanEmpNo1Parameter = pSalesmanEmpNo1 != null ?
                new ObjectParameter("pSalesmanEmpNo1", pSalesmanEmpNo1) :
                new ObjectParameter("pSalesmanEmpNo1", typeof(string));
    
            var pSalesmanEmpNo2Parameter = pSalesmanEmpNo2 != null ?
                new ObjectParameter("pSalesmanEmpNo2", pSalesmanEmpNo2) :
                new ObjectParameter("pSalesmanEmpNo2", typeof(string));
    
            var pApproveNo1Parameter = pApproveNo1 != null ?
                new ObjectParameter("pApproveNo1", pApproveNo1) :
                new ObjectParameter("pApproveNo1", typeof(string));
    
            var pApproveNo2Parameter = pApproveNo2 != null ?
                new ObjectParameter("pApproveNo2", pApproveNo2) :
                new ObjectParameter("pApproveNo2", typeof(string));
    
            var pInstallationStartDateParameter = pInstallationStartDate.HasValue ?
                new ObjectParameter("pInstallationStartDate", pInstallationStartDate) :
                new ObjectParameter("pInstallationStartDate", typeof(System.DateTime));
    
            var pInstallationFinishDateParameter = pInstallationFinishDate.HasValue ?
                new ObjectParameter("pInstallationFinishDate", pInstallationFinishDate) :
                new ObjectParameter("pInstallationFinishDate", typeof(System.DateTime));
    
            var pNormalContractFeeParameter = pNormalContractFee.HasValue ?
                new ObjectParameter("pNormalContractFee", pNormalContractFee) :
                new ObjectParameter("pNormalContractFee", typeof(decimal));
    
            var pBillingOCCParameter = pBillingOCC != null ?
                new ObjectParameter("pBillingOCC", pBillingOCC) :
                new ObjectParameter("pBillingOCC", typeof(string));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            var pUpdateDateParameter = pUpdateDate.HasValue ?
                new ObjectParameter("pUpdateDate", pUpdateDate) :
                new ObjectParameter("pUpdateDate", typeof(System.DateTime));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var pNormalInstallFeeUsdParameter = pNormalInstallFeeUsd.HasValue ?
                new ObjectParameter("pNormalInstallFeeUsd", pNormalInstallFeeUsd) :
                new ObjectParameter("pNormalInstallFeeUsd", typeof(decimal));
    
            var pBillingInstallFeeUsdParameter = pBillingInstallFeeUsd.HasValue ?
                new ObjectParameter("pBillingInstallFeeUsd", pBillingInstallFeeUsd) :
                new ObjectParameter("pBillingInstallFeeUsd", typeof(decimal));
    
            var pNormalSaleProductPriceUsdParameter = pNormalSaleProductPriceUsd.HasValue ?
                new ObjectParameter("pNormalSaleProductPriceUsd", pNormalSaleProductPriceUsd) :
                new ObjectParameter("pNormalSaleProductPriceUsd", typeof(decimal));
    
            var pNormalContractFeeUsdParameter = pNormalContractFeeUsd.HasValue ?
                new ObjectParameter("pNormalContractFeeUsd", pNormalContractFeeUsd) :
                new ObjectParameter("pNormalContractFeeUsd", typeof(decimal));
    
            var pNormalInstallFeeCurrencyTypeParameter = pNormalInstallFeeCurrencyType != null ?
                new ObjectParameter("pNormalInstallFeeCurrencyType", pNormalInstallFeeCurrencyType) :
                new ObjectParameter("pNormalInstallFeeCurrencyType", typeof(string));
    
            var pBillingInstallFeeCurrencyTypeParameter = pBillingInstallFeeCurrencyType != null ?
                new ObjectParameter("pBillingInstallFeeCurrencyType", pBillingInstallFeeCurrencyType) :
                new ObjectParameter("pBillingInstallFeeCurrencyType", typeof(string));
    
            var pNormalSaleProductPriceCurrencyTypeParameter = pNormalSaleProductPriceCurrencyType != null ?
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", pNormalSaleProductPriceCurrencyType) :
                new ObjectParameter("pNormalSaleProductPriceCurrencyType", typeof(string));
    
            var pNormalContractFeeCurrencyTypeParameter = pNormalContractFeeCurrencyType != null ?
                new ObjectParameter("pNormalContractFeeCurrencyType", pNormalContractFeeCurrencyType) :
                new ObjectParameter("pNormalContractFeeCurrencyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("UpdateTbt_InstallationBasic", mergeOption, pContractProjectCodeParameter, pOCCParameter, pServiceTypeCodeParameter, pInstallationStatusParameter, pInstallationTypeParameter, pPlanCodeParameter, pSlipNoParameter, pMaintenanceNoParameter, pOperationOfficeCodeParameter, pSecurityTypeCodeParameter, pChangeReasonTypeCodeParameter, pNormalInstallFeeParameter, pBillingInstallFeeParameter, pInstallFeeBillingTypeParameter, pNormalSaleProductPriceParameter, pBillingSalePriceParameter, pInstallationSlipProcessingDateParameter, pInstallationCompleteDateParameter, pInstallationCompleteProcessingDateParameter, pInstallationByParameter, pSalesmanEmpNo1Parameter, pSalesmanEmpNo2Parameter, pApproveNo1Parameter, pApproveNo2Parameter, pInstallationStartDateParameter, pInstallationFinishDateParameter, pNormalContractFeeParameter, pBillingOCCParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, pNormalInstallFeeUsdParameter, pBillingInstallFeeUsdParameter, pNormalSaleProductPriceUsdParameter, pNormalContractFeeUsdParameter, pNormalInstallFeeCurrencyTypeParameter, pBillingInstallFeeCurrencyTypeParameter, pNormalSaleProductPriceCurrencyTypeParameter, pNormalContractFeeCurrencyTypeParameter);
        }
    
        public virtual ObjectResult<CheckCancelContractBeforeStartService_Result> CheckCancelContractBeforeStartService(string strContractCode, string c_CONTRACT_STATUS_END, string c_CONTRACT_STATUS_CANCEL, string c_CONTRACT_STATUS_FIXED_CANCEL)
        {
            var strContractCodeParameter = strContractCode != null ?
                new ObjectParameter("strContractCode", strContractCode) :
                new ObjectParameter("strContractCode", typeof(string));
    
            var c_CONTRACT_STATUS_ENDParameter = c_CONTRACT_STATUS_END != null ?
                new ObjectParameter("C_CONTRACT_STATUS_END", c_CONTRACT_STATUS_END) :
                new ObjectParameter("C_CONTRACT_STATUS_END", typeof(string));
    
            var c_CONTRACT_STATUS_CANCELParameter = c_CONTRACT_STATUS_CANCEL != null ?
                new ObjectParameter("C_CONTRACT_STATUS_CANCEL", c_CONTRACT_STATUS_CANCEL) :
                new ObjectParameter("C_CONTRACT_STATUS_CANCEL", typeof(string));
    
            var c_CONTRACT_STATUS_FIXED_CANCELParameter = c_CONTRACT_STATUS_FIXED_CANCEL != null ?
                new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", c_CONTRACT_STATUS_FIXED_CANCEL) :
                new ObjectParameter("C_CONTRACT_STATUS_FIXED_CANCEL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckCancelContractBeforeStartService_Result>("CheckCancelContractBeforeStartService", strContractCodeParameter, c_CONTRACT_STATUS_ENDParameter, c_CONTRACT_STATUS_CANCELParameter, c_CONTRACT_STATUS_FIXED_CANCELParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationMemo> InsertTbt_InstallationMemo(Nullable<int> memoID, string contractProjectCode, string referenceID, string objectID, string memo, string officeCode, string departmentCode, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var memoIDParameter = memoID.HasValue ?
                new ObjectParameter("MemoID", memoID) :
                new ObjectParameter("MemoID", typeof(int));
    
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var departmentCodeParameter = departmentCode != null ?
                new ObjectParameter("DepartmentCode", departmentCode) :
                new ObjectParameter("DepartmentCode", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationMemo>("InsertTbt_InstallationMemo", memoIDParameter, contractProjectCodeParameter, referenceIDParameter, objectIDParameter, memoParameter, officeCodeParameter, departmentCodeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationMemo> InsertTbt_InstallationMemo(Nullable<int> memoID, string contractProjectCode, string referenceID, string objectID, string memo, string officeCode, string departmentCode, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, MergeOption mergeOption)
        {
            var memoIDParameter = memoID.HasValue ?
                new ObjectParameter("MemoID", memoID) :
                new ObjectParameter("MemoID", typeof(int));
    
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var departmentCodeParameter = departmentCode != null ?
                new ObjectParameter("DepartmentCode", departmentCode) :
                new ObjectParameter("DepartmentCode", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationMemo>("InsertTbt_InstallationMemo", mergeOption, memoIDParameter, contractProjectCodeParameter, referenceIDParameter, objectIDParameter, memoParameter, officeCodeParameter, departmentCodeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationEmail> InsertTbt_InstallationEmail(Nullable<int> emailID, string referenceID, string emailNoticeTarget, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var emailIDParameter = emailID.HasValue ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(int));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var emailNoticeTargetParameter = emailNoticeTarget != null ?
                new ObjectParameter("EmailNoticeTarget", emailNoticeTarget) :
                new ObjectParameter("EmailNoticeTarget", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationEmail>("InsertTbt_InstallationEmail", emailIDParameter, referenceIDParameter, emailNoticeTargetParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationEmail> InsertTbt_InstallationEmail(Nullable<int> emailID, string referenceID, string emailNoticeTarget, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, MergeOption mergeOption)
        {
            var emailIDParameter = emailID.HasValue ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(int));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var emailNoticeTargetParameter = emailNoticeTarget != null ?
                new ObjectParameter("EmailNoticeTarget", emailNoticeTarget) :
                new ObjectParameter("EmailNoticeTarget", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationEmail>("InsertTbt_InstallationEmail", mergeOption, emailIDParameter, referenceIDParameter, emailNoticeTargetParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationManagement> GetTbt_InstallationManagement(string pMaintenanceNo)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationManagement>("GetTbt_InstallationManagement", pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationManagement> GetTbt_InstallationManagement(string pMaintenanceNo, MergeOption mergeOption)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationManagement>("GetTbt_InstallationManagement", mergeOption, pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> GetTbt_InstallationPOManagement(string pMaintenanceNo)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("GetTbt_InstallationPOManagement", pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> GetTbt_InstallationPOManagement(string pMaintenanceNo, MergeOption mergeOption)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("GetTbt_InstallationPOManagement", mergeOption, pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationEmail> GetTbt_InstallationEmail(string pMaintenanceNo)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationEmail>("GetTbt_InstallationEmail", pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationEmail> GetTbt_InstallationEmail(string pMaintenanceNo, MergeOption mergeOption)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationEmail>("GetTbt_InstallationEmail", mergeOption, pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> InsertTbt_InstallationPOManagement(string xml_POManagement)
        {
            var xml_POManagementParameter = xml_POManagement != null ?
                new ObjectParameter("xml_POManagement", xml_POManagement) :
                new ObjectParameter("xml_POManagement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("InsertTbt_InstallationPOManagement", xml_POManagementParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> InsertTbt_InstallationPOManagement(string xml_POManagement, MergeOption mergeOption)
        {
            var xml_POManagementParameter = xml_POManagement != null ?
                new ObjectParameter("xml_POManagement", xml_POManagement) :
                new ObjectParameter("xml_POManagement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("InsertTbt_InstallationPOManagement", mergeOption, xml_POManagementParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> UpdateTbt_InstallationPOManagement(string xml_POManagement)
        {
            var xml_POManagementParameter = xml_POManagement != null ?
                new ObjectParameter("xml_POManagement", xml_POManagement) :
                new ObjectParameter("xml_POManagement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("UpdateTbt_InstallationPOManagement", xml_POManagementParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> UpdateTbt_InstallationPOManagement(string xml_POManagement, MergeOption mergeOption)
        {
            var xml_POManagementParameter = xml_POManagement != null ?
                new ObjectParameter("xml_POManagement", xml_POManagement) :
                new ObjectParameter("xml_POManagement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("UpdateTbt_InstallationPOManagement", mergeOption, xml_POManagementParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationManagement> UpdateTbt_InstallationManagement(string pMaintenanceNo, string pContractProjectCode, string pManagementStatus, Nullable<System.DateTime> pProposeInstallStartDate, Nullable<System.DateTime> pProposeInstallCompleteDate, string pCustomerStaffBelonging, string pCustomerStaffName, string pCustomerStaffPhoneNo, Nullable<System.DateTime> pNewPhoneLineOpenDate, string pNewConnectionPhoneNo, string pNewPhoneLineOwnerTypeCode, string pIEStaffEmpNo1, string pIEStaffEmpNo2, Nullable<int> pIEManPower, Nullable<decimal> pMaterialFee, Nullable<decimal> pMaterialFeeUsd, string pMaterialFeeCurrencyType, string pRequestMemo, string pPOMemo, string pChangeReasonCode, string pChangeReasonOther, string pChangeRequestorCode, string pChangeRequestorOther, Nullable<bool> pNewBldMgmtFlag, Nullable<decimal> pNewBldMgmtCost, Nullable<decimal> pNewBldMgmtCostUsd, string pNewBldMgmtCostCurrencyType, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, string approveNo)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pManagementStatusParameter = pManagementStatus != null ?
                new ObjectParameter("pManagementStatus", pManagementStatus) :
                new ObjectParameter("pManagementStatus", typeof(string));
    
            var pProposeInstallStartDateParameter = pProposeInstallStartDate.HasValue ?
                new ObjectParameter("pProposeInstallStartDate", pProposeInstallStartDate) :
                new ObjectParameter("pProposeInstallStartDate", typeof(System.DateTime));
    
            var pProposeInstallCompleteDateParameter = pProposeInstallCompleteDate.HasValue ?
                new ObjectParameter("pProposeInstallCompleteDate", pProposeInstallCompleteDate) :
                new ObjectParameter("pProposeInstallCompleteDate", typeof(System.DateTime));
    
            var pCustomerStaffBelongingParameter = pCustomerStaffBelonging != null ?
                new ObjectParameter("pCustomerStaffBelonging", pCustomerStaffBelonging) :
                new ObjectParameter("pCustomerStaffBelonging", typeof(string));
    
            var pCustomerStaffNameParameter = pCustomerStaffName != null ?
                new ObjectParameter("pCustomerStaffName", pCustomerStaffName) :
                new ObjectParameter("pCustomerStaffName", typeof(string));
    
            var pCustomerStaffPhoneNoParameter = pCustomerStaffPhoneNo != null ?
                new ObjectParameter("pCustomerStaffPhoneNo", pCustomerStaffPhoneNo) :
                new ObjectParameter("pCustomerStaffPhoneNo", typeof(string));
    
            var pNewPhoneLineOpenDateParameter = pNewPhoneLineOpenDate.HasValue ?
                new ObjectParameter("pNewPhoneLineOpenDate", pNewPhoneLineOpenDate) :
                new ObjectParameter("pNewPhoneLineOpenDate", typeof(System.DateTime));
    
            var pNewConnectionPhoneNoParameter = pNewConnectionPhoneNo != null ?
                new ObjectParameter("pNewConnectionPhoneNo", pNewConnectionPhoneNo) :
                new ObjectParameter("pNewConnectionPhoneNo", typeof(string));
    
            var pNewPhoneLineOwnerTypeCodeParameter = pNewPhoneLineOwnerTypeCode != null ?
                new ObjectParameter("pNewPhoneLineOwnerTypeCode", pNewPhoneLineOwnerTypeCode) :
                new ObjectParameter("pNewPhoneLineOwnerTypeCode", typeof(string));
    
            var pIEStaffEmpNo1Parameter = pIEStaffEmpNo1 != null ?
                new ObjectParameter("pIEStaffEmpNo1", pIEStaffEmpNo1) :
                new ObjectParameter("pIEStaffEmpNo1", typeof(string));
    
            var pIEStaffEmpNo2Parameter = pIEStaffEmpNo2 != null ?
                new ObjectParameter("pIEStaffEmpNo2", pIEStaffEmpNo2) :
                new ObjectParameter("pIEStaffEmpNo2", typeof(string));
    
            var pIEManPowerParameter = pIEManPower.HasValue ?
                new ObjectParameter("pIEManPower", pIEManPower) :
                new ObjectParameter("pIEManPower", typeof(int));
    
            var pMaterialFeeParameter = pMaterialFee.HasValue ?
                new ObjectParameter("pMaterialFee", pMaterialFee) :
                new ObjectParameter("pMaterialFee", typeof(decimal));
    
            var pMaterialFeeUsdParameter = pMaterialFeeUsd.HasValue ?
                new ObjectParameter("pMaterialFeeUsd", pMaterialFeeUsd) :
                new ObjectParameter("pMaterialFeeUsd", typeof(decimal));
    
            var pMaterialFeeCurrencyTypeParameter = pMaterialFeeCurrencyType != null ?
                new ObjectParameter("pMaterialFeeCurrencyType", pMaterialFeeCurrencyType) :
                new ObjectParameter("pMaterialFeeCurrencyType", typeof(string));
    
            var pRequestMemoParameter = pRequestMemo != null ?
                new ObjectParameter("pRequestMemo", pRequestMemo) :
                new ObjectParameter("pRequestMemo", typeof(string));
    
            var pPOMemoParameter = pPOMemo != null ?
                new ObjectParameter("pPOMemo", pPOMemo) :
                new ObjectParameter("pPOMemo", typeof(string));
    
            var pChangeReasonCodeParameter = pChangeReasonCode != null ?
                new ObjectParameter("pChangeReasonCode", pChangeReasonCode) :
                new ObjectParameter("pChangeReasonCode", typeof(string));
    
            var pChangeReasonOtherParameter = pChangeReasonOther != null ?
                new ObjectParameter("pChangeReasonOther", pChangeReasonOther) :
                new ObjectParameter("pChangeReasonOther", typeof(string));
    
            var pChangeRequestorCodeParameter = pChangeRequestorCode != null ?
                new ObjectParameter("pChangeRequestorCode", pChangeRequestorCode) :
                new ObjectParameter("pChangeRequestorCode", typeof(string));
    
            var pChangeRequestorOtherParameter = pChangeRequestorOther != null ?
                new ObjectParameter("pChangeRequestorOther", pChangeRequestorOther) :
                new ObjectParameter("pChangeRequestorOther", typeof(string));
    
            var pNewBldMgmtFlagParameter = pNewBldMgmtFlag.HasValue ?
                new ObjectParameter("pNewBldMgmtFlag", pNewBldMgmtFlag) :
                new ObjectParameter("pNewBldMgmtFlag", typeof(bool));
    
            var pNewBldMgmtCostParameter = pNewBldMgmtCost.HasValue ?
                new ObjectParameter("pNewBldMgmtCost", pNewBldMgmtCost) :
                new ObjectParameter("pNewBldMgmtCost", typeof(decimal));
    
            var pNewBldMgmtCostUsdParameter = pNewBldMgmtCostUsd.HasValue ?
                new ObjectParameter("pNewBldMgmtCostUsd", pNewBldMgmtCostUsd) :
                new ObjectParameter("pNewBldMgmtCostUsd", typeof(decimal));
    
            var pNewBldMgmtCostCurrencyTypeParameter = pNewBldMgmtCostCurrencyType != null ?
                new ObjectParameter("pNewBldMgmtCostCurrencyType", pNewBldMgmtCostCurrencyType) :
                new ObjectParameter("pNewBldMgmtCostCurrencyType", typeof(string));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            var pUpdateDateParameter = pUpdateDate.HasValue ?
                new ObjectParameter("pUpdateDate", pUpdateDate) :
                new ObjectParameter("pUpdateDate", typeof(System.DateTime));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var approveNoParameter = approveNo != null ?
                new ObjectParameter("ApproveNo", approveNo) :
                new ObjectParameter("ApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationManagement>("UpdateTbt_InstallationManagement", pMaintenanceNoParameter, pContractProjectCodeParameter, pManagementStatusParameter, pProposeInstallStartDateParameter, pProposeInstallCompleteDateParameter, pCustomerStaffBelongingParameter, pCustomerStaffNameParameter, pCustomerStaffPhoneNoParameter, pNewPhoneLineOpenDateParameter, pNewConnectionPhoneNoParameter, pNewPhoneLineOwnerTypeCodeParameter, pIEStaffEmpNo1Parameter, pIEStaffEmpNo2Parameter, pIEManPowerParameter, pMaterialFeeParameter, pMaterialFeeUsdParameter, pMaterialFeeCurrencyTypeParameter, pRequestMemoParameter, pPOMemoParameter, pChangeReasonCodeParameter, pChangeReasonOtherParameter, pChangeRequestorCodeParameter, pChangeRequestorOtherParameter, pNewBldMgmtFlagParameter, pNewBldMgmtCostParameter, pNewBldMgmtCostUsdParameter, pNewBldMgmtCostCurrencyTypeParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, approveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationManagement> UpdateTbt_InstallationManagement(string pMaintenanceNo, string pContractProjectCode, string pManagementStatus, Nullable<System.DateTime> pProposeInstallStartDate, Nullable<System.DateTime> pProposeInstallCompleteDate, string pCustomerStaffBelonging, string pCustomerStaffName, string pCustomerStaffPhoneNo, Nullable<System.DateTime> pNewPhoneLineOpenDate, string pNewConnectionPhoneNo, string pNewPhoneLineOwnerTypeCode, string pIEStaffEmpNo1, string pIEStaffEmpNo2, Nullable<int> pIEManPower, Nullable<decimal> pMaterialFee, Nullable<decimal> pMaterialFeeUsd, string pMaterialFeeCurrencyType, string pRequestMemo, string pPOMemo, string pChangeReasonCode, string pChangeReasonOther, string pChangeRequestorCode, string pChangeRequestorOther, Nullable<bool> pNewBldMgmtFlag, Nullable<decimal> pNewBldMgmtCost, Nullable<decimal> pNewBldMgmtCostUsd, string pNewBldMgmtCostCurrencyType, Nullable<System.DateTime> pCreateDate, string pCreateBy, Nullable<System.DateTime> pUpdateDate, string pUpdateBy, string approveNo, MergeOption mergeOption)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pManagementStatusParameter = pManagementStatus != null ?
                new ObjectParameter("pManagementStatus", pManagementStatus) :
                new ObjectParameter("pManagementStatus", typeof(string));
    
            var pProposeInstallStartDateParameter = pProposeInstallStartDate.HasValue ?
                new ObjectParameter("pProposeInstallStartDate", pProposeInstallStartDate) :
                new ObjectParameter("pProposeInstallStartDate", typeof(System.DateTime));
    
            var pProposeInstallCompleteDateParameter = pProposeInstallCompleteDate.HasValue ?
                new ObjectParameter("pProposeInstallCompleteDate", pProposeInstallCompleteDate) :
                new ObjectParameter("pProposeInstallCompleteDate", typeof(System.DateTime));
    
            var pCustomerStaffBelongingParameter = pCustomerStaffBelonging != null ?
                new ObjectParameter("pCustomerStaffBelonging", pCustomerStaffBelonging) :
                new ObjectParameter("pCustomerStaffBelonging", typeof(string));
    
            var pCustomerStaffNameParameter = pCustomerStaffName != null ?
                new ObjectParameter("pCustomerStaffName", pCustomerStaffName) :
                new ObjectParameter("pCustomerStaffName", typeof(string));
    
            var pCustomerStaffPhoneNoParameter = pCustomerStaffPhoneNo != null ?
                new ObjectParameter("pCustomerStaffPhoneNo", pCustomerStaffPhoneNo) :
                new ObjectParameter("pCustomerStaffPhoneNo", typeof(string));
    
            var pNewPhoneLineOpenDateParameter = pNewPhoneLineOpenDate.HasValue ?
                new ObjectParameter("pNewPhoneLineOpenDate", pNewPhoneLineOpenDate) :
                new ObjectParameter("pNewPhoneLineOpenDate", typeof(System.DateTime));
    
            var pNewConnectionPhoneNoParameter = pNewConnectionPhoneNo != null ?
                new ObjectParameter("pNewConnectionPhoneNo", pNewConnectionPhoneNo) :
                new ObjectParameter("pNewConnectionPhoneNo", typeof(string));
    
            var pNewPhoneLineOwnerTypeCodeParameter = pNewPhoneLineOwnerTypeCode != null ?
                new ObjectParameter("pNewPhoneLineOwnerTypeCode", pNewPhoneLineOwnerTypeCode) :
                new ObjectParameter("pNewPhoneLineOwnerTypeCode", typeof(string));
    
            var pIEStaffEmpNo1Parameter = pIEStaffEmpNo1 != null ?
                new ObjectParameter("pIEStaffEmpNo1", pIEStaffEmpNo1) :
                new ObjectParameter("pIEStaffEmpNo1", typeof(string));
    
            var pIEStaffEmpNo2Parameter = pIEStaffEmpNo2 != null ?
                new ObjectParameter("pIEStaffEmpNo2", pIEStaffEmpNo2) :
                new ObjectParameter("pIEStaffEmpNo2", typeof(string));
    
            var pIEManPowerParameter = pIEManPower.HasValue ?
                new ObjectParameter("pIEManPower", pIEManPower) :
                new ObjectParameter("pIEManPower", typeof(int));
    
            var pMaterialFeeParameter = pMaterialFee.HasValue ?
                new ObjectParameter("pMaterialFee", pMaterialFee) :
                new ObjectParameter("pMaterialFee", typeof(decimal));
    
            var pMaterialFeeUsdParameter = pMaterialFeeUsd.HasValue ?
                new ObjectParameter("pMaterialFeeUsd", pMaterialFeeUsd) :
                new ObjectParameter("pMaterialFeeUsd", typeof(decimal));
    
            var pMaterialFeeCurrencyTypeParameter = pMaterialFeeCurrencyType != null ?
                new ObjectParameter("pMaterialFeeCurrencyType", pMaterialFeeCurrencyType) :
                new ObjectParameter("pMaterialFeeCurrencyType", typeof(string));
    
            var pRequestMemoParameter = pRequestMemo != null ?
                new ObjectParameter("pRequestMemo", pRequestMemo) :
                new ObjectParameter("pRequestMemo", typeof(string));
    
            var pPOMemoParameter = pPOMemo != null ?
                new ObjectParameter("pPOMemo", pPOMemo) :
                new ObjectParameter("pPOMemo", typeof(string));
    
            var pChangeReasonCodeParameter = pChangeReasonCode != null ?
                new ObjectParameter("pChangeReasonCode", pChangeReasonCode) :
                new ObjectParameter("pChangeReasonCode", typeof(string));
    
            var pChangeReasonOtherParameter = pChangeReasonOther != null ?
                new ObjectParameter("pChangeReasonOther", pChangeReasonOther) :
                new ObjectParameter("pChangeReasonOther", typeof(string));
    
            var pChangeRequestorCodeParameter = pChangeRequestorCode != null ?
                new ObjectParameter("pChangeRequestorCode", pChangeRequestorCode) :
                new ObjectParameter("pChangeRequestorCode", typeof(string));
    
            var pChangeRequestorOtherParameter = pChangeRequestorOther != null ?
                new ObjectParameter("pChangeRequestorOther", pChangeRequestorOther) :
                new ObjectParameter("pChangeRequestorOther", typeof(string));
    
            var pNewBldMgmtFlagParameter = pNewBldMgmtFlag.HasValue ?
                new ObjectParameter("pNewBldMgmtFlag", pNewBldMgmtFlag) :
                new ObjectParameter("pNewBldMgmtFlag", typeof(bool));
    
            var pNewBldMgmtCostParameter = pNewBldMgmtCost.HasValue ?
                new ObjectParameter("pNewBldMgmtCost", pNewBldMgmtCost) :
                new ObjectParameter("pNewBldMgmtCost", typeof(decimal));
    
            var pNewBldMgmtCostUsdParameter = pNewBldMgmtCostUsd.HasValue ?
                new ObjectParameter("pNewBldMgmtCostUsd", pNewBldMgmtCostUsd) :
                new ObjectParameter("pNewBldMgmtCostUsd", typeof(decimal));
    
            var pNewBldMgmtCostCurrencyTypeParameter = pNewBldMgmtCostCurrencyType != null ?
                new ObjectParameter("pNewBldMgmtCostCurrencyType", pNewBldMgmtCostCurrencyType) :
                new ObjectParameter("pNewBldMgmtCostCurrencyType", typeof(string));
    
            var pCreateDateParameter = pCreateDate.HasValue ?
                new ObjectParameter("pCreateDate", pCreateDate) :
                new ObjectParameter("pCreateDate", typeof(System.DateTime));
    
            var pCreateByParameter = pCreateBy != null ?
                new ObjectParameter("pCreateBy", pCreateBy) :
                new ObjectParameter("pCreateBy", typeof(string));
    
            var pUpdateDateParameter = pUpdateDate.HasValue ?
                new ObjectParameter("pUpdateDate", pUpdateDate) :
                new ObjectParameter("pUpdateDate", typeof(System.DateTime));
    
            var pUpdateByParameter = pUpdateBy != null ?
                new ObjectParameter("pUpdateBy", pUpdateBy) :
                new ObjectParameter("pUpdateBy", typeof(string));
    
            var approveNoParameter = approveNo != null ?
                new ObjectParameter("ApproveNo", approveNo) :
                new ObjectParameter("ApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationManagement>("UpdateTbt_InstallationManagement", mergeOption, pMaintenanceNoParameter, pContractProjectCodeParameter, pManagementStatusParameter, pProposeInstallStartDateParameter, pProposeInstallCompleteDateParameter, pCustomerStaffBelongingParameter, pCustomerStaffNameParameter, pCustomerStaffPhoneNoParameter, pNewPhoneLineOpenDateParameter, pNewConnectionPhoneNoParameter, pNewPhoneLineOwnerTypeCodeParameter, pIEStaffEmpNo1Parameter, pIEStaffEmpNo2Parameter, pIEManPowerParameter, pMaterialFeeParameter, pMaterialFeeUsdParameter, pMaterialFeeCurrencyTypeParameter, pRequestMemoParameter, pPOMemoParameter, pChangeReasonCodeParameter, pChangeReasonOtherParameter, pChangeRequestorCodeParameter, pChangeRequestorOtherParameter, pNewBldMgmtFlagParameter, pNewBldMgmtCostParameter, pNewBldMgmtCostUsdParameter, pNewBldMgmtCostCurrencyTypeParameter, pCreateDateParameter, pCreateByParameter, pUpdateDateParameter, pUpdateByParameter, approveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlip> GetTbt_InstallationSlip(string pSlipNo)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlip>("GetTbt_InstallationSlip", pSlipNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlip> GetTbt_InstallationSlip(string pSlipNo, MergeOption mergeOption)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlip>("GetTbt_InstallationSlip", mergeOption, pSlipNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationInstrumentDetails> GetTbt_InstallationInstrumentDetails(string pContractCode, string pInstrumentCode)
        {
            var pContractCodeParameter = pContractCode != null ?
                new ObjectParameter("pContractCode", pContractCode) :
                new ObjectParameter("pContractCode", typeof(string));
    
            var pInstrumentCodeParameter = pInstrumentCode != null ?
                new ObjectParameter("pInstrumentCode", pInstrumentCode) :
                new ObjectParameter("pInstrumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationInstrumentDetails>("GetTbt_InstallationInstrumentDetails", pContractCodeParameter, pInstrumentCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationInstrumentDetails> GetTbt_InstallationInstrumentDetails(string pContractCode, string pInstrumentCode, MergeOption mergeOption)
        {
            var pContractCodeParameter = pContractCode != null ?
                new ObjectParameter("pContractCode", pContractCode) :
                new ObjectParameter("pContractCode", typeof(string));
    
            var pInstrumentCodeParameter = pInstrumentCode != null ?
                new ObjectParameter("pInstrumentCode", pInstrumentCode) :
                new ObjectParameter("pInstrumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationInstrumentDetails>("GetTbt_InstallationInstrumentDetails", mergeOption, pContractCodeParameter, pInstrumentCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlip> InsertTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var serviceTypeCodeParameter = serviceTypeCode != null ?
                new ObjectParameter("ServiceTypeCode", serviceTypeCode) :
                new ObjectParameter("ServiceTypeCode", typeof(string));
    
            var slipStatusParameter = slipStatus != null ?
                new ObjectParameter("SlipStatus", slipStatus) :
                new ObjectParameter("SlipStatus", typeof(string));
    
            var changeReasonCodeParameter = changeReasonCode != null ?
                new ObjectParameter("ChangeReasonCode", changeReasonCode) :
                new ObjectParameter("ChangeReasonCode", typeof(string));
    
            var installationTypeParameter = installationType != null ?
                new ObjectParameter("InstallationType", installationType) :
                new ObjectParameter("InstallationType", typeof(string));
    
            var planCodeParameter = planCode != null ?
                new ObjectParameter("PlanCode", planCode) :
                new ObjectParameter("PlanCode", typeof(string));
    
            var causeReasonParameter = causeReason != null ?
                new ObjectParameter("CauseReason", causeReason) :
                new ObjectParameter("CauseReason", typeof(string));
    
            var normalContractFeeParameter = normalContractFee.HasValue ?
                new ObjectParameter("NormalContractFee", normalContractFee) :
                new ObjectParameter("NormalContractFee", typeof(decimal));
    
            var normalContractFeeUsdParameter = normalContractFeeUsd.HasValue ?
                new ObjectParameter("NormalContractFeeUsd", normalContractFeeUsd) :
                new ObjectParameter("NormalContractFeeUsd", typeof(decimal));
    
            var normalContractFeeCurrencyTypeParameter = normalContractFeeCurrencyType != null ?
                new ObjectParameter("NormalContractFeeCurrencyType", normalContractFeeCurrencyType) :
                new ObjectParameter("NormalContractFeeCurrencyType", typeof(string));
    
            var normalInstallFeeParameter = normalInstallFee.HasValue ?
                new ObjectParameter("NormalInstallFee", normalInstallFee) :
                new ObjectParameter("NormalInstallFee", typeof(decimal));
    
            var normalInstallFeeUsdParameter = normalInstallFeeUsd.HasValue ?
                new ObjectParameter("NormalInstallFeeUsd", normalInstallFeeUsd) :
                new ObjectParameter("NormalInstallFeeUsd", typeof(decimal));
    
            var normalInstallFeeCurrencyTypeParameter = normalInstallFeeCurrencyType != null ?
                new ObjectParameter("NormalInstallFeeCurrencyType", normalInstallFeeCurrencyType) :
                new ObjectParameter("NormalInstallFeeCurrencyType", typeof(string));
    
            var installFeeBillingTypeParameter = installFeeBillingType != null ?
                new ObjectParameter("InstallFeeBillingType", installFeeBillingType) :
                new ObjectParameter("InstallFeeBillingType", typeof(string));
    
            var billingInstallFeeParameter = billingInstallFee.HasValue ?
                new ObjectParameter("BillingInstallFee", billingInstallFee) :
                new ObjectParameter("BillingInstallFee", typeof(decimal));
    
            var billingInstallFeeUsdParameter = billingInstallFeeUsd.HasValue ?
                new ObjectParameter("BillingInstallFeeUsd", billingInstallFeeUsd) :
                new ObjectParameter("BillingInstallFeeUsd", typeof(decimal));
    
            var billingInstallFeeCurencyTypeParameter = billingInstallFeeCurencyType != null ?
                new ObjectParameter("BillingInstallFeeCurencyType", billingInstallFeeCurencyType) :
                new ObjectParameter("BillingInstallFeeCurencyType", typeof(string));
    
            var orderInstallFeeParameter = orderInstallFee.HasValue ?
                new ObjectParameter("OrderInstallFee", orderInstallFee) :
                new ObjectParameter("OrderInstallFee", typeof(decimal));
    
            var orderInstallFeeUsdParameter = orderInstallFeeUsd.HasValue ?
                new ObjectParameter("OrderInstallFeeUsd", orderInstallFeeUsd) :
                new ObjectParameter("OrderInstallFeeUsd", typeof(decimal));
    
            var orderInstallFeeCurrencyTypeParameter = orderInstallFeeCurrencyType != null ?
                new ObjectParameter("OrderInstallFeeCurrencyType", orderInstallFeeCurrencyType) :
                new ObjectParameter("OrderInstallFeeCurrencyType", typeof(string));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var previousSlipNoParameter = previousSlipNo != null ?
                new ObjectParameter("PreviousSlipNo", previousSlipNo) :
                new ObjectParameter("PreviousSlipNo", typeof(string));
    
            var previousSlipStatusParameter = previousSlipStatus != null ?
                new ObjectParameter("PreviousSlipStatus", previousSlipStatus) :
                new ObjectParameter("PreviousSlipStatus", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var slipIssueDateParameter = slipIssueDate.HasValue ?
                new ObjectParameter("SlipIssueDate", slipIssueDate) :
                new ObjectParameter("SlipIssueDate", typeof(System.DateTime));
    
            var slipIssueOfficeCodeParameter = slipIssueOfficeCode != null ?
                new ObjectParameter("SlipIssueOfficeCode", slipIssueOfficeCode) :
                new ObjectParameter("SlipIssueOfficeCode", typeof(string));
    
            var stockOutDateParameter = stockOutDate.HasValue ?
                new ObjectParameter("StockOutDate", stockOutDate) :
                new ObjectParameter("StockOutDate", typeof(System.DateTime));
    
            var stockOutOfficeCodeParameter = stockOutOfficeCode != null ?
                new ObjectParameter("StockOutOfficeCode", stockOutOfficeCode) :
                new ObjectParameter("StockOutOfficeCode", typeof(string));
    
            var returnReceiveDateParameter = returnReceiveDate.HasValue ?
                new ObjectParameter("ReturnReceiveDate", returnReceiveDate) :
                new ObjectParameter("ReturnReceiveDate", typeof(System.DateTime));
    
            var returnReceiveOfficeCodeParameter = returnReceiveOfficeCode != null ?
                new ObjectParameter("ReturnReceiveOfficeCode", returnReceiveOfficeCode) :
                new ObjectParameter("ReturnReceiveOfficeCode", typeof(string));
    
            var approveNo1Parameter = approveNo1 != null ?
                new ObjectParameter("ApproveNo1", approveNo1) :
                new ObjectParameter("ApproveNo1", typeof(string));
    
            var approveNo2Parameter = approveNo2 != null ?
                new ObjectParameter("ApproveNo2", approveNo2) :
                new ObjectParameter("ApproveNo2", typeof(string));
    
            var changeContentsParameter = changeContents != null ?
                new ObjectParameter("ChangeContents", changeContents) :
                new ObjectParameter("ChangeContents", typeof(string));
    
            var expectedInstrumentArrivalDateParameter = expectedInstrumentArrivalDate.HasValue ?
                new ObjectParameter("ExpectedInstrumentArrivalDate", expectedInstrumentArrivalDate) :
                new ObjectParameter("ExpectedInstrumentArrivalDate", typeof(System.DateTime));
    
            var stockOutTypeCodeParameter = stockOutTypeCode != null ?
                new ObjectParameter("StockOutTypeCode", stockOutTypeCode) :
                new ObjectParameter("StockOutTypeCode", typeof(string));
    
            var slipTypeParameter = slipType != null ?
                new ObjectParameter("SlipType", slipType) :
                new ObjectParameter("SlipType", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var additionalStockOutOfficeCodeParameter = additionalStockOutOfficeCode != null ?
                new ObjectParameter("AdditionalStockOutOfficeCode", additionalStockOutOfficeCode) :
                new ObjectParameter("AdditionalStockOutOfficeCode", typeof(string));
    
            var slipIssueFlagParameter = slipIssueFlag.HasValue ?
                new ObjectParameter("SlipIssueFlag", slipIssueFlag) :
                new ObjectParameter("SlipIssueFlag", typeof(bool));
    
            var unremoveApproveNoParameter = unremoveApproveNo != null ?
                new ObjectParameter("UnremoveApproveNo", unremoveApproveNo) :
                new ObjectParameter("UnremoveApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlip>("InsertTbt_InstallationSlip", slipNoParameter, serviceTypeCodeParameter, slipStatusParameter, changeReasonCodeParameter, installationTypeParameter, planCodeParameter, causeReasonParameter, normalContractFeeParameter, normalContractFeeUsdParameter, normalContractFeeCurrencyTypeParameter, normalInstallFeeParameter, normalInstallFeeUsdParameter, normalInstallFeeCurrencyTypeParameter, installFeeBillingTypeParameter, billingInstallFeeParameter, billingInstallFeeUsdParameter, billingInstallFeeCurencyTypeParameter, orderInstallFeeParameter, orderInstallFeeUsdParameter, orderInstallFeeCurrencyTypeParameter, billingOCCParameter, previousSlipNoParameter, previousSlipStatusParameter, contractCodeParameter, slipIssueDateParameter, slipIssueOfficeCodeParameter, stockOutDateParameter, stockOutOfficeCodeParameter, returnReceiveDateParameter, returnReceiveOfficeCodeParameter, approveNo1Parameter, approveNo2Parameter, changeContentsParameter, expectedInstrumentArrivalDateParameter, stockOutTypeCodeParameter, slipTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, additionalStockOutOfficeCodeParameter, slipIssueFlagParameter, unremoveApproveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlip> InsertTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo, MergeOption mergeOption)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var serviceTypeCodeParameter = serviceTypeCode != null ?
                new ObjectParameter("ServiceTypeCode", serviceTypeCode) :
                new ObjectParameter("ServiceTypeCode", typeof(string));
    
            var slipStatusParameter = slipStatus != null ?
                new ObjectParameter("SlipStatus", slipStatus) :
                new ObjectParameter("SlipStatus", typeof(string));
    
            var changeReasonCodeParameter = changeReasonCode != null ?
                new ObjectParameter("ChangeReasonCode", changeReasonCode) :
                new ObjectParameter("ChangeReasonCode", typeof(string));
    
            var installationTypeParameter = installationType != null ?
                new ObjectParameter("InstallationType", installationType) :
                new ObjectParameter("InstallationType", typeof(string));
    
            var planCodeParameter = planCode != null ?
                new ObjectParameter("PlanCode", planCode) :
                new ObjectParameter("PlanCode", typeof(string));
    
            var causeReasonParameter = causeReason != null ?
                new ObjectParameter("CauseReason", causeReason) :
                new ObjectParameter("CauseReason", typeof(string));
    
            var normalContractFeeParameter = normalContractFee.HasValue ?
                new ObjectParameter("NormalContractFee", normalContractFee) :
                new ObjectParameter("NormalContractFee", typeof(decimal));
    
            var normalContractFeeUsdParameter = normalContractFeeUsd.HasValue ?
                new ObjectParameter("NormalContractFeeUsd", normalContractFeeUsd) :
                new ObjectParameter("NormalContractFeeUsd", typeof(decimal));
    
            var normalContractFeeCurrencyTypeParameter = normalContractFeeCurrencyType != null ?
                new ObjectParameter("NormalContractFeeCurrencyType", normalContractFeeCurrencyType) :
                new ObjectParameter("NormalContractFeeCurrencyType", typeof(string));
    
            var normalInstallFeeParameter = normalInstallFee.HasValue ?
                new ObjectParameter("NormalInstallFee", normalInstallFee) :
                new ObjectParameter("NormalInstallFee", typeof(decimal));
    
            var normalInstallFeeUsdParameter = normalInstallFeeUsd.HasValue ?
                new ObjectParameter("NormalInstallFeeUsd", normalInstallFeeUsd) :
                new ObjectParameter("NormalInstallFeeUsd", typeof(decimal));
    
            var normalInstallFeeCurrencyTypeParameter = normalInstallFeeCurrencyType != null ?
                new ObjectParameter("NormalInstallFeeCurrencyType", normalInstallFeeCurrencyType) :
                new ObjectParameter("NormalInstallFeeCurrencyType", typeof(string));
    
            var installFeeBillingTypeParameter = installFeeBillingType != null ?
                new ObjectParameter("InstallFeeBillingType", installFeeBillingType) :
                new ObjectParameter("InstallFeeBillingType", typeof(string));
    
            var billingInstallFeeParameter = billingInstallFee.HasValue ?
                new ObjectParameter("BillingInstallFee", billingInstallFee) :
                new ObjectParameter("BillingInstallFee", typeof(decimal));
    
            var billingInstallFeeUsdParameter = billingInstallFeeUsd.HasValue ?
                new ObjectParameter("BillingInstallFeeUsd", billingInstallFeeUsd) :
                new ObjectParameter("BillingInstallFeeUsd", typeof(decimal));
    
            var billingInstallFeeCurencyTypeParameter = billingInstallFeeCurencyType != null ?
                new ObjectParameter("BillingInstallFeeCurencyType", billingInstallFeeCurencyType) :
                new ObjectParameter("BillingInstallFeeCurencyType", typeof(string));
    
            var orderInstallFeeParameter = orderInstallFee.HasValue ?
                new ObjectParameter("OrderInstallFee", orderInstallFee) :
                new ObjectParameter("OrderInstallFee", typeof(decimal));
    
            var orderInstallFeeUsdParameter = orderInstallFeeUsd.HasValue ?
                new ObjectParameter("OrderInstallFeeUsd", orderInstallFeeUsd) :
                new ObjectParameter("OrderInstallFeeUsd", typeof(decimal));
    
            var orderInstallFeeCurrencyTypeParameter = orderInstallFeeCurrencyType != null ?
                new ObjectParameter("OrderInstallFeeCurrencyType", orderInstallFeeCurrencyType) :
                new ObjectParameter("OrderInstallFeeCurrencyType", typeof(string));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var previousSlipNoParameter = previousSlipNo != null ?
                new ObjectParameter("PreviousSlipNo", previousSlipNo) :
                new ObjectParameter("PreviousSlipNo", typeof(string));
    
            var previousSlipStatusParameter = previousSlipStatus != null ?
                new ObjectParameter("PreviousSlipStatus", previousSlipStatus) :
                new ObjectParameter("PreviousSlipStatus", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var slipIssueDateParameter = slipIssueDate.HasValue ?
                new ObjectParameter("SlipIssueDate", slipIssueDate) :
                new ObjectParameter("SlipIssueDate", typeof(System.DateTime));
    
            var slipIssueOfficeCodeParameter = slipIssueOfficeCode != null ?
                new ObjectParameter("SlipIssueOfficeCode", slipIssueOfficeCode) :
                new ObjectParameter("SlipIssueOfficeCode", typeof(string));
    
            var stockOutDateParameter = stockOutDate.HasValue ?
                new ObjectParameter("StockOutDate", stockOutDate) :
                new ObjectParameter("StockOutDate", typeof(System.DateTime));
    
            var stockOutOfficeCodeParameter = stockOutOfficeCode != null ?
                new ObjectParameter("StockOutOfficeCode", stockOutOfficeCode) :
                new ObjectParameter("StockOutOfficeCode", typeof(string));
    
            var returnReceiveDateParameter = returnReceiveDate.HasValue ?
                new ObjectParameter("ReturnReceiveDate", returnReceiveDate) :
                new ObjectParameter("ReturnReceiveDate", typeof(System.DateTime));
    
            var returnReceiveOfficeCodeParameter = returnReceiveOfficeCode != null ?
                new ObjectParameter("ReturnReceiveOfficeCode", returnReceiveOfficeCode) :
                new ObjectParameter("ReturnReceiveOfficeCode", typeof(string));
    
            var approveNo1Parameter = approveNo1 != null ?
                new ObjectParameter("ApproveNo1", approveNo1) :
                new ObjectParameter("ApproveNo1", typeof(string));
    
            var approveNo2Parameter = approveNo2 != null ?
                new ObjectParameter("ApproveNo2", approveNo2) :
                new ObjectParameter("ApproveNo2", typeof(string));
    
            var changeContentsParameter = changeContents != null ?
                new ObjectParameter("ChangeContents", changeContents) :
                new ObjectParameter("ChangeContents", typeof(string));
    
            var expectedInstrumentArrivalDateParameter = expectedInstrumentArrivalDate.HasValue ?
                new ObjectParameter("ExpectedInstrumentArrivalDate", expectedInstrumentArrivalDate) :
                new ObjectParameter("ExpectedInstrumentArrivalDate", typeof(System.DateTime));
    
            var stockOutTypeCodeParameter = stockOutTypeCode != null ?
                new ObjectParameter("StockOutTypeCode", stockOutTypeCode) :
                new ObjectParameter("StockOutTypeCode", typeof(string));
    
            var slipTypeParameter = slipType != null ?
                new ObjectParameter("SlipType", slipType) :
                new ObjectParameter("SlipType", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var additionalStockOutOfficeCodeParameter = additionalStockOutOfficeCode != null ?
                new ObjectParameter("AdditionalStockOutOfficeCode", additionalStockOutOfficeCode) :
                new ObjectParameter("AdditionalStockOutOfficeCode", typeof(string));
    
            var slipIssueFlagParameter = slipIssueFlag.HasValue ?
                new ObjectParameter("SlipIssueFlag", slipIssueFlag) :
                new ObjectParameter("SlipIssueFlag", typeof(bool));
    
            var unremoveApproveNoParameter = unremoveApproveNo != null ?
                new ObjectParameter("UnremoveApproveNo", unremoveApproveNo) :
                new ObjectParameter("UnremoveApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlip>("InsertTbt_InstallationSlip", mergeOption, slipNoParameter, serviceTypeCodeParameter, slipStatusParameter, changeReasonCodeParameter, installationTypeParameter, planCodeParameter, causeReasonParameter, normalContractFeeParameter, normalContractFeeUsdParameter, normalContractFeeCurrencyTypeParameter, normalInstallFeeParameter, normalInstallFeeUsdParameter, normalInstallFeeCurrencyTypeParameter, installFeeBillingTypeParameter, billingInstallFeeParameter, billingInstallFeeUsdParameter, billingInstallFeeCurencyTypeParameter, orderInstallFeeParameter, orderInstallFeeUsdParameter, orderInstallFeeCurrencyTypeParameter, billingOCCParameter, previousSlipNoParameter, previousSlipStatusParameter, contractCodeParameter, slipIssueDateParameter, slipIssueOfficeCodeParameter, stockOutDateParameter, stockOutOfficeCodeParameter, returnReceiveDateParameter, returnReceiveOfficeCodeParameter, approveNo1Parameter, approveNo2Parameter, changeContentsParameter, expectedInstrumentArrivalDateParameter, stockOutTypeCodeParameter, slipTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, additionalStockOutOfficeCodeParameter, slipIssueFlagParameter, unremoveApproveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlip> UpdateTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurrencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var serviceTypeCodeParameter = serviceTypeCode != null ?
                new ObjectParameter("ServiceTypeCode", serviceTypeCode) :
                new ObjectParameter("ServiceTypeCode", typeof(string));
    
            var slipStatusParameter = slipStatus != null ?
                new ObjectParameter("SlipStatus", slipStatus) :
                new ObjectParameter("SlipStatus", typeof(string));
    
            var changeReasonCodeParameter = changeReasonCode != null ?
                new ObjectParameter("ChangeReasonCode", changeReasonCode) :
                new ObjectParameter("ChangeReasonCode", typeof(string));
    
            var installationTypeParameter = installationType != null ?
                new ObjectParameter("InstallationType", installationType) :
                new ObjectParameter("InstallationType", typeof(string));
    
            var planCodeParameter = planCode != null ?
                new ObjectParameter("PlanCode", planCode) :
                new ObjectParameter("PlanCode", typeof(string));
    
            var causeReasonParameter = causeReason != null ?
                new ObjectParameter("CauseReason", causeReason) :
                new ObjectParameter("CauseReason", typeof(string));
    
            var normalContractFeeParameter = normalContractFee.HasValue ?
                new ObjectParameter("NormalContractFee", normalContractFee) :
                new ObjectParameter("NormalContractFee", typeof(decimal));
    
            var normalContractFeeUsdParameter = normalContractFeeUsd.HasValue ?
                new ObjectParameter("NormalContractFeeUsd", normalContractFeeUsd) :
                new ObjectParameter("NormalContractFeeUsd", typeof(decimal));
    
            var normalContractFeeCurrencyTypeParameter = normalContractFeeCurrencyType != null ?
                new ObjectParameter("NormalContractFeeCurrencyType", normalContractFeeCurrencyType) :
                new ObjectParameter("NormalContractFeeCurrencyType", typeof(string));
    
            var normalInstallFeeParameter = normalInstallFee.HasValue ?
                new ObjectParameter("NormalInstallFee", normalInstallFee) :
                new ObjectParameter("NormalInstallFee", typeof(decimal));
    
            var normalInstallFeeUsdParameter = normalInstallFeeUsd.HasValue ?
                new ObjectParameter("NormalInstallFeeUsd", normalInstallFeeUsd) :
                new ObjectParameter("NormalInstallFeeUsd", typeof(decimal));
    
            var normalInstallFeeCurrencyTypeParameter = normalInstallFeeCurrencyType != null ?
                new ObjectParameter("NormalInstallFeeCurrencyType", normalInstallFeeCurrencyType) :
                new ObjectParameter("NormalInstallFeeCurrencyType", typeof(string));
    
            var installFeeBillingTypeParameter = installFeeBillingType != null ?
                new ObjectParameter("InstallFeeBillingType", installFeeBillingType) :
                new ObjectParameter("InstallFeeBillingType", typeof(string));
    
            var billingInstallFeeParameter = billingInstallFee.HasValue ?
                new ObjectParameter("BillingInstallFee", billingInstallFee) :
                new ObjectParameter("BillingInstallFee", typeof(decimal));
    
            var billingInstallFeeUsdParameter = billingInstallFeeUsd.HasValue ?
                new ObjectParameter("BillingInstallFeeUsd", billingInstallFeeUsd) :
                new ObjectParameter("BillingInstallFeeUsd", typeof(decimal));
    
            var billingInstallFeeCurrencyTypeParameter = billingInstallFeeCurrencyType != null ?
                new ObjectParameter("BillingInstallFeeCurrencyType", billingInstallFeeCurrencyType) :
                new ObjectParameter("BillingInstallFeeCurrencyType", typeof(string));
    
            var orderInstallFeeParameter = orderInstallFee.HasValue ?
                new ObjectParameter("OrderInstallFee", orderInstallFee) :
                new ObjectParameter("OrderInstallFee", typeof(decimal));
    
            var orderInstallFeeUsdParameter = orderInstallFeeUsd.HasValue ?
                new ObjectParameter("OrderInstallFeeUsd", orderInstallFeeUsd) :
                new ObjectParameter("OrderInstallFeeUsd", typeof(decimal));
    
            var orderInstallFeeCurrencyTypeParameter = orderInstallFeeCurrencyType != null ?
                new ObjectParameter("OrderInstallFeeCurrencyType", orderInstallFeeCurrencyType) :
                new ObjectParameter("OrderInstallFeeCurrencyType", typeof(string));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var previousSlipNoParameter = previousSlipNo != null ?
                new ObjectParameter("PreviousSlipNo", previousSlipNo) :
                new ObjectParameter("PreviousSlipNo", typeof(string));
    
            var previousSlipStatusParameter = previousSlipStatus != null ?
                new ObjectParameter("PreviousSlipStatus", previousSlipStatus) :
                new ObjectParameter("PreviousSlipStatus", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var slipIssueDateParameter = slipIssueDate.HasValue ?
                new ObjectParameter("SlipIssueDate", slipIssueDate) :
                new ObjectParameter("SlipIssueDate", typeof(System.DateTime));
    
            var slipIssueOfficeCodeParameter = slipIssueOfficeCode != null ?
                new ObjectParameter("SlipIssueOfficeCode", slipIssueOfficeCode) :
                new ObjectParameter("SlipIssueOfficeCode", typeof(string));
    
            var stockOutDateParameter = stockOutDate.HasValue ?
                new ObjectParameter("StockOutDate", stockOutDate) :
                new ObjectParameter("StockOutDate", typeof(System.DateTime));
    
            var stockOutOfficeCodeParameter = stockOutOfficeCode != null ?
                new ObjectParameter("StockOutOfficeCode", stockOutOfficeCode) :
                new ObjectParameter("StockOutOfficeCode", typeof(string));
    
            var returnReceiveDateParameter = returnReceiveDate.HasValue ?
                new ObjectParameter("ReturnReceiveDate", returnReceiveDate) :
                new ObjectParameter("ReturnReceiveDate", typeof(System.DateTime));
    
            var returnReceiveOfficeCodeParameter = returnReceiveOfficeCode != null ?
                new ObjectParameter("ReturnReceiveOfficeCode", returnReceiveOfficeCode) :
                new ObjectParameter("ReturnReceiveOfficeCode", typeof(string));
    
            var approveNo1Parameter = approveNo1 != null ?
                new ObjectParameter("ApproveNo1", approveNo1) :
                new ObjectParameter("ApproveNo1", typeof(string));
    
            var approveNo2Parameter = approveNo2 != null ?
                new ObjectParameter("ApproveNo2", approveNo2) :
                new ObjectParameter("ApproveNo2", typeof(string));
    
            var changeContentsParameter = changeContents != null ?
                new ObjectParameter("ChangeContents", changeContents) :
                new ObjectParameter("ChangeContents", typeof(string));
    
            var expectedInstrumentArrivalDateParameter = expectedInstrumentArrivalDate.HasValue ?
                new ObjectParameter("ExpectedInstrumentArrivalDate", expectedInstrumentArrivalDate) :
                new ObjectParameter("ExpectedInstrumentArrivalDate", typeof(System.DateTime));
    
            var stockOutTypeCodeParameter = stockOutTypeCode != null ?
                new ObjectParameter("StockOutTypeCode", stockOutTypeCode) :
                new ObjectParameter("StockOutTypeCode", typeof(string));
    
            var slipTypeParameter = slipType != null ?
                new ObjectParameter("SlipType", slipType) :
                new ObjectParameter("SlipType", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var additionalStockOutOfficeCodeParameter = additionalStockOutOfficeCode != null ?
                new ObjectParameter("AdditionalStockOutOfficeCode", additionalStockOutOfficeCode) :
                new ObjectParameter("AdditionalStockOutOfficeCode", typeof(string));
    
            var slipIssueFlagParameter = slipIssueFlag.HasValue ?
                new ObjectParameter("SlipIssueFlag", slipIssueFlag) :
                new ObjectParameter("SlipIssueFlag", typeof(bool));
    
            var unremoveApproveNoParameter = unremoveApproveNo != null ?
                new ObjectParameter("UnremoveApproveNo", unremoveApproveNo) :
                new ObjectParameter("UnremoveApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlip>("UpdateTbt_InstallationSlip", slipNoParameter, serviceTypeCodeParameter, slipStatusParameter, changeReasonCodeParameter, installationTypeParameter, planCodeParameter, causeReasonParameter, normalContractFeeParameter, normalContractFeeUsdParameter, normalContractFeeCurrencyTypeParameter, normalInstallFeeParameter, normalInstallFeeUsdParameter, normalInstallFeeCurrencyTypeParameter, installFeeBillingTypeParameter, billingInstallFeeParameter, billingInstallFeeUsdParameter, billingInstallFeeCurrencyTypeParameter, orderInstallFeeParameter, orderInstallFeeUsdParameter, orderInstallFeeCurrencyTypeParameter, billingOCCParameter, previousSlipNoParameter, previousSlipStatusParameter, contractCodeParameter, slipIssueDateParameter, slipIssueOfficeCodeParameter, stockOutDateParameter, stockOutOfficeCodeParameter, returnReceiveDateParameter, returnReceiveOfficeCodeParameter, approveNo1Parameter, approveNo2Parameter, changeContentsParameter, expectedInstrumentArrivalDateParameter, stockOutTypeCodeParameter, slipTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, additionalStockOutOfficeCodeParameter, slipIssueFlagParameter, unremoveApproveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlip> UpdateTbt_InstallationSlip(string slipNo, string serviceTypeCode, string slipStatus, string changeReasonCode, string installationType, string planCode, string causeReason, Nullable<decimal> normalContractFee, Nullable<decimal> normalContractFeeUsd, string normalContractFeeCurrencyType, Nullable<decimal> normalInstallFee, Nullable<decimal> normalInstallFeeUsd, string normalInstallFeeCurrencyType, string installFeeBillingType, Nullable<decimal> billingInstallFee, Nullable<decimal> billingInstallFeeUsd, string billingInstallFeeCurrencyType, Nullable<decimal> orderInstallFee, Nullable<decimal> orderInstallFeeUsd, string orderInstallFeeCurrencyType, string billingOCC, string previousSlipNo, string previousSlipStatus, string contractCode, Nullable<System.DateTime> slipIssueDate, string slipIssueOfficeCode, Nullable<System.DateTime> stockOutDate, string stockOutOfficeCode, Nullable<System.DateTime> returnReceiveDate, string returnReceiveOfficeCode, string approveNo1, string approveNo2, string changeContents, Nullable<System.DateTime> expectedInstrumentArrivalDate, string stockOutTypeCode, string slipType, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string additionalStockOutOfficeCode, Nullable<bool> slipIssueFlag, string unremoveApproveNo, MergeOption mergeOption)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var serviceTypeCodeParameter = serviceTypeCode != null ?
                new ObjectParameter("ServiceTypeCode", serviceTypeCode) :
                new ObjectParameter("ServiceTypeCode", typeof(string));
    
            var slipStatusParameter = slipStatus != null ?
                new ObjectParameter("SlipStatus", slipStatus) :
                new ObjectParameter("SlipStatus", typeof(string));
    
            var changeReasonCodeParameter = changeReasonCode != null ?
                new ObjectParameter("ChangeReasonCode", changeReasonCode) :
                new ObjectParameter("ChangeReasonCode", typeof(string));
    
            var installationTypeParameter = installationType != null ?
                new ObjectParameter("InstallationType", installationType) :
                new ObjectParameter("InstallationType", typeof(string));
    
            var planCodeParameter = planCode != null ?
                new ObjectParameter("PlanCode", planCode) :
                new ObjectParameter("PlanCode", typeof(string));
    
            var causeReasonParameter = causeReason != null ?
                new ObjectParameter("CauseReason", causeReason) :
                new ObjectParameter("CauseReason", typeof(string));
    
            var normalContractFeeParameter = normalContractFee.HasValue ?
                new ObjectParameter("NormalContractFee", normalContractFee) :
                new ObjectParameter("NormalContractFee", typeof(decimal));
    
            var normalContractFeeUsdParameter = normalContractFeeUsd.HasValue ?
                new ObjectParameter("NormalContractFeeUsd", normalContractFeeUsd) :
                new ObjectParameter("NormalContractFeeUsd", typeof(decimal));
    
            var normalContractFeeCurrencyTypeParameter = normalContractFeeCurrencyType != null ?
                new ObjectParameter("NormalContractFeeCurrencyType", normalContractFeeCurrencyType) :
                new ObjectParameter("NormalContractFeeCurrencyType", typeof(string));
    
            var normalInstallFeeParameter = normalInstallFee.HasValue ?
                new ObjectParameter("NormalInstallFee", normalInstallFee) :
                new ObjectParameter("NormalInstallFee", typeof(decimal));
    
            var normalInstallFeeUsdParameter = normalInstallFeeUsd.HasValue ?
                new ObjectParameter("NormalInstallFeeUsd", normalInstallFeeUsd) :
                new ObjectParameter("NormalInstallFeeUsd", typeof(decimal));
    
            var normalInstallFeeCurrencyTypeParameter = normalInstallFeeCurrencyType != null ?
                new ObjectParameter("NormalInstallFeeCurrencyType", normalInstallFeeCurrencyType) :
                new ObjectParameter("NormalInstallFeeCurrencyType", typeof(string));
    
            var installFeeBillingTypeParameter = installFeeBillingType != null ?
                new ObjectParameter("InstallFeeBillingType", installFeeBillingType) :
                new ObjectParameter("InstallFeeBillingType", typeof(string));
    
            var billingInstallFeeParameter = billingInstallFee.HasValue ?
                new ObjectParameter("BillingInstallFee", billingInstallFee) :
                new ObjectParameter("BillingInstallFee", typeof(decimal));
    
            var billingInstallFeeUsdParameter = billingInstallFeeUsd.HasValue ?
                new ObjectParameter("BillingInstallFeeUsd", billingInstallFeeUsd) :
                new ObjectParameter("BillingInstallFeeUsd", typeof(decimal));
    
            var billingInstallFeeCurrencyTypeParameter = billingInstallFeeCurrencyType != null ?
                new ObjectParameter("BillingInstallFeeCurrencyType", billingInstallFeeCurrencyType) :
                new ObjectParameter("BillingInstallFeeCurrencyType", typeof(string));
    
            var orderInstallFeeParameter = orderInstallFee.HasValue ?
                new ObjectParameter("OrderInstallFee", orderInstallFee) :
                new ObjectParameter("OrderInstallFee", typeof(decimal));
    
            var orderInstallFeeUsdParameter = orderInstallFeeUsd.HasValue ?
                new ObjectParameter("OrderInstallFeeUsd", orderInstallFeeUsd) :
                new ObjectParameter("OrderInstallFeeUsd", typeof(decimal));
    
            var orderInstallFeeCurrencyTypeParameter = orderInstallFeeCurrencyType != null ?
                new ObjectParameter("OrderInstallFeeCurrencyType", orderInstallFeeCurrencyType) :
                new ObjectParameter("OrderInstallFeeCurrencyType", typeof(string));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var previousSlipNoParameter = previousSlipNo != null ?
                new ObjectParameter("PreviousSlipNo", previousSlipNo) :
                new ObjectParameter("PreviousSlipNo", typeof(string));
    
            var previousSlipStatusParameter = previousSlipStatus != null ?
                new ObjectParameter("PreviousSlipStatus", previousSlipStatus) :
                new ObjectParameter("PreviousSlipStatus", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var slipIssueDateParameter = slipIssueDate.HasValue ?
                new ObjectParameter("SlipIssueDate", slipIssueDate) :
                new ObjectParameter("SlipIssueDate", typeof(System.DateTime));
    
            var slipIssueOfficeCodeParameter = slipIssueOfficeCode != null ?
                new ObjectParameter("SlipIssueOfficeCode", slipIssueOfficeCode) :
                new ObjectParameter("SlipIssueOfficeCode", typeof(string));
    
            var stockOutDateParameter = stockOutDate.HasValue ?
                new ObjectParameter("StockOutDate", stockOutDate) :
                new ObjectParameter("StockOutDate", typeof(System.DateTime));
    
            var stockOutOfficeCodeParameter = stockOutOfficeCode != null ?
                new ObjectParameter("StockOutOfficeCode", stockOutOfficeCode) :
                new ObjectParameter("StockOutOfficeCode", typeof(string));
    
            var returnReceiveDateParameter = returnReceiveDate.HasValue ?
                new ObjectParameter("ReturnReceiveDate", returnReceiveDate) :
                new ObjectParameter("ReturnReceiveDate", typeof(System.DateTime));
    
            var returnReceiveOfficeCodeParameter = returnReceiveOfficeCode != null ?
                new ObjectParameter("ReturnReceiveOfficeCode", returnReceiveOfficeCode) :
                new ObjectParameter("ReturnReceiveOfficeCode", typeof(string));
    
            var approveNo1Parameter = approveNo1 != null ?
                new ObjectParameter("ApproveNo1", approveNo1) :
                new ObjectParameter("ApproveNo1", typeof(string));
    
            var approveNo2Parameter = approveNo2 != null ?
                new ObjectParameter("ApproveNo2", approveNo2) :
                new ObjectParameter("ApproveNo2", typeof(string));
    
            var changeContentsParameter = changeContents != null ?
                new ObjectParameter("ChangeContents", changeContents) :
                new ObjectParameter("ChangeContents", typeof(string));
    
            var expectedInstrumentArrivalDateParameter = expectedInstrumentArrivalDate.HasValue ?
                new ObjectParameter("ExpectedInstrumentArrivalDate", expectedInstrumentArrivalDate) :
                new ObjectParameter("ExpectedInstrumentArrivalDate", typeof(System.DateTime));
    
            var stockOutTypeCodeParameter = stockOutTypeCode != null ?
                new ObjectParameter("StockOutTypeCode", stockOutTypeCode) :
                new ObjectParameter("StockOutTypeCode", typeof(string));
    
            var slipTypeParameter = slipType != null ?
                new ObjectParameter("SlipType", slipType) :
                new ObjectParameter("SlipType", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var additionalStockOutOfficeCodeParameter = additionalStockOutOfficeCode != null ?
                new ObjectParameter("AdditionalStockOutOfficeCode", additionalStockOutOfficeCode) :
                new ObjectParameter("AdditionalStockOutOfficeCode", typeof(string));
    
            var slipIssueFlagParameter = slipIssueFlag.HasValue ?
                new ObjectParameter("SlipIssueFlag", slipIssueFlag) :
                new ObjectParameter("SlipIssueFlag", typeof(bool));
    
            var unremoveApproveNoParameter = unremoveApproveNo != null ?
                new ObjectParameter("UnremoveApproveNo", unremoveApproveNo) :
                new ObjectParameter("UnremoveApproveNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlip>("UpdateTbt_InstallationSlip", mergeOption, slipNoParameter, serviceTypeCodeParameter, slipStatusParameter, changeReasonCodeParameter, installationTypeParameter, planCodeParameter, causeReasonParameter, normalContractFeeParameter, normalContractFeeUsdParameter, normalContractFeeCurrencyTypeParameter, normalInstallFeeParameter, normalInstallFeeUsdParameter, normalInstallFeeCurrencyTypeParameter, installFeeBillingTypeParameter, billingInstallFeeParameter, billingInstallFeeUsdParameter, billingInstallFeeCurrencyTypeParameter, orderInstallFeeParameter, orderInstallFeeUsdParameter, orderInstallFeeCurrencyTypeParameter, billingOCCParameter, previousSlipNoParameter, previousSlipStatusParameter, contractCodeParameter, slipIssueDateParameter, slipIssueOfficeCodeParameter, stockOutDateParameter, stockOutOfficeCodeParameter, returnReceiveDateParameter, returnReceiveOfficeCodeParameter, approveNo1Parameter, approveNo2Parameter, changeContentsParameter, expectedInstrumentArrivalDateParameter, stockOutTypeCodeParameter, slipTypeParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, additionalStockOutOfficeCodeParameter, slipIssueFlagParameter, unremoveApproveNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipDetails> InsertTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var currentStockOutQtyParameter = currentStockOutQty.HasValue ?
                new ObjectParameter("CurrentStockOutQty", currentStockOutQty) :
                new ObjectParameter("CurrentStockOutQty", typeof(int));
    
            var totalStockOutQtyParameter = totalStockOutQty.HasValue ?
                new ObjectParameter("TotalStockOutQty", totalStockOutQty) :
                new ObjectParameter("TotalStockOutQty", typeof(int));
    
            var addInstalledQtyParameter = addInstalledQty.HasValue ?
                new ObjectParameter("AddInstalledQty", addInstalledQty) :
                new ObjectParameter("AddInstalledQty", typeof(int));
    
            var returnQtyParameter = returnQty.HasValue ?
                new ObjectParameter("ReturnQty", returnQty) :
                new ObjectParameter("ReturnQty", typeof(int));
    
            var addRemovedQtyParameter = addRemovedQty.HasValue ?
                new ObjectParameter("AddRemovedQty", addRemovedQty) :
                new ObjectParameter("AddRemovedQty", typeof(int));
    
            var notInstalledQtyParameter = notInstalledQty.HasValue ?
                new ObjectParameter("NotInstalledQty", notInstalledQty) :
                new ObjectParameter("NotInstalledQty", typeof(int));
    
            var moveQtyParameter = moveQty.HasValue ?
                new ObjectParameter("MoveQty", moveQty) :
                new ObjectParameter("MoveQty", typeof(int));
    
            var mAExchangeQtyParameter = mAExchangeQty.HasValue ?
                new ObjectParameter("MAExchangeQty", mAExchangeQty) :
                new ObjectParameter("MAExchangeQty", typeof(int));
    
            var unremovableQtyParameter = unremovableQty.HasValue ?
                new ObjectParameter("UnremovableQty", unremovableQty) :
                new ObjectParameter("UnremovableQty", typeof(int));
    
            var returnRemoveQtyParameter = returnRemoveQty.HasValue ?
                new ObjectParameter("ReturnRemoveQty", returnRemoveQty) :
                new ObjectParameter("ReturnRemoveQty", typeof(int));
    
            var instrumentPriceParameter = instrumentPrice.HasValue ?
                new ObjectParameter("InstrumentPrice", instrumentPrice) :
                new ObjectParameter("InstrumentPrice", typeof(decimal));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var partialStockOutQtyParameter = partialStockOutQty.HasValue ?
                new ObjectParameter("PartialStockOutQty", partialStockOutQty) :
                new ObjectParameter("PartialStockOutQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipDetails>("InsertTbt_InstallationSlipDetails", slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, currentStockOutQtyParameter, totalStockOutQtyParameter, addInstalledQtyParameter, returnQtyParameter, addRemovedQtyParameter, notInstalledQtyParameter, moveQtyParameter, mAExchangeQtyParameter, unremovableQtyParameter, returnRemoveQtyParameter, instrumentPriceParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, partialStockOutQtyParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipDetails> InsertTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty, MergeOption mergeOption)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var currentStockOutQtyParameter = currentStockOutQty.HasValue ?
                new ObjectParameter("CurrentStockOutQty", currentStockOutQty) :
                new ObjectParameter("CurrentStockOutQty", typeof(int));
    
            var totalStockOutQtyParameter = totalStockOutQty.HasValue ?
                new ObjectParameter("TotalStockOutQty", totalStockOutQty) :
                new ObjectParameter("TotalStockOutQty", typeof(int));
    
            var addInstalledQtyParameter = addInstalledQty.HasValue ?
                new ObjectParameter("AddInstalledQty", addInstalledQty) :
                new ObjectParameter("AddInstalledQty", typeof(int));
    
            var returnQtyParameter = returnQty.HasValue ?
                new ObjectParameter("ReturnQty", returnQty) :
                new ObjectParameter("ReturnQty", typeof(int));
    
            var addRemovedQtyParameter = addRemovedQty.HasValue ?
                new ObjectParameter("AddRemovedQty", addRemovedQty) :
                new ObjectParameter("AddRemovedQty", typeof(int));
    
            var notInstalledQtyParameter = notInstalledQty.HasValue ?
                new ObjectParameter("NotInstalledQty", notInstalledQty) :
                new ObjectParameter("NotInstalledQty", typeof(int));
    
            var moveQtyParameter = moveQty.HasValue ?
                new ObjectParameter("MoveQty", moveQty) :
                new ObjectParameter("MoveQty", typeof(int));
    
            var mAExchangeQtyParameter = mAExchangeQty.HasValue ?
                new ObjectParameter("MAExchangeQty", mAExchangeQty) :
                new ObjectParameter("MAExchangeQty", typeof(int));
    
            var unremovableQtyParameter = unremovableQty.HasValue ?
                new ObjectParameter("UnremovableQty", unremovableQty) :
                new ObjectParameter("UnremovableQty", typeof(int));
    
            var returnRemoveQtyParameter = returnRemoveQty.HasValue ?
                new ObjectParameter("ReturnRemoveQty", returnRemoveQty) :
                new ObjectParameter("ReturnRemoveQty", typeof(int));
    
            var instrumentPriceParameter = instrumentPrice.HasValue ?
                new ObjectParameter("InstrumentPrice", instrumentPrice) :
                new ObjectParameter("InstrumentPrice", typeof(decimal));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var partialStockOutQtyParameter = partialStockOutQty.HasValue ?
                new ObjectParameter("PartialStockOutQty", partialStockOutQty) :
                new ObjectParameter("PartialStockOutQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipDetails>("InsertTbt_InstallationSlipDetails", mergeOption, slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, currentStockOutQtyParameter, totalStockOutQtyParameter, addInstalledQtyParameter, returnQtyParameter, addRemovedQtyParameter, notInstalledQtyParameter, moveQtyParameter, mAExchangeQtyParameter, unremovableQtyParameter, returnRemoveQtyParameter, instrumentPriceParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, partialStockOutQtyParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipDetails> GetTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipDetails>("GetTbt_InstallationSlipDetails", slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipDetails> GetTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, MergeOption mergeOption)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipDetails>("GetTbt_InstallationSlipDetails", mergeOption, slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipDetails> UpdateTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var currentStockOutQtyParameter = currentStockOutQty.HasValue ?
                new ObjectParameter("CurrentStockOutQty", currentStockOutQty) :
                new ObjectParameter("CurrentStockOutQty", typeof(int));
    
            var totalStockOutQtyParameter = totalStockOutQty.HasValue ?
                new ObjectParameter("TotalStockOutQty", totalStockOutQty) :
                new ObjectParameter("TotalStockOutQty", typeof(int));
    
            var addInstalledQtyParameter = addInstalledQty.HasValue ?
                new ObjectParameter("AddInstalledQty", addInstalledQty) :
                new ObjectParameter("AddInstalledQty", typeof(int));
    
            var returnQtyParameter = returnQty.HasValue ?
                new ObjectParameter("ReturnQty", returnQty) :
                new ObjectParameter("ReturnQty", typeof(int));
    
            var addRemovedQtyParameter = addRemovedQty.HasValue ?
                new ObjectParameter("AddRemovedQty", addRemovedQty) :
                new ObjectParameter("AddRemovedQty", typeof(int));
    
            var notInstalledQtyParameter = notInstalledQty.HasValue ?
                new ObjectParameter("NotInstalledQty", notInstalledQty) :
                new ObjectParameter("NotInstalledQty", typeof(int));
    
            var moveQtyParameter = moveQty.HasValue ?
                new ObjectParameter("MoveQty", moveQty) :
                new ObjectParameter("MoveQty", typeof(int));
    
            var mAExchangeQtyParameter = mAExchangeQty.HasValue ?
                new ObjectParameter("MAExchangeQty", mAExchangeQty) :
                new ObjectParameter("MAExchangeQty", typeof(int));
    
            var unremovableQtyParameter = unremovableQty.HasValue ?
                new ObjectParameter("UnremovableQty", unremovableQty) :
                new ObjectParameter("UnremovableQty", typeof(int));
    
            var returnRemoveQtyParameter = returnRemoveQty.HasValue ?
                new ObjectParameter("ReturnRemoveQty", returnRemoveQty) :
                new ObjectParameter("ReturnRemoveQty", typeof(int));
    
            var instrumentPriceParameter = instrumentPrice.HasValue ?
                new ObjectParameter("InstrumentPrice", instrumentPrice) :
                new ObjectParameter("InstrumentPrice", typeof(decimal));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var partialStockOutQtyParameter = partialStockOutQty.HasValue ?
                new ObjectParameter("PartialStockOutQty", partialStockOutQty) :
                new ObjectParameter("PartialStockOutQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipDetails>("UpdateTbt_InstallationSlipDetails", slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, currentStockOutQtyParameter, totalStockOutQtyParameter, addInstalledQtyParameter, returnQtyParameter, addRemovedQtyParameter, notInstalledQtyParameter, moveQtyParameter, mAExchangeQtyParameter, unremovableQtyParameter, returnRemoveQtyParameter, instrumentPriceParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, partialStockOutQtyParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipDetails> UpdateTbt_InstallationSlipDetails(string slipNo, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> currentStockOutQty, Nullable<int> totalStockOutQty, Nullable<int> addInstalledQty, Nullable<int> returnQty, Nullable<int> addRemovedQty, Nullable<int> notInstalledQty, Nullable<int> moveQty, Nullable<int> mAExchangeQty, Nullable<int> unremovableQty, Nullable<int> returnRemoveQty, Nullable<decimal> instrumentPrice, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<int> partialStockOutQty, MergeOption mergeOption)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var currentStockOutQtyParameter = currentStockOutQty.HasValue ?
                new ObjectParameter("CurrentStockOutQty", currentStockOutQty) :
                new ObjectParameter("CurrentStockOutQty", typeof(int));
    
            var totalStockOutQtyParameter = totalStockOutQty.HasValue ?
                new ObjectParameter("TotalStockOutQty", totalStockOutQty) :
                new ObjectParameter("TotalStockOutQty", typeof(int));
    
            var addInstalledQtyParameter = addInstalledQty.HasValue ?
                new ObjectParameter("AddInstalledQty", addInstalledQty) :
                new ObjectParameter("AddInstalledQty", typeof(int));
    
            var returnQtyParameter = returnQty.HasValue ?
                new ObjectParameter("ReturnQty", returnQty) :
                new ObjectParameter("ReturnQty", typeof(int));
    
            var addRemovedQtyParameter = addRemovedQty.HasValue ?
                new ObjectParameter("AddRemovedQty", addRemovedQty) :
                new ObjectParameter("AddRemovedQty", typeof(int));
    
            var notInstalledQtyParameter = notInstalledQty.HasValue ?
                new ObjectParameter("NotInstalledQty", notInstalledQty) :
                new ObjectParameter("NotInstalledQty", typeof(int));
    
            var moveQtyParameter = moveQty.HasValue ?
                new ObjectParameter("MoveQty", moveQty) :
                new ObjectParameter("MoveQty", typeof(int));
    
            var mAExchangeQtyParameter = mAExchangeQty.HasValue ?
                new ObjectParameter("MAExchangeQty", mAExchangeQty) :
                new ObjectParameter("MAExchangeQty", typeof(int));
    
            var unremovableQtyParameter = unremovableQty.HasValue ?
                new ObjectParameter("UnremovableQty", unremovableQty) :
                new ObjectParameter("UnremovableQty", typeof(int));
    
            var returnRemoveQtyParameter = returnRemoveQty.HasValue ?
                new ObjectParameter("ReturnRemoveQty", returnRemoveQty) :
                new ObjectParameter("ReturnRemoveQty", typeof(int));
    
            var instrumentPriceParameter = instrumentPrice.HasValue ?
                new ObjectParameter("InstrumentPrice", instrumentPrice) :
                new ObjectParameter("InstrumentPrice", typeof(decimal));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var partialStockOutQtyParameter = partialStockOutQty.HasValue ?
                new ObjectParameter("PartialStockOutQty", partialStockOutQty) :
                new ObjectParameter("PartialStockOutQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipDetails>("UpdateTbt_InstallationSlipDetails", mergeOption, slipNoParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, currentStockOutQtyParameter, totalStockOutQtyParameter, addInstalledQtyParameter, returnQtyParameter, addRemovedQtyParameter, notInstalledQtyParameter, moveQtyParameter, mAExchangeQtyParameter, unremovableQtyParameter, returnRemoveQtyParameter, instrumentPriceParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, partialStockOutQtyParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> DeleteTbt_InstallationBasic(string contractProjectCode)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("DeleteTbt_InstallationBasic", contractProjectCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationBasic> DeleteTbt_InstallationBasic(string contractProjectCode, MergeOption mergeOption)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationBasic>("DeleteTbt_InstallationBasic", mergeOption, contractProjectCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationInstrumentDetails> DeleteTbt_InstallationInstrumentDetail(string contractCode, string instrumentCode)
        {
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationInstrumentDetails>("DeleteTbt_InstallationInstrumentDetail", contractCodeParameter, instrumentCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationInstrumentDetails> DeleteTbt_InstallationInstrumentDetail(string contractCode, string instrumentCode, MergeOption mergeOption)
        {
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationInstrumentDetails>("DeleteTbt_InstallationInstrumentDetail", mergeOption, contractCodeParameter, instrumentCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistory> InsertTbt_InstallationHistory(string contractProjectCode, string oCC, string serviceTypeCode, string installationStatus, string installationType, string planCode, string slipNo, string maintenanceNo, string operationOfficeCode, string securityTypeCode, string changeReasonTypeCode, Nullable<decimal> normalInstallFee, Nullable<decimal> billingInstallFee, string installFeeBillingType, Nullable<decimal> normalSaleProductPrice, Nullable<decimal> billingSalePrice, Nullable<System.DateTime> installationSlipProcessingDate, Nullable<System.DateTime> installationCompleteDate, Nullable<System.DateTime> installationCompleteProcessingDate, string installationBy, string salesmanEmpNo1, string salesmanEmpNo2, string approveNo1, string approveNo2, Nullable<System.DateTime> installationStartDate, Nullable<System.DateTime> installationFinishDate, Nullable<decimal> normalContractFee, string billingOCC, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var oCCParameter = oCC != null ?
                new ObjectParameter("OCC", oCC) :
                new ObjectParameter("OCC", typeof(string));
    
            var serviceTypeCodeParameter = serviceTypeCode != null ?
                new ObjectParameter("ServiceTypeCode", serviceTypeCode) :
                new ObjectParameter("ServiceTypeCode", typeof(string));
    
            var installationStatusParameter = installationStatus != null ?
                new ObjectParameter("InstallationStatus", installationStatus) :
                new ObjectParameter("InstallationStatus", typeof(string));
    
            var installationTypeParameter = installationType != null ?
                new ObjectParameter("InstallationType", installationType) :
                new ObjectParameter("InstallationType", typeof(string));
    
            var planCodeParameter = planCode != null ?
                new ObjectParameter("PlanCode", planCode) :
                new ObjectParameter("PlanCode", typeof(string));
    
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var operationOfficeCodeParameter = operationOfficeCode != null ?
                new ObjectParameter("OperationOfficeCode", operationOfficeCode) :
                new ObjectParameter("OperationOfficeCode", typeof(string));
    
            var securityTypeCodeParameter = securityTypeCode != null ?
                new ObjectParameter("SecurityTypeCode", securityTypeCode) :
                new ObjectParameter("SecurityTypeCode", typeof(string));
    
            var changeReasonTypeCodeParameter = changeReasonTypeCode != null ?
                new ObjectParameter("ChangeReasonTypeCode", changeReasonTypeCode) :
                new ObjectParameter("ChangeReasonTypeCode", typeof(string));
    
            var normalInstallFeeParameter = normalInstallFee.HasValue ?
                new ObjectParameter("NormalInstallFee", normalInstallFee) :
                new ObjectParameter("NormalInstallFee", typeof(decimal));
    
            var billingInstallFeeParameter = billingInstallFee.HasValue ?
                new ObjectParameter("BillingInstallFee", billingInstallFee) :
                new ObjectParameter("BillingInstallFee", typeof(decimal));
    
            var installFeeBillingTypeParameter = installFeeBillingType != null ?
                new ObjectParameter("InstallFeeBillingType", installFeeBillingType) :
                new ObjectParameter("InstallFeeBillingType", typeof(string));
    
            var normalSaleProductPriceParameter = normalSaleProductPrice.HasValue ?
                new ObjectParameter("NormalSaleProductPrice", normalSaleProductPrice) :
                new ObjectParameter("NormalSaleProductPrice", typeof(decimal));
    
            var billingSalePriceParameter = billingSalePrice.HasValue ?
                new ObjectParameter("BillingSalePrice", billingSalePrice) :
                new ObjectParameter("BillingSalePrice", typeof(decimal));
    
            var installationSlipProcessingDateParameter = installationSlipProcessingDate.HasValue ?
                new ObjectParameter("InstallationSlipProcessingDate", installationSlipProcessingDate) :
                new ObjectParameter("InstallationSlipProcessingDate", typeof(System.DateTime));
    
            var installationCompleteDateParameter = installationCompleteDate.HasValue ?
                new ObjectParameter("InstallationCompleteDate", installationCompleteDate) :
                new ObjectParameter("InstallationCompleteDate", typeof(System.DateTime));
    
            var installationCompleteProcessingDateParameter = installationCompleteProcessingDate.HasValue ?
                new ObjectParameter("InstallationCompleteProcessingDate", installationCompleteProcessingDate) :
                new ObjectParameter("InstallationCompleteProcessingDate", typeof(System.DateTime));
    
            var installationByParameter = installationBy != null ?
                new ObjectParameter("InstallationBy", installationBy) :
                new ObjectParameter("InstallationBy", typeof(string));
    
            var salesmanEmpNo1Parameter = salesmanEmpNo1 != null ?
                new ObjectParameter("SalesmanEmpNo1", salesmanEmpNo1) :
                new ObjectParameter("SalesmanEmpNo1", typeof(string));
    
            var salesmanEmpNo2Parameter = salesmanEmpNo2 != null ?
                new ObjectParameter("SalesmanEmpNo2", salesmanEmpNo2) :
                new ObjectParameter("SalesmanEmpNo2", typeof(string));
    
            var approveNo1Parameter = approveNo1 != null ?
                new ObjectParameter("ApproveNo1", approveNo1) :
                new ObjectParameter("ApproveNo1", typeof(string));
    
            var approveNo2Parameter = approveNo2 != null ?
                new ObjectParameter("ApproveNo2", approveNo2) :
                new ObjectParameter("ApproveNo2", typeof(string));
    
            var installationStartDateParameter = installationStartDate.HasValue ?
                new ObjectParameter("InstallationStartDate", installationStartDate) :
                new ObjectParameter("InstallationStartDate", typeof(System.DateTime));
    
            var installationFinishDateParameter = installationFinishDate.HasValue ?
                new ObjectParameter("InstallationFinishDate", installationFinishDate) :
                new ObjectParameter("InstallationFinishDate", typeof(System.DateTime));
    
            var normalContractFeeParameter = normalContractFee.HasValue ?
                new ObjectParameter("NormalContractFee", normalContractFee) :
                new ObjectParameter("NormalContractFee", typeof(decimal));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistory>("InsertTbt_InstallationHistory", contractProjectCodeParameter, oCCParameter, serviceTypeCodeParameter, installationStatusParameter, installationTypeParameter, planCodeParameter, slipNoParameter, maintenanceNoParameter, operationOfficeCodeParameter, securityTypeCodeParameter, changeReasonTypeCodeParameter, normalInstallFeeParameter, billingInstallFeeParameter, installFeeBillingTypeParameter, normalSaleProductPriceParameter, billingSalePriceParameter, installationSlipProcessingDateParameter, installationCompleteDateParameter, installationCompleteProcessingDateParameter, installationByParameter, salesmanEmpNo1Parameter, salesmanEmpNo2Parameter, approveNo1Parameter, approveNo2Parameter, installationStartDateParameter, installationFinishDateParameter, normalContractFeeParameter, billingOCCParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistory> InsertTbt_InstallationHistory(string contractProjectCode, string oCC, string serviceTypeCode, string installationStatus, string installationType, string planCode, string slipNo, string maintenanceNo, string operationOfficeCode, string securityTypeCode, string changeReasonTypeCode, Nullable<decimal> normalInstallFee, Nullable<decimal> billingInstallFee, string installFeeBillingType, Nullable<decimal> normalSaleProductPrice, Nullable<decimal> billingSalePrice, Nullable<System.DateTime> installationSlipProcessingDate, Nullable<System.DateTime> installationCompleteDate, Nullable<System.DateTime> installationCompleteProcessingDate, string installationBy, string salesmanEmpNo1, string salesmanEmpNo2, string approveNo1, string approveNo2, Nullable<System.DateTime> installationStartDate, Nullable<System.DateTime> installationFinishDate, Nullable<decimal> normalContractFee, string billingOCC, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, MergeOption mergeOption)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var oCCParameter = oCC != null ?
                new ObjectParameter("OCC", oCC) :
                new ObjectParameter("OCC", typeof(string));
    
            var serviceTypeCodeParameter = serviceTypeCode != null ?
                new ObjectParameter("ServiceTypeCode", serviceTypeCode) :
                new ObjectParameter("ServiceTypeCode", typeof(string));
    
            var installationStatusParameter = installationStatus != null ?
                new ObjectParameter("InstallationStatus", installationStatus) :
                new ObjectParameter("InstallationStatus", typeof(string));
    
            var installationTypeParameter = installationType != null ?
                new ObjectParameter("InstallationType", installationType) :
                new ObjectParameter("InstallationType", typeof(string));
    
            var planCodeParameter = planCode != null ?
                new ObjectParameter("PlanCode", planCode) :
                new ObjectParameter("PlanCode", typeof(string));
    
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var operationOfficeCodeParameter = operationOfficeCode != null ?
                new ObjectParameter("OperationOfficeCode", operationOfficeCode) :
                new ObjectParameter("OperationOfficeCode", typeof(string));
    
            var securityTypeCodeParameter = securityTypeCode != null ?
                new ObjectParameter("SecurityTypeCode", securityTypeCode) :
                new ObjectParameter("SecurityTypeCode", typeof(string));
    
            var changeReasonTypeCodeParameter = changeReasonTypeCode != null ?
                new ObjectParameter("ChangeReasonTypeCode", changeReasonTypeCode) :
                new ObjectParameter("ChangeReasonTypeCode", typeof(string));
    
            var normalInstallFeeParameter = normalInstallFee.HasValue ?
                new ObjectParameter("NormalInstallFee", normalInstallFee) :
                new ObjectParameter("NormalInstallFee", typeof(decimal));
    
            var billingInstallFeeParameter = billingInstallFee.HasValue ?
                new ObjectParameter("BillingInstallFee", billingInstallFee) :
                new ObjectParameter("BillingInstallFee", typeof(decimal));
    
            var installFeeBillingTypeParameter = installFeeBillingType != null ?
                new ObjectParameter("InstallFeeBillingType", installFeeBillingType) :
                new ObjectParameter("InstallFeeBillingType", typeof(string));
    
            var normalSaleProductPriceParameter = normalSaleProductPrice.HasValue ?
                new ObjectParameter("NormalSaleProductPrice", normalSaleProductPrice) :
                new ObjectParameter("NormalSaleProductPrice", typeof(decimal));
    
            var billingSalePriceParameter = billingSalePrice.HasValue ?
                new ObjectParameter("BillingSalePrice", billingSalePrice) :
                new ObjectParameter("BillingSalePrice", typeof(decimal));
    
            var installationSlipProcessingDateParameter = installationSlipProcessingDate.HasValue ?
                new ObjectParameter("InstallationSlipProcessingDate", installationSlipProcessingDate) :
                new ObjectParameter("InstallationSlipProcessingDate", typeof(System.DateTime));
    
            var installationCompleteDateParameter = installationCompleteDate.HasValue ?
                new ObjectParameter("InstallationCompleteDate", installationCompleteDate) :
                new ObjectParameter("InstallationCompleteDate", typeof(System.DateTime));
    
            var installationCompleteProcessingDateParameter = installationCompleteProcessingDate.HasValue ?
                new ObjectParameter("InstallationCompleteProcessingDate", installationCompleteProcessingDate) :
                new ObjectParameter("InstallationCompleteProcessingDate", typeof(System.DateTime));
    
            var installationByParameter = installationBy != null ?
                new ObjectParameter("InstallationBy", installationBy) :
                new ObjectParameter("InstallationBy", typeof(string));
    
            var salesmanEmpNo1Parameter = salesmanEmpNo1 != null ?
                new ObjectParameter("SalesmanEmpNo1", salesmanEmpNo1) :
                new ObjectParameter("SalesmanEmpNo1", typeof(string));
    
            var salesmanEmpNo2Parameter = salesmanEmpNo2 != null ?
                new ObjectParameter("SalesmanEmpNo2", salesmanEmpNo2) :
                new ObjectParameter("SalesmanEmpNo2", typeof(string));
    
            var approveNo1Parameter = approveNo1 != null ?
                new ObjectParameter("ApproveNo1", approveNo1) :
                new ObjectParameter("ApproveNo1", typeof(string));
    
            var approveNo2Parameter = approveNo2 != null ?
                new ObjectParameter("ApproveNo2", approveNo2) :
                new ObjectParameter("ApproveNo2", typeof(string));
    
            var installationStartDateParameter = installationStartDate.HasValue ?
                new ObjectParameter("InstallationStartDate", installationStartDate) :
                new ObjectParameter("InstallationStartDate", typeof(System.DateTime));
    
            var installationFinishDateParameter = installationFinishDate.HasValue ?
                new ObjectParameter("InstallationFinishDate", installationFinishDate) :
                new ObjectParameter("InstallationFinishDate", typeof(System.DateTime));
    
            var normalContractFeeParameter = normalContractFee.HasValue ?
                new ObjectParameter("NormalContractFee", normalContractFee) :
                new ObjectParameter("NormalContractFee", typeof(decimal));
    
            var billingOCCParameter = billingOCC != null ?
                new ObjectParameter("BillingOCC", billingOCC) :
                new ObjectParameter("BillingOCC", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistory>("InsertTbt_InstallationHistory", mergeOption, contractProjectCodeParameter, oCCParameter, serviceTypeCodeParameter, installationStatusParameter, installationTypeParameter, planCodeParameter, slipNoParameter, maintenanceNoParameter, operationOfficeCodeParameter, securityTypeCodeParameter, changeReasonTypeCodeParameter, normalInstallFeeParameter, billingInstallFeeParameter, installFeeBillingTypeParameter, normalSaleProductPriceParameter, billingSalePriceParameter, installationSlipProcessingDateParameter, installationCompleteDateParameter, installationCompleteProcessingDateParameter, installationByParameter, salesmanEmpNo1Parameter, salesmanEmpNo2Parameter, approveNo1Parameter, approveNo2Parameter, installationStartDateParameter, installationFinishDateParameter, normalContractFeeParameter, billingOCCParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistoryDetails> InsertTbt_InstallationHistoryDetail(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var contractRemovedQtyParameter = contractRemovedQty.HasValue ?
                new ObjectParameter("ContractRemovedQty", contractRemovedQty) :
                new ObjectParameter("ContractRemovedQty", typeof(int));
    
            var contractMovedQtyParameter = contractMovedQty.HasValue ?
                new ObjectParameter("ContractMovedQty", contractMovedQty) :
                new ObjectParameter("ContractMovedQty", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistoryDetails>("InsertTbt_InstallationHistoryDetail", contractCodeParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, contractRemovedQtyParameter, contractMovedQtyParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistoryDetails> InsertTbt_InstallationHistoryDetail(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, MergeOption mergeOption)
        {
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var contractRemovedQtyParameter = contractRemovedQty.HasValue ?
                new ObjectParameter("ContractRemovedQty", contractRemovedQty) :
                new ObjectParameter("ContractRemovedQty", typeof(int));
    
            var contractMovedQtyParameter = contractMovedQty.HasValue ?
                new ObjectParameter("ContractMovedQty", contractMovedQty) :
                new ObjectParameter("ContractMovedQty", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistoryDetails>("InsertTbt_InstallationHistoryDetail", mergeOption, contractCodeParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, contractRemovedQtyParameter, contractMovedQtyParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationMemo> DeleteTbt_InstallationMemo(string contractProjectCode, string referenceID, string objectID)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationMemo>("DeleteTbt_InstallationMemo", contractProjectCodeParameter, referenceIDParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationMemo> DeleteTbt_InstallationMemo(string contractProjectCode, string referenceID, string objectID, MergeOption mergeOption)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationMemo>("DeleteTbt_InstallationMemo", mergeOption, contractProjectCodeParameter, referenceIDParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> DeleteTbt_InstallationPOManagement(string maintenanceNo)
        {
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("DeleteTbt_InstallationPOManagement", maintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationPOManagement> DeleteTbt_InstallationPOManagement(string maintenanceNo, MergeOption mergeOption)
        {
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationPOManagement>("DeleteTbt_InstallationPOManagement", mergeOption, maintenanceNoParameter);
        }
    
        public virtual ObjectResult<doSearchInstallManagementResult> SearchInstallationManagementList(string c_FLAG_ON, string c_INSTALL_MANAGE_STATUS_CANCELED, string contractCode, string projectCode, string installationType, string iEStaffCode, string subContractorCode, string subcontractorGroupName, Nullable<System.DateTime> proposedInstallationCompleteDateFrom, Nullable<System.DateTime> proposedInstallationCompleteDateTo, Nullable<System.DateTime> installationCompleteDateFrom, Nullable<System.DateTime> installationCompleteDateTo, Nullable<System.DateTime> installationStartDateFrom, Nullable<System.DateTime> installationStartDateTo, Nullable<System.DateTime> installationFinishDateFrom, Nullable<System.DateTime> installationFinishDateTo, string siteName, string siteAddress, string operationOfficeCode, string installationManagementStatus, Nullable<System.DateTime> installationRequestDateFrom, Nullable<System.DateTime> installationRequestDateTo, Nullable<System.DateTime> expectedInstallationStartDateFrom, Nullable<System.DateTime> expectedInstallationStartDateTo, Nullable<System.DateTime> expectedInstallationFinishDateFrom, Nullable<System.DateTime> expectedInstallationFinishDateTo)
        {
            var c_FLAG_ONParameter = c_FLAG_ON != null ?
                new ObjectParameter("C_FLAG_ON", c_FLAG_ON) :
                new ObjectParameter("C_FLAG_ON", typeof(string));
    
            var c_INSTALL_MANAGE_STATUS_CANCELEDParameter = c_INSTALL_MANAGE_STATUS_CANCELED != null ?
                new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", c_INSTALL_MANAGE_STATUS_CANCELED) :
                new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var projectCodeParameter = projectCode != null ?
                new ObjectParameter("ProjectCode", projectCode) :
                new ObjectParameter("ProjectCode", typeof(string));
    
            var installationTypeParameter = installationType != null ?
                new ObjectParameter("InstallationType", installationType) :
                new ObjectParameter("InstallationType", typeof(string));
    
            var iEStaffCodeParameter = iEStaffCode != null ?
                new ObjectParameter("IEStaffCode", iEStaffCode) :
                new ObjectParameter("IEStaffCode", typeof(string));
    
            var subContractorCodeParameter = subContractorCode != null ?
                new ObjectParameter("SubContractorCode", subContractorCode) :
                new ObjectParameter("SubContractorCode", typeof(string));
    
            var subcontractorGroupNameParameter = subcontractorGroupName != null ?
                new ObjectParameter("SubcontractorGroupName", subcontractorGroupName) :
                new ObjectParameter("SubcontractorGroupName", typeof(string));
    
            var proposedInstallationCompleteDateFromParameter = proposedInstallationCompleteDateFrom.HasValue ?
                new ObjectParameter("ProposedInstallationCompleteDateFrom", proposedInstallationCompleteDateFrom) :
                new ObjectParameter("ProposedInstallationCompleteDateFrom", typeof(System.DateTime));
    
            var proposedInstallationCompleteDateToParameter = proposedInstallationCompleteDateTo.HasValue ?
                new ObjectParameter("ProposedInstallationCompleteDateTo", proposedInstallationCompleteDateTo) :
                new ObjectParameter("ProposedInstallationCompleteDateTo", typeof(System.DateTime));
    
            var installationCompleteDateFromParameter = installationCompleteDateFrom.HasValue ?
                new ObjectParameter("InstallationCompleteDateFrom", installationCompleteDateFrom) :
                new ObjectParameter("InstallationCompleteDateFrom", typeof(System.DateTime));
    
            var installationCompleteDateToParameter = installationCompleteDateTo.HasValue ?
                new ObjectParameter("InstallationCompleteDateTo", installationCompleteDateTo) :
                new ObjectParameter("InstallationCompleteDateTo", typeof(System.DateTime));
    
            var installationStartDateFromParameter = installationStartDateFrom.HasValue ?
                new ObjectParameter("InstallationStartDateFrom", installationStartDateFrom) :
                new ObjectParameter("InstallationStartDateFrom", typeof(System.DateTime));
    
            var installationStartDateToParameter = installationStartDateTo.HasValue ?
                new ObjectParameter("InstallationStartDateTo", installationStartDateTo) :
                new ObjectParameter("InstallationStartDateTo", typeof(System.DateTime));
    
            var installationFinishDateFromParameter = installationFinishDateFrom.HasValue ?
                new ObjectParameter("InstallationFinishDateFrom", installationFinishDateFrom) :
                new ObjectParameter("InstallationFinishDateFrom", typeof(System.DateTime));
    
            var installationFinishDateToParameter = installationFinishDateTo.HasValue ?
                new ObjectParameter("InstallationFinishDateTo", installationFinishDateTo) :
                new ObjectParameter("InstallationFinishDateTo", typeof(System.DateTime));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var siteAddressParameter = siteAddress != null ?
                new ObjectParameter("SiteAddress", siteAddress) :
                new ObjectParameter("SiteAddress", typeof(string));
    
            var operationOfficeCodeParameter = operationOfficeCode != null ?
                new ObjectParameter("OperationOfficeCode", operationOfficeCode) :
                new ObjectParameter("OperationOfficeCode", typeof(string));
    
            var installationManagementStatusParameter = installationManagementStatus != null ?
                new ObjectParameter("InstallationManagementStatus", installationManagementStatus) :
                new ObjectParameter("InstallationManagementStatus", typeof(string));
    
            var installationRequestDateFromParameter = installationRequestDateFrom.HasValue ?
                new ObjectParameter("InstallationRequestDateFrom", installationRequestDateFrom) :
                new ObjectParameter("InstallationRequestDateFrom", typeof(System.DateTime));
    
            var installationRequestDateToParameter = installationRequestDateTo.HasValue ?
                new ObjectParameter("InstallationRequestDateTo", installationRequestDateTo) :
                new ObjectParameter("InstallationRequestDateTo", typeof(System.DateTime));
    
            var expectedInstallationStartDateFromParameter = expectedInstallationStartDateFrom.HasValue ?
                new ObjectParameter("ExpectedInstallationStartDateFrom", expectedInstallationStartDateFrom) :
                new ObjectParameter("ExpectedInstallationStartDateFrom", typeof(System.DateTime));
    
            var expectedInstallationStartDateToParameter = expectedInstallationStartDateTo.HasValue ?
                new ObjectParameter("ExpectedInstallationStartDateTo", expectedInstallationStartDateTo) :
                new ObjectParameter("ExpectedInstallationStartDateTo", typeof(System.DateTime));
    
            var expectedInstallationFinishDateFromParameter = expectedInstallationFinishDateFrom.HasValue ?
                new ObjectParameter("ExpectedInstallationFinishDateFrom", expectedInstallationFinishDateFrom) :
                new ObjectParameter("ExpectedInstallationFinishDateFrom", typeof(System.DateTime));
    
            var expectedInstallationFinishDateToParameter = expectedInstallationFinishDateTo.HasValue ?
                new ObjectParameter("ExpectedInstallationFinishDateTo", expectedInstallationFinishDateTo) :
                new ObjectParameter("ExpectedInstallationFinishDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doSearchInstallManagementResult>("SearchInstallationManagementList", c_FLAG_ONParameter, c_INSTALL_MANAGE_STATUS_CANCELEDParameter, contractCodeParameter, projectCodeParameter, installationTypeParameter, iEStaffCodeParameter, subContractorCodeParameter, subcontractorGroupNameParameter, proposedInstallationCompleteDateFromParameter, proposedInstallationCompleteDateToParameter, installationCompleteDateFromParameter, installationCompleteDateToParameter, installationStartDateFromParameter, installationStartDateToParameter, installationFinishDateFromParameter, installationFinishDateToParameter, siteNameParameter, siteAddressParameter, operationOfficeCodeParameter, installationManagementStatusParameter, installationRequestDateFromParameter, installationRequestDateToParameter, expectedInstallationStartDateFromParameter, expectedInstallationStartDateToParameter, expectedInstallationFinishDateFromParameter, expectedInstallationFinishDateToParameter);
        }
    
        public virtual ObjectResult<dtRequestApproveInstallation> GetEmailForApprove()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtRequestApproveInstallation>("GetEmailForApprove");
        }
    
        public virtual ObjectResult<RPTNewRentalSlipDo> GetRptNewRetalSlipData(string pSlipNo, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var c_SCREEN_ID_INSTALL_SLIPParameter = c_SCREEN_ID_INSTALL_SLIP != null ?
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP) :
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
    
            var c_STOCK_OUT_TYPEParameter = c_STOCK_OUT_TYPE != null ?
                new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE) :
                new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTNewRentalSlipDo>("GetRptNewRetalSlipData", pSlipNoParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
    
        public virtual ObjectResult<CheckCancelInstallationManagement_Result> CheckCancelInstallationManagement(string strInstallationMaintenanceNo, string c_INSTALL_MANAGE_STATUS_CANCELED)
        {
            var strInstallationMaintenanceNoParameter = strInstallationMaintenanceNo != null ?
                new ObjectParameter("strInstallationMaintenanceNo", strInstallationMaintenanceNo) :
                new ObjectParameter("strInstallationMaintenanceNo", typeof(string));
    
            var c_INSTALL_MANAGE_STATUS_CANCELEDParameter = c_INSTALL_MANAGE_STATUS_CANCELED != null ?
                new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", c_INSTALL_MANAGE_STATUS_CANCELED) :
                new ObjectParameter("C_INSTALL_MANAGE_STATUS_CANCELED", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckCancelInstallationManagement_Result>("CheckCancelInstallationManagement", strInstallationMaintenanceNoParameter, c_INSTALL_MANAGE_STATUS_CANCELEDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationMemo> GetTbt_InstallationMemo(string pMaintenanceNo)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationMemo>("GetTbt_InstallationMemo", pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationMemo> GetTbt_InstallationMemo(string pMaintenanceNo, MergeOption mergeOption)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationMemo>("GetTbt_InstallationMemo", mergeOption, pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<RPTChangeSlipDo> GetRptChangeSlipData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            var c_SCREEN_ID_INSTALL_SLIPParameter = c_SCREEN_ID_INSTALL_SLIP != null ?
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP) :
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
    
            var c_STOCK_OUT_TYPEParameter = c_STOCK_OUT_TYPE != null ?
                new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE) :
                new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTChangeSlipDo>("GetRptChangeSlipData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
    
        public virtual ObjectResult<RPTRemoveSlipDo> GetRptRemoveSlipData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SCREEN_ID_INSTALL_SLIPParameter = c_SCREEN_ID_INSTALL_SLIP != null ?
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP) :
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
    
            var c_STOCK_OUT_TYPEParameter = c_STOCK_OUT_TYPE != null ?
                new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE) :
                new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTRemoveSlipDo>("GetRptRemoveSlipData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationInstrumentDetails> InsertTbt_InstallationInstrumentDetails(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy)
        {
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var contractRemovedQtyParameter = contractRemovedQty.HasValue ?
                new ObjectParameter("ContractRemovedQty", contractRemovedQty) :
                new ObjectParameter("ContractRemovedQty", typeof(int));
    
            var contractMovedQtyParameter = contractMovedQty.HasValue ?
                new ObjectParameter("ContractMovedQty", contractMovedQty) :
                new ObjectParameter("ContractMovedQty", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationInstrumentDetails>("InsertTbt_InstallationInstrumentDetails", contractCodeParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, contractRemovedQtyParameter, contractMovedQtyParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationInstrumentDetails> InsertTbt_InstallationInstrumentDetails(string contractCode, string instrumentCode, string instrumentTypeCode, Nullable<int> contractInstalledQty, Nullable<int> contractRemovedQty, Nullable<int> contractMovedQty, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, MergeOption mergeOption)
        {
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            var instrumentTypeCodeParameter = instrumentTypeCode != null ?
                new ObjectParameter("InstrumentTypeCode", instrumentTypeCode) :
                new ObjectParameter("InstrumentTypeCode", typeof(string));
    
            var contractInstalledQtyParameter = contractInstalledQty.HasValue ?
                new ObjectParameter("ContractInstalledQty", contractInstalledQty) :
                new ObjectParameter("ContractInstalledQty", typeof(int));
    
            var contractRemovedQtyParameter = contractRemovedQty.HasValue ?
                new ObjectParameter("ContractRemovedQty", contractRemovedQty) :
                new ObjectParameter("ContractRemovedQty", typeof(int));
    
            var contractMovedQtyParameter = contractMovedQty.HasValue ?
                new ObjectParameter("ContractMovedQty", contractMovedQty) :
                new ObjectParameter("ContractMovedQty", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationInstrumentDetails>("InsertTbt_InstallationInstrumentDetails", mergeOption, contractCodeParameter, instrumentCodeParameter, instrumentTypeCodeParameter, contractInstalledQtyParameter, contractRemovedQtyParameter, contractMovedQtyParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter);
        }
    
        public virtual ObjectResult<RPTPOSubPriceDo> GetRptPOSubPriceData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
        {
            var cMaintenanceNoParameter = cMaintenanceNo != null ?
                new ObjectParameter("cMaintenanceNo", cMaintenanceNo) :
                new ObjectParameter("cMaintenanceNo", typeof(string));
    
            var cSubcontractorCodeParameter = cSubcontractorCode != null ?
                new ObjectParameter("cSubcontractorCode", cSubcontractorCode) :
                new ObjectParameter("cSubcontractorCode", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SERVICE_TYPE_PROJECTParameter = c_SERVICE_TYPE_PROJECT != null ?
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT) :
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTPOSubPriceDo>("GetRptPOSubPriceData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter);
        }
    
        public virtual ObjectResult<RPTNewSaleSlipDo> GetRptNewSaleSlipData(string pSlipNo, string c_SALE_INSTALL_TYPE, string c_SCREEN_ID_INSTALL_SLIP, string c_STOCK_OUT_TYPE)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_SCREEN_ID_INSTALL_SLIPParameter = c_SCREEN_ID_INSTALL_SLIP != null ?
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", c_SCREEN_ID_INSTALL_SLIP) :
                new ObjectParameter("C_SCREEN_ID_INSTALL_SLIP", typeof(string));
    
            var c_STOCK_OUT_TYPEParameter = c_STOCK_OUT_TYPE != null ?
                new ObjectParameter("C_STOCK_OUT_TYPE", c_STOCK_OUT_TYPE) :
                new ObjectParameter("C_STOCK_OUT_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTNewSaleSlipDo>("GetRptNewSaleSlipData", pSlipNoParameter, c_SALE_INSTALL_TYPEParameter, c_SCREEN_ID_INSTALL_SLIPParameter, c_STOCK_OUT_TYPEParameter);
        }
    
        public virtual ObjectResult<RPTInstallRequestDo> GetRptInstallationRequestData(string cMaintenanceNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_NEW_BLD_MGMT_FLAG, string c_BUILDING_TYPE, string c_PHONE_LINE_OWNER_TYPE)
        {
            var cMaintenanceNoParameter = cMaintenanceNo != null ?
                new ObjectParameter("cMaintenanceNo", cMaintenanceNo) :
                new ObjectParameter("cMaintenanceNo", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SERVICE_TYPE_PROJECTParameter = c_SERVICE_TYPE_PROJECT != null ?
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT) :
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            var c_NEW_BLD_MGMT_FLAGParameter = c_NEW_BLD_MGMT_FLAG != null ?
                new ObjectParameter("C_NEW_BLD_MGMT_FLAG", c_NEW_BLD_MGMT_FLAG) :
                new ObjectParameter("C_NEW_BLD_MGMT_FLAG", typeof(string));
    
            var c_BUILDING_TYPEParameter = c_BUILDING_TYPE != null ?
                new ObjectParameter("C_BUILDING_TYPE", c_BUILDING_TYPE) :
                new ObjectParameter("C_BUILDING_TYPE", typeof(string));
    
            var c_PHONE_LINE_OWNER_TYPEParameter = c_PHONE_LINE_OWNER_TYPE != null ?
                new ObjectParameter("C_PHONE_LINE_OWNER_TYPE", c_PHONE_LINE_OWNER_TYPE) :
                new ObjectParameter("C_PHONE_LINE_OWNER_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTInstallRequestDo>("GetRptInstallationRequestData", cMaintenanceNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, c_NEW_BLD_MGMT_FLAGParameter, c_BUILDING_TYPEParameter, c_PHONE_LINE_OWNER_TYPEParameter);
        }
    
        public virtual ObjectResult<RPTInstallSpecCompleteDo> GetRptInstallSpecCompleteData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
        {
            var cMaintenanceNoParameter = cMaintenanceNo != null ?
                new ObjectParameter("cMaintenanceNo", cMaintenanceNo) :
                new ObjectParameter("cMaintenanceNo", typeof(string));
    
            var cSubcontractorCodeParameter = cSubcontractorCode != null ?
                new ObjectParameter("cSubcontractorCode", cSubcontractorCode) :
                new ObjectParameter("cSubcontractorCode", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SERVICE_TYPE_PROJECTParameter = c_SERVICE_TYPE_PROJECT != null ?
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT) :
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTInstallSpecCompleteDo>("GetRptInstallSpecCompleteData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter);
        }
    
        public virtual ObjectResult<RPTIECheckSheetDo> GetRptIECheckSheetData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
        {
            var cMaintenanceNoParameter = cMaintenanceNo != null ?
                new ObjectParameter("cMaintenanceNo", cMaintenanceNo) :
                new ObjectParameter("cMaintenanceNo", typeof(string));
    
            var cSubcontractorCodeParameter = cSubcontractorCode != null ?
                new ObjectParameter("cSubcontractorCode", cSubcontractorCode) :
                new ObjectParameter("cSubcontractorCode", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SERVICE_TYPE_PROJECTParameter = c_SERVICE_TYPE_PROJECT != null ?
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT) :
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTIECheckSheetDo>("GetRptIECheckSheetData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter);
        }
    
        public virtual ObjectResult<RPTInstallCompleteDo> GetRptInstallCompleteConfirmData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTInstallCompleteDo>("GetRptInstallCompleteConfirmData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter);
        }
    
        public virtual ObjectResult<RPTAcceptInspecDo> GetRptAcceptInspecNocticeData(string cMaintenanceNo, string cSubcontractorCode, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SERVICE_TYPE_PROJECT)
        {
            var cMaintenanceNoParameter = cMaintenanceNo != null ?
                new ObjectParameter("cMaintenanceNo", cMaintenanceNo) :
                new ObjectParameter("cMaintenanceNo", typeof(string));
    
            var cSubcontractorCodeParameter = cSubcontractorCode != null ?
                new ObjectParameter("cSubcontractorCode", cSubcontractorCode) :
                new ObjectParameter("cSubcontractorCode", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SERVICE_TYPE_PROJECTParameter = c_SERVICE_TYPE_PROJECT != null ?
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", c_SERVICE_TYPE_PROJECT) :
                new ObjectParameter("C_SERVICE_TYPE_PROJECT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTAcceptInspecDo>("GetRptAcceptInspecNocticeData", cMaintenanceNoParameter, cSubcontractorCodeParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SERVICE_TYPE_PROJECTParameter);
        }
    
        public virtual ObjectResult<RPTDeliveryConfirmDo> GetRptDeliveryConfirmData(string cSlipNo, string c_CONFIG_INSTALL_WARRANTY_COND)
        {
            var cSlipNoParameter = cSlipNo != null ?
                new ObjectParameter("cSlipNo", cSlipNo) :
                new ObjectParameter("cSlipNo", typeof(string));
    
            var c_CONFIG_INSTALL_WARRANTY_CONDParameter = c_CONFIG_INSTALL_WARRANTY_COND != null ?
                new ObjectParameter("C_CONFIG_INSTALL_WARRANTY_COND", c_CONFIG_INSTALL_WARRANTY_COND) :
                new ObjectParameter("C_CONFIG_INSTALL_WARRANTY_COND", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RPTDeliveryConfirmDo>("GetRptDeliveryConfirmData", cSlipNoParameter, c_CONFIG_INSTALL_WARRANTY_CONDParameter);
        }
    
        public virtual ObjectResult<doCheckInstallationDataToOpenScreen> CheckInstallationDataToOpenScreen(string strCode)
        {
            var strCodeParameter = strCode != null ?
                new ObjectParameter("strCode", strCode) :
                new ObjectParameter("strCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doCheckInstallationDataToOpenScreen>("CheckInstallationDataToOpenScreen", strCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationAttachFile> InsertTbt_InstallationAttachFile(string xml_POManagement)
        {
            var xml_POManagementParameter = xml_POManagement != null ?
                new ObjectParameter("xml_POManagement", xml_POManagement) :
                new ObjectParameter("xml_POManagement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationAttachFile>("InsertTbt_InstallationAttachFile", xml_POManagementParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationAttachFile> InsertTbt_InstallationAttachFile(string xml_POManagement, MergeOption mergeOption)
        {
            var xml_POManagementParameter = xml_POManagement != null ?
                new ObjectParameter("xml_POManagement", xml_POManagement) :
                new ObjectParameter("xml_POManagement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationAttachFile>("InsertTbt_InstallationAttachFile", mergeOption, xml_POManagementParameter);
        }
    
        public virtual ObjectResult<doGetNormalRemovalFee> GetNormalRemovalFee(string pContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SLIP_STATUS_INSTALL_SLIP_CANCELED, string c_SLIP_STATUS_REPLACED)
        {
            var pContractCodeParameter = pContractCode != null ?
                new ObjectParameter("pContractCode", pContractCode) :
                new ObjectParameter("pContractCode", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_SLIP_STATUS_INSTALL_SLIP_CANCELEDParameter = c_SLIP_STATUS_INSTALL_SLIP_CANCELED != null ?
                new ObjectParameter("C_SLIP_STATUS_INSTALL_SLIP_CANCELED", c_SLIP_STATUS_INSTALL_SLIP_CANCELED) :
                new ObjectParameter("C_SLIP_STATUS_INSTALL_SLIP_CANCELED", typeof(string));
    
            var c_SLIP_STATUS_REPLACEDParameter = c_SLIP_STATUS_REPLACED != null ?
                new ObjectParameter("C_SLIP_STATUS_REPLACED", c_SLIP_STATUS_REPLACED) :
                new ObjectParameter("C_SLIP_STATUS_REPLACED", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doGetNormalRemovalFee>("GetNormalRemovalFee", pContractCodeParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SLIP_STATUS_INSTALL_SLIP_CANCELEDParameter, c_SLIP_STATUS_REPLACEDParameter);
        }
    
        public virtual ObjectResult<dtInstallation> GetInstallationDataListForView(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_INSTALL_STATUS_COMPLETED, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string contractCode, string userCode, string planCode, string slipNo, string installationMaintenanceNo, string operationOfficeCode, string salesmanEmpNo, Nullable<System.DateTime> slipIssueDateFrom, Nullable<System.DateTime> slipIssueDateTo, string contractTargetPurchaserName, string siteCode, string siteName, string siteAddress, string installationStatus, string slipStatus, string managementStatus, Nullable<bool> slipNoNullFlag, Nullable<bool> viewFlag, string installationBy, Nullable<bool> notRegisteredYetSlipFlag, Nullable<bool> notRegisteredYetManagementFlag, string subContractorName)
        {
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_INSTALL_STATUS_COMPLETEDParameter = c_INSTALL_STATUS_COMPLETED != null ?
                new ObjectParameter("C_INSTALL_STATUS_COMPLETED", c_INSTALL_STATUS_COMPLETED) :
                new ObjectParameter("C_INSTALL_STATUS_COMPLETED", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = c_SALE_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", c_SALE_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var planCodeParameter = planCode != null ?
                new ObjectParameter("PlanCode", planCode) :
                new ObjectParameter("PlanCode", typeof(string));
    
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var installationMaintenanceNoParameter = installationMaintenanceNo != null ?
                new ObjectParameter("InstallationMaintenanceNo", installationMaintenanceNo) :
                new ObjectParameter("InstallationMaintenanceNo", typeof(string));
    
            var operationOfficeCodeParameter = operationOfficeCode != null ?
                new ObjectParameter("OperationOfficeCode", operationOfficeCode) :
                new ObjectParameter("OperationOfficeCode", typeof(string));
    
            var salesmanEmpNoParameter = salesmanEmpNo != null ?
                new ObjectParameter("SalesmanEmpNo", salesmanEmpNo) :
                new ObjectParameter("SalesmanEmpNo", typeof(string));
    
            var slipIssueDateFromParameter = slipIssueDateFrom.HasValue ?
                new ObjectParameter("SlipIssueDateFrom", slipIssueDateFrom) :
                new ObjectParameter("SlipIssueDateFrom", typeof(System.DateTime));
    
            var slipIssueDateToParameter = slipIssueDateTo.HasValue ?
                new ObjectParameter("SlipIssueDateTo", slipIssueDateTo) :
                new ObjectParameter("SlipIssueDateTo", typeof(System.DateTime));
    
            var contractTargetPurchaserNameParameter = contractTargetPurchaserName != null ?
                new ObjectParameter("ContractTargetPurchaserName", contractTargetPurchaserName) :
                new ObjectParameter("ContractTargetPurchaserName", typeof(string));
    
            var siteCodeParameter = siteCode != null ?
                new ObjectParameter("SiteCode", siteCode) :
                new ObjectParameter("SiteCode", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var siteAddressParameter = siteAddress != null ?
                new ObjectParameter("SiteAddress", siteAddress) :
                new ObjectParameter("SiteAddress", typeof(string));
    
            var installationStatusParameter = installationStatus != null ?
                new ObjectParameter("InstallationStatus", installationStatus) :
                new ObjectParameter("InstallationStatus", typeof(string));
    
            var slipStatusParameter = slipStatus != null ?
                new ObjectParameter("SlipStatus", slipStatus) :
                new ObjectParameter("SlipStatus", typeof(string));
    
            var managementStatusParameter = managementStatus != null ?
                new ObjectParameter("ManagementStatus", managementStatus) :
                new ObjectParameter("ManagementStatus", typeof(string));
    
            var slipNoNullFlagParameter = slipNoNullFlag.HasValue ?
                new ObjectParameter("SlipNoNullFlag", slipNoNullFlag) :
                new ObjectParameter("SlipNoNullFlag", typeof(bool));
    
            var viewFlagParameter = viewFlag.HasValue ?
                new ObjectParameter("ViewFlag", viewFlag) :
                new ObjectParameter("ViewFlag", typeof(bool));
    
            var installationByParameter = installationBy != null ?
                new ObjectParameter("InstallationBy", installationBy) :
                new ObjectParameter("InstallationBy", typeof(string));
    
            var notRegisteredYetSlipFlagParameter = notRegisteredYetSlipFlag.HasValue ?
                new ObjectParameter("NotRegisteredYetSlipFlag", notRegisteredYetSlipFlag) :
                new ObjectParameter("NotRegisteredYetSlipFlag", typeof(bool));
    
            var notRegisteredYetManagementFlagParameter = notRegisteredYetManagementFlag.HasValue ?
                new ObjectParameter("NotRegisteredYetManagementFlag", notRegisteredYetManagementFlag) :
                new ObjectParameter("NotRegisteredYetManagementFlag", typeof(bool));
    
            var subContractorNameParameter = subContractorName != null ?
                new ObjectParameter("SubContractorName", subContractorName) :
                new ObjectParameter("SubContractorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtInstallation>("GetInstallationDataListForView", c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_INSTALL_STATUS_COMPLETEDParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, contractCodeParameter, userCodeParameter, planCodeParameter, slipNoParameter, installationMaintenanceNoParameter, operationOfficeCodeParameter, salesmanEmpNoParameter, slipIssueDateFromParameter, slipIssueDateToParameter, contractTargetPurchaserNameParameter, siteCodeParameter, siteNameParameter, siteAddressParameter, installationStatusParameter, slipStatusParameter, managementStatusParameter, slipNoNullFlagParameter, viewFlagParameter, installationByParameter, notRegisteredYetSlipFlagParameter, notRegisteredYetManagementFlagParameter, subContractorNameParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistory> GetTbt_InstallationHistory(string contractProjectCode, string maintenanceNo, Nullable<int> historyNo)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var historyNoParameter = historyNo.HasValue ?
                new ObjectParameter("HistoryNo", historyNo) :
                new ObjectParameter("HistoryNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistory>("GetTbt_InstallationHistory", contractProjectCodeParameter, maintenanceNoParameter, historyNoParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistory> GetTbt_InstallationHistory(string contractProjectCode, string maintenanceNo, Nullable<int> historyNo, MergeOption mergeOption)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var historyNoParameter = historyNo.HasValue ?
                new ObjectParameter("HistoryNo", historyNo) :
                new ObjectParameter("HistoryNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistory>("GetTbt_InstallationHistory", mergeOption, contractProjectCodeParameter, maintenanceNoParameter, historyNoParameter);
        }
    
        public virtual ObjectResult<dtInstallationPOManagementForView> GetTbt_InstallationPOManagementForView(string pMaintenanceNo)
        {
            var pMaintenanceNoParameter = pMaintenanceNo != null ?
                new ObjectParameter("pMaintenanceNo", pMaintenanceNo) :
                new ObjectParameter("pMaintenanceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtInstallationPOManagementForView>("GetTbt_InstallationPOManagementForView", pMaintenanceNoParameter);
        }
    
        public virtual ObjectResult<dtInstallationMemoForView> GetTbt_InstallationMemoForView(string contractProjectCode, string maintenanceNo, string slipNo)
        {
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtInstallationMemoForView>("GetTbt_InstallationMemoForView", contractProjectCodeParameter, maintenanceNoParameter, slipNoParameter);
        }
    
        public virtual ObjectResult<dtInstallationHistoryForView> GetTbt_InstallationHistoryForView(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, string c_CHANGE_REASON_TYPE_CUSTOMER, string c_CHANGE_REASON_TYPE_SECOM, string c_CUSTOMER_REASON, string c_SECOM_REASON, string contractProjectCode, string maintenanceNo, string slipNo, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            var c_CHANGE_REASON_TYPE_CUSTOMERParameter = c_CHANGE_REASON_TYPE_CUSTOMER != null ?
                new ObjectParameter("C_CHANGE_REASON_TYPE_CUSTOMER", c_CHANGE_REASON_TYPE_CUSTOMER) :
                new ObjectParameter("C_CHANGE_REASON_TYPE_CUSTOMER", typeof(string));
    
            var c_CHANGE_REASON_TYPE_SECOMParameter = c_CHANGE_REASON_TYPE_SECOM != null ?
                new ObjectParameter("C_CHANGE_REASON_TYPE_SECOM", c_CHANGE_REASON_TYPE_SECOM) :
                new ObjectParameter("C_CHANGE_REASON_TYPE_SECOM", typeof(string));
    
            var c_CUSTOMER_REASONParameter = c_CUSTOMER_REASON != null ?
                new ObjectParameter("C_CUSTOMER_REASON", c_CUSTOMER_REASON) :
                new ObjectParameter("C_CUSTOMER_REASON", typeof(string));
    
            var c_SECOM_REASONParameter = c_SECOM_REASON != null ?
                new ObjectParameter("C_SECOM_REASON", c_SECOM_REASON) :
                new ObjectParameter("C_SECOM_REASON", typeof(string));
    
            var contractProjectCodeParameter = contractProjectCode != null ?
                new ObjectParameter("ContractProjectCode", contractProjectCode) :
                new ObjectParameter("ContractProjectCode", typeof(string));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var c_CURRENCY_LOCALParameter = c_CURRENCY_LOCAL != null ?
                new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL) :
                new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
    
            var c_CURRENCY_USParameter = c_CURRENCY_US != null ?
                new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US) :
                new ObjectParameter("C_CURRENCY_US", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtInstallationHistoryForView>("GetTbt_InstallationHistoryForView", c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, c_CHANGE_REASON_TYPE_CUSTOMERParameter, c_CHANGE_REASON_TYPE_SECOMParameter, c_CUSTOMER_REASONParameter, c_SECOM_REASONParameter, contractProjectCodeParameter, maintenanceNoParameter, slipNoParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
    
        public virtual ObjectResult<dtInstallation> GetInstallationDataListForCsvFile(string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_INSTALL_STATUS_COMPLETED, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE_REMOVE_ALL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE, Nullable<bool> slipNoNullFlag, string c_INSTALL_STATUS_INSTALL_NOT_REGISTERED)
        {
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_INSTALL_STATUS_COMPLETEDParameter = c_INSTALL_STATUS_COMPLETED != null ?
                new ObjectParameter("C_INSTALL_STATUS_COMPLETED", c_INSTALL_STATUS_COMPLETED) :
                new ObjectParameter("C_INSTALL_STATUS_COMPLETED", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_SALE_INSTALL_TYPE_REMOVE_ALLParameter = c_SALE_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", c_SALE_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_SALE_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            var slipNoNullFlagParameter = slipNoNullFlag.HasValue ?
                new ObjectParameter("SlipNoNullFlag", slipNoNullFlag) :
                new ObjectParameter("SlipNoNullFlag", typeof(bool));
    
            var c_INSTALL_STATUS_INSTALL_NOT_REGISTEREDParameter = c_INSTALL_STATUS_INSTALL_NOT_REGISTERED != null ?
                new ObjectParameter("C_INSTALL_STATUS_INSTALL_NOT_REGISTERED", c_INSTALL_STATUS_INSTALL_NOT_REGISTERED) :
                new ObjectParameter("C_INSTALL_STATUS_INSTALL_NOT_REGISTERED", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtInstallation>("GetInstallationDataListForCsvFile", c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_INSTALL_STATUS_COMPLETEDParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPE_REMOVE_ALLParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter, slipNoNullFlagParameter, c_INSTALL_STATUS_INSTALL_NOT_REGISTEREDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationAttachFile> DeleteTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID)
        {
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationAttachFile>("DeleteTbt_InstallationAttachFile", attachFileIDParameter, maintenanceNoParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationAttachFile> DeleteTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID, MergeOption mergeOption)
        {
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationAttachFile>("DeleteTbt_InstallationAttachFile", mergeOption, attachFileIDParameter, maintenanceNoParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationAttachFile> GetTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID)
        {
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationAttachFile>("GetTbt_InstallationAttachFile", attachFileIDParameter, maintenanceNoParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationAttachFile> GetTbt_InstallationAttachFile(Nullable<int> attachFileID, string maintenanceNo, string objectID, MergeOption mergeOption)
        {
            var attachFileIDParameter = attachFileID.HasValue ?
                new ObjectParameter("AttachFileID", attachFileID) :
                new ObjectParameter("AttachFileID", typeof(int));
    
            var maintenanceNoParameter = maintenanceNo != null ?
                new ObjectParameter("MaintenanceNo", maintenanceNo) :
                new ObjectParameter("MaintenanceNo", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationAttachFile>("GetTbt_InstallationAttachFile", mergeOption, attachFileIDParameter, maintenanceNoParameter, objectIDParameter);
        }
    
        public virtual ObjectResult<doInstallationDetailForCompleteInstallation> GetInstallationDetailForCompleteInstallation(string pC_INST_TYPE_GENERAL, string pSlipNo)
        {
            var pC_INST_TYPE_GENERALParameter = pC_INST_TYPE_GENERAL != null ?
                new ObjectParameter("pC_INST_TYPE_GENERAL", pC_INST_TYPE_GENERAL) :
                new ObjectParameter("pC_INST_TYPE_GENERAL", typeof(string));
    
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doInstallationDetailForCompleteInstallation>("GetInstallationDetailForCompleteInstallation", pC_INST_TYPE_GENERALParameter, pSlipNoParameter);
        }
    
        public virtual ObjectResult<dtInstallationSlipDetailsForView> GetTbt_InstallationSlipDetailsForView(string slipNo, string instrumentCode)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var instrumentCodeParameter = instrumentCode != null ?
                new ObjectParameter("InstrumentCode", instrumentCode) :
                new ObjectParameter("InstrumentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtInstallationSlipDetailsForView>("GetTbt_InstallationSlipDetailsForView", slipNoParameter, instrumentCodeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipExpansion> InsertTbt_InstallationSlipExpansion(string xml_SlipExpansion)
        {
            var xml_SlipExpansionParameter = xml_SlipExpansion != null ?
                new ObjectParameter("xml_SlipExpansion", xml_SlipExpansion) :
                new ObjectParameter("xml_SlipExpansion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipExpansion>("InsertTbt_InstallationSlipExpansion", xml_SlipExpansionParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationSlipExpansion> InsertTbt_InstallationSlipExpansion(string xml_SlipExpansion, MergeOption mergeOption)
        {
            var xml_SlipExpansionParameter = xml_SlipExpansion != null ?
                new ObjectParameter("xml_SlipExpansion", xml_SlipExpansion) :
                new ObjectParameter("xml_SlipExpansion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationSlipExpansion>("InsertTbt_InstallationSlipExpansion", mergeOption, xml_SlipExpansionParameter);
        }
    
        public virtual ObjectResult<doPrepareCompleteInstallationData> Temp_CompleteInstallation_Rental(string vcContractCode)
        {
            var vcContractCodeParameter = vcContractCode != null ?
                new ObjectParameter("vcContractCode", vcContractCode) :
                new ObjectParameter("vcContractCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doPrepareCompleteInstallationData>("Temp_CompleteInstallation_Rental", vcContractCodeParameter);
        }
    
        public virtual ObjectResult<doPrepareCompleteInstallationData> Temp_CompleteInstallation_Sale(string vcContractCode)
        {
            var vcContractCodeParameter = vcContractCode != null ?
                new ObjectParameter("vcContractCode", vcContractCode) :
                new ObjectParameter("vcContractCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doPrepareCompleteInstallationData>("Temp_CompleteInstallation_Sale", vcContractCodeParameter);
        }
    
        public virtual ObjectResult<doRentalInstrumentdataList> GetRentalInstrumentdataList(string vcContractCode, string vcOCC, string vcSlipNo, string vcInstrumentTyepCode, string vcRentalInstallationType, string c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE)
        {
            var vcContractCodeParameter = vcContractCode != null ?
                new ObjectParameter("vcContractCode", vcContractCode) :
                new ObjectParameter("vcContractCode", typeof(string));
    
            var vcOCCParameter = vcOCC != null ?
                new ObjectParameter("vcOCC", vcOCC) :
                new ObjectParameter("vcOCC", typeof(string));
    
            var vcSlipNoParameter = vcSlipNo != null ?
                new ObjectParameter("vcSlipNo", vcSlipNo) :
                new ObjectParameter("vcSlipNo", typeof(string));
    
            var vcInstrumentTyepCodeParameter = vcInstrumentTyepCode != null ?
                new ObjectParameter("vcInstrumentTyepCode", vcInstrumentTyepCode) :
                new ObjectParameter("vcInstrumentTyepCode", typeof(string));
    
            var vcRentalInstallationTypeParameter = vcRentalInstallationType != null ?
                new ObjectParameter("vcRentalInstallationType", vcRentalInstallationType) :
                new ObjectParameter("vcRentalInstallationType", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE", c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter = c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE", c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doRentalInstrumentdataList>("GetRentalInstrumentdataList", vcContractCodeParameter, vcOCCParameter, vcSlipNoParameter, vcInstrumentTyepCodeParameter, vcRentalInstallationTypeParameter, c_RENTAL_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter, c_RENTAL_INSTALL_TYPE_PERIODICAL_MAINTENANCEParameter);
        }
    
        public virtual ObjectResult<doSaleInstrumentdataList> GetSaleInstrumentdataList(string vcContractCode, string vcOCC, string vcSlipNo, string vcInstrumentTyepCode, string vcChangeType, Nullable<bool> vcInstallCompleteFlag, string vcSaleInstallationType, string vcSaleProcessManageStatus, string c_SALE_CHANGE_TYPE_ADD_SALE, string c_SALE_CHANGE_TYPE_NEW_SALE, string c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE, string c_SALE_PROCESS_STATUS_CANCEL)
        {
            var vcContractCodeParameter = vcContractCode != null ?
                new ObjectParameter("vcContractCode", vcContractCode) :
                new ObjectParameter("vcContractCode", typeof(string));
    
            var vcOCCParameter = vcOCC != null ?
                new ObjectParameter("vcOCC", vcOCC) :
                new ObjectParameter("vcOCC", typeof(string));
    
            var vcSlipNoParameter = vcSlipNo != null ?
                new ObjectParameter("vcSlipNo", vcSlipNo) :
                new ObjectParameter("vcSlipNo", typeof(string));
    
            var vcInstrumentTyepCodeParameter = vcInstrumentTyepCode != null ?
                new ObjectParameter("vcInstrumentTyepCode", vcInstrumentTyepCode) :
                new ObjectParameter("vcInstrumentTyepCode", typeof(string));
    
            var vcChangeTypeParameter = vcChangeType != null ?
                new ObjectParameter("vcChangeType", vcChangeType) :
                new ObjectParameter("vcChangeType", typeof(string));
    
            var vcInstallCompleteFlagParameter = vcInstallCompleteFlag.HasValue ?
                new ObjectParameter("vcInstallCompleteFlag", vcInstallCompleteFlag) :
                new ObjectParameter("vcInstallCompleteFlag", typeof(bool));
    
            var vcSaleInstallationTypeParameter = vcSaleInstallationType != null ?
                new ObjectParameter("vcSaleInstallationType", vcSaleInstallationType) :
                new ObjectParameter("vcSaleInstallationType", typeof(string));
    
            var vcSaleProcessManageStatusParameter = vcSaleProcessManageStatus != null ?
                new ObjectParameter("vcSaleProcessManageStatus", vcSaleProcessManageStatus) :
                new ObjectParameter("vcSaleProcessManageStatus", typeof(string));
    
            var c_SALE_CHANGE_TYPE_ADD_SALEParameter = c_SALE_CHANGE_TYPE_ADD_SALE != null ?
                new ObjectParameter("C_SALE_CHANGE_TYPE_ADD_SALE", c_SALE_CHANGE_TYPE_ADD_SALE) :
                new ObjectParameter("C_SALE_CHANGE_TYPE_ADD_SALE", typeof(string));
    
            var c_SALE_CHANGE_TYPE_NEW_SALEParameter = c_SALE_CHANGE_TYPE_NEW_SALE != null ?
                new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", c_SALE_CHANGE_TYPE_NEW_SALE) :
                new ObjectParameter("C_SALE_CHANGE_TYPE_NEW_SALE", typeof(string));
    
            var c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter = c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE", c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGE", typeof(string));
    
            var c_SALE_PROCESS_STATUS_CANCELParameter = c_SALE_PROCESS_STATUS_CANCEL != null ?
                new ObjectParameter("C_SALE_PROCESS_STATUS_CANCEL", c_SALE_PROCESS_STATUS_CANCEL) :
                new ObjectParameter("C_SALE_PROCESS_STATUS_CANCEL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doSaleInstrumentdataList>("GetSaleInstrumentdataList", vcContractCodeParameter, vcOCCParameter, vcSlipNoParameter, vcInstrumentTyepCodeParameter, vcChangeTypeParameter, vcInstallCompleteFlagParameter, vcSaleInstallationTypeParameter, vcSaleProcessManageStatusParameter, c_SALE_CHANGE_TYPE_ADD_SALEParameter, c_SALE_CHANGE_TYPE_NEW_SALEParameter, c_SALE_INSTALL_TYPE_MAINTENANCE_EXCHANGEParameter, c_SALE_PROCESS_STATUS_CANCELParameter);
        }
    
        public virtual ObjectResult<ContractCodeList> GetInstallationBasicContractByProject(string cProjectCode)
        {
            var cProjectCodeParameter = cProjectCode != null ?
                new ObjectParameter("cProjectCode", cProjectCode) :
                new ObjectParameter("cProjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractCodeList>("GetInstallationBasicContractByProject", cProjectCodeParameter);
        }
    
        public virtual ObjectResult<doRentalFeeResult> GetRentalFee(string vcContractCode, string c_CURRENCY_LOCAL, string c_CURRENCY_US)
        {
            var vcContractCodeParameter = vcContractCode != null ?
                new ObjectParameter("vcContractCode", vcContractCode) :
                new ObjectParameter("vcContractCode", typeof(string));
    
            var c_CURRENCY_LOCALParameter = c_CURRENCY_LOCAL != null ?
                new ObjectParameter("C_CURRENCY_LOCAL", c_CURRENCY_LOCAL) :
                new ObjectParameter("C_CURRENCY_LOCAL", typeof(string));
    
            var c_CURRENCY_USParameter = c_CURRENCY_US != null ?
                new ObjectParameter("C_CURRENCY_US", c_CURRENCY_US) :
                new ObjectParameter("C_CURRENCY_US", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doRentalFeeResult>("GetRentalFee", vcContractCodeParameter, c_CURRENCY_LOCALParameter, c_CURRENCY_USParameter);
        }
    
        public virtual ObjectResult<doGetRemovalData> GetRemovalData(string vcContractCode, string c_RENTAL_INSTALL_TYPE_REMOVE_ALL, string c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL, string c_INSTALL_STATUS_INSTALL_CANCELLED)
        {
            var vcContractCodeParameter = vcContractCode != null ?
                new ObjectParameter("vcContractCode", vcContractCode) :
                new ObjectParameter("vcContractCode", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter = c_RENTAL_INSTALL_TYPE_REMOVE_ALL != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_ALL) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_ALL", typeof(string));
    
            var c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter = c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL", c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALL", typeof(string));
    
            var c_INSTALL_STATUS_INSTALL_CANCELLEDParameter = c_INSTALL_STATUS_INSTALL_CANCELLED != null ?
                new ObjectParameter("C_INSTALL_STATUS_INSTALL_CANCELLED", c_INSTALL_STATUS_INSTALL_CANCELLED) :
                new ObjectParameter("C_INSTALL_STATUS_INSTALL_CANCELLED", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doGetRemovalData>("GetRemovalData", vcContractCodeParameter, c_RENTAL_INSTALL_TYPE_REMOVE_ALLParameter, c_RENTAL_INSTALL_TYPE_REMOVE_DURING_STOP_REMOVE_ALLParameter, c_INSTALL_STATUS_INSTALL_CANCELLEDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationEmail> DeleteTbt_InstallationEmail(string referenceID)
        {
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationEmail>("DeleteTbt_InstallationEmail", referenceIDParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationEmail> DeleteTbt_InstallationEmail(string referenceID, MergeOption mergeOption)
        {
            var referenceIDParameter = referenceID != null ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationEmail>("DeleteTbt_InstallationEmail", mergeOption, referenceIDParameter);
        }
    
        public virtual ObjectResult<doAllSlipNoSeries> GetAllSlipNoSeries(string pContractProjectCode, string pOCC, string pLatestSlipNo)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pOCCParameter = pOCC != null ?
                new ObjectParameter("pOCC", pOCC) :
                new ObjectParameter("pOCC", typeof(string));
    
            var pLatestSlipNoParameter = pLatestSlipNo != null ?
                new ObjectParameter("pLatestSlipNo", pLatestSlipNo) :
                new ObjectParameter("pLatestSlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doAllSlipNoSeries>("GetAllSlipNoSeries", pContractProjectCodeParameter, pOCCParameter, pLatestSlipNoParameter);
        }
    
        public virtual ObjectResult<string> GetInstallationSlipNoForAcceptant(string pContractProjectCode, string pOCC, string pC_SALE_INSTALL_TYPE_ADD, string pC_SALE_INSTALL_TYPE_NEW, string pC_INSTALL_STATUS_INSTALL_CANCELLED)
        {
            var pContractProjectCodeParameter = pContractProjectCode != null ?
                new ObjectParameter("pContractProjectCode", pContractProjectCode) :
                new ObjectParameter("pContractProjectCode", typeof(string));
    
            var pOCCParameter = pOCC != null ?
                new ObjectParameter("pOCC", pOCC) :
                new ObjectParameter("pOCC", typeof(string));
    
            var pC_SALE_INSTALL_TYPE_ADDParameter = pC_SALE_INSTALL_TYPE_ADD != null ?
                new ObjectParameter("pC_SALE_INSTALL_TYPE_ADD", pC_SALE_INSTALL_TYPE_ADD) :
                new ObjectParameter("pC_SALE_INSTALL_TYPE_ADD", typeof(string));
    
            var pC_SALE_INSTALL_TYPE_NEWParameter = pC_SALE_INSTALL_TYPE_NEW != null ?
                new ObjectParameter("pC_SALE_INSTALL_TYPE_NEW", pC_SALE_INSTALL_TYPE_NEW) :
                new ObjectParameter("pC_SALE_INSTALL_TYPE_NEW", typeof(string));
    
            var pC_INSTALL_STATUS_INSTALL_CANCELLEDParameter = pC_INSTALL_STATUS_INSTALL_CANCELLED != null ?
                new ObjectParameter("pC_INSTALL_STATUS_INSTALL_CANCELLED", pC_INSTALL_STATUS_INSTALL_CANCELLED) :
                new ObjectParameter("pC_INSTALL_STATUS_INSTALL_CANCELLED", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetInstallationSlipNoForAcceptant", pContractProjectCodeParameter, pOCCParameter, pC_SALE_INSTALL_TYPE_ADDParameter, pC_SALE_INSTALL_TYPE_NEWParameter, pC_INSTALL_STATUS_INSTALL_CANCELLEDParameter);
        }
    
        public virtual ObjectResult<dtInsHistory> GetSlipNoHistory(string slipNo)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtInsHistory>("GetSlipNoHistory", slipNoParameter);
        }
    
        public virtual ObjectResult<doGenerateInstallationSlipNo> GenerateInstallationSlipNo(string officeCode, string slipID, string year, string month, Nullable<System.DateTime> createDate, string createBy)
        {
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(string));
    
            var slipIDParameter = slipID != null ?
                new ObjectParameter("SlipID", slipID) :
                new ObjectParameter("SlipID", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<doGenerateInstallationSlipNo>("GenerateInstallationSlipNo", officeCodeParameter, slipIDParameter, yearParameter, monthParameter, createDateParameter, createByParameter);
        }
    
        public virtual ObjectResult<InstallationBooking> GetInstallationBooking(string slipNo)
        {
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InstallationBooking>("GetInstallationBooking", slipNoParameter);
        }
    
        public virtual ObjectResult<dtGetInstallationReport> GetInstallationReport(string subConstractor, Nullable<System.DateTime> lastPaidDateFrom, Nullable<System.DateTime> lastPaidDateTo)
        {
            var subConstractorParameter = subConstractor != null ?
                new ObjectParameter("SubConstractor", subConstractor) :
                new ObjectParameter("SubConstractor", typeof(string));
    
            var lastPaidDateFromParameter = lastPaidDateFrom.HasValue ?
                new ObjectParameter("LastPaidDateFrom", lastPaidDateFrom) :
                new ObjectParameter("LastPaidDateFrom", typeof(System.DateTime));
    
            var lastPaidDateToParameter = lastPaidDateTo.HasValue ?
                new ObjectParameter("LastPaidDateTo", lastPaidDateTo) :
                new ObjectParameter("LastPaidDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetInstallationReport>("GetInstallationReport", subConstractorParameter, lastPaidDateFromParameter, lastPaidDateToParameter);
        }
    
        public virtual ObjectResult<dtGetInstallationReportMonthly> GetInstallationReportMonthly(string reportType, Nullable<System.DateTime> receiveDateFrom, Nullable<System.DateTime> receiveDateTo, Nullable<System.DateTime> completeDateFrom, Nullable<System.DateTime> completeDateTo, Nullable<System.DateTime> expectedStartDateFrom, Nullable<System.DateTime> expectedStartDateTo, Nullable<System.DateTime> expectedCompleteDateFrom, Nullable<System.DateTime> expectedCompleteDateTo, string contractCode, string siteName, string subContractorCode, string productName, string installationStatus, string buildingType)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var receiveDateFromParameter = receiveDateFrom.HasValue ?
                new ObjectParameter("ReceiveDateFrom", receiveDateFrom) :
                new ObjectParameter("ReceiveDateFrom", typeof(System.DateTime));
    
            var receiveDateToParameter = receiveDateTo.HasValue ?
                new ObjectParameter("ReceiveDateTo", receiveDateTo) :
                new ObjectParameter("ReceiveDateTo", typeof(System.DateTime));
    
            var completeDateFromParameter = completeDateFrom.HasValue ?
                new ObjectParameter("CompleteDateFrom", completeDateFrom) :
                new ObjectParameter("CompleteDateFrom", typeof(System.DateTime));
    
            var completeDateToParameter = completeDateTo.HasValue ?
                new ObjectParameter("CompleteDateTo", completeDateTo) :
                new ObjectParameter("CompleteDateTo", typeof(System.DateTime));
    
            var expectedStartDateFromParameter = expectedStartDateFrom.HasValue ?
                new ObjectParameter("ExpectedStartDateFrom", expectedStartDateFrom) :
                new ObjectParameter("ExpectedStartDateFrom", typeof(System.DateTime));
    
            var expectedStartDateToParameter = expectedStartDateTo.HasValue ?
                new ObjectParameter("ExpectedStartDateTo", expectedStartDateTo) :
                new ObjectParameter("ExpectedStartDateTo", typeof(System.DateTime));
    
            var expectedCompleteDateFromParameter = expectedCompleteDateFrom.HasValue ?
                new ObjectParameter("ExpectedCompleteDateFrom", expectedCompleteDateFrom) :
                new ObjectParameter("ExpectedCompleteDateFrom", typeof(System.DateTime));
    
            var expectedCompleteDateToParameter = expectedCompleteDateTo.HasValue ?
                new ObjectParameter("ExpectedCompleteDateTo", expectedCompleteDateTo) :
                new ObjectParameter("ExpectedCompleteDateTo", typeof(System.DateTime));
    
            var contractCodeParameter = contractCode != null ?
                new ObjectParameter("ContractCode", contractCode) :
                new ObjectParameter("ContractCode", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var subContractorCodeParameter = subContractorCode != null ?
                new ObjectParameter("SubContractorCode", subContractorCode) :
                new ObjectParameter("SubContractorCode", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var installationStatusParameter = installationStatus != null ?
                new ObjectParameter("InstallationStatus", installationStatus) :
                new ObjectParameter("InstallationStatus", typeof(string));
    
            var buildingTypeParameter = buildingType != null ?
                new ObjectParameter("BuildingType", buildingType) :
                new ObjectParameter("BuildingType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dtGetInstallationReportMonthly>("GetInstallationReportMonthly", reportTypeParameter, receiveDateFromParameter, receiveDateToParameter, completeDateFromParameter, completeDateToParameter, expectedStartDateFromParameter, expectedStartDateToParameter, expectedCompleteDateFromParameter, expectedCompleteDateToParameter, contractCodeParameter, siteNameParameter, subContractorCodeParameter, productNameParameter, installationStatusParameter, buildingTypeParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistory> UpdateTbt_InstallationHistory(string xmlTbt_InstallationHistory)
        {
            var xmlTbt_InstallationHistoryParameter = xmlTbt_InstallationHistory != null ?
                new ObjectParameter("xmlTbt_InstallationHistory", xmlTbt_InstallationHistory) :
                new ObjectParameter("xmlTbt_InstallationHistory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistory>("UpdateTbt_InstallationHistory", xmlTbt_InstallationHistoryParameter);
        }
    
        public virtual ObjectResult<tbt_InstallationHistory> UpdateTbt_InstallationHistory(string xmlTbt_InstallationHistory, MergeOption mergeOption)
        {
            var xmlTbt_InstallationHistoryParameter = xmlTbt_InstallationHistory != null ?
                new ObjectParameter("xmlTbt_InstallationHistory", xmlTbt_InstallationHistory) :
                new ObjectParameter("xmlTbt_InstallationHistory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbt_InstallationHistory>("UpdateTbt_InstallationHistory", mergeOption, xmlTbt_InstallationHistoryParameter);
        }
    
        public virtual ObjectResult<RptSignatureDo> GetRptSignature(string c_RPT_CODE, string c_RPT_Position)
        {
            var c_RPT_CODEParameter = c_RPT_CODE != null ?
                new ObjectParameter("C_RPT_CODE", c_RPT_CODE) :
                new ObjectParameter("C_RPT_CODE", typeof(string));
    
            var c_RPT_PositionParameter = c_RPT_Position != null ?
                new ObjectParameter("C_RPT_Position", c_RPT_Position) :
                new ObjectParameter("C_RPT_Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSignatureDo>("GetRptSignature", c_RPT_CODEParameter, c_RPT_PositionParameter);
        }
    
        public virtual ObjectResult<RptISR110InstallCompleteConfirmDo> GetRptISR110InstallCompleteConfirmData(string pSlipNo, string c_SERVICE_TYPE_SALE, string c_SERVICE_TYPE_RENTAL, string c_SALE_INSTALL_TYPE, string c_RENTAL_INSTALL_TYPE)
        {
            var pSlipNoParameter = pSlipNo != null ?
                new ObjectParameter("pSlipNo", pSlipNo) :
                new ObjectParameter("pSlipNo", typeof(string));
    
            var c_SERVICE_TYPE_SALEParameter = c_SERVICE_TYPE_SALE != null ?
                new ObjectParameter("C_SERVICE_TYPE_SALE", c_SERVICE_TYPE_SALE) :
                new ObjectParameter("C_SERVICE_TYPE_SALE", typeof(string));
    
            var c_SERVICE_TYPE_RENTALParameter = c_SERVICE_TYPE_RENTAL != null ?
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", c_SERVICE_TYPE_RENTAL) :
                new ObjectParameter("C_SERVICE_TYPE_RENTAL", typeof(string));
    
            var c_SALE_INSTALL_TYPEParameter = c_SALE_INSTALL_TYPE != null ?
                new ObjectParameter("C_SALE_INSTALL_TYPE", c_SALE_INSTALL_TYPE) :
                new ObjectParameter("C_SALE_INSTALL_TYPE", typeof(string));
    
            var c_RENTAL_INSTALL_TYPEParameter = c_RENTAL_INSTALL_TYPE != null ?
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", c_RENTAL_INSTALL_TYPE) :
                new ObjectParameter("C_RENTAL_INSTALL_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptISR110InstallCompleteConfirmDo>("GetRptISR110InstallCompleteConfirmData", pSlipNoParameter, c_SERVICE_TYPE_SALEParameter, c_SERVICE_TYPE_RENTALParameter, c_SALE_INSTALL_TYPEParameter, c_RENTAL_INSTALL_TYPEParameter);
        }
    }
}
