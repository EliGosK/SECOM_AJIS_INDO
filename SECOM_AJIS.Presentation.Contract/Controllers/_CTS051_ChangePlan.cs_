//*********************************
// Create by Songwut Chitipanich: 
// Create date: /AUG/2010
// Update date: /AUG/2010
//*********************************

using System;
using System.Web.Mvc;

using System.Collections.Generic;
using System.Linq;

using CSI.WindsorHelper;
using SECOM_AJIS.Presentation.Contract.Models;

using SECOM_AJIS.Common.ActionFilters;
using SECOM_AJIS.Common.Util;
using SECOM_AJIS.Common.Models;
using SECOM_AJIS.Common.Util.ConstantValue;
using SECOM_AJIS.Common.Controllers;

using SECOM_AJIS.DataEntity.Contract;
using SECOM_AJIS.DataEntity.Common;
using SECOM_AJIS.DataEntity.Master;
using SECOM_AJIS.DataEntity.Quotation;
using SECOM_AJIS.Common.Helpers;
using SECOM_AJIS.DataEntity.Billing;

namespace SECOM_AJIS.Presentation.Contract.Controllers
{
    public partial class ContractController : BaseController
    {
        public ActionResult CTS051_Authority(CTS051_ScreenParameter param)
        {
            ObjectResultData res = new ObjectResultData();
            try
            {
                CommonUtil util = new CommonUtil();
                ICommonHandler commonHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;
                IRentralContractHandler renderHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;

                //1.1 Check suspending
                if (commonHandler.IsSystemSuspending())
                {
                    res.AddErrorMessage("Common", MessageUtil.MessageList.MSG0049, null, null);
                    return Json(res);
                }

                //1.2 Check user's permission
                if (!CheckUserPermission(ScreenID.C_SCREEN_ID_CP12_CHANGE_PLAN, FunctionID.C_FUNC_ID_OPERATE))
                {
                    res.AddErrorMessage("Common", MessageUtil.MessageList.MSG0053, null, null);
                    return Json(res);
                }

                // Check parameter
                if ((param == null)
                    || (String.IsNullOrEmpty(param.ContractCode)))
                {
                    // Not valid
                    //res.AddErrorMessage("Common", MessageUtil.MessageList.MSG0011, new string[] { "Contract Code" }, null);
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0147, null, null);
                    return Json(res);
                }

                // Check is contact exists
                var contractObj = renderHandler.GetTbt_RentalContractBasic(util.ConvertContractCode(param.ContractCode, CommonUtil.CONVERT_TYPE.TO_LONG), null);
                if ((contractObj == null)
                    || (contractObj.Count == 0))
                {
                    // Not found
                    //res.AddErrorMessage("Common", MessageUtil.MessageList.MSG0011, new string[] { String.Format("Contract Code: {0}", param.ContractCode) }, null)
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0124, null, null);
                    return Json(res);
                }

                if (CommonUtil.dsTransData.dtOfficeData.FindAll(delegate(OfficeDataDo s) { return s.OfficeCode == contractObj[0].ContractOfficeCode; }).Count == 0)
                {
                    res.AddErrorMessage("Common", MessageUtil.MessageList.MSG0063, null, null);
                    return Json(res);
                }

                if (CommonUtil.dsTransData.dtOfficeData.FindAll(delegate(OfficeDataDo s) { return s.OfficeCode == contractObj[0].OperationOfficeCode; }).Count == 0)
                {
                    res.AddErrorMessage("Common", MessageUtil.MessageList.MSG0063, null, null);
                    return Json(res);
                }

                string occCode = renderHandler.GetLastUnimplementedOCC(contractObj[0].ContractCode);
                if (String.IsNullOrEmpty(occCode))
                {
                    occCode = renderHandler.GetLastImplementedOCC(contractObj[0].ContractCode);
                }

                if (String.IsNullOrEmpty(occCode))
                {
                    res.AddErrorMessage("Contract", MessageUtil.MessageList.MSG3053, null, null);
                    return Json(res);
                }

                if ((contractObj[0].LastChangeType == SECOM_AJIS.Common.Util.ConstantValue.RentalChangeType.C_RENTAL_CHANGE_TYPE_CANCEL) ||
                    (contractObj[0].LastChangeType == SECOM_AJIS.Common.Util.ConstantValue.RentalChangeType.C_RENTAL_CHANGE_TYPE_CANCEL_BEFORE_START))
                {
                    res.AddErrorMessage("Contract", MessageUtil.MessageList.MSG3001, null, null);
                    return Json(res);
                }

                InitialScreenSession_CTS051(param);
                param.ContractCode = util.ConvertContractCode(param.ContractCode, CommonUtil.CONVERT_TYPE.TO_LONG);
                return InitialScreenEnvironment<CTS051_ScreenParameter>("CTS051", param, res);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        #region Event
        
        public ActionResult RetrieveClick_CTS051(CTS051_DORetrieveData doCTS051)
        {                                  
            IQuotationHandler quotationHandler;
            IMasterHandler masterHandler;
            IRentralContractHandler rentralContractHandler;
            IInstrumentMasterHandler instrumentMasterHandler; 

            ObjectResultData res = new ObjectResultData();
            dsQuotationData dsQuotation;
            dsRentalContractData dsRentralContract;
            List<dtInstrument> listDTInstrument;

            CommonUtil comU = new CommonUtil();
            CTS051_ScreenParameter session;

            try
            {
                //2.1 Validate require fields (do on model)

                //2.2 Load quotation
                session = CTS051_GetImportData();

                quotationHandler = ServiceContainer.GetService<IQuotationHandler>() as IQuotationHandler;
                masterHandler = ServiceContainer.GetService<IMasterHandler>() as IMasterHandler;
                rentralContractHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;
                instrumentMasterHandler = ServiceContainer.GetService<IInstrumentMasterHandler>() as IInstrumentMasterHandler;

                doGetQuotationDataCondition doQuotationCondition = new doGetQuotationDataCondition();
                doQuotationCondition.QuotationTargetCode = comU.ConvertQuotationTargetCode(doCTS051.QuotationTargetCode, CommonUtil.CONVERT_TYPE.TO_LONG);
                doQuotationCondition.Alphabet = doCTS051.Alphabet;
                doQuotationCondition.ServiceTypeCode = SECOM_AJIS.Common.Util.ConstantValue.ServiceType.C_SERVICE_TYPE_RENTAL;
                doQuotationCondition.TargetCodeTypeCode = SECOM_AJIS.Common.Util.ConstantValue.TargetCodeType.C_TARGET_CODE_TYPE_CONTRACT_CODE;
                doQuotationCondition.ContractFlag = true;
                dsQuotation = quotationHandler.GetQuotationData(doQuotationCondition);
                session.DSQuotationData = dsQuotation;
                dsRentralContract = session.DSRentalContract;                
                
                //2.3 Validate not found data 
                if (dsQuotation == null)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, null, new string[] { "Alphabet" });
                    return Json(res);   
                }
                BindViewBagGridChangePlan_CTS051(dsQuotation, dsRentralContract);

                //2.3.1 Validate quotation for error 
                if (dsRentralContract.dtTbt_RentalContractBasic.Count != 0)
                {
                    if (dsQuotation.dtTbt_QuotationBasic.LastOccNo != dsRentralContract.dtTbt_RentalContractBasic[0].LastOCC)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, null, new string[] { "Alphabet" });
                        return Json(res);   
                    }
                }

                int countQuotationMaintenanceLinkage = 0;
                countQuotationMaintenanceLinkage = dsQuotation.dtTbt_QuotationMaintenanceLinkage.Count();
                //2.3.2 The relationship of maintenance contract and alarm must be 1:1 (MA: N = 1:1)
                if (dsRentralContract.dtTbt_RentalContractBasic.Count != 0)
                {
                    if (dsRentralContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_MA)
                    {
                        if (dsRentralContract.dtTbt_RentalContractBasic != null)
	                    {
		                    if (dsRentralContract.dtTbt_RentalContractBasic.Count() > 0)
	                        {
                                if (dsRentralContract.dtTbt_RentalContractBasic[0].ServiceTypeCode == ServiceType.C_SERVICE_TYPE_RENTAL && countQuotationMaintenanceLinkage > 1)
	                            {
                                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, "");
                                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, null, new string[] { "Alphabet" });
                                    return Json(res);   
	                            }
	                        }
	                    }
                    }
                }

                //2.3.3 The create date of quotation must greater than the last update date of maintenance target contract code (exclude OCC of CP-16 and move instrument)
                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_MA)
                {
                    List<DateTime?> lastUpdateDate = rentralContractHandler.GetMaxUpdateDateOfMATargetContract(session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractCode, session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OCC);
                    if ((lastUpdateDate.Count > 0) && (session.DSQuotationData.dtTbt_QuotationBasic.CreateDate <= lastUpdateDate[0]))
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3002, null, new string[] { "Alphabet" });
                        return Json(res);
                    }
                }

                //2.4 Validate quotation for warning //This validation is the same other screen
                //2.4.1 Line-up flag of instrument must not be 'Stop sale' or 'Logical delete' 
                if (dsQuotation.dtTbt_QuotationInstrumentDetails != null)
                {
                    for (int i = 0; i <= dsQuotation.dtTbt_QuotationInstrumentDetails.Count - 1; i++)
                    {
                        listDTInstrument = instrumentMasterHandler.GetInstrument(dsQuotation.dtTbt_QuotationInstrumentDetails[i].InstrumentCode, null, null, null);
                        if (listDTInstrument != null)
	                    {
		                    if (listDTInstrument.Count != 0)
	                        {
                                if (listDTInstrument[0].LineUpTypeCode == SECOM_AJIS.Common.Util.ConstantValue.LineUpType.C_LINE_UP_TYPE_STOP_SALE || listDTInstrument[0].LineUpTypeCode == SECOM_AJIS.Common.Util.ConstantValue.LineUpType.C_LINE_UP_TYPE_LOGICAL_DELETE)
                                {
                                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3038, "");
                                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3038, null, new string[] { "Alphabet" });
                                    //return Json(res);
                                }
	                        }
	                    }
                    }     
                }               

                //2.5.1 MapdsQuotation to 'Change Plan (before/after) section'
                //Jquery will call method GetChangePlanGrid_CTS051

                //2.6 Get billing target information (Do on GetBillingTargetInformation_CTS051)
          
                //2.7 Initial billing timing of deposit dee in Change plan'
                //Jquery will call method InitialBillingTiming_CTS051 when retrieve button clik   

                //2.8.2 Enable and disable items according to this matrix by check the following fields'
                //Jquery will call method InitialEnableDisableChangePlan_CTS051

                session.DTBillingClientDetail = null;
                session.ListDTBillingClientDetail = null;

                session.DTBillingTempChangePlan = null;
                session.ListDTBillingTempChangePlan = null;
                
                session.DOBillingTargetDetail = null;
                session.ListDOBillingTargetDetail = null;

                session.DOBillingTargetDetailGrid = null;
                session.ListDOBillingTargetDetailGrid = null;

                res.ResultData = true;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }
            
            return Json(res);
        }        

        public ActionResult RetrieveBillingTargetClick_CTS051(CTS051_DORetrieveBillingTargetData doRetrieveBillingTarget)
        {
            CommonUtil common;
            ObjectResultData res = new ObjectResultData();
            IBillingInterfaceHandler billinginterfacehandler = ServiceContainer.GetService<IBillingInterfaceHandler>() as IBillingInterfaceHandler;
            IBillingMasterHandler billingHandler;
            
            tbt_BillingTarget dtBillingTarget = null;
            CTS051_DTBillingClientDetailData dtBillingClientDetail;
            List<dtBillingClientData> dtBillingClientDetailTemporary;
            CTS051_DOBillingTargetDetailData doBillingTargetDetail;

            CTS051_ScreenParameter session;
            try
            {
                common = new CommonUtil();
                session = CTS051_GetImportData();
                billingHandler = ServiceContainer.GetService<IBillingMasterHandler>() as IBillingMasterHandler;

                doBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
                
                //dtBillingTarget = billinginterfacehandler.GetBillingTarget(common.ConvertBillingTargetCode(doRetrieveBillingTarget.BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_LONG));
                List<tbt_BillingTarget> dtBillingTargetList = billinginterfacehandler.GetBillingTarget(common.ConvertBillingTargetCode(doRetrieveBillingTarget.BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_LONG));
                if (dtBillingTargetList != null && dtBillingTargetList.Count > 0)
                    dtBillingTarget = dtBillingTargetList[0];

                if (dtBillingTarget == null)
                {
                    string[] param = { "Billing target code" };
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0011, "Billing target code");
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0011, param, null);
                }
                else
                {
                    dtBillingClientDetail = new CTS051_DTBillingClientDetailData();
                    dtBillingClientDetailTemporary = billingHandler.GetBillingClient(dtBillingTarget.BillingClientCode);
                    dtBillingClientDetail.BillingClientCode = dtBillingClientDetailTemporary[0].BillingClientCode;
                    dtBillingClientDetail.BillingOffice = dtBillingTarget.BillingOfficeCode; //รอถามอีกทีนึง;
                    dtBillingClientDetail.FullNameEN = dtBillingClientDetailTemporary[0].FullNameEN;
                    dtBillingClientDetail.BranchNameEN = dtBillingClientDetailTemporary[0].BranchNameEN;
                    dtBillingClientDetail.AddressEN = dtBillingClientDetailTemporary[0].AddressEN;
                    dtBillingClientDetail.FullNameLC = dtBillingClientDetailTemporary[0].FullNameLC;
                    dtBillingClientDetail.BranchNameLC = dtBillingClientDetailTemporary[0].BranchNameLC;
                    dtBillingClientDetail.AddressLC = dtBillingClientDetailTemporary[0].AddressLC;
                    dtBillingClientDetail.NationalityEN = dtBillingClientDetailTemporary[0].NationalityEN; //Wait for edit to Nationality which follow culture from billingTemp;
                    dtBillingClientDetail.PhoneNo = dtBillingClientDetailTemporary[0].PhoneNo;
                    dtBillingClientDetail.BusinessTypeNameEN = dtBillingClientDetailTemporary[0].BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                    dtBillingClientDetail.IDNo = dtBillingClientDetailTemporary[0].IDNo;

                    doBillingTargetDetail.BillingTargetCodeDetail = doRetrieveBillingTarget.BillingTargetCode;
                    doBillingTargetDetail.BillingClientCodeDetail = dtBillingClientDetailTemporary[0].BillingClientCode;
                    doBillingTargetDetail.BillingOfficeCode = dtBillingTarget.BillingOfficeCode;
                    doBillingTargetDetail.FullNameEN = dtBillingClientDetail.FullNameEN;
                    doBillingTargetDetail.BranchNameEN = dtBillingClientDetail.BranchNameEN;
                    doBillingTargetDetail.AddressEN = dtBillingClientDetail.AddressEN;
                    doBillingTargetDetail.FullNameLC = dtBillingClientDetail.FullNameLC;
                    doBillingTargetDetail.BranchNameLC = dtBillingClientDetail.BranchNameLC;
                    doBillingTargetDetail.AddressLC = dtBillingClientDetail.AddressLC;
                    doBillingTargetDetail.Nationality = dtBillingClientDetail.NationalityEN; //Wait for edit to Nationality which follow culture from billingTemp;
                    doBillingTargetDetail.PhoneNo = dtBillingClientDetail.PhoneNo;
                    doBillingTargetDetail.BusinessType = dtBillingClientDetail.BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                    doBillingTargetDetail.IDNo = dtBillingClientDetail.IDNo;

                    if (doRetrieveBillingTarget.Mode == "Update")
                    {
                        doBillingTargetDetail.Sequence = session.DOBillingTargetDetail.Sequence;
                        dtBillingClientDetail.Sequence = session.DOBillingTargetDetail.Sequence;
                    }
                    else
                        dtBillingClientDetail.BillingClientCode = "";

                    session.DOBillingTargetDetail = doBillingTargetDetail;
                    session.DTBillingClientDetail = dtBillingClientDetail;

                    return Json(doBillingTargetDetail);
                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult RetrieveBillingClientClick_CTS051(CTS051_DORetrieveBillingClientData doRetrieveBillingClient)
        {
            CommonUtil common;
            ObjectResultData res = new ObjectResultData();
            IBillingMasterHandler billingHandler;

            List<dtBillingClientData> dtBillingClientDetailTemporary;
            CTS051_DTBillingClientDetailData dtBillingClientDetail;
            CTS051_DOBillingTargetDetailData doBillingTargetDetail;
            CTS051_ScreenParameter session;
            try
            {
                common = new CommonUtil();
                session = CTS051_GetImportData();
                billingHandler = ServiceContainer.GetService<IBillingMasterHandler>() as IBillingMasterHandler;

                doBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
                dtBillingClientDetail = new CTS051_DTBillingClientDetailData();
                dtBillingClientDetailTemporary = billingHandler.GetBillingClient(common.ConvertBillingClientCode(doRetrieveBillingClient.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_LONG));

                if (dtBillingClientDetailTemporary.Count() == 0)
                {
                    string[] param = { "Billing client code" };
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0011, "Billing client code");
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0011, param, null);
                }
                else
                {
                    dtBillingClientDetail.BillingClientCode = dtBillingClientDetailTemporary[0].BillingClientCode;
                    dtBillingClientDetail.BillingOffice = ""; //รอถามอีกทีนึง;
                    dtBillingClientDetail.FullNameEN = dtBillingClientDetailTemporary[0].FullNameEN;
                    dtBillingClientDetail.BranchNameEN = dtBillingClientDetailTemporary[0].BranchNameEN;
                    dtBillingClientDetail.AddressEN = dtBillingClientDetailTemporary[0].AddressEN;
                    dtBillingClientDetail.FullNameLC = dtBillingClientDetailTemporary[0].FullNameLC;
                    dtBillingClientDetail.BranchNameLC = dtBillingClientDetailTemporary[0].BranchNameLC;
                    dtBillingClientDetail.AddressLC = dtBillingClientDetailTemporary[0].AddressLC;
                    dtBillingClientDetail.NationalityEN = dtBillingClientDetailTemporary[0].NationalityEN; //Wait for edit to Nationality which follow culture from billingTemp;
                    dtBillingClientDetail.PhoneNo = dtBillingClientDetailTemporary[0].PhoneNo;
                    dtBillingClientDetail.BusinessTypeNameEN = dtBillingClientDetailTemporary[0].BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                    dtBillingClientDetail.IDNo = dtBillingClientDetailTemporary[0].IDNo;
                    doBillingTargetDetail.BillingTargetCodeDetail = "";

                    if (doRetrieveBillingClient.Mode == "Update")
                    {
                        doBillingTargetDetail.Sequence = session.DOBillingTargetDetail.Sequence;
                        dtBillingClientDetail.Sequence = session.DOBillingTargetDetail.Sequence;
                    }
                    else
                    {
                        dtBillingClientDetail.BillingClientCode = doRetrieveBillingClient.BillingClientCode;
                        doBillingTargetDetail.BillingClientCodeDetail = doRetrieveBillingClient.BillingClientCode;
                    }

                    doBillingTargetDetail.FullNameEN = dtBillingClientDetail.FullNameEN;
                    doBillingTargetDetail.BranchNameEN = dtBillingClientDetail.BranchNameEN;
                    doBillingTargetDetail.AddressEN = dtBillingClientDetail.AddressEN;
                    doBillingTargetDetail.FullNameLC = dtBillingClientDetail.FullNameLC;
                    doBillingTargetDetail.BranchNameLC = dtBillingClientDetail.BranchNameLC;
                    doBillingTargetDetail.AddressLC = dtBillingClientDetail.AddressLC;
                    doBillingTargetDetail.Nationality = dtBillingClientDetail.NationalityEN; //Wait for edit to Nationality which follow culture from billingTemp;
                    doBillingTargetDetail.PhoneNo = dtBillingClientDetail.PhoneNo;
                    doBillingTargetDetail.BusinessType = dtBillingClientDetail.BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                    doBillingTargetDetail.IDNo = dtBillingClientDetail.IDNo;

                    session.DOBillingTargetDetail = doBillingTargetDetail;
                    session.DTBillingClientDetail = dtBillingClientDetail;

                    return Json(doBillingTargetDetail);
                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult CopyNameClick_CTS051(CTS051_DOCopyNameCondition doCopyNameCondition)
        {
            ObjectResultData res = new ObjectResultData();
            IMasterHandler masterHandler;

            CTS051_ScreenParameter session;
            CTS051_DOBillingTargetDetailData doBillingTargetDetail;
            CTS051_DTBillingClientDetailData dtBillingClientDetail;

            dsRentalContractData dsRentalContract;

            List<tbm_Customer> listCustomer;
            List<doGetTbm_Site> listSite;

            try
            {
                session = CTS051_GetImportData();
                masterHandler = ServiceContainer.GetService<IMasterHandler>() as IMasterHandler;
                dsRentalContract = session.DSRentalContract;

                if (doCopyNameCondition.Mode == "Update")
                {
                    session.DOBillingTargetDetailCopy = CommonUtil.CloneObject<CTS051_DOBillingTargetDetailData, CTS051_DOBillingTargetDetailData>(session.DOBillingTargetDetail);
                    session.DTBillingClientDetailCopy = CommonUtil.CloneObject<CTS051_DTBillingClientDetailData, CTS051_DTBillingClientDetailData>(session.DTBillingClientDetail);

                    doBillingTargetDetail = session.DOBillingTargetDetailCopy;
                    dtBillingClientDetail = session.DTBillingClientDetailCopy;
                }
                else
                {
                    doBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
                    dtBillingClientDetail = new CTS051_DTBillingClientDetailData();
                }

                if (doBillingTargetDetail.Status == "ADD")
                {
                    doBillingTargetDetail.BillingClientCodeDetail = "";
                    doBillingTargetDetail.BillingTargetCodeDetail = "";
                }

                if (doCopyNameCondition.RdoType == "0")
                {
                    if (dsRentalContract.dtTbt_RentalContractBasic != null)
                    {
                        listCustomer = masterHandler.GetTbm_Customer(dsRentalContract.dtTbt_RentalContractBasic[0].ContractTargetCustCode);
                        dtBillingClientDetail.NameEN = listCustomer[0].CustNameEN;
                        dtBillingClientDetail.NameLC = listCustomer[0].CustNameLC;
                        dtBillingClientDetail.FullNameEN = listCustomer[0].CustFullNameEN;
                        dtBillingClientDetail.FullNameLC = listCustomer[0].CustFullNameLC;
                        dtBillingClientDetail.AddressEN = listCustomer[0].AddressFullEN;
                        dtBillingClientDetail.AddressLC = listCustomer[0].AddressFullLC;
                        dtBillingClientDetail.RegionCode = listCustomer[0].RegionCode;
                        dtBillingClientDetail.PhoneNo = listCustomer[0].PhoneNo;
                        dtBillingClientDetail.BusinessTypeCode = listCustomer[0].BusinessTypeCode;
                        dtBillingClientDetail.IDNo = listCustomer[0].IDNo;
                        dtBillingClientDetail.CustTypeCode = listCustomer[0].CustTypeCode;

                        doBillingTargetDetail.FullNameEN = dtBillingClientDetail.FullNameEN;
                        doBillingTargetDetail.FullNameLC = dtBillingClientDetail.FullNameLC;
                        doBillingTargetDetail.AddressEN = dtBillingClientDetail.AddressEN;
                        doBillingTargetDetail.AddressLC = dtBillingClientDetail.AddressLC;
                        doBillingTargetDetail.PhoneNo = dtBillingClientDetail.PhoneNo;
                        doBillingTargetDetail.BusinessType = dtBillingClientDetail.BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                        doBillingTargetDetail.IDNo = dtBillingClientDetail.IDNo;
                    }
                }

                if (doCopyNameCondition.RdoType == "1")
                {
                    if (dsRentalContract.dtTbt_RentalContractBasic != null)
                    {
                        listCustomer = masterHandler.GetTbm_Customer(dsRentalContract.dtTbt_RentalContractBasic[0].ContractTargetCustCode);
                        dtBillingClientDetail.NameEN = listCustomer[0].CustNameEN;
                        dtBillingClientDetail.NameLC = listCustomer[0].CustNameLC;
                        dtBillingClientDetail.FullNameEN = listCustomer[0].CustFullNameEN;
                        dtBillingClientDetail.FullNameLC = listCustomer[0].CustFullNameLC;
                        dtBillingClientDetail.BranchNameEN = dsRentalContract.dtTbt_RentalContractBasic[0].BranchNameEN;
                        dtBillingClientDetail.BranchNameLC = dsRentalContract.dtTbt_RentalContractBasic[0].BranchNameLC;
                        dtBillingClientDetail.AddressEN = dsRentalContract.dtTbt_RentalContractBasic[0].BranchAddressEN;
                        dtBillingClientDetail.AddressLC = dsRentalContract.dtTbt_RentalContractBasic[0].BranchAddressLC;
                        dtBillingClientDetail.RegionCode = listCustomer[0].RegionCode;
                        dtBillingClientDetail.BusinessTypeCode = listCustomer[0].BusinessTypeCode;
                        dtBillingClientDetail.IDNo = listCustomer[0].IDNo;
                        dtBillingClientDetail.CustTypeCode = listCustomer[0].CustTypeCode;

                        doBillingTargetDetail.FullNameEN = dtBillingClientDetail.FullNameEN;
                        doBillingTargetDetail.FullNameLC = dtBillingClientDetail.FullNameLC;
                        doBillingTargetDetail.BranchNameEN = dtBillingClientDetail.BranchNameEN;
                        doBillingTargetDetail.BranchNameLC = dtBillingClientDetail.BranchNameLC;
                        doBillingTargetDetail.AddressEN = dtBillingClientDetail.AddressEN;
                        doBillingTargetDetail.AddressLC = dtBillingClientDetail.AddressLC;
                        doBillingTargetDetail.BusinessType = dtBillingClientDetail.BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                        doBillingTargetDetail.IDNo = dtBillingClientDetail.IDNo;
                    }
                }

                if (doCopyNameCondition.RdoType == "2")
                {
                    if (dsRentalContract.dtTbt_RentalContractBasic != null)
                    {
                        listCustomer = masterHandler.GetTbm_Customer(dsRentalContract.dtTbt_RentalContractBasic[0].RealCustomerCustCode);
                        dtBillingClientDetail.NameEN = listCustomer[0].CustNameEN;
                        dtBillingClientDetail.NameLC = listCustomer[0].CustNameLC;
                        dtBillingClientDetail.FullNameEN = listCustomer[0].CustFullNameEN;
                        dtBillingClientDetail.FullNameLC = listCustomer[0].CustFullNameLC;
                        dtBillingClientDetail.AddressEN = dsRentalContract.dtTbt_RentalContractBasic[0].BranchAddressEN;
                        dtBillingClientDetail.AddressLC = dsRentalContract.dtTbt_RentalContractBasic[0].BranchAddressLC;
                        dtBillingClientDetail.RegionCode = listCustomer[0].RegionCode;
                        dtBillingClientDetail.PhoneNo = listCustomer[0].PhoneNo;
                        dtBillingClientDetail.BusinessTypeCode = listCustomer[0].BusinessTypeCode;
                        dtBillingClientDetail.IDNo = listCustomer[0].IDNo;
                        dtBillingClientDetail.CustTypeCode = listCustomer[0].CustTypeCode;

                        doBillingTargetDetail.FullNameEN = dtBillingClientDetail.FullNameEN;
                        doBillingTargetDetail.FullNameEN = dtBillingClientDetail.FullNameEN;
                        doBillingTargetDetail.AddressEN = dtBillingClientDetail.AddressEN;
                        doBillingTargetDetail.AddressLC = dtBillingClientDetail.AddressLC;
                        doBillingTargetDetail.PhoneNo = dtBillingClientDetail.PhoneNo;
                        doBillingTargetDetail.BusinessType = dtBillingClientDetail.BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                        doBillingTargetDetail.IDNo = dtBillingClientDetail.IDNo;
                    }
                }

                if (doCopyNameCondition.RdoType == "3")
                {
                    if (dsRentalContract.dtTbt_RentalContractBasic != null)
                    {
                        listCustomer = masterHandler.GetTbm_Customer(dsRentalContract.dtTbt_RentalContractBasic[0].RealCustomerCustCode);
                        listSite = masterHandler.GetTbm_Site(dsRentalContract.dtTbt_RentalContractBasic[0].SiteCode);
                        dtBillingClientDetail.NameEN = listCustomer[0].CustNameEN;
                        dtBillingClientDetail.NameLC = listCustomer[0].CustNameLC;
                        dtBillingClientDetail.FullNameEN = listCustomer[0].CustFullNameEN;
                        dtBillingClientDetail.FullNameLC = listCustomer[0].CustFullNameLC;
                        dtBillingClientDetail.BranchNameEN = listSite[0].SiteNameEN;
                        dtBillingClientDetail.BranchNameLC = listSite[0].SiteNameLC;
                        dtBillingClientDetail.AddressEN = listSite[0].AddressFullEN;
                        dtBillingClientDetail.AddressLC = listSite[0].AddressFullLC;
                        dtBillingClientDetail.RegionCode = listCustomer[0].RegionCode;
                        dtBillingClientDetail.PhoneNo = listCustomer[0].PhoneNo;
                        dtBillingClientDetail.BusinessTypeCode = listCustomer[0].BusinessTypeCode;
                        dtBillingClientDetail.IDNo = listCustomer[0].IDNo;
                        dtBillingClientDetail.CustTypeCode = listCustomer[0].CustTypeCode;

                        doBillingTargetDetail.FullNameEN = dtBillingClientDetail.FullNameEN;
                        doBillingTargetDetail.FullNameLC = dtBillingClientDetail.FullNameLC;
                        doBillingTargetDetail.AddressEN = dtBillingClientDetail.AddressEN;
                        doBillingTargetDetail.AddressLC = dtBillingClientDetail.AddressLC;
                        doBillingTargetDetail.PhoneNo = dtBillingClientDetail.PhoneNo;
                        doBillingTargetDetail.BusinessType = dtBillingClientDetail.BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                        doBillingTargetDetail.IDNo = dtBillingClientDetail.IDNo;
                    }
                }

                if (doCopyNameCondition.Mode != "Update")
                {
                    session.DOBillingTargetDetail = doBillingTargetDetail;
                    session.DTBillingClientDetail = dtBillingClientDetail;
                }

                return LoadMasterData_CTS051(doBillingTargetDetail);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult AddUpdateAfterStartClick_CTS051(CTS051_DOValidateAddUpdateRequireFieldAfterStartData doValidateAddUpdateRequireFieldAfterStart)
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_DOBillingTargetDetailData doBillingTargetDetail;

            List<CTS051_DOBillingTargetDetailData> listDoBillingTargetDetail;
            List<dtBillingTempChangePlanData> listBillingTemp;
            List<dtBillingTempChangePlanData> listBillingTempEdit;
            List<dtBillingTempChangePlanData> listBillingTempNew;
            List<CTS051_DTBillingClientDetailData> listBillingClientData;

            dtBillingTempChangePlanData dtBillingTempListForView;
            dsRentalContractData dsRentalContract;
            int sequenceNo = 0;
            string sequence = "0";

            CTS051_ScreenParameter session;
            CommonUtil comU;

            try
            {
                session = CTS051_GetImportData();
                comU = new CommonUtil();
                listBillingTemp = session.ListDTBillingTempChangePlan;
                string uIDItem = Guid.NewGuid().ToString();

                if (session.DOBillingTargetDetailCopy != null)
                {
                    doBillingTargetDetail = session.DOBillingTargetDetailCopy;
                    session.DTBillingClientDetail = session.DTBillingClientDetailCopy;
                    session.DOBillingTargetDetailCopy = null;
                    session.DTBillingClientDetailCopy = null;
                }
                else
                    doBillingTargetDetail = session.DOBillingTargetDetail;

                dsRentalContract = session.DSRentalContract;
                if (session.ListDOBillingTargetDetail == null)
                {
                    listDoBillingTargetDetail = new List<CTS051_DOBillingTargetDetailData>();
                    session.ListDOBillingTargetDetail = listDoBillingTargetDetail;
                }
                else
                {
                    listDoBillingTargetDetail = session.ListDOBillingTargetDetail;
                }

                if (session.ListDTBillingClientDetail == null)
                    listBillingClientData = new List<CTS051_DTBillingClientDetailData>();
                else
                    listBillingClientData = session.ListDTBillingClientDetail;

                if (doBillingTargetDetail.BillingClientCodeDetail != "")
                    listBillingTemp = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingClientCode == doBillingTargetDetail.BillingClientCodeDetail; });
                else
                    listBillingTemp = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.Sequence == doBillingTargetDetail.Sequence; });

                if (doValidateAddUpdateRequireFieldAfterStart.Mode.Trim() != "Update")
                {
                    if (listBillingTemp.Count() != 0)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3032, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3032);
                        return Json(res);
                    }
                }

                if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingInstallationCompleteFee) > 0 && doValidateAddUpdateRequireFieldAfterStart.PayMethodCompleteFee == "0")
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3037, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3037);
                    return Json(res);
                }

                if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingContractFeeDetail) == 0 && decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingDepositFee) == 0 && decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingInstallationCompleteFee) == 0)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3087, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3087);
                    return Json(res);
                }

                if (doValidateAddUpdateRequireFieldAfterStart.Mode == "Update")
                {
                    listBillingTempEdit = new List<dtBillingTempChangePlanData>();

                    #region สร้าง billing temp ตาม billing type เเละ billing timing

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s)
                    {
                        return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE ||
                               s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE ||
                               s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON ||
                               s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE;
                    }).Count() == 0)
                    {

                        if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingContractFeeDetail) != 0)
                        {
                            sequenceNo += 1;

                            dtBillingTempListForView = new dtBillingTempChangePlanData();
                            dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                            dtBillingTempListForView.SequenceNo = sequenceNo;
                            dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                            dtBillingTempListForView.BillingClientCode = comU.ConvertBillingClientCode(doBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_SHORT);
                            dtBillingTempListForView.BillingTargetCode = comU.ConvertBillingTargetCode(doBillingTargetDetail.BillingTargetCodeDetail, CommonUtil.CONVERT_TYPE.TO_SHORT);
                            dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldAfterStart.BillingOfficeCode;
                            dtBillingTempListForView.SendFlag = (FlagType.C_FLAG_OFF) ? "1" : "0";

                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START ||
                                dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                                dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE;

                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_STOPPING)
                                dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE;

                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.MAFeeType.C_MA_FEE_TYPE_RESULT_BASED)
                                dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE;

                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_MA)
                                dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON;

                            dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingContractFeeDetail);
                            dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                            dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                            dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                            dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                            dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                            dtBillingTempListForView.Status = "ADD";
                            //dtBillingTempListForView.uIDNew = uIDItem;
                            session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                        }
                    }

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE; }).Count() == 0)
                    {
                        if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingDepositFee) != 0)
                        {
                            sequenceNo += 1;

                            dtBillingTempListForView = new dtBillingTempChangePlanData();
                            dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                            dtBillingTempListForView.SequenceNo = sequenceNo;
                            dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                            dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                            dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                            dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldAfterStart.BillingOfficeCode;
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE;
                            dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingDepositFee);
                            dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldAfterStart.PayMethodDepositFee;
                            dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                            dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                            dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                            dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                            dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                            dtBillingTempListForView.Status = "ADD";
                            //dtBillingTempListForView.uIDNew = uIDItem;
                            session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                        }
                    }

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE && s.BillingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION; }).Count() == 0)
                    {
                        if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingInstallationCompleteFee) != 0)
                        {
                            sequenceNo += 1;

                            dtBillingTempListForView = new dtBillingTempChangePlanData();
                            dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                            dtBillingTempListForView.SequenceNo = sequenceNo;
                            dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                            dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                            dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                            dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldAfterStart.BillingOfficeCode;
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                            dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;
                            dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingInstallationCompleteFee);
                            dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldAfterStart.PayMethodCompleteFee;
                            dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                            dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                            dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                            dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                            dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                            dtBillingTempListForView.Status = "ADD";
                            //dtBillingTempListForView.uIDNew = uIDItem;
                            session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                        }
                    }

                    #endregion

                    foreach (dtBillingTempChangePlanData item in listBillingTemp)
                    {
                        if ((item.BillingTargetCode == comU.ConvertBillingTargetCode(doValidateAddUpdateRequireFieldAfterStart.BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_LONG))
                            && (item.BillingClientCode == comU.ConvertBillingClientCode(doValidateAddUpdateRequireFieldAfterStart.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_LONG))
                            && (item.BillingOCC == doValidateAddUpdateRequireFieldAfterStart.BillingOCC))
                        {
                            dtBillingTempListForView = item;
                        dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                        dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                        dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldAfterStart.BillingOfficeCode;
                        GetBillingTempAmtFollowCondition_CTS051(ref dtBillingTempListForView, item.BillingType, item.BillingTiming, doValidateAddUpdateRequireFieldAfterStart);
                        }
                    }

                    // Update temp client tartget -------

                    foreach (var item in session.ListDOBillingTargetDetail)
                    {
                        if (item.Sequence == doBillingTargetDetail.Sequence)
                        {
                            session.ListDOBillingTargetDetail.Remove(item);
                            session.ListDOBillingTargetDetail.Add(session.DOBillingTargetDetail);
                            break;
                        }
                    }

                    foreach (var item in session.ListDTBillingClientDetail)
                    {
                        if (item.Sequence == doBillingTargetDetail.Sequence)
                        {
                            session.ListDTBillingClientDetail.Remove(item);
                            session.ListDTBillingClientDetail.Add(session.DTBillingClientDetail);
                            break;
                        }
                    }

                    // ----------------------------------

                    session.ListDTBillingClientDetail = listBillingClientData;
                    session.ListDOBillingTargetDetail = listDoBillingTargetDetail;
                }
                else
                {
                    listBillingTempNew = session.ListDTBillingTempChangePlan;
                    if (listBillingTempNew.Count() == 0)
                        sequence = "0";
                    else
                    {
                        if (listBillingTempNew.Max(t => t.Sequence)[0].ToString() == "0")
                            sequence = "0";
                        else
                            sequence = (int.Parse(listBillingTempNew.Max(t => t.Sequence)[0].ToString()) + 1).ToString();
                    }

                    #region สร้าง billing temp ตาม billing type เเละ billing timing
                    if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingContractFeeDetail) != 0)
                    {
                        sequenceNo += 1;
                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                        dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                        dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldAfterStart.BillingOfficeCode;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START ||
                            dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_STOPPING)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.MAFeeType.C_MA_FEE_TYPE_RESULT_BASED)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_MA)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON;

                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingContractFeeDetail);
                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = sequence;
                        dtBillingTempListForView.Status = "ADD";
                        dtBillingTempListForView.uIDNew = uIDItem;
                        listBillingTempNew.Add(dtBillingTempListForView);
                    }

                    if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingInstallationCompleteFee) != 0)
                    {
                        sequenceNo += 1;
                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                        dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                        dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldAfterStart.BillingOfficeCode;
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                        dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;
                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingInstallationCompleteFee);
                        dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldAfterStart.PayMethodCompleteFee;
                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = sequence;
                        dtBillingTempListForView.Status = "ADD";
                        dtBillingTempListForView.uIDNew = uIDItem;
                        listBillingTempNew.Add(dtBillingTempListForView);
                    }

                    if (decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingDepositFee) != 0)
                    {
                        sequenceNo += 1;
                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                        dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                        dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldAfterStart.BillingOfficeCode;
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE;
                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldAfterStart.BillingDepositFee);
                        dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldAfterStart.PayMethodDepositFee;
                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = sequence;
                        dtBillingTempListForView.Status = "ADD";
                        dtBillingTempListForView.uIDNew = uIDItem;
                        listBillingTempNew.Add(dtBillingTempListForView);
                    }
                    #endregion

                    //ทำการเพิ่มข้อมูลเข้าไปใน List session เเต่ละตัว                  
                    session.DOBillingTargetDetail.Sequence = sequence;
                    session.ListDOBillingTargetDetail.Add(session.DOBillingTargetDetail);

                    session.DTBillingClientDetail.Sequence = sequence;
                    session.ListDTBillingClientDetail.Add(session.DTBillingClientDetail);
                    session.ListDTBillingTempChangePlan = listBillingTempNew;

                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult AddUpdateBeforeStartClick_CTS051(CTS051_DOValidateAddUpdateRequireFieldBeforeStartData doValidateAddUpdateRequireFieldBeforeStart)
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_DOBillingTargetDetailData doBillingTargetDetail;

            List<CTS051_DOBillingTargetDetailData> listDoBillingTargetDetail;
            List<dtBillingTempChangePlanData> listBillingTemp;
            List<dtBillingTempChangePlanData> listBillingTempEdit;
            List<dtBillingTempChangePlanData> listBillingTempNew;
            List<CTS051_DTBillingClientDetailData> listBillingClientData;

            dtBillingTempChangePlanData dtBillingTempListForView;
            dsRentalContractData dsRentalContract;
            int sequenceNo = 0;
            string sequence = "0";

            CTS051_ScreenParameter session;
            CommonUtil comU;

            try
            {
                session = CTS051_GetImportData();
                comU = new CommonUtil();
                listBillingTemp = session.ListDTBillingTempChangePlan;
                string newUID = Guid.NewGuid().ToString();

                if (session.DOBillingTargetDetailCopy != null)
                {
                    doBillingTargetDetail = session.DOBillingTargetDetailCopy;
                    session.DTBillingClientDetail = session.DTBillingClientDetailCopy;
                    session.DOBillingTargetDetailCopy = null;
                    session.DTBillingClientDetailCopy = null;
                }
                else
                    doBillingTargetDetail = session.DOBillingTargetDetail;

                dsRentalContract = session.DSRentalContract;
                if (session.ListDOBillingTargetDetail == null)
                {
                    listDoBillingTargetDetail = new List<CTS051_DOBillingTargetDetailData>();
                    session.ListDOBillingTargetDetail = listDoBillingTargetDetail;
                }
                else
                    listDoBillingTargetDetail = session.ListDOBillingTargetDetail;

                if (session.ListDTBillingClientDetail == null)
                    listBillingClientData = new List<CTS051_DTBillingClientDetailData>();
                else
                    listBillingClientData = session.ListDTBillingClientDetail;

                //12.2.1 Billing client code and billing office must not duplicate with data on ‘Billing target list’                
                if (doValidateAddUpdateRequireFieldBeforeStart.Mode.Trim() != "Update")
                {
                    if (doBillingTargetDetail.BillingClientCodeDetail != null)
                        listBillingTemp = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingClientCode == doBillingTargetDetail.BillingClientCodeDetail; });
                    else
                        listBillingTemp = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.Sequence == doBillingTargetDetail.Sequence; });

                    if (listBillingTemp.Count() != 0)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3032, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3032);
                        return Json(res);
                    }
                }

                //12.2.3 If txtBillingInstallationFeeAtCompleteInstallation > 0 and txtBillingInstallationFeeAtCompleteInstallationPaymentMethod is empty
                if ((decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationCompleteFee) > 0) && (doValidateAddUpdateRequireFieldBeforeStart.PayMethodCompleteFee == ""))
                {
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3029, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3029);
                    return Json(res);
                }

                if ((decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationStartServiceFee) > 0) && (doValidateAddUpdateRequireFieldBeforeStart.PayMethodStartServiceFee == null || doValidateAddUpdateRequireFieldBeforeStart.PayMethodStartServiceFee == ""))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3030, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3030);
                    return Json(res);
                }

                if ((decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingDepositFee) > 0) && (doValidateAddUpdateRequireFieldBeforeStart.PayMethodDepositFee == null || doValidateAddUpdateRequireFieldBeforeStart.PayMethodStartServiceFee == ""))
                {
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3031, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3031);
                    return Json(res);
                }

                if (decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingContractFeeDetail) == 0 && decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingDepositFee) == 0 && decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationCompleteFee) == 0)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3087, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3087);
                    return Json(res);
                }

                if (doValidateAddUpdateRequireFieldBeforeStart.Mode == "Update")
                {
                    listBillingTempEdit = new List<dtBillingTempChangePlanData>();

                    #region สร้าง billing temp ตาม billing type เเละ billing timing

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s)
                    {
                        return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE ||
                               s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE ||
                               s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON ||
                               s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE
                               ;
                    }).Count() == 0)
                    {

                        sequenceNo += 1;

                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = comU.ConvertBillingClientCode(doBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingTargetCode = comU.ConvertBillingTargetCode(doBillingTargetDetail.BillingTargetCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingOfficeCode = doBillingTargetDetail.BillingOfficeCode;
                        //dtBillingTempListForView.uIDNew = newUID;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START ||
                            dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_STOPPING)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.MAFeeType.C_MA_FEE_TYPE_RESULT_BASED)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE;

                        if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_MA)
                            dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON;

                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingContractFeeDetail);
                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                        dtBillingTempListForView.Status = "ADD";
                        session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                    }

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE; }).Count() == 0)
                    {
                        sequenceNo += 1;

                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = comU.ConvertBillingClientCode(doBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingTargetCode = comU.ConvertBillingTargetCode(doBillingTargetDetail.BillingTargetCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingOfficeCode = doBillingTargetDetail.BillingOfficeCode;
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE;
                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingDepositFee);
                        dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldBeforeStart.PayMethodDepositFee;
                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                        //dtBillingTempListForView.uIDNew = newUID;
                        dtBillingTempListForView.Status = "ADD";
                        session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                    }

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE && s.BillingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_APPROVE_CONTRACT; }).Count() == 0)
                    {
                        sequenceNo += 1;

                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = comU.ConvertBillingClientCode(doBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingTargetCode = comU.ConvertBillingTargetCode(doBillingTargetDetail.BillingTargetCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingOfficeCode = doBillingTargetDetail.BillingOfficeCode;
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                        dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_APPROVE_CONTRACT;

                        if (doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationApproveFee != null)
                            dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationApproveFee);

                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                        //dtBillingTempListForView.uIDNew = newUID;
                        dtBillingTempListForView.Status = "ADD";
                        session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                    }

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE && s.BillingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION; }).Count() == 0)
                    {
                        sequenceNo += 1;

                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = comU.ConvertBillingClientCode(doBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingTargetCode = comU.ConvertBillingTargetCode(doBillingTargetDetail.BillingTargetCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingOfficeCode = doBillingTargetDetail.BillingOfficeCode;
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                        dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;
                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationCompleteFee);
                        dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldBeforeStart.PayMethodCompleteFee;
                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                        //dtBillingTempListForView.uIDNew = newUID;
                        dtBillingTempListForView.Status = "ADD";
                        session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                    }

                    if (listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE && s.BillingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE; }).Count() == 0)
                    {
                        sequenceNo += 1;

                        dtBillingTempListForView = new dtBillingTempChangePlanData();
                        dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                        dtBillingTempListForView.SequenceNo = sequenceNo;
                        dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                        dtBillingTempListForView.BillingClientCode = comU.ConvertBillingClientCode(doBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingTargetCode = comU.ConvertBillingTargetCode(doBillingTargetDetail.BillingTargetCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                        dtBillingTempListForView.BillingOfficeCode = doBillingTargetDetail.BillingOfficeCode;
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                        dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE;
                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationStartServiceFee);
                        dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldBeforeStart.PayMethodStartServiceFee;
                        dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                        dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                        dtBillingTempListForView.Sequence = doBillingTargetDetail.Sequence;
                        //dtBillingTempListForView.uIDNew = newUID;
                        dtBillingTempListForView.Status = "ADD";
                        session.ListDTBillingTempChangePlan.Add(dtBillingTempListForView);
                    }

                    #endregion

                    foreach (dtBillingTempChangePlanData item in listBillingTemp)
                    {
                        if ((item.BillingTargetCode == comU.ConvertBillingTargetCode(doValidateAddUpdateRequireFieldBeforeStart.BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_LONG))
                            && (item.BillingClientCode == comU.ConvertBillingClientCode(doValidateAddUpdateRequireFieldBeforeStart.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_LONG))
                            && (item.BillingOCC == doValidateAddUpdateRequireFieldBeforeStart.BillingOCC))
                        {
                            dtBillingTempListForView = item;
                            dtBillingTempListForView.BillingTargetCode = comU.ConvertBillingTargetCode(session.DOBillingTargetDetail.BillingTargetCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                            dtBillingTempListForView.BillingClientCode = comU.ConvertBillingClientCode(session.DOBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);
                            dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldBeforeStart.BillingOfficeCode;
                            item.BillingOfficeCode = doValidateAddUpdateRequireFieldBeforeStart.BillingOfficeCode;

                            GetBillingTempAmtFollowCondition_CTS051(ref dtBillingTempListForView, item.BillingType, item.BillingTiming, doValidateAddUpdateRequireFieldBeforeStart);
                        }
                    }

                    // Update temp client tartget -------

                    foreach (var item in session.ListDOBillingTargetDetail)
                    {
                        if (item.Sequence == doBillingTargetDetail.Sequence)
                        {
                            session.ListDOBillingTargetDetail.Remove(item);
                            session.ListDOBillingTargetDetail.Add(session.DOBillingTargetDetail);
                            break;
                        }
                    }

                    foreach (var item in session.ListDTBillingClientDetail)
                    {
                        if (item.Sequence == doBillingTargetDetail.Sequence)
                        {
                            session.ListDTBillingClientDetail.Remove(item);
                            session.ListDTBillingClientDetail.Add(session.DTBillingClientDetail);
                            break;
                        }
                    }

                    // ----------------------------------

                    session.ListDTBillingClientDetail = listBillingClientData;
                    session.ListDOBillingTargetDetail = listDoBillingTargetDetail;
                }
                else
                {
                    listBillingTempNew = session.ListDTBillingTempChangePlan;

                    if (listBillingTempNew.Count() == 0)
                        sequence = "1";
                    else
                    {
                        //if (listBillingTempNew.Max(t => t.Sequence)[0].ToString() == "0")
                        //    sequence = "0";
                        //else
                        sequence = (int.Parse(listBillingTempNew.Max(t => t.Sequence)[0].ToString()) + 1).ToString();
                    }

                    #region สร้าง billing temp ตาม billing type เเละ billing timing

                    sequenceNo += 1;
                    dtBillingTempListForView = new dtBillingTempChangePlanData();
                    dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                    dtBillingTempListForView.SequenceNo = sequenceNo;
                    dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                    dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                    dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                    dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldBeforeStart.BillingOfficeCode;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START ||
                        dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_STOPPING)
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.MAFeeType.C_MA_FEE_TYPE_RESULT_BASED)
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_MA)
                        dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON;

                    dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingContractFeeDetail);
                    dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.Sequence = sequence;
                    dtBillingTempListForView.uIDNew = newUID;
                    dtBillingTempListForView.Status = "ADD";
                    listBillingTempNew.Add(dtBillingTempListForView);

                    sequenceNo += 1;
                    dtBillingTempListForView = new dtBillingTempChangePlanData();
                    dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                    dtBillingTempListForView.SequenceNo = sequenceNo;
                    dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                    dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail; ;
                    dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                    dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldBeforeStart.BillingOfficeCode;
                    dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                    dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_APPROVE_CONTRACT;

                    if (doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationApproveFee != null)
                        dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationApproveFee);

                    dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.Sequence = sequence;
                    dtBillingTempListForView.Status = "ADD";
                    dtBillingTempListForView.uIDNew = newUID;
                    listBillingTempNew.Add(dtBillingTempListForView);

                    sequenceNo += 1;
                    dtBillingTempListForView = new dtBillingTempChangePlanData();
                    dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                    dtBillingTempListForView.SequenceNo = sequenceNo;
                    dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                    dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail; ;
                    dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                    dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldBeforeStart.BillingOfficeCode;
                    dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                    dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;
                    dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationCompleteFee);
                    dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldBeforeStart.PayMethodCompleteFee;
                    dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.Sequence = sequence;
                    dtBillingTempListForView.Status = "ADD";
                    dtBillingTempListForView.uIDNew = newUID;
                    listBillingTempNew.Add(dtBillingTempListForView);

                    sequenceNo += 1;
                    dtBillingTempListForView = new dtBillingTempChangePlanData();
                    dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                    dtBillingTempListForView.SequenceNo = sequenceNo;
                    dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                    dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail;
                    dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                    dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldBeforeStart.BillingOfficeCode;
                    dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE;
                    dtBillingTempListForView.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE;
                    dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingInstallationStartServiceFee);
                    dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldBeforeStart.PayMethodStartServiceFee;
                    dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.Sequence = sequence;
                    dtBillingTempListForView.Status = "ADD";
                    dtBillingTempListForView.uIDNew = newUID;
                    listBillingTempNew.Add(dtBillingTempListForView);

                    sequenceNo += 1;
                    dtBillingTempListForView = new dtBillingTempChangePlanData();
                    dtBillingTempListForView.ContractCode = dsRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                    dtBillingTempListForView.SequenceNo = sequenceNo;
                    dtBillingTempListForView.BillingOCC = doBillingTargetDetail.BillingOCC;
                    dtBillingTempListForView.BillingClientCode = doBillingTargetDetail.BillingClientCodeDetail; ;
                    dtBillingTempListForView.BillingTargetCode = doBillingTargetDetail.BillingTargetCodeDetail;
                    dtBillingTempListForView.BillingOfficeCode = doValidateAddUpdateRequireFieldBeforeStart.BillingOfficeCode;
                    dtBillingTempListForView.BillingType = SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE;
                    dtBillingTempListForView.BillingAmt = decimal.Parse(doValidateAddUpdateRequireFieldBeforeStart.BillingDepositFee);
                    dtBillingTempListForView.PayMethod = doValidateAddUpdateRequireFieldBeforeStart.PayMethodDepositFee;
                    dtBillingTempListForView.CreateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.CreateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.UpdateBy = CommonUtil.dsTransData.dtUserData.EmpNo;
                    dtBillingTempListForView.UpdateDate = CommonUtil.dsTransData.dtOperationData.ProcessDateTime;
                    dtBillingTempListForView.Sequence = sequence;
                    dtBillingTempListForView.Status = "ADD";
                    dtBillingTempListForView.uIDNew = newUID;
                    listBillingTempNew.Add(dtBillingTempListForView);

                    #endregion

                    //ทำการเพิ่มข้อมูลเข้าไปใน List session เเต่ละตัว                  
                    session.DOBillingTargetDetail.Sequence = sequence;
                    session.ListDOBillingTargetDetail.Add(session.DOBillingTargetDetail);

                    session.DTBillingClientDetail.Sequence = sequence;
                    session.ListDTBillingClientDetail.Add(session.DTBillingClientDetail);
                    session.ListDTBillingTempChangePlan = listBillingTempNew;
                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult NewClick_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_ScreenParameter session;

            try
            {
                //ทำการ Clear ค่าในส่วนของ BillingClient เเละ Detail ที่อาจจะมีการเก็บไว้จาก Flow อื่น
                session = CTS051_GetImportData();
                session.DOBillingTargetDetail = null;
                session.DTBillingClientDetail = null;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult ClearBillingDetailClick_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_ScreenParameter session;

            try
            {
                //ทำการ Clear ค่าในส่วนของ BillingClient เเละ Detail ที่อาจจะมีการเก็บไว้จาก Flow อื่น
                session = CTS051_GetImportData();
                session.DOBillingTargetDetail = null;
                session.DTBillingClientDetail = null;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult RegisterClick_CTS051(CTS051_DOValidateRegisterRequireFieldData doCTS051ValidateRegisterRequireField)
        {
            ObjectResultData res = new ObjectResultData();
            ObjectResultData resBusiness = new ObjectResultData();
            ICommonHandler commonHandler;
            IRentralContractHandler rentralHandler;
            dsRentalContractData dsRentalContract;

            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                commonHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;
                rentralHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;

                //14.1
                if (commonHandler.IsSystemSuspending())
                {
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0049, "");
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0049);
                    return Json(res);
                }

                //14.2
                dsRentalContract = session.DSRentalContract;
                rentralHandler.MapFromQuotation(session.DSQuotationData, ref dsRentalContract);

                //14.5
                resBusiness = ValidateBusiness_CTS051(doCTS051ValidateRegisterRequireField);
                if (resBusiness != null)
                    return Json(resBusiness);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult ConfirmClick_CTS051(CTS051_DOValidateRegisterRequireFieldData doCTS051ValidateRegisterRequireField)
        {
            ObjectResultData res = new ObjectResultData();
            ObjectResultData resBusiness = new ObjectResultData();
            IRentralContractHandler rentralHandler;
            List<dtBillingClientData> listBillingClient;
            ICommonHandler commomHandler;
            CTS051_ScreenParameter session;
            CommonUtil comU;

            try
            {
                session = CTS051_GetImportData();
                comU = new CommonUtil();
                listBillingClient = new List<dtBillingClientData>();
                rentralHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;
                commomHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;

                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ExpectedOperationDate = doCTS051ValidateRegisterRequireField.ExpectedOperationDate;

                //16.3 Prepare data according to contract status
                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractStartDate = doCTS051ValidateRegisterRequireField.ExpectedOperationDate;
                    session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ExpectedOperationDate = doCTS051ValidateRegisterRequireField.ExpectedOperationDate;
                }

                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                {
                    session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ExpectedInstallationCompleteDate = doCTS051ValidateRegisterRequireField.ExpectedOperationDate;
                }

                //16.4 Recalculate if chkContractDurationFlag is checked
                if (doCTS051ValidateRegisterRequireField.ContractDurationFlag)
                {
                    if ((doCTS051ValidateRegisterRequireField.ContractDurationMonth != "" && doCTS051ValidateRegisterRequireField.ContractDurationMonth != null) &&
                        (doCTS051ValidateRegisterRequireField.AutoRenewMonth != "" && doCTS051ValidateRegisterRequireField.AutoRenewMonth != null))
                    {
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractDurationMonth = int.Parse(doCTS051ValidateRegisterRequireField.ContractDurationMonth);
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].AutoRenewMonth = int.Parse(doCTS051ValidateRegisterRequireField.AutoRenewMonth);
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractEndDate = null;
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].CalContractEndDate = session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractStartDate.Value.AddMonths((int.Parse(doCTS051ValidateRegisterRequireField.ContractDurationMonth) - 1));
                        //session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractDurationChangeFlag = FlagType.C_FLAG_ON;
                    }

                    if ((doCTS051ValidateRegisterRequireField.AutoRenewMonth != "" && doCTS051ValidateRegisterRequireField.AutoRenewMonth != null) &&
                        (doCTS051ValidateRegisterRequireField.EndContractDate != null))
                    {
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractDurationMonth = null;
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].AutoRenewMonth = int.Parse(doCTS051ValidateRegisterRequireField.AutoRenewMonth);
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractEndDate = doCTS051ValidateRegisterRequireField.EndContractDate;
                        session.DSRentalContract.dtTbt_RentalSecurityBasic[0].CalContractEndDate = doCTS051ValidateRegisterRequireField.EndContractDate;
                    }
                }

                foreach (var item in session.ListDTBillingClientDetail)
                {
                    if (item.BillingClientCode == "" || item.BillingClientCode == null)
                        item.BillingClientCode = item.Sequence;
                    listBillingClient.Add(item);
                }

                bool hasInstallation = false;
                foreach (var item in session.ListDTBillingTempChangePlan)
                {
                    item.ContractCode = session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractCode;
                    item.OCC = session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OCC;
                }

                //16.5 Perform save operation
                hasInstallation = rentralHandler.RegisterChangePlan(session.DSRentalContract, session.DSQuotationData, session.ListDTBillingTempChangePlan,
                listBillingClient, true, true);

                //16.6 If there is no error Then
                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3049, "");
                }

                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_AFTER_START &&
                    hasInstallation == true)
                {
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3050, "");
                }

                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_AFTER_START &&
                   hasInstallation == false)
                {
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3051, "");
                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        #endregion

        #region Method

        [Initialize("CTS051")]
        public ActionResult CTS051()
        {
            try
            {
                CTS051_ScreenParameter session = GetScreenObject<CTS051_ScreenParameter>();
                ViewBag.ContractCode = session.ContractCode;
                ViewBag.ImportantFlag = false;
                InitialScreen_CTS051(ViewBag.ContractCode);
                return View("CTS051");
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void HasAuthority_CTS051(string contractCode)
        {
            ObjectResultData res = new ObjectResultData();
            ICommonHandler commonHandler;
            IRentralContractHandler renderHandler;
            List<tbt_RentalContractBasic> listRentalContractBasic;

            try
            {
                commonHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;
                renderHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;
                listRentalContractBasic = renderHandler.GetTbt_RentalContractBasic(contractCode, null);

                if (commonHandler.IsSystemSuspending())
                    ViewBag.IsSystemSuspending = true;
                else
                    ViewBag.IsSystemSuspending = false;

                if (!CheckUserPermission(ScreenID.C_SCREEN_ID_CP12_CHANGE_FEE, FunctionID.C_FUNC_ID_OPERATE))
                    ViewBag.Permission = false;
                else
                    ViewBag.Permission = true;

                if (CommonUtil.dsTransData.dtOfficeData.FindAll(delegate(OfficeDataDo s) { return s.OfficeCode == listRentalContractBasic[0].ContractOfficeCode; }).Count == 0)
                    ViewBag.HasAuthorityContract = false;
                else
                    ViewBag.HasAuthorityContract = true;

                if (CommonUtil.dsTransData.dtOfficeData.FindAll(delegate(OfficeDataDo s) { return s.OfficeCode == listRentalContractBasic[0].OperationOfficeCode; }).Count == 0)
                    ViewBag.HasAuthorityOperation = false;
                else
                    ViewBag.HasAuthorityOperation = true;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }
        }

        //Initial----------------------------------------------------------

        public ActionResult InitialScreen_CTS051(string contractCode)
        {
            IRentralContractHandler renderHandler;
            IUserControlHandler userHandler;
            ObjectResultData res = new ObjectResultData();
            dsRentalContractData dsRentalContract;
            doRentalContractBasicInformation doRental;
            ICommonHandler commonHandler;
            List<string> listFieldName = new List<string>();
            List<doMiscTypeCode> listMistTypeCode;
            List<doMiscTypeCode> listMistTypeCodeNew;
            CTS051_ScreenParameter session;

            try
            {
                res.ResultData = true;
                session = CTS051_GetImportData();
                userHandler = ServiceContainer.GetService<IUserControlHandler>() as IUserControlHandler;
                renderHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;
                commonHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;
                HasAuthority_CTS051(contractCode);

                //1. Event: Initial screen 
                //1.1 Get contract data
                //1.1.1.1 Get last unimplemented OCC
                string occCode = renderHandler.GetLastUnimplementedOCC(contractCode);

                //1.1.1.2 If strLastOCC  is null, Get last implemented OCC
                if (occCode == null || occCode == "")
                    occCode = renderHandler.GetLastImplementedOCC(contractCode);

                ViewBag.OCCCode = occCode;

                //1.1.2	Get entire contract data
                dsRentalContract = renderHandler.GetEntireContract(contractCode, occCode);
                session.DSRentalContract = dsRentalContract;

                //1.2 Validate entering conditions
                //1.2.1	Check last change type
                if ((dsRentalContract.dtTbt_RentalContractBasic[0].LastChangeType == SECOM_AJIS.Common.Util.ConstantValue.RentalChangeType.C_RENTAL_CHANGE_TYPE_CANCEL) ||
                    (dsRentalContract.dtTbt_RentalContractBasic[0].LastChangeType == SECOM_AJIS.Common.Util.ConstantValue.RentalChangeType.C_RENTAL_CHANGE_TYPE_CANCEL_BEFORE_START))
                {
                    res.ResultData = false;
                    ViewBag.IsValidLastChangeType = false;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3001, "");
                }
                else
                    ViewBag.IsValidLastChangeType = true;

                //1.3 Get data for uctRentalContractBasicInformation
                doRental = userHandler.GetRentalContactBasicInformationData(contractCode.Trim());
                session.DORentalContractBasicInformation = doRental;

                //1.4 Get payment method
                listFieldName.Add(MiscType.C_PAYMENT_METHOD);
                listMistTypeCode = commonHandler.GetMiscTypeCodeListByFieldName(listFieldName);

                listMistTypeCodeNew = new List<doMiscTypeCode>();
                foreach (var item in listMistTypeCode)
                {
                    if (item.ValueCode == MethodType.C_PAYMENT_METHOD_BANK_TRANSFER ||
                        item.ValueCode == MethodType.C_PAYMENT_METHOD_AUTO_TRANSFER ||
                        item.ValueCode == MethodType.C_PAYMENT_METHOD_CREDIT_CARD ||
                        item.ValueCode == MethodType.C_PAYMENT_METHOD_MESSENGER)
                        listMistTypeCodeNew.Add(item);
                }

                session.ListDOMiscTypeCode = listMistTypeCodeNew;

                //1.5 Bind data to screen items
                InitialScreenData_CTS051(contractCode, occCode);

                //1.6 Maintain screen items (do on javascript)
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public void InitialScreenData_CTS051(string contractCode, string occ)
        {
            IUserControlHandler userHandler;
            IRentralContractHandler renderHandler;
            dtTbt_RentalContractBasicForView dtTbt_RentalContractBasicForView;
            dtTbt_RentalSecurityBasicForView dtTbt_RentalSecurityBasicForView;

            try
            {
                userHandler = ServiceContainer.GetService<IUserControlHandler>() as IUserControlHandler;
                renderHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;

                doRentalContractBasicInformation doRental = userHandler.GetRentalContactBasicInformationData(contractCode.Trim());
                dtTbt_RentalContractBasicForView = renderHandler.GetTbt_RentalContractBasicForView(contractCode.Trim())[0];
                dtTbt_RentalSecurityBasicForView = renderHandler.GetTbt_RentalSecurityBasicForView(contractCode.Trim(), occ.Trim())[0];

                Bind_CTS051(doRental);

                if (dtTbt_RentalContractBasicForView != null && dtTbt_RentalSecurityBasicForView != null)
                {
                    if (dtTbt_RentalContractBasicForView.ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                        ViewBag.ExpectOperationDate = CommonUtil.TextDate(dtTbt_RentalSecurityBasicForView.ExpectedOperationDate);

                    if (dtTbt_RentalContractBasicForView.ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                        ViewBag.ExpectOperationDate = CommonUtil.TextDate(dtTbt_RentalSecurityBasicForView.ExpectedInstallationCompleteDate);

                    ViewBag.ContractStatus = dtTbt_RentalContractBasicForView.ContractStatus;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult InitialBillingTiming_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            dsRentalContractData dsRentalContract;
            ICommonHandler commonHandler;
            List<doMiscTypeCode> listBillingTiming;
            List<doMiscTypeCode> listDoMiscTypeCode;
            ComboBoxModel cboModel;
            doMiscTypeCode doMiscType;

            CTS051_ScreenParameter session;
            try
            {
                session = CTS051_GetImportData();
                cboModel = new ComboBoxModel();
                listDoMiscTypeCode = new List<doMiscTypeCode>();
                commonHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;

                dsRentalContract = session.DSRentalContract;

                //2.7 Initial billing timing of deposit fee in ‘Change plan (before/after)’ section
                if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
                    dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    listBillingTiming = commonHandler.GetMiscTypeCodeList(listDoMiscTypeCode);
                    cboModel.SetList<doMiscTypeCode>(listBillingTiming, "ValueDisplay", "ValueCode");

                    return Json(cboModel);
                }

                if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
                    dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    listBillingTiming = commonHandler.GetMiscTypeCodeList(listDoMiscTypeCode);
                    cboModel.SetList<doMiscTypeCode>(listBillingTiming, "ValueDisplay", "ValueCode");

                    return Json(cboModel);
                }

                if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
                    dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                {
                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    listBillingTiming = commonHandler.GetMiscTypeCodeList(listDoMiscTypeCode);
                    cboModel.SetList<doMiscTypeCode>(listBillingTiming, "ValueDisplay", "ValueCode");

                    return Json(cboModel);
                }

                if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_ONLINE &&
                    dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_AFTER_REGISTER;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    listBillingTiming = commonHandler.GetMiscTypeCodeList(listDoMiscTypeCode);
                    cboModel.SetList<doMiscTypeCode>(listBillingTiming, "ValueDisplay", "ValueCode");

                    return Json(cboModel);
                }

                if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_ONLINE &&
                    dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                {
                    doMiscType = new doMiscTypeCode();
                    doMiscType.ValueCode = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_AFTER_REGISTER;
                    doMiscType.FieldName = SECOM_AJIS.Common.Util.ConstantValue.MiscType.C_BILLING_TIMING;
                    listDoMiscTypeCode.Add(doMiscType);

                    listBillingTiming = commonHandler.GetMiscTypeCodeList(listDoMiscTypeCode);
                    cboModel.SetList<doMiscTypeCode>(listBillingTiming, "ValueDisplay", "ValueCode");

                    return Json(cboModel);
                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
                return Json(res);
            }

            //Case default no item
            listBillingTiming = new List<doMiscTypeCode>();
            cboModel.SetList<doMiscTypeCode>(listBillingTiming, "ValueDisplay", "ValueCode");
            return Json(cboModel);
        }

        public ActionResult InitialEnableDisableChangePlan_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            dsRentalContractData dsRentalContract;
            CTS051_DOChangePlanEnableDisable doChangePlanEnableDisable = null;
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                doChangePlanEnableDisable = new CTS051_DOChangePlanEnableDisable();
                dsRentalContract = session.DSRentalContract;
                if (dsRentalContract.dtTbt_RentalContractBasic != null)
                {
                    doChangePlanEnableDisable.ContractStatus = dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus;
                    doChangePlanEnableDisable.ProductTypeCode = dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode;

                    doChangePlanEnableDisable.Alarm = SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL;
                    doChangePlanEnableDisable.SaleOnline = SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_ONLINE;
                    doChangePlanEnableDisable.Maintenance = SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_MA;
                    doChangePlanEnableDisable.SentryGuard = SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_SG;

                    doChangePlanEnableDisable.BeforeStart = SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START;
                    doChangePlanEnableDisable.AfterStart = SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START;
                }

                res.ResultData = doChangePlanEnableDisable;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public void InitialScreenSession_CTS051(CTS051_ScreenParameter importData)
        {
            try
            {
                importData.DOChangePlanAndBillingTargetGrid = new CTS051_DOChangePlanAndBillingTargetGridData();
                importData.ListDOChangePlanAndBillingTargetGrid = new List<CTS051_DOChangePlanAndBillingTargetGridData>();

                importData.DOBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
                importData.ListDOBillingTargetDetail = new List<CTS051_DOBillingTargetDetailData>();

                importData.DOBillingTargetDetailGrid = new CTS051_DOBillingTargetDetailGridData();
                importData.ListDOBillingTargetDetailGrid = new List<CTS051_DOBillingTargetDetailGridData>();

                importData.DTBillingClientDetail = new CTS051_DTBillingClientDetailData();
                importData.ListDTBillingClientDetail = new List<CTS051_DTBillingClientDetailData>();

                CTS051_SetImportData(importData);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void Bind_CTS051(doRentalContractBasicInformation doRental)
        {
            CTS051_ScreenParameter session;
            CommonUtil comU;

            try
            {
                session = CTS051_GetImportData();
                comU = new CommonUtil();

                ViewBag.RentalContractBasicInformation = doRental;
                ViewBag.ContractCodeLong = ViewBag.ContractCode;
                ViewBag.ContractCode = doRental.ContractCodeShort;
                ViewBag.UserCode = doRental.UserCode;
                ViewBag.CustomerCode = doRental.ContractTargetCustCodeShort;
                ViewBag.RealCustomerCode = comU.ConvertCustCode(doRental.RealCustomerCustCode, CommonUtil.CONVERT_TYPE.TO_SHORT);
                ViewBag.SiteCode = doRental.SiteCodeShort;

                if (doRental.ContractTargetCustomerImportant == null)
                    ViewBag.ImportantFlag = false;
                else
                    ViewBag.ImportantFlag = (bool)doRental.ContractTargetCustomerImportant;

                ViewBag.CustFullNameEN = doRental.ContractTargetNameEN;
                ViewBag.CustFullNameLC = doRental.ContractTargetNameLC;
                ViewBag.AddressFullEN = doRental.ContractTargetAddressEN;
                ViewBag.AddressFullLC = doRental.ContractTargetAddressLC;
                ViewBag.SiteName = doRental.SiteNameEN;
                ViewBag.SiteNameLC = doRental.SiteNameLC;
                ViewBag.SiteAddress = doRental.SiteAddressEN;
                ViewBag.SiteAddressLC = doRental.SiteAddressLC;
                ViewBag.InstallationStatus = doRental.InstallationStatusCode + ":" + doRental.InstallationStatusName;
                ViewBag.InstallationStatusCode = doRental.InstallationStatusCode;
                ViewBag.OperationOffice = doRental.OperationOfficeCode + ":" + doRental.OperationOfficeName;
                ViewBag.OfficeName = doRental.OperationOfficeCode + ":" + doRental.OperationOfficeName;
                //ViewBag.QuotationTargetCode = comU.ConvertQuotationTargetCode(session.DSRentalContract.dtTbt_RentalSecurityBasic[0].QuotationTargetCode, CommonUtil.CONVERT_TYPE.TO_SHORT).Trim();
                ViewBag.QuotationTargetCode = doRental.ContractCodeShort;
                ViewBag.EndContractDate = session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractEndDate;

                //3.1 Open QUS010: Search quotation as popup window
                ViewBag.ServiceTypeCode = SECOM_AJIS.Common.Util.ConstantValue.ServiceType.C_SERVICE_TYPE_RENTAL;
                ViewBag.TargetCodeType = SECOM_AJIS.Common.Util.ConstantValue.TargetCodeType.C_TARGET_CODE_TYPE_CONTRACT_CODE;

                //---------------------------------------------------------------------                               
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BindViewBagGridChangePlan_CTS051(dsQuotationData dsQuotation, dsRentalContractData dsRentralContract)
        {
            try
            {
                ViewBag.OrderContractFee = "";
                ViewBag.NormalInstallationFee = "";
                ViewBag.OrderInstallationFee = "";
                ViewBag.OrderAdditionalFee = "";
                ViewBag.OrderAdditionalFee = "";

                if (dsQuotation.dtTbt_QuotationBasic != null)
                {
                    ViewBag.NormalContractFee = dsQuotation.dtTbt_QuotationBasic.ContractFee;
                    ViewBag.NormalInstallationFee = dsQuotation.dtTbt_QuotationBasic.InstallationFee;
                    ViewBag.NormalAdditionalFee = dsQuotation.dtTbt_QuotationBasic.DepositFee;
                }

                if (dsRentralContract.dtTbt_RentalSecurityBasic != null)
                {
                    ViewBag.ApproveInstallationFee = dsRentralContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_ApproveContract;
                    ViewBag.CompleteInstallationFee = dsRentralContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_CompleteInstall;
                    ViewBag.StartInstallationFee = dsRentralContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_StartService;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public ActionResult GetQuotationInformation_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            dsQuotationData dsQuotation;
            dsRentalContractData dsRentalContract;
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                dsQuotation = session.DSQuotationData;
                dsRentalContract = session.DSRentalContract;

                List<CTS051_DOChangePlanAndBillingTargetGridData> lst = new List<CTS051_DOChangePlanAndBillingTargetGridData>();

                //---------------------------------------------------------------------------------

                CTS051_DOChangePlanAndBillingTargetGridData contractList = new CTS051_DOChangePlanAndBillingTargetGridData();
                contractList.ID = "";
                if (dsQuotation.dtTbt_QuotationBasic != null)
                {
                    if (dsQuotation.dtTbt_QuotationBasic.ContractFee != null)
                        contractList.Normal = decimal.Round(dsQuotation.dtTbt_QuotationBasic.ContractFee.Value, 2, MidpointRounding.AwayFromZero);
                    else
                        contractList.Normal = null;
                }
                lst.Add(contractList);

                //---------------------------------------------------------------------------------

                //---------------------------------------------------------------------------------

                CTS051_DOChangePlanAndBillingTargetGridData installationList = new CTS051_DOChangePlanAndBillingTargetGridData();
                installationList.ID = "Installation fee after change";
                if (dsQuotation.dtTbt_QuotationBasic != null)
                {
                    if (dsQuotation.dtTbt_QuotationBasic.InstallationFee != null)
                        installationList.Normal = decimal.Round(dsQuotation.dtTbt_QuotationBasic.InstallationFee.Value, 2, MidpointRounding.AwayFromZero);
                    else
                        installationList.Normal = null;
                }

                if (dsRentalContract.dtTbt_RentalSecurityBasic != null)
                {
                    if (dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_ApproveContract != null)
                        installationList.ApproveContract = decimal.Round(dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_ApproveContract.Value, 2, MidpointRounding.AwayFromZero);
                    else
                        installationList.ApproveContract = null;
                }

                if (dsRentalContract.dtTbt_RentalSecurityBasic != null)
                {
                    if (dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_CompleteInstall != null)
                        //installationList.CompleteInstallation = decimal.Round(dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_CompleteInstall.Value, 2, MidpointRounding.AwayFromZero);
                        installationList.CompleteInstallation = 0;
                    else
                        installationList.CompleteInstallation = null;
                }

                if (dsRentalContract.dtTbt_RentalSecurityBasic != null)
                {
                    if (dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_StartService != null)
                        //installationList.StartService = decimal.Round(dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_StartService.Value, 2, MidpointRounding.AwayFromZero);
                        installationList.StartService = 0;
                    else
                        installationList.StartService = null;
                }
                lst.Add(installationList);

                //---------------------------------------------------------------------------------

                //---------------------------------------------------------------------------------

                CTS051_DOChangePlanAndBillingTargetGridData additionalList = new CTS051_DOChangePlanAndBillingTargetGridData();
                additionalList.ID = "Additional billing deposit fee";
                if (dsQuotation.dtTbt_QuotationBasic != null)
                {
                    if (dsQuotation.dtTbt_QuotationBasic.DepositFee != null)
                        additionalList.Normal = decimal.Round(dsQuotation.dtTbt_QuotationBasic.DepositFee.Value, 2, MidpointRounding.AwayFromZero);
                    else
                        additionalList.Normal = null;
                }
                additionalList.Order = null;
                lst.Add(additionalList);

                //---------------------------------------------------------------------------------

                session.DTBillingClientDetail = null;
                session.DTBillingTempChangePlan = null;
                session.ListDOBillingTargetDetail = null;
                session.ListDOBillingTargetDetailGrid = null;
                //session.ListDTBillingClientDetail = null;
                res.ResultData = lst;
                //res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(lst, "Contract\\CTS051", CommonUtil.GRID_EMPTY_TYPE.SEARCH);

                //return Json(res);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult GetBillingTargetInformationDetailGrid_CTS051(string contractStatus, string sequence)
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_DOBillingTargetDetailData doBillingTargetDetail;

            CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridContractFee;
            CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridInstallationApprovalFee;
            CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridInstallationCompleteFee = null;
            CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridInstallationStartServiceFee;
            CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridTotal;
            CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridDepositFee;

            List<dtBillingTempChangePlanData> listBillingTemp;
            List<CTS051_DOBillingTargetDetailGridData> listBillingTargetDetailGrid;
            dsRentalContractData dsRentalContract;

            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                doBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
                listBillingTemp = session.ListDTBillingTempChangePlan;
                listBillingTemp = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.Sequence == sequence; });
                listBillingTargetDetailGrid = new List<CTS051_DOBillingTargetDetailGridData>();
                dsRentalContract = session.DSRentalContract;

                foreach (var item in listBillingTemp)
                {
                    GetBillingDetailAmtFollowCondition_CTS051(ref doBillingTargetDetail, item.BillingType, item.BillingTiming, item.BillingAmt, item.PayMethod);
                }

                if (contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                {
                    doBillingTargetDetailGridContractFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridContractFee.Amount = doBillingTargetDetail.BillingContractFeeDetail;
                    doBillingTargetDetailGridContractFee.Show = true;

                    doBillingTargetDetailGridInstallationCompleteFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridInstallationCompleteFee.Amount = doBillingTargetDetail.BillingInstallationCompleteFee;
                    doBillingTargetDetailGridInstallationCompleteFee.PayMethod = doBillingTargetDetail.PayMethodCompleteFee;
                    doBillingTargetDetailGridInstallationCompleteFee.Show = true;

                    doBillingTargetDetailGridDepositFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridDepositFee.Amount = doBillingTargetDetail.BillingDepositFee;
                    doBillingTargetDetailGridDepositFee.PayMethod = doBillingTargetDetail.PayMethodDepositFee;
                    doBillingTargetDetailGridDepositFee.Show = true;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
                        contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                        doBillingTargetDetailGridInstallationCompleteFee.Show = true;
                    else
                        doBillingTargetDetailGridInstallationCompleteFee.Show = false;

                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridContractFee);
                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationCompleteFee);
                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridDepositFee);
                }
                else
                {
                    doBillingTargetDetailGridContractFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridContractFee.Amount = doBillingTargetDetail.BillingContractFeeDetail;
                    doBillingTargetDetailGridContractFee.Show = true;

                    doBillingTargetDetailGridInstallationApprovalFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridInstallationApprovalFee.Amount = doBillingTargetDetail.BillingInstallationApprovalFee;
                    doBillingTargetDetailGridInstallationApprovalFee.Show = true;

                    doBillingTargetDetailGridInstallationCompleteFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridInstallationCompleteFee.Amount = doBillingTargetDetail.BillingInstallationCompleteFee;
                    doBillingTargetDetailGridInstallationCompleteFee.PayMethod = doBillingTargetDetail.PayMethodCompleteFee;
                    doBillingTargetDetailGridInstallationCompleteFee.Show = true;

                    doBillingTargetDetailGridInstallationStartServiceFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridInstallationStartServiceFee.Amount = doBillingTargetDetail.BillingInstallationStartServiceFee;
                    doBillingTargetDetailGridInstallationStartServiceFee.PayMethod = doBillingTargetDetail.PayMethodStartServiceFee;
                    doBillingTargetDetailGridInstallationStartServiceFee.Show = true;

                    doBillingTargetDetailGridTotal = new CTS051_DOBillingTargetDetailGridData();
                    if ((doBillingTargetDetail.BillingInstallationCompleteFee != null && doBillingTargetDetail.BillingInstallationCompleteFee != null) &&
                        (doBillingTargetDetail.BillingInstallationStartServiceFee != null && doBillingTargetDetail.BillingInstallationStartServiceFee != null))
                        doBillingTargetDetailGridTotal.Amount = CommonUtil.TextNumeric((decimal.Parse(doBillingTargetDetail.BillingInstallationCompleteFee) + decimal.Parse(doBillingTargetDetail.BillingInstallationStartServiceFee)));
                    doBillingTargetDetailGridTotal.Show = true;

                    doBillingTargetDetailGridDepositFee = new CTS051_DOBillingTargetDetailGridData();
                    doBillingTargetDetailGridDepositFee.Amount = doBillingTargetDetail.BillingDepositFee;
                    doBillingTargetDetailGridDepositFee.PayMethod = doBillingTargetDetail.PayMethodDepositFee;
                    doBillingTargetDetailGridDepositFee.Show = true;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                        doBillingTargetDetailGridInstallationApprovalFee.Show = true;
                    else
                        doBillingTargetDetailGridInstallationApprovalFee.Show = false;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                        doBillingTargetDetailGridInstallationCompleteFee.Show = true;
                    else
                        doBillingTargetDetailGridInstallationCompleteFee.Show = false;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                        doBillingTargetDetailGridInstallationStartServiceFee.Show = true;
                    else
                        doBillingTargetDetailGridInstallationStartServiceFee.Show = false;

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                        doBillingTargetDetailGridTotal.Show = true;
                    else
                        doBillingTargetDetailGridTotal.Show = false;

                    if (
                       (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
                       (contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START || contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START))
                       ||
                       (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_SALE &&
                       (contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START || contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START))
                       )
                    {
                        doBillingTargetDetailGridDepositFee.Show = true;
                    }
                    else
                        doBillingTargetDetailGridDepositFee.Show = false;

                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridContractFee);
                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationApprovalFee);
                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationCompleteFee);
                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationStartServiceFee);
                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridTotal);
                    listBillingTargetDetailGrid.Add(doBillingTargetDetailGridDepositFee);
                }

                res.ResultData = listBillingTargetDetailGrid;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }
        
        //Grid---------------------------------------------------------------------------------------

        //public ActionResult GetQuotationInformation_CTS051()
        //{
        //    dsQuotationData dsQuotation;
        //    dsRentalContractData dsRentalContract;
        //    ObjectResultData res = new ObjectResultData();
        //    CTS051_ScreenParameter session;

        //    try
        //    {
        //        session = CTS051_GetImportData();
        //        dsQuotation = session.DSQuotationData;
        //        dsRentalContract = session.DSRentalContract;

        //        List<CTS051_DOChangePlanAndBillingTargetGridData> lst = new List<CTS051_DOChangePlanAndBillingTargetGridData>();

        //        //---------------------------------------------------------------------------------

        //        CTS051_DOChangePlanAndBillingTargetGridData contractList = new CTS051_DOChangePlanAndBillingTargetGridData();
        //        contractList.ID = "";
        //        if (dsQuotation.dtTbt_QuotationBasic != null)
        //        {
        //            if (dsQuotation.dtTbt_QuotationBasic.ContractFee != null)
        //                contractList.Normal = decimal.Round(dsQuotation.dtTbt_QuotationBasic.ContractFee.Value, 2, MidpointRounding.AwayFromZero);
        //            else
        //                contractList.Normal = null;
        //        }
        //        lst.Add(contractList);

        //        //---------------------------------------------------------------------------------

        //        //---------------------------------------------------------------------------------

        //        CTS051_DOChangePlanAndBillingTargetGridData installationList = new CTS051_DOChangePlanAndBillingTargetGridData();
        //        installationList.ID = "Installation fee after change";
        //        if (dsQuotation.dtTbt_QuotationBasic != null)
        //        {
        //            if (dsQuotation.dtTbt_QuotationBasic.InstallationFee != null)
        //                installationList.Normal = decimal.Round(dsQuotation.dtTbt_QuotationBasic.InstallationFee.Value, 2, MidpointRounding.AwayFromZero);
        //            else
        //                installationList.Normal = null;
        //        }

        //        if (dsRentalContract.dtTbt_RentalSecurityBasic != null)
        //        {
        //            if (dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_ApproveContract != null)
        //                installationList.ApproveContract = decimal.Round(dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_ApproveContract.Value, 2, MidpointRounding.AwayFromZero);
        //            else
        //                installationList.ApproveContract = null;
        //        }

        //        if (dsRentalContract.dtTbt_RentalSecurityBasic != null)
        //        {
        //            if (dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_CompleteInstall != null)
        //                //installationList.CompleteInstallation = decimal.Round(dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_CompleteInstall.Value, 2, MidpointRounding.AwayFromZero);
        //                installationList.CompleteInstallation = 0;
        //            else
        //                installationList.CompleteInstallation = null;
        //        }

        //        if (dsRentalContract.dtTbt_RentalSecurityBasic != null)
        //        {
        //            if (dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_StartService != null)
        //                //installationList.StartService = decimal.Round(dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_StartService.Value, 2, MidpointRounding.AwayFromZero);
        //                installationList.StartService = 0;
        //            else
        //                installationList.StartService = null;
        //        }
        //        lst.Add(installationList);

        //        //---------------------------------------------------------------------------------

        //        //---------------------------------------------------------------------------------

        //        CTS051_DOChangePlanAndBillingTargetGridData additionalList = new CTS051_DOChangePlanAndBillingTargetGridData();
        //        additionalList.ID = "Additional billing deposit fee";
        //        if (dsQuotation.dtTbt_QuotationBasic != null)
        //        {
        //            if (dsQuotation.dtTbt_QuotationBasic.DepositFee != null)
        //                additionalList.Normal = decimal.Round(dsQuotation.dtTbt_QuotationBasic.DepositFee.Value, 2, MidpointRounding.AwayFromZero);
        //            else
        //                additionalList.Normal = null;
        //        }
        //        additionalList.Order = null;
        //        lst.Add(additionalList);

        //        //---------------------------------------------------------------------------------

        //        session.DTBillingClientDetail = null;
        //        session.DTBillingTempChangePlan = null;
        //        session.ListDOBillingTargetDetail = null;
        //        session.ListDOBillingTargetDetailGrid = null;
        //        session.ListDTBillingClientDetail = null;
        //        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(lst, "Contract\\CTS051", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
        //    }
        //    catch (Exception ex)
        //    {
        //        res.AddErrorMessage(ex);
        //    }

        //    return Json(res);
        //}

        public ActionResult GetQuotationInformationDetail_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            dsQuotationData dsQuotation;
            dsRentalContractData dsRental;
            CTS051_DOChangePlanAndBillingTargetGridData doChangePlanGrid;
            ICommonContractHandler commonHandler;
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                commonHandler = ServiceContainer.GetService<ICommonContractHandler>() as ICommonContractHandler;
                dsQuotation = session.DSQuotationData;
                dsRental = session.DSRentalContract;

                doChangePlanGrid = new CTS051_DOChangePlanAndBillingTargetGridData();
                doChangePlanGrid.NegotiationStaffEmpNo1 = "";
                doChangePlanGrid.NegotiationStaffEmpName1 = "";
                doChangePlanGrid.NegotiationStaffEmpNo2 = "";
                doChangePlanGrid.NegotiationStaffEmpName2 = "";

                if (dsQuotation != null)
                {
                    if (dsQuotation.dtTbt_QuotationBasic != null)
                    {
                        doChangePlanGrid.ApproveNo1 = dsQuotation.dtTbt_QuotationBasic.ApproveNo1;
                        doChangePlanGrid.ApproveNo2 = dsQuotation.dtTbt_QuotationBasic.ApproveNo2;
                        doChangePlanGrid.ApproveNo3 = dsQuotation.dtTbt_QuotationBasic.ApproveNo3;
                        doChangePlanGrid.ApproveNo4 = dsQuotation.dtTbt_QuotationBasic.ApproveNo4;
                        doChangePlanGrid.ApproveNo5 = dsQuotation.dtTbt_QuotationBasic.ApproveNo5;
                    }

                    if (dsRental.dtTbt_RentalSecurityBasic.Count() != 0)
                    {
                        doChangePlanGrid.ContractDurationMonth = dsRental.dtTbt_RentalSecurityBasic[0].ContractDurationMonth;
                        doChangePlanGrid.AutoRenewMonth = dsRental.dtTbt_RentalSecurityBasic[0].AutoRenewMonth;
                    }
                }

                doChangePlanGrid.ContractEndDate = session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractEndDate;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
                return Json(res);
            }

            return Json(doChangePlanGrid);
        }

        public ActionResult GetBillingTargetInformation_CTS051(string contractStatus, bool displayAll, string mode = "")
        {
            ObjectResultData res = new ObjectResultData();

            dsRentalContractData dsRentalContract;
            List<dtBillingClientData> dtBillingClientTemporary = null;
            CTS051_DTBillingClientDetailData dtBillingClient = null;
            List<CTS051_DTBillingClientDetailData> listBillingClient;
            List<string> listClientOCC;
            List<dtBillingTempChangePlanData> listBillingTemp;
            List<CTS051_DOChangePlanAndBillingTargetGridData> listDistinctSequence;

            CTS051_DOChangePlanAndBillingTargetGridData doBillingTargetGrid;
            List<CTS051_DOChangePlanAndBillingTargetGridData> listDoBillingTargetGrid;
            List<CTS051_DOBillingTargetDetailData> listDoBillingTargetDetail;
            List<tbt_BillingTarget> listBillingTarget;

            ICommonContractHandler commonContractHandler;
            IBillingMasterHandler billingMasterHandler;
            IBillingInterfaceHandler billinginterfacehandler;
            IRentralContractHandler rentalHandler;

            CTS051_ScreenParameter session;
            CommonUtil comU;

            try
            {
                session = CTS051_GetImportData();

                comU = new CommonUtil();
                listClientOCC = new List<string>();
                listDistinctSequence = new List<CTS051_DOChangePlanAndBillingTargetGridData>();

                //เก็บเรคคอด ที่เเสดงในกริดโดยมีการยุบ billing temp ตาม billing client code เเละ billing officecode เเล้ว
                listDoBillingTargetGrid = new List<CTS051_DOChangePlanAndBillingTargetGridData>();

                //เก็บเรคคอด ที่เเสดงรายละเอียดของกริดโดยมีการยุบ billing temp ตาม billing client code เเละ billing officecode เเล้ว
                listDoBillingTargetDetail = new List<CTS051_DOBillingTargetDetailData>();

                listBillingTarget = new List<tbt_BillingTarget>();
                billingMasterHandler = ServiceContainer.GetService<IBillingMasterHandler>() as IBillingMasterHandler;
                billinginterfacehandler = ServiceContainer.GetService<IBillingInterfaceHandler>() as IBillingInterfaceHandler;
                commonContractHandler = ServiceContainer.GetService<ICommonContractHandler>() as ICommonContractHandler;
                rentalHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;

                dsRentalContract = session.DSRentalContract;

                //ในกรณีที่เคยทำการโหลด BillingTemp เเล้วให้ใช้ของเก่าใน SessionGetDTBillingTempDataObjectBilling
                if (session.ListDTBillingTempChangePlan == null)
                {
                    //ทำการสร้าง BillingTemp ใหม่
                    List<dtBillingTempChangePlanData> listTbtBillingTemp;
                    listTbtBillingTemp = rentalHandler.GetBillingTempForChangePlan(session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractCode, session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OCC);
                    listBillingTemp = CommonUtil.ClonsObjectList<dtBillingTempChangePlanData, dtBillingTempChangePlanData>(listTbtBillingTemp);

                    //สร้างหมายเลข Sequence ให้กับเเต่ละ BillingTemp เเละปรับสถานะเเต่ละ row เป็น Update
                    GenerateSequenceBillingTemp_CTS051(ref listBillingTemp);
                    session.ListDTBillingTempChangePlan = listBillingTemp;
                }
                else
                {
                    if (session.ListDTBillingTempChangePlan.Count == 0)
                    {
                        //ทำการสร้าง BillingTemp ใหม่
                        List<dtBillingTempChangePlanData> listTbtBillingTemp;
                        listTbtBillingTemp = rentalHandler.GetBillingTempForChangePlan(session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractCode, session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OCC);
                        listBillingTemp = CommonUtil.ClonsObjectList<dtBillingTempChangePlanData, dtBillingTempChangePlanData>(listTbtBillingTemp);

                        //สร้างหมายเลข Sequence ให้กับเเต่ละ BillingTemp เเละปรับสถานะเเต่ละ row เป็น Update
                        GenerateSequenceBillingTemp_CTS051(ref listBillingTemp);
                        session.ListDTBillingTempChangePlan = listBillingTemp;
                    }

                    listBillingTemp = session.ListDTBillingTempChangePlan;
                }

                if (session.ListDTBillingClientDetail == null)
                    listBillingClient = new List<CTS051_DTBillingClientDetailData>();
                else
                    listBillingClient = session.ListDTBillingClientDetail;

                // ถ้าเป็นการกด Retrieve ใหม่ให้ทำการดึงข้อมูลใหม่ไปเลย
                if (mode == "Search")
                    session.ListDTBillingClientDetail = null;

                //Collect distinct of each sequence in billingTemp                                 
                //foreach (var item in listBillingTemp)
                //{
                //    if (item.Status != "Delete")
                //    {
                //        if (listDistinctSequence.FindAll(delegate(CTS051_DOChangePlanAndBillingTargetGridData s) { return s.Sequence == item.Sequence; }).Count() == 0) {
                //            CTS051_DOChangePlanAndBillingTargetGridData doChangePlanGridCheckDistinct = new CTS051_DOChangePlanAndBillingTargetGridData();
                //            if (item.BillingClientCode != "" && item.BillingClientCode != null)
                //                doChangePlanGridCheckDistinct.BillingClientCode = comU.ConvertBillingClientCode(item.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT).Trim();

                //            doChangePlanGridCheckDistinct.BillingOffice = item.BillingOfficeCode;
                //            doChangePlanGridCheckDistinct.Sequence = item.Sequence;
                //            doChangePlanGridCheckDistinct.Status = item.Status;
                //            listDistinctSequence.Add(doChangePlanGridCheckDistinct);
                //        }
                //    }
                //}

                //var lstData = from a in listBillingTemp
                //              where
                //                  (a.Status != "Delete")
                //                  && (listDistinctSequence.Where(b => (b.BillingClientCode == comU.ConvertBillingClientCode(a.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT).Trim())
                //                        && (b.BillingOffice == a.BillingOfficeCode)).Count() == 0)
                //                  && ((displayAll || (!displayAll && (contractStatus != ContractStatus.C_CONTRACT_STATUS_AFTER_START)))
                //                        || ((a.DataComeFrom == 1) && true)
                //                        || ((a.DataComeFrom == 2) && true))
                //              select a;

                foreach (var item in listBillingTemp)
                {
                    if (item.Status != "Delete")
                    {
                        var duplicateItem = from a in listDistinctSequence
                                            where
                                                ((String.IsNullOrEmpty(a.BillingClientCode) ? "" : a.BillingClientCode) == (String.IsNullOrEmpty(item.BillingClientCode) ? "" : comU.ConvertBillingClientCode(item.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT).Trim()))
                                                && ((String.IsNullOrEmpty(a.BillingOCC) ? "" : a.BillingOCC) == (String.IsNullOrEmpty(item.BillingOCC) ? "" : item.BillingOCC))
                                                && (((String.IsNullOrEmpty(a.BillingTargetCode) ? "" : a.BillingTargetCode) == (String.IsNullOrEmpty(item.BillingTargetCode) ? "" : item.BillingTargetCode)))
                                                && (((String.IsNullOrEmpty(a.uIDNew) ? "" : a.uIDNew) ==  (String.IsNullOrEmpty(item.uIDNew) ? "" : item.uIDNew)))
                                            select a;

                        if ((duplicateItem == null) || (duplicateItem.Count() == 0))
                        {
                            if (displayAll || (!displayAll && (contractStatus != ContractStatus.C_CONTRACT_STATUS_AFTER_START)))
                            {
                                // No need to filter
                                listDistinctSequence.Add(CreateGridListObject_CTS051(item));
                            }
                            else
                            {
                                // Filter
                                // 1 = BillingBasic
                                // 2 = BillingTemp

                                if (item.DataComeFrom == 1)
                                {
                                    var contractFeeItem = from a in listBillingTemp
                                                          where (a.BillingTargetCode == item.BillingTargetCode)
                                                              && (a.BillingOCC == item.BillingOCC)
                                                              && (a.BillingClientCode == item.BillingClientCode)
                                                              && (a.DataComeFrom == item.DataComeFrom)
                                                              && (a.BillingType == ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE)
                                                          select a;
                                    if (contractFeeItem.Count() == 1)
                                    {
                                        if (contractFeeItem.First().BillingAmt > 0)
                                        {
                                            listDistinctSequence.Add(CreateGridListObject_CTS051(item));
                                        }
                                    }
                                }
                                else if (item.DataComeFrom == 2)
                                {
                                    if (session.DSRentalContract.dtTbt_RentalSecurityBasic[0].InstallationCompleteFlag == FlagType.C_FLAG_OFF)
                                    {
                                        if (!String.IsNullOrEmpty(item.BillingOCC))
                                        {
                                            listDistinctSequence.Add(CreateGridListObject_CTS051(item));
                                        }
                                    }
                                    else
                                    {
                                        if (item.OCC == session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OCC)
                                        {
                                            listDistinctSequence.Add(CreateGridListObject_CTS051(item));
                                        }
                                    }
                                }
                                else
                                {
                                    listDistinctSequence.Add(CreateGridListObject_CTS051(item));
                                }
                            }
                        }
                    }
                }

                foreach (var itemOcc in listDistinctSequence)
                {
                    doBillingTargetGrid = new CTS051_DOChangePlanAndBillingTargetGridData();
                    doBillingTargetGrid.CanDelete = true;
                    if (ContractStatus.C_CONTRACT_STATUS_AFTER_START.Equals(contractStatus)) {
                        doBillingTargetGrid.InstallationFee = "{1}";
                    } else {
                        doBillingTargetGrid.InstallationFee = "(1) {0} <br/> (2) {1} <br/> (3) {2} <br/>";
                    }

                    foreach (var itemTemp in listBillingTemp)
                    {
                        if (itemTemp.Status != "Delete")
                        {
                            if (itemTemp.Sequence == itemOcc.Sequence)
                            {
                                doBillingTargetGrid.BillingOCC = itemTemp.BillingOCC;
                                if (itemTemp.BillingClientCode != "" && itemTemp.BillingClientCode != null)
                                    doBillingTargetGrid.BillingClientCode = comU.ConvertBillingClientCode(itemTemp.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT).Trim();
                                doBillingTargetGrid.BillingOffice = itemTemp.BillingOfficeCode;

                                IOfficeMasterHandler handler = ServiceContainer.GetService<IOfficeMasterHandler>() as IOfficeMasterHandler;
                                List<doFunctionBilling> clst = handler.GetFunctionBilling();
                                clst = CommonUtil.ConvertObjectbyLanguage<doFunctionBilling, doFunctionBilling>(clst, "OfficeName");

                                List<doFunctionBilling> listFunctionBilling = clst.FindAll(delegate(doFunctionBilling s) { return s.OfficeCode == itemTemp.BillingOfficeCode; });
                                if (listFunctionBilling.Count > 0) {
                                    doBillingTargetGrid.BillingOfficeName = listFunctionBilling[0].OfficeName;
                                }
                                doBillingTargetGrid.BillingTargetCode = comU.ConvertBillingTargetCode(itemTemp.BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_SHORT);
                                doBillingTargetGrid.Status = itemTemp.Status;

                                #region Create Billing Target Name of each billing client code and billing office code
                                //Checking that this client code used to add or not.
                                if (!listClientOCC.Contains(itemTemp.Sequence)) {
                                    listClientOCC.Add(itemTemp.Sequence);
                                    if (session.ListDTBillingClientDetail != null) {
                                        List<CTS051_DTBillingClientDetailData> listBillingClientTemp = listBillingClient.FindAll(delegate(CTS051_DTBillingClientDetailData s) { return s.Sequence == itemTemp.Sequence; });
                                        if (listBillingClientTemp.Count() != 0) {
                                            dtBillingClient = listBillingClientTemp[0];
                                        } else {
                                            dtBillingClientTemporary = billingMasterHandler.GetBillingClient(itemTemp.BillingClientCode);
                                            listBillingClient.Add(CreateNewBillingClient_CTS051(ref dtBillingClient, dtBillingClientTemporary, itemTemp));
                                        }
                                    } else {
                                        dtBillingClientTemporary = billingMasterHandler.GetBillingClient(itemTemp.BillingClientCode);
                                        listBillingClient.Add(CreateNewBillingClient_CTS051(ref dtBillingClient, dtBillingClientTemporary, itemTemp));
                                    }

                                    doBillingTargetGrid.Sequence = itemTemp.Sequence;
                                    if (dtBillingClient != null) {
                                        if (doBillingTargetGrid.BillingTargetName != "" && doBillingTargetGrid.BillingTargetName != null)
                                            doBillingTargetGrid.BillingTargetName += "<br/>";

                                        doBillingTargetGrid.BillingTargetName += "(1) " + (String.IsNullOrEmpty(dtBillingClient.FullNameEN) ? "-" : dtBillingClient.FullNameEN) + "<br/>" +
                                                                                 "(2) " + (String.IsNullOrEmpty(dtBillingClient.FullNameLC) ? "-" : dtBillingClient.FullNameLC);
                                    }
                                }
                                #endregion

                                if (itemTemp.BillingAmt != null)
                                    GetBillingAmtFollowCondition_CTS051(ref doBillingTargetGrid, itemTemp.BillingType, itemTemp.BillingTiming, itemTemp.BillingAmt);
                                else
                                    GetBillingAmtFollowCondition_CTS051(ref doBillingTargetGrid, itemTemp.BillingType, itemTemp.BillingTiming, 0);
                            }
                        }
                    }

                    if (ContractStatus.C_CONTRACT_STATUS_AFTER_START.Equals(contractStatus)) {
                        doBillingTargetGrid.InstallationFee = doBillingTargetGrid.InstallationFee.Replace(" ", "").Replace("{1}", "-");
                    } else {
                        doBillingTargetGrid.InstallationFee = doBillingTargetGrid.InstallationFee.Replace(" ", "").Replace("(1){0}<br/>", "(1)-<br/>");
                        doBillingTargetGrid.InstallationFee = doBillingTargetGrid.InstallationFee.Replace(" ", "").Replace("(2){1}<br/>", "(2)-<br/>");
                        doBillingTargetGrid.InstallationFee = doBillingTargetGrid.InstallationFee.Replace(" ", "").Replace("(3){2}<br/>", "(3)-<br/>");
                        doBillingTargetGrid.InstallationFee = doBillingTargetGrid.InstallationFee.Replace("(1)", "(1) ");
                        doBillingTargetGrid.InstallationFee = doBillingTargetGrid.InstallationFee.Replace("(2)", "(2) ");
                        doBillingTargetGrid.InstallationFee = doBillingTargetGrid.InstallationFee.Replace("(3)", "(3) ");
                    }

                    //Check display all condtion -----------------------------------------------------

                    if (displayAll != true)
                    {
                        if (doBillingTargetGrid.BillingTargetCode == "" || doBillingTargetGrid.BillingTargetCode == null)
                        {
                            if (doBillingTargetGrid.ContractFee == "" || doBillingTargetGrid.ContractFee == null)
                                doBillingTargetGrid.Show = false;
                            else
                                doBillingTargetGrid.Show = true;
                        }
                        else
                        {
                            if (doBillingTargetGrid.BillingOCC == "" || doBillingTargetGrid.BillingOCC == null)
                                doBillingTargetGrid.Show = false;
                            else
                                doBillingTargetGrid.Show = true;

                            if (dsRentalContract.dtTbt_RentalSecurityBasic[0].InstallationCompleteFlag == SECOM_AJIS.Common.Util.ConstantValue.FlagType.C_FLAG_OFF)
                            {
                                if (doBillingTargetGrid.BillingOCC == "" || doBillingTargetGrid.BillingOCC == null)
                                    doBillingTargetGrid.Show = false;
                                else
                                    doBillingTargetGrid.Show = true;
                            }
                        }
                    }
                    else
                        doBillingTargetGrid.Show = true;

                    //--------------------------------------------------------------------------------
                    listDoBillingTargetGrid.Add(doBillingTargetGrid);
                }

                if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    if ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_MA) || ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_SG)
                        || (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_BE)))
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoBillingTargetGrid, "Contract\\CTS051BillingBeforeStart_MA-SG", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                    else if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_ONLINE)
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoBillingTargetGrid, "Contract\\CTS051BillingBeforeStart_ONLINE", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                    else
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoBillingTargetGrid, "Contract\\CTS051BillingBeforeStart", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                }
                else
                {
                    if ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_MA) || ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_SG)
                        || (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_BE)))
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoBillingTargetGrid, "Contract\\CTS051BillingAfterStart_MA-SG", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                    else if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_ONLINE)
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoBillingTargetGrid, "Contract\\CTS051BillingAfterStart_ONLINE", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                    else
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoBillingTargetGrid, "Contract\\CTS051BillingAfterStart", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                }

                session.ListDOChangePlanAndBillingTargetGrid = listDoBillingTargetGrid;
                session.ListDTBillingClientDetail = listBillingClient;

                foreach (var item in session.ListDTBillingClientDetail)
                {
                    GetBillingTargetInformationDetail_CTS051(item.BillingClientCode, item.BillingOffice, item.Sequence);
                    session.DOBillingTargetDetail.Sequence = item.Sequence;
                    if (session.DOBillingTargetDetail.BillingClientCodeDetail != null && session.DOBillingTargetDetail.BillingClientCodeDetail != "")
                        session.DOBillingTargetDetail.BillingClientCodeDetail = comU.ConvertBillingClientCode(session.DOBillingTargetDetail.BillingClientCodeDetail, CommonUtil.CONVERT_TYPE.TO_LONG);

                    listDoBillingTargetDetail.Add(session.DOBillingTargetDetail);

                    //listBillingTarget.Add(billinginterfacehandler.GetBillingTarget(item.BillingClientCode));
                    List<tbt_BillingTarget> dtBillingTargetList = billinginterfacehandler.GetBillingTarget(item.BillingClientCode);
                    if (dtBillingTargetList != null && dtBillingTargetList.Count > 0)
                        listBillingTarget.Add(dtBillingTargetList[0]);
                }

                session.ListDOBillingTargetDetail = listDoBillingTargetDetail;
                //SessionGetListDTBillingTargetDataObjectBilling = listBillingTarget;
                session.DOBillingTargetDetail = null;
            }
            catch (Exception ex)
            {
                res.ResultData = CommonUtil.ConvertToXml<Object>(null, "Contract\\CTS051BillingBeforeStart_MA-SG", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                res.AddErrorMessage(ex);
                return Json(res);
            }

            return Json(res);
        }

        public ActionResult GetBillingTargetInformationDetail_CTS051(string billingClientCode, string billingOffice, string sequence, bool fromGrid = false)
        {
            ObjectResultData res = new ObjectResultData();
            IBillingMasterHandler billingHandler;
            CTS051_DOBillingTargetDetailData doBillingTargetDetail = new CTS051_DOBillingTargetDetailData();

            List<dtBillingTempChangePlanData> listBillingTemp;
            CTS051_DTBillingClientDetailData dtBillingClient;

            CTS051_ScreenParameter session;
            CommonUtil comU;

            try
            {
                session = CTS051_GetImportData();
                comU = new CommonUtil();
                billingHandler = ServiceContainer.GetService<IBillingMasterHandler>() as IBillingMasterHandler;
                dtBillingClient = new CTS051_DTBillingClientDetailData();
                listBillingTemp = session.ListDTBillingTempChangePlan;
                listBillingTemp = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.Sequence == sequence; });
                var tmp_dtBillingClient = (session.ListDTBillingClientDetail != null) ? session.ListDTBillingClientDetail.Where(x => x.Sequence == sequence) : null;
                //var tmp_dtBillingClient = session.ListDTBillingClientDetail.FindAll(delegate(CTS051_DTBillingClientDetailData s) { return s.Sequence == sequence; });

                if ((tmp_dtBillingClient != null) && (tmp_dtBillingClient.Count() > 0))
                {
                    dtBillingClient = tmp_dtBillingClient.First();
                }
                else
                {
                    dtBillingClient = null;
                }

                if (listBillingTemp.Count() != 0)
                {
                    doBillingTargetDetail.BillingTargetCodeDetail = comU.ConvertBillingTargetCode(listBillingTemp[0].BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_SHORT);
                    doBillingTargetDetail.BillingOCC = listBillingTemp[0].BillingOCC;
                    doBillingTargetDetail.Status = listBillingTemp[0].Status;
                }

                if (dtBillingClient != null)
                {
                    doBillingTargetDetail.BillingClientCodeDetail = dtBillingClient.BillingClientCode;
                    doBillingTargetDetail.FullNameEN = String.IsNullOrEmpty(dtBillingClient.FullNameEN) ? "-" : dtBillingClient.FullNameEN;
                    doBillingTargetDetail.BranchNameEN = String.IsNullOrEmpty(dtBillingClient.BranchNameEN) ? "-" : dtBillingClient.BranchNameEN;
                    doBillingTargetDetail.AddressEN = String.IsNullOrEmpty(dtBillingClient.AddressEN) ? "-" : dtBillingClient.AddressEN;
                    doBillingTargetDetail.FullNameLC = String.IsNullOrEmpty(dtBillingClient.FullNameLC) ? "-" : dtBillingClient.FullNameLC;
                    doBillingTargetDetail.BranchNameLC = String.IsNullOrEmpty(dtBillingClient.BranchNameLC) ? "-" : dtBillingClient.BranchNameLC;
                    doBillingTargetDetail.AddressLC = String.IsNullOrEmpty(dtBillingClient.AddressLC) ? "-" : dtBillingClient.AddressLC;
                    doBillingTargetDetail.Nationality = String.IsNullOrEmpty(dtBillingClient.NationalityEN) ? "-" : dtBillingClient.NationalityEN; //Wait for edit to Nationality which follow culture from billingTemp;
                    doBillingTargetDetail.PhoneNo = String.IsNullOrEmpty(dtBillingClient.PhoneNo) ? "-" : dtBillingClient.PhoneNo;
                    doBillingTargetDetail.BusinessType = String.IsNullOrEmpty(dtBillingClient.BusinessTypeNameEN) ? "-" : dtBillingClient.BusinessTypeNameEN; //Wait for edit to BusinessTypeName which follow culture from billingTemp;
                    doBillingTargetDetail.IDNo = String.IsNullOrEmpty(dtBillingClient.IDNo) ? "-" : dtBillingClient.IDNo;
                }
                else
                {
                    doBillingTargetDetail.BillingClientCodeDetail = "-";
                    doBillingTargetDetail.FullNameEN = "-";
                    doBillingTargetDetail.BranchNameEN = "-";
                    doBillingTargetDetail.AddressEN = "-";
                    doBillingTargetDetail.FullNameLC = "-";
                    doBillingTargetDetail.BranchNameLC = "-";
                    doBillingTargetDetail.AddressLC = "-";
                    doBillingTargetDetail.Nationality = "-";
                    doBillingTargetDetail.PhoneNo = "-";
                    doBillingTargetDetail.BusinessType = "-";
                    doBillingTargetDetail.IDNo = "-";
                }

                //doBillingTargetDetail.BillingClientCodeDetail = comU.ConvertBillingClientCode(billingClientCode, CommonUtil.CONVERT_TYPE.TO_LONG);
                //doBillingTargetDetail.BillingClientCodeDetail = comU.ConvertBillingClientCode(billingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT);

                doBillingTargetDetail.BillingClientCodeDetail = billingClientCode;
                doBillingTargetDetail.BillingOfficeCode = billingOffice;
                doBillingTargetDetail.Sequence = sequence;

                if (fromGrid)
                {
                    doBillingTargetDetail.BillingClientCodeDetail = billingClientCode;
                }
                else
                {
                    doBillingTargetDetail.BillingClientCodeDetail = comU.ConvertBillingClientCode(billingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT);
                }

                //if (session.DTBillingClientDetail == null)
                //{
                //    doBillingTargetDetail.BillingClientCodeDetailLong = billingClientCode;
                //    doBillingTargetDetail.BillingClientCodeDetail = comU.ConvertBillingClientCode(billingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT);
                //}

                //if (session.DOBillingTargetDetail == null)
                //{
                //    doBillingTargetDetail.BillingTargetCodeDetailLong = doBillingTargetDetail.BillingTargetCodeDetail;
                //}

                session.DTBillingClientDetail = dtBillingClient;
                session.DOBillingTargetDetail = doBillingTargetDetail;

                return Json(doBillingTargetDetail);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
                return Json(res);
            }
        }

        private CTS051_DOChangePlanAndBillingTargetGridData CreateGridListObject_CTS051(dtBillingTempChangePlanData item)
        {
            CommonUtil comU = new CommonUtil();
            CTS051_DOChangePlanAndBillingTargetGridData doChangePlanGridCheckDistinct = new CTS051_DOChangePlanAndBillingTargetGridData();
            if (!String.IsNullOrEmpty(item.BillingClientCode))
                doChangePlanGridCheckDistinct.BillingClientCode = comU.ConvertBillingClientCode(item.BillingClientCode, CommonUtil.CONVERT_TYPE.TO_SHORT).Trim();

            doChangePlanGridCheckDistinct.BillingClientCodeLong = item.BillingClientCode;
            doChangePlanGridCheckDistinct.BillingTargetCode = item.BillingTargetCode;
            doChangePlanGridCheckDistinct.BillingOffice = item.BillingOfficeCode;
            doChangePlanGridCheckDistinct.Sequence = item.Sequence;
            doChangePlanGridCheckDistinct.Status = item.Status;
            doChangePlanGridCheckDistinct.BillingOCC = item.BillingOCC;
            doChangePlanGridCheckDistinct.uIDNew = item.uIDNew;

            return doChangePlanGridCheckDistinct;
        }

        //public ActionResult GetBillingTargetInformationDetailGrid_CTS051(string contractStatus, string sequence)
        //{
        //    ObjectResultData res = new ObjectResultData();
        //    CTS051_DOBillingTargetDetailData doBillingTargetDetail;

        //    CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridContractFee;
        //    CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridInstallationApprovalFee;
        //    CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridInstallationCompleteFee = null;
        //    CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridInstallationStartServiceFee;
        //    CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridTotal;
        //    CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGridDepositFee;

        //    List<dtBillingTempChangePlanData> listBillingTemp;
        //    List<CTS051_DOBillingTargetDetailGridData> listBillingTargetDetailGrid;
        //    dsRentalContractData dsRentalContract;

        //    CTS051_ScreenParameter session;

        //    try
        //    {
        //        session = CTS051_GetImportData();
        //        doBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
        //        listBillingTemp = session.ListDTBillingTempChangePlan;
        //        listBillingTemp = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.Sequence == sequence; });
        //        listBillingTargetDetailGrid = new List<CTS051_DOBillingTargetDetailGridData>();
        //        dsRentalContract = session.DSRentalContract;

        //        foreach (var item in listBillingTemp)
        //        {
        //            GetBillingDetailAmtFollowCondition_CTS051(ref doBillingTargetDetail, item.BillingType, item.BillingTiming, item.BillingAmt, item.PayMethod);
        //        }

        //        if (contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
        //        {
        //            doBillingTargetDetailGridContractFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridContractFee.Amount = doBillingTargetDetail.BillingContractFeeDetail;
        //            doBillingTargetDetailGridContractFee.Show = true;

        //            doBillingTargetDetailGridInstallationCompleteFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridInstallationCompleteFee.Amount = doBillingTargetDetail.BillingInstallationCompleteFee;
        //            doBillingTargetDetailGridInstallationCompleteFee.PayMethod = doBillingTargetDetail.PayMethodCompleteFee;
        //            doBillingTargetDetailGridInstallationCompleteFee.Show = true;

        //            doBillingTargetDetailGridDepositFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridDepositFee.Amount = doBillingTargetDetail.BillingDepositFee;
        //            doBillingTargetDetailGridDepositFee.PayMethod = doBillingTargetDetail.PayMethodDepositFee;
        //            doBillingTargetDetailGridDepositFee.Show = true;

        //            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
        //                contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START)
        //                doBillingTargetDetailGridInstallationCompleteFee.Show = true;
        //            else
        //                doBillingTargetDetailGridInstallationCompleteFee.Show = false;

        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridContractFee);
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationCompleteFee);
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridDepositFee);
        //        }
        //        else
        //        {
        //            doBillingTargetDetailGridContractFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridContractFee.Amount = doBillingTargetDetail.BillingContractFeeDetail;
        //            doBillingTargetDetailGridContractFee.Show = true;

        //            doBillingTargetDetailGridInstallationApprovalFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridInstallationApprovalFee.Amount = doBillingTargetDetail.BillingInstallationApprovalFee;
        //            doBillingTargetDetailGridInstallationApprovalFee.Show = true;

        //            doBillingTargetDetailGridInstallationCompleteFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridInstallationCompleteFee.Amount = doBillingTargetDetail.BillingInstallationCompleteFee;
        //            doBillingTargetDetailGridInstallationCompleteFee.PayMethod = doBillingTargetDetail.PayMethodCompleteFee;
        //            doBillingTargetDetailGridInstallationCompleteFee.Show = true;

        //            doBillingTargetDetailGridInstallationStartServiceFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridInstallationStartServiceFee.Amount = doBillingTargetDetail.BillingInstallationStartServiceFee;
        //            doBillingTargetDetailGridInstallationStartServiceFee.PayMethod = doBillingTargetDetail.PayMethodStartServiceFee;
        //            doBillingTargetDetailGridInstallationStartServiceFee.Show = true;

        //            doBillingTargetDetailGridTotal = new CTS051_DOBillingTargetDetailGridData();
        //            if ((doBillingTargetDetail.BillingInstallationCompleteFee != null && doBillingTargetDetail.BillingInstallationCompleteFee != null) &&
        //                (doBillingTargetDetail.BillingInstallationStartServiceFee != null && doBillingTargetDetail.BillingInstallationStartServiceFee != null))
        //                doBillingTargetDetailGridTotal.Amount = (decimal.Parse(doBillingTargetDetail.BillingInstallationCompleteFee) + decimal.Parse(doBillingTargetDetail.BillingInstallationStartServiceFee)).ToString("#,##0.00");
        //            doBillingTargetDetailGridTotal.Show = true;

        //            doBillingTargetDetailGridDepositFee = new CTS051_DOBillingTargetDetailGridData();
        //            doBillingTargetDetailGridDepositFee.Amount = doBillingTargetDetail.BillingDepositFee;
        //            doBillingTargetDetailGridDepositFee.PayMethod = doBillingTargetDetail.PayMethodDepositFee;
        //            doBillingTargetDetailGridDepositFee.Show = true;

        //            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
        //                doBillingTargetDetailGridInstallationApprovalFee.Show = true;
        //            else
        //                doBillingTargetDetailGridInstallationApprovalFee.Show = false;

        //            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
        //                doBillingTargetDetailGridInstallationCompleteFee.Show = true;
        //            else
        //                doBillingTargetDetailGridInstallationCompleteFee.Show = false;

        //            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
        //                doBillingTargetDetailGridInstallationStartServiceFee.Show = true;
        //            else
        //                doBillingTargetDetailGridInstallationStartServiceFee.Show = false;

        //            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL && contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
        //                doBillingTargetDetailGridTotal.Show = true;
        //            else
        //                doBillingTargetDetailGridTotal.Show = false;

        //            if (
        //               (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
        //               (contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START || contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START))
        //               ||
        //               (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_SALE &&
        //               (contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START || contractStatus.Trim() == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_AFTER_START))
        //               )
        //            {
        //                doBillingTargetDetailGridDepositFee.Show = true;
        //            }
        //            else
        //                doBillingTargetDetailGridDepositFee.Show = false;
                    
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridContractFee);
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationApprovalFee);
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationCompleteFee);
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridInstallationStartServiceFee);
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridTotal);
        //            listBillingTargetDetailGrid.Add(doBillingTargetDetailGridDepositFee);
        //        }

        //        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOBillingTargetDetailGridData>(listBillingTargetDetailGrid, "Contract\\CTS051BillingDetail", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
        //    }
        //    catch (Exception ex)
        //    {
        //        res.AddErrorMessage(ex);
        //    }

        //    return Json(res);
        //}

        //--------------------------------------------------------------------------------------------

        public void GetBillingAmtFollowCondition_CTS051(ref CTS051_DOChangePlanAndBillingTargetGridData doChangePlanGrid, string billingType, string billingTiming, decimal? billingAmt)
        {
            dsRentalContractData dsRentalContract;
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                dsRentalContract = session.DSRentalContract;

                if (dsRentalContract.dtTbt_RentalContractBasic != null)
                {
                    if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE)
                    {
                        if (decimal.Parse(billingAmt.ToString()) != 0)
                            doChangePlanGrid.ContractFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");
                    }

                    if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE)
                    {
                        if (decimal.Parse(billingAmt.ToString()) != 0)
                            doChangePlanGrid.DepositFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");
                    }

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                    {
                        //First step check approval case
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_APPROVE_CONTRACT)
                        {
                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                            {
                                if (decimal.Parse(billingAmt.ToString()) != 0)
                                    doChangePlanGrid.InstallationFee = doChangePlanGrid.InstallationFee.Replace("{0}", decimal.Parse(billingAmt.ToString()).ToString("#,##0.00"));
                            }
                        }

                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION)
                        {
                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL)
                            {
                                if (decimal.Parse(billingAmt.ToString()) != 0)
                                    doChangePlanGrid.InstallationFee = doChangePlanGrid.InstallationFee.Replace("{1}", decimal.Parse(billingAmt.ToString()).ToString("#,##0.00"));
                            }
                        }

                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE)
                        {
                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
                                dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                            {
                                if (decimal.Parse(billingAmt.ToString()) != 0)
                                    doChangePlanGrid.InstallationFee = doChangePlanGrid.InstallationFee.Replace("{2}", decimal.Parse(billingAmt.ToString()).ToString("#,##0.00"));
                            }
                        }
                    }
                    else
                    {
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION)
                        {
                            doChangePlanGrid.InstallationFee = "";
                            if (decimal.Parse(billingAmt.ToString()) != 0)
                                doChangePlanGrid.InstallationFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00"); ;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void GetBillingDetailAmtFollowCondition_CTS051(ref CTS051_DOBillingTargetDetailData doBillingTargetDetail, string billingType, string billingTiming, decimal? billingAmt, string payMethod)
        {
            dsRentalContractData dsRentalContract;
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                dsRentalContract = session.DSRentalContract;

                if (dsRentalContract.dtTbt_RentalContractBasic != null)
                {
                    if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE)
                    {
                        if (billingAmt != null)
                            doBillingTargetDetail.BillingContractFeeDetail = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");

                    }

                    if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE)
                    {
                        if (billingAmt != null)
                        {
                            doBillingTargetDetail.BillingDepositFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");
                            doBillingTargetDetail.PayMethodDepositFee = payMethod;
                        }
                    }

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                    {
                        //First step check approval case
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_APPROVE_CONTRACT)
                        {
                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                            {
                                if (billingAmt != null)
                                    doBillingTargetDetail.BillingInstallationApprovalFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");
                            }
                        }

                        //Second step check complete case
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION)
                        {
                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL)
                            {
                                if (billingAmt != null)
                                {
                                    doBillingTargetDetail.BillingInstallationCompleteFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");
                                    doBillingTargetDetail.PayMethodCompleteFee = payMethod;
                                }
                            }
                        }

                        //Third step check start service case
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE)
                        {
                            if (dsRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == SECOM_AJIS.Common.Util.ConstantValue.ProductType.C_PROD_TYPE_AL &&
                                dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                            {
                                if (billingAmt != null)
                                {
                                    doBillingTargetDetail.BillingInstallationStartServiceFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");
                                    doBillingTargetDetail.PayMethodStartServiceFee = payMethod;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION)
                        {
                            if (billingAmt != null)
                            {
                                doBillingTargetDetail.BillingInstallationCompleteFee = decimal.Parse(billingAmt.ToString()).ToString("#,##0.00");
                                doBillingTargetDetail.PayMethodCompleteFee = payMethod;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void GetBillingTempAmtFollowCondition_CTS051(ref dtBillingTempChangePlanData dtBillingTempListForView, string billingType, string billingTiming, object billingAmt)
        {
            dsRentalContractData dsRentalContract;
            CTS051_DOValidateAddUpdateRequireFieldBeforeStartData doCTS051ValidateAddUpdateRequireFieldBeforeStart;
            CTS051_DOValidateAddUpdateRequireFieldAfterStartData doCTS051ValidateAddUpdateRequireFieldAfterStart;
            decimal? billingAmtContract = 0;
            decimal? billingAmtApprove = 0;
            decimal? billingAmtComplete = 0;
            decimal? billingAmtDeposit = 0;
            decimal? billingAmtStart = 0;

            string payMethodComplete = "0";
            string payMethodDeposit = "0";
            string payMethodStart = "0";

            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                dsRentalContract = session.DSRentalContract;
                if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    doCTS051ValidateAddUpdateRequireFieldBeforeStart = billingAmt as CTS051_DOValidateAddUpdateRequireFieldBeforeStartData;
                    billingAmtContract = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldBeforeStart.BillingContractFeeDetail);
                    billingAmtComplete = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldBeforeStart.BillingInstallationCompleteFee);
                    billingAmtStart = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldBeforeStart.BillingInstallationStartServiceFee);
                    billingAmtDeposit = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldBeforeStart.BillingDepositFee);

                    if (doCTS051ValidateAddUpdateRequireFieldBeforeStart.BillingInstallationApproveFee != null)
                        billingAmtApprove = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldBeforeStart.BillingInstallationApproveFee);

                    payMethodComplete = doCTS051ValidateAddUpdateRequireFieldBeforeStart.PayMethodCompleteFee;
                    payMethodDeposit = doCTS051ValidateAddUpdateRequireFieldBeforeStart.PayMethodDepositFee;
                    payMethodStart = doCTS051ValidateAddUpdateRequireFieldBeforeStart.PayMethodStartServiceFee;
                }
                else
                {
                    doCTS051ValidateAddUpdateRequireFieldAfterStart = billingAmt as CTS051_DOValidateAddUpdateRequireFieldAfterStartData;
                    billingAmtContract = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldAfterStart.BillingContractFeeDetail);
                    billingAmtComplete = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldAfterStart.BillingInstallationCompleteFee);
                    billingAmtDeposit = decimal.Parse(doCTS051ValidateAddUpdateRequireFieldAfterStart.BillingDepositFee);

                    payMethodComplete = doCTS051ValidateAddUpdateRequireFieldAfterStart.PayMethodCompleteFee;
                    payMethodDeposit = doCTS051ValidateAddUpdateRequireFieldAfterStart.PayMethodDepositFee;
                }

                if (dsRentalContract.dtTbt_RentalContractBasic != null)
                {
                    if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON ||
                        billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE)
                        dtBillingTempListForView.BillingAmt = billingAmtContract;

                    if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE)
                    {
                        dtBillingTempListForView.BillingAmt = billingAmtDeposit;
                        dtBillingTempListForView.PayMethod = payMethodDeposit;
                    }

                    if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_BEF_START)
                    {
                        //Second step check complete case
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION)
                        {
                            dtBillingTempListForView.BillingAmt = billingAmtComplete;
                            dtBillingTempListForView.PayMethod = payMethodComplete;
                        }

                        //Third step check start service case
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE)
                        {
                            dtBillingTempListForView.BillingAmt = billingAmtStart;
                            dtBillingTempListForView.PayMethod = payMethodStart;
                        }

                        //Forth step check approve case
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_APPROVE_CONTRACT)
                        {
                            dtBillingTempListForView.BillingAmt = billingAmtApprove;
                        }
                    }
                    else
                    {
                        if (billingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        billingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION)
                        {
                            dtBillingTempListForView.BillingAmt = billingAmtComplete;
                            dtBillingTempListForView.PayMethod = payMethodComplete;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //--------------------------------------------------------------------------------------------

        public ActionResult GetActiveEmployee_CTS051(CTS051_DOChangePlanAndBillingTargetGridData detailList)
        {
            ObjectResultData res = new ObjectResultData();
            IMasterHandler masterHandler;
            IEmployeeMasterHandler employeeHandler;
            List<tbm_Employee> listEmployee;
            List<dtEmpNo> listEmpNo;

            try
            {
                masterHandler = ServiceContainer.GetService<IMasterHandler>() as IMasterHandler;
                employeeHandler = ServiceContainer.GetService<IEmployeeMasterHandler>() as IEmployeeMasterHandler;

                listEmployee = masterHandler.GetActiveEmployee(detailList.EmpNo);

                if (listEmployee.Count() == 0)
                {
                    //res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0012, "");
                    return Json(res);
                }

                listEmpNo = employeeHandler.GetEmployeeNameByEmpNo(detailList.EmpNo);
                if (listEmpNo.Count() != 0)
                    detailList.EmpName = listEmpNo[0].EmployeeNameDisplay;

                return Json(detailList);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
                return Json(res);
            }
        }

        public ActionResult GetTotalBilling_CTS051(string completeAmount, string startAmount)
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_DOBillingTargetDetailGridData doBillingTargetDetailGrid;

            try
            {
                doBillingTargetDetailGrid = new CTS051_DOBillingTargetDetailGridData();

                if (completeAmount == "")
                    completeAmount = "0.00";

                if (startAmount == "")
                    startAmount = "0.00";

                doBillingTargetDetailGrid.Total = (decimal.Parse(completeAmount) + decimal.Parse(startAmount)).ToString("#,##0.00");
                return Json(doBillingTargetDetailGrid);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult GetIsDisableDivideContract_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            IRentralContractHandler rentralContractHandler;
            List<tbt_RentalMaintenanceDetails> ListRentalMaintenanceDetails;
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                rentralContractHandler = ServiceContainer.GetService<IRentralContractHandler>() as IRentralContractHandler;
                ListRentalMaintenanceDetails = rentralContractHandler.GetTbt_RentalMaintenanceDetails(session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractCode, session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OCC);
                if (ListRentalMaintenanceDetails.Count != 0)
                {
                    if (ListRentalMaintenanceDetails[0].MaintenanceFeeTypeCode == MAFeeType.C_MA_FEE_TYPE_RESULT_BASED)
                        return Json(true);
                    else
                        return Json(false);
                }
                else
                    return Json(false);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult GetMAS030Object_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_ScreenParameter session;
            CTS051_MAS030Object mas030Object;

            try
            {
                session = CTS051_GetImportData();
                mas030Object = new CTS051_MAS030Object();
                if (session.DOBillingTargetDetail != null)
                {
                    mas030Object.AddressEN = session.DOBillingTargetDetail.AddressEN;
                    mas030Object.AddressLC = session.DOBillingTargetDetail.AddressLC;
                    mas030Object.BillingClientCode = session.DOBillingTargetDetail.BillingClientCodeDetail;
                    mas030Object.BranchNameEN = session.DOBillingTargetDetail.BranchNameEN;
                    mas030Object.BranchNameLC = session.DOBillingTargetDetail.BranchNameLC;
                    mas030Object.BusinessTypeCode = session.DOBillingTargetDetail.BusinessType;
                    mas030Object.CompanyTypeCode = session.DOBillingTargetDetail.BillingOfficeCode;
                    mas030Object.CustTypeCode = session.DTBillingClientDetail.CustTypeCode;     
                }

                return Json(mas030Object);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult UpdateDataFromMAS030Object_CTS051(CTS051_MAS030Object mas030Object)
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                session.DOBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
                session.DOBillingTargetDetail.AddressEN = mas030Object.AddressEN;
                session.DOBillingTargetDetail.AddressLC = mas030Object.AddressLC;
                session.DOBillingTargetDetail.BillingClientCodeDetail = mas030Object.BillingClientCode;
                session.DOBillingTargetDetail.BranchNameEN = mas030Object.BranchNameEN;
                session.DOBillingTargetDetail.BranchNameLC = mas030Object.BranchNameLC;
                session.DOBillingTargetDetail.BusinessType = mas030Object.BusinessTypeCode;
                session.DOBillingTargetDetail.IDNo = mas030Object.IDNo;
                session.DOBillingTargetDetail.FullNameEN = mas030Object.NameEN;
                session.DOBillingTargetDetail.FullNameLC = mas030Object.NameLC;
                session.DOBillingTargetDetail.PhoneNo = mas030Object.PhoneNo;
                session.DOBillingTargetDetail.Nationality = mas030Object.RegionCode;
               
                session.DTBillingClientDetail = new CTS051_DTBillingClientDetailData();
                session.DTBillingClientDetail.AddressEN = mas030Object.AddressEN;
                session.DTBillingClientDetail.AddressLC = mas030Object.AddressLC;
                session.DTBillingClientDetail.BillingClientCode = mas030Object.BillingClientCode;
                session.DTBillingClientDetail.BranchNameEN = mas030Object.BranchNameEN;
                session.DTBillingClientDetail.BranchNameLC = mas030Object.BranchNameLC;
                session.DTBillingClientDetail.BusinessTypeCode = mas030Object.BusinessTypeCode;
                session.DTBillingClientDetail.CompanyTypeCode = mas030Object.CompanyTypeCode;
                session.DTBillingClientDetail.CustTypeCode = mas030Object.CustTypeCode;
                session.DTBillingClientDetail.IDNo = mas030Object.IDNo;
                session.DTBillingClientDetail.FullNameEN = mas030Object.NameEN;
                session.DTBillingClientDetail.FullNameLC = mas030Object.NameLC;
                session.DTBillingClientDetail.PhoneNo = mas030Object.PhoneNo;
                session.DTBillingClientDetail.Nationality = mas030Object.RegionCode;

                return LoadMasterData_CTS051(session.DOBillingTargetDetail); 
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult RemoveChangePlanGridBilling_CTS051(string sequence)
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_DOBillingTargetDetailData doBillingTargetDetail;
            List<CTS051_DOChangePlanAndBillingTargetGridData> listDoChangePlanGrid;
            List<dtBillingTempChangePlanData> listBillingTemp;
            dsRentalContractData dsRentalContract;

            CTS051_ScreenParameter session;
            
            try
            {
                session = CTS051_GetImportData();
                doBillingTargetDetail = new CTS051_DOBillingTargetDetailData();
                listDoChangePlanGrid = session.ListDOChangePlanAndBillingTargetGrid;
                listBillingTemp = session.ListDTBillingTempChangePlan;

                foreach (var item in listDoChangePlanGrid)
                {
                    if (item.Sequence == sequence)
                    {
                        listDoChangePlanGrid.Remove(item);
                        break;
                    }
                }

                foreach (var item in listBillingTemp)
                {
                    if (item.Sequence == sequence)
                    {
                        item.Status = "Delete";
                    }
                }

                dsRentalContract = session.DSRentalContract;
                if (dsRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == SECOM_AJIS.Common.Util.ConstantValue.ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    if ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_MA) || ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_SG)
                        || (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_BE)))
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoChangePlanGrid, "Contract\\CTS051BillingBeforeStart_MA-SG", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                    else if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_ONLINE)
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoChangePlanGrid, "Contract\\CTS051BillingBeforeStart_ONLINE", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }   
                    else
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoChangePlanGrid, "Contract\\CTS051BillingBeforeStart", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }                    
                }
                else
                {
                    if ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_MA) || ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_SG)
                        || (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_BE)))
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoChangePlanGrid, "Contract\\CTS051BillingAfterStart_MA-SG", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    }
                    else if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_ONLINE)
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoChangePlanGrid, "Contract\\CTS051BillingAfterStart_ONLINE", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    } 
                    else
                    {
                        res.ResultData = CommonUtil.ConvertToXml<CTS051_DOChangePlanAndBillingTargetGridData>(listDoChangePlanGrid, "Contract\\CTS051BillingAfterStart", CommonUtil.GRID_EMPTY_TYPE.SEARCH);
                    } 
                }

                session.ListDOChangePlanAndBillingTargetGrid = listDoChangePlanGrid;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult LoadMasterData_CTS051(CTS051_DOBillingTargetDetailData doBillingTargetDetail)
        {
            ObjectResultData res = new ObjectResultData();
            List<CTS051_DTBillingClientDetailData> listBillingClient;
            IMasterHandler masterHandler;
            ICommonHandler commonHandler;
            List<tbm_Region> listRegion;

            try
            {
                masterHandler = ServiceContainer.GetService<IMasterHandler>() as IMasterHandler;
                commonHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;

                listRegion = masterHandler.GetTbm_Region();
                masterHandler.GetTbm_BusinessType();
                
                return Json(doBillingTargetDetail);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        //private ActionResult CTS051_GetComboBoxPaymentMethod()
        //{
        //    List<doMiscTypeCode> lst = new List<doMiscTypeCode>();
        //    CTS051_ScreenParameter session;

        //    try
        //    {
        //        session = CTS051_GetImportData();
        //        List<doMiscTypeCode> miscs = new List<doMiscTypeCode>()
        //        {
        //            new doMiscTypeCode()
        //            {
        //                FieldName = MiscType.C_PAYMENT_METHOD,
        //                ValueCode = "%"
        //            }
        //        };

        //        ICommonHandler hand = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;
        //        lst = hand.GetMiscTypeCodeList(session.ListDOMiscTypeCode);
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    if (lst == null)
        //        lst = new List<doMiscTypeCode>();

        //    string display = "ValueCodeDisplay";

        //    //return Json(CommonUtil.CommonComboBox<doMiscTypeCode>("{BLANK_ID}", lst, display, "ValueCode", null, true).ToString());
        //    return null;
        //}

        public void GenerateSequenceBillingTemp_CTS051(ref List<dtBillingTempChangePlanData> listBillingTemp)
        {
            int sequence = 0;
            List<dtBillingTempChangePlanData> listDistinct;
            List<dtBillingTempChangePlanData> listUnique;

            try
            {
                listDistinct = new List<dtBillingTempChangePlanData>();
                
                foreach (var item in listBillingTemp)
                {                    
                    item.Status = "Update";                
                    if (listDistinct.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingClientCode == item.BillingClientCode && s.BillingOfficeCode == item.BillingOfficeCode; }).Count() == 0)
                    {
                        dtBillingTempChangePlanData doChangePlanGridCheckDistinct = new dtBillingTempChangePlanData();
                        doChangePlanGridCheckDistinct.BillingClientCode = item.BillingClientCode;
                        doChangePlanGridCheckDistinct.BillingOfficeCode = item.BillingOfficeCode;
                        listDistinct.Add(doChangePlanGridCheckDistinct);
                    }
                }
                
                foreach (var item in listDistinct)
                {
                    sequence += 1;
                    listUnique = listBillingTemp.FindAll(delegate(dtBillingTempChangePlanData s) { return s.BillingClientCode == item.BillingClientCode && s.BillingOfficeCode == item.BillingOfficeCode; });
                    foreach (var itemTemp in listUnique)
                    {
                        if (itemTemp.Sequence == "" || itemTemp.Sequence == null)                        
                            itemTemp.Sequence = sequence.ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public CTS051_DTBillingClientDetailData CreateNewBillingClient_CTS051(ref CTS051_DTBillingClientDetailData dtBillingClient, List<dtBillingClientData> dtBillingClientTemporary, dtBillingTempChangePlanData itemTemp)
        {
            dtBillingClient = new CTS051_DTBillingClientDetailData();

            if (dtBillingClientTemporary.Count != 0)
            {
                dtBillingClient.AddressEN = dtBillingClientTemporary[0].AddressEN;
                dtBillingClient.AddressLC = dtBillingClientTemporary[0].AddressLC;
                dtBillingClient.BillingClientCode = dtBillingClientTemporary[0].BillingClientCode;
                //dtBillingClient.BillingOffice = dtBillingClientTemporary[0].BillingOffice;
                dtBillingClient.BranchNameEN = dtBillingClientTemporary[0].BranchNameEN;
                dtBillingClient.BranchNameLC = dtBillingClientTemporary[0].BranchNameLC;
                dtBillingClient.BusinessTypeCode = dtBillingClientTemporary[0].BusinessTypeCode;
                dtBillingClient.BusinessTypeNameEN = dtBillingClientTemporary[0].BusinessTypeNameEN;
                dtBillingClient.BusinessTypeNameJP = dtBillingClientTemporary[0].BusinessTypeNameJP;
                dtBillingClient.BusinessTypeNameLC = dtBillingClientTemporary[0].BusinessTypeNameLC;
                dtBillingClient.CompanyTypeCode = dtBillingClientTemporary[0].CompanyTypeCode;
                dtBillingClient.CompanyTypeNameEN = dtBillingClientTemporary[0].CompanyTypeNameEN;
                dtBillingClient.CompanyTypeNameLC = dtBillingClientTemporary[0].CompanyTypeNameLC;
                dtBillingClient.CreateBy = dtBillingClientTemporary[0].CreateBy;
                dtBillingClient.CreateDate = dtBillingClientTemporary[0].CreateDate;
                dtBillingClient.CustTypeCode = dtBillingClientTemporary[0].CustTypeCode;
                dtBillingClient.CustTypeNameEN = dtBillingClientTemporary[0].CustTypeNameEN;
                dtBillingClient.CustTypeNameJP = dtBillingClientTemporary[0].CustTypeNameJP;
                dtBillingClient.CustTypeNameLC = dtBillingClientTemporary[0].CustTypeNameLC;
                dtBillingClient.FullNameEN = dtBillingClientTemporary[0].FullNameEN;
                dtBillingClient.FullNameLC = dtBillingClientTemporary[0].FullNameLC;
                dtBillingClient.IDNo = dtBillingClientTemporary[0].IDNo;
                dtBillingClient.NameEN = dtBillingClientTemporary[0].NameEN;
                dtBillingClient.NameLC = dtBillingClientTemporary[0].NameLC;
                dtBillingClient.NationalityEN = dtBillingClientTemporary[0].NationalityEN;
                dtBillingClient.NationalityJP = dtBillingClientTemporary[0].NationalityJP;
                dtBillingClient.NationalityLC = dtBillingClientTemporary[0].NationalityLC;
                dtBillingClient.PhoneNo = dtBillingClientTemporary[0].PhoneNo;
                dtBillingClient.RegionCode = dtBillingClientTemporary[0].RegionCode;
                //dtBillingClient.Sequence = dtBillingClientTemporary[0].Sequence;
                dtBillingClient.UpdateBy = dtBillingClientTemporary[0].UpdateBy;
                dtBillingClient.UpdateDate = dtBillingClientTemporary[0].UpdateDate;
                dtBillingClient.BillingOffice = itemTemp.BillingOfficeCode;
                dtBillingClient.Sequence = itemTemp.Sequence;
            }
            return dtBillingClient;
        }

        public ActionResult LoadOptionalData_CTS051()
        {
            ObjectResultData res = new ObjectResultData();

            try
            {
                CTS051_OptionalData item = new CTS051_OptionalData();
                CTS051_ScreenParameter session = GetScreenObject<CTS051_ScreenParameter>();

                item.IsMAContract = session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_MA;

                res.ResultData = item;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult ResetData_CTS051()
        {
            ObjectResultData res = new ObjectResultData();

            try
            {
                CTS051_ScreenParameter session = GetScreenObject<CTS051_ScreenParameter>();
                InitialScreen_CTS051(session.ContractCode);
                session = GetScreenObject<CTS051_ScreenParameter>();
                CTS051_ScreenOutputObject outObj = new CTS051_ScreenOutputObject()
                {
                    AddressFullEN = session.DORentalContractBasicInformation.ContractTargetAddressEN,
                    AddressFullLC = session.DORentalContractBasicInformation.ContractTargetAddressLC,
                    Alphabet = "",
                    ContractCode = session.DORentalContractBasicInformation.ContractCode,
                    ContractCodeShort = session.DORentalContractBasicInformation.ContractCodeShort,
                    CustFullNameEN = session.DORentalContractBasicInformation.ContractTargetNameEN,
                    CustFullNameLC = session.DORentalContractBasicInformation.ContractTargetNameLC,
                    CustomerCode = session.DORentalContractBasicInformation.ContractTargetCustCodeShort,
                    RealCustomerCode = session.DORentalContractBasicInformation.RealCustomerCustCodeShort,
                    DisplayAll = "",
                    SiteAddress = session.DORentalContractBasicInformation.SiteAddressEN,
                    SiteAddressLC = session.DORentalContractBasicInformation.SiteAddressLC,
                    SiteCode = session.DORentalContractBasicInformation.SiteCodeShort,
                    SiteName = session.DORentalContractBasicInformation.SiteNameEN,
                    SiteNameLC = session.DORentalContractBasicInformation.SiteNameLC,
                    InstallationStatus = String.Format("{0}:{1}", session.DORentalContractBasicInformation.InstallationStatusCode, session.DORentalContractBasicInformation.InstallationStatusName),
                    InstallationStatusCode = session.DORentalContractBasicInformation.InstallationStatusCode,
                    OfficeName = String.Format("{0}:{1}", session.DORentalContractBasicInformation.OperationOfficeCode,  session.DORentalContractBasicInformation.OperationOfficeName),
                    EndContractDate = CommonUtil.TextDate(session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractEndDate),
                    ImportantFlag = session.DORentalContractBasicInformation.ContractTargetCustomerImportant.GetValueOrDefault(),
                    UserCode = session.DORentalContractBasicInformation.UserCode,
                    ServiceTypeCode = ServiceType.C_SERVICE_TYPE_RENTAL,
                    TargetCodeType = TargetCodeType.C_TARGET_CODE_TYPE_CONTRACT_CODE,
                    Sequence = "",
                    OCC = session.DSRentalContract.dtTbt_RentalContractBasic[0].LastOCC,
                    QuotationTargetCode = session.DORentalContractBasicInformation.ContractCodeShort,
                    ContractStatus = session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus,
                    ExpectOperationDate = CommonUtil.TextDate(session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ExpectedOperationDate),
                    BillingClientCode = "",
                    BillingOffice = "",
                    EmpName = "",
                    EmpNo = "",
                    NegotiationStaffEmpNo1 = "",
                    PaymentMethod = ""
                };

                res.ResultData = outObj;
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }
        

        #endregion

        #region Validation

        public ActionResult ValidateRetrieve_CTS051(CTS051_DORetrieveData doCTS051RegisterData)
        {
            ObjectResultData res = new ObjectResultData();

            try
            {
                if (ModelState.IsValid == false)
                {
                    ValidatorUtil.BuildErrorMessage(res, this);
                    if (res.IsError)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = false;
                        return Json(res);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

            return Json(res);
        }

        public ActionResult ValidateRetrieveBillingTarget_CTS051(CTS051_DORetrieveBillingTargetData doCTS051RetrieveBillingTarget)
        {
            ObjectResultData res = new ObjectResultData();
            IBillingInterfaceHandler billinginterfacehandler;
            tbt_BillingTarget listBillingTarget = null;
            CommonUtil common;

            try
            {
                common = new CommonUtil();
                billinginterfacehandler = ServiceContainer.GetService<IBillingInterfaceHandler>() as IBillingInterfaceHandler;

                if (ModelState.IsValid == false)
                {
                    ValidatorUtil.BuildErrorMessage(res, this);
                    if (res.IsError)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = false;
                        return Json(res);
                    }
                }

                //listBillingTarget = billinginterfacehandler.GetBillingTarget(common.ConvertBillingTargetCode(doCTS051RetrieveBillingTarget.BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_LONG));
                List<tbt_BillingTarget> dtBillingTargetList = billinginterfacehandler.GetBillingTarget(common.ConvertBillingTargetCode(doCTS051RetrieveBillingTarget.BillingTargetCode, CommonUtil.CONVERT_TYPE.TO_LONG));
                if (dtBillingTargetList != null && dtBillingTargetList.Count > 0)
                    listBillingTarget = dtBillingTargetList[0];
                
                if (listBillingTarget == null)
                {
                    string[] param = {"Billing target code"};
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0011, "Billing target code");
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0011, param, null);
                    return Json(res);
                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult ValidateRetrieveBillingClient_CTS051(CTS051_DORetrieveBillingClientData doCTS051RetrieveBillingClient)
        {
            ObjectResultData res = new ObjectResultData();

            try
            {
                if (ModelState.IsValid == false)
                {
                    ValidatorUtil.BuildErrorMessage(res, this);
                    if (res.IsError)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = false;
                        return Json(res);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

            return Json(res);
        }

        public ActionResult ValidateAddUpdateRequireFieldAfterStart_CTS051(CTS051_DOValidateAddUpdateRequireFieldAfterStartData doValidateAddUpdateRequireFieldAfterStartData)
        {
            ObjectResultData res = new ObjectResultData();

            try
            {              
                if (ModelState.IsValid == false)
                {
                    ValidatorUtil.BuildErrorMessage(res, this);
                    if (res.IsError)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = false;
                        return Json(res);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

            return Json(res);
        }

        public ActionResult ValidateAddUpdateRequireFieldBeforeStart_CTS051(CTS051_DOValidateAddUpdateRequireFieldBeforeStartData doCTS051ValidateAddUpdateRequireFieldBeforeStart)
        {
            ObjectResultData res = new ObjectResultData();

            try
            {
                if (ModelState.IsValid == false)
                {
                    ValidatorUtil.BuildErrorMessage(res, this);
                    if (res.IsError)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = false;
                        return Json(res);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

            return Json(res);
        }

        public ObjectResultData ValidateBusiness_CTS051(CTS051_DOValidateRegisterRequireFieldData doCTS051ValidateRegisterRequireField)
        {
            ObjectResultData res = new ObjectResultData();
            dsRentalContractData dsRentalContract;
            IMasterHandler masterHandler;

            string approveNo1 = "";
            string approveNo2 = "";
            string approveNo3 = "";
            string approveNo4 = "";
            string approveNo5 = "";

            string negotiateStaff1Code = "";
            string negotiateStaff2Code = "";

            //Change plan section
            decimal? changePlanNormalContractFee = 0;
            decimal? changePlanNormalInstallationFee = 0;
            decimal? changePlanNormaldepositFee = 0;
            decimal? changePlanOrderContractFee = 0;           
            decimal? changePlanOrderInstallationFee = 0;
            decimal? changePlanOrderdepositFee = 0;
            decimal? changePlanCompleteInstallationFee = 0;
            decimal? changePlanStartInstallationFee = 0;

            // Billing section
            decimal? billingContractFee = 0;
            decimal? billingCompleteInstallation = 0;
            decimal? billingStartService = 0;
            decimal? billingDeposit = 0;

            int contractDurationMonth = 0;
            int autoRenewMonth = 0;
            int countContractFeeMorethanZero = 0;
            DateTime? endContractDate = null;

            bool notPassContractDurationMonth = false;
            bool notPassAutoRenewMonth = false;
            bool notPassEndContractDate = false;
            bool divideBillingContractFee;
            List<string> listSequenceApproveNo;

            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                dsRentalContract = session.DSRentalContract;
                masterHandler = ServiceContainer.GetService<IMasterHandler>() as IMasterHandler;
                listSequenceApproveNo = new List<string>();
                // Set value ----------------------------------------------------------------------------

                approveNo1 = doCTS051ValidateRegisterRequireField.ApproveNo1;
                approveNo2 = doCTS051ValidateRegisterRequireField.ApproveNo2;
                approveNo3 = doCTS051ValidateRegisterRequireField.ApproveNo3;
                approveNo4 = doCTS051ValidateRegisterRequireField.ApproveNo4;
                approveNo5 = doCTS051ValidateRegisterRequireField.ApproveNo5;

                negotiateStaff1Code = doCTS051ValidateRegisterRequireField.NegotiationStaffEmpNo1;
                negotiateStaff2Code = doCTS051ValidateRegisterRequireField.NegotiationStaffEmpNo2;

                if (doCTS051ValidateRegisterRequireField.ChangePlanNormalContractFee != null)
                    changePlanNormalContractFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanNormalContractFee);
                else
                    changePlanNormalContractFee = 0;

                if (doCTS051ValidateRegisterRequireField.ChangePlanOrderContractFee != null)
                    changePlanOrderContractFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanOrderContractFee);
                else
                    changePlanOrderContractFee = 0;

                if (doCTS051ValidateRegisterRequireField.ChangePlanNormalInstallationFee != null)
                    changePlanNormalInstallationFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanNormalInstallationFee);
                else
                    changePlanNormalInstallationFee = 0;

                if (doCTS051ValidateRegisterRequireField.ChangePlanOrderInstallationFee != null)
                    changePlanOrderInstallationFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanOrderInstallationFee);
                else
                    changePlanOrderInstallationFee = 0;

                if (doCTS051ValidateRegisterRequireField.ChangePlanCompleteInstallationFee != null)
                    changePlanCompleteInstallationFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanCompleteInstallationFee);
                else
                    changePlanCompleteInstallationFee = 0;

                if (doCTS051ValidateRegisterRequireField.ChangePlanStartInstallationFee != null)
                    changePlanStartInstallationFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanStartInstallationFee);
                else
                    changePlanStartInstallationFee = 0;
                
                if (doCTS051ValidateRegisterRequireField.ChangePlanNormalDepositFee != null)
                    changePlanNormaldepositFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanNormalDepositFee);
                else
                    changePlanNormaldepositFee = 0;

                if (doCTS051ValidateRegisterRequireField.ChangePlanOrderDepositFee != null)
                    changePlanOrderdepositFee = decimal.Parse(doCTS051ValidateRegisterRequireField.ChangePlanOrderDepositFee);
                else
                    changePlanOrderdepositFee = 0;

                if (doCTS051ValidateRegisterRequireField.ContractDurationMonth != null)
                    contractDurationMonth = int.Parse(doCTS051ValidateRegisterRequireField.ContractDurationMonth);
                else
                    contractDurationMonth = 0;

                if (doCTS051ValidateRegisterRequireField.AutoRenewMonth != null)
                    autoRenewMonth = int.Parse(doCTS051ValidateRegisterRequireField.AutoRenewMonth);
                else
                    autoRenewMonth = 0;

                divideBillingContractFee = doCTS051ValidateRegisterRequireField.DivideContractFeeBillingFlag;

                if (doCTS051ValidateRegisterRequireField.EndContractDate != null)
                    endContractDate = doCTS051ValidateRegisterRequireField.EndContractDate;               

                // --------------------------------------------------------------------------------------

                // Validate order contract fee 4.1.1
                if (changePlanNormalContractFee > 0 && changePlanOrderContractFee == 0 && (approveNo1 == "" || approveNo1 == null))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3003, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3003, null, null);
                    return res;
                }

                // Validate order contract fee 4.1.2
                if (changePlanNormalContractFee > 0 && changePlanOrderContractFee > 0 && changePlanOrderContractFee <= (10 / 100) * changePlanNormalContractFee && (approveNo1 == "" || approveNo1 == null))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3004, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3004, null, null);
                    return res;
                }

                // Validate order contract fee 4.1.3
                if (changePlanNormalContractFee > 0 && changePlanOrderContractFee > 0 && changePlanOrderContractFee >= (1000 / 100) * changePlanNormalContractFee && (approveNo1 == "" || approveNo1 == null))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3004, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3004, null, null);
                    return res;
                }

                // Validate order contract fee 4.1.4
                if (changePlanNormalContractFee != changePlanOrderContractFee && changePlanOrderContractFee > 0 && (approveNo1 == "" || approveNo1 == null))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3005, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3005, null, null);
                    return res;
                }

                // Validate order contract fee 4.1.5
                if (dsRentalContract.dtTbt_RentalSecurityBasic[0].ChangeType == SECOM_AJIS.Common.Util.ConstantValue.RentalChangeType.C_RENTAL_CHANGE_TYPE_CHANGE_FEE
                 && dsRentalContract.dtTbt_RentalSecurityBasic[0].ReturnToOriginalFeeDate != null
                 && changePlanOrderContractFee != dsRentalContract.dtTbt_RentalSecurityBasic[0].OrderContractFee)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3006, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3006, null, null);
                    return res;
                }

                // Validate installation fee 4.2.1
                if (changePlanNormalInstallationFee != changePlanOrderInstallationFee && (approveNo1 == "" || approveNo1 == null))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3007, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3007, null, null);
                    return res;
                }

                // Validate deposit fee 4.3.1
                if (changePlanNormaldepositFee != changePlanOrderdepositFee && (approveNo1 == "" || approveNo1 == null))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3008, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3008, null, null);
                    return res;
                }

                // Validate negotiation staff 4.4.1
                if ((negotiateStaff1Code != "" && negotiateStaff1Code != null) && masterHandler.GetActiveEmployee(negotiateStaff1Code).Count() == 0)
                {
                    string[] param = { negotiateStaff1Code };
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0012, "");
                    res.ResultData = res.ResultData.ToString().Replace("{0}", negotiateStaff1Code);
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0012, param, null);
                    return res;
                }

                // Validate negotiation staff 4.4.2
                if ((negotiateStaff2Code != "" && negotiateStaff2Code != null) && masterHandler.GetActiveEmployee(negotiateStaff2Code).Count() == 0)
                {
                    string[] param = { negotiateStaff2Code };
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0012, "");
                    res.ResultData = res.ResultData.ToString().Replace("{0}", negotiateStaff2Code);
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0012, param, null);
                    return res;
                }

                listSequenceApproveNo.Add(approveNo1);
                listSequenceApproveNo.Add(approveNo2);
                listSequenceApproveNo.Add(approveNo3);
                listSequenceApproveNo.Add(approveNo4);
                listSequenceApproveNo.Add(approveNo5);
                for (int i = 0; i <= listSequenceApproveNo.Count - 1; i++)
                {
                    if (listSequenceApproveNo[i] != null)
                    {
                        if (listSequenceApproveNo[i].ToString() != "")
                        {
                            if (i != 0)
                            {
                                for (int j = i - 1; j >= 0; j--)
                                {
                                    if (listSequenceApproveNo[j].ToString() == "")
                                    {
                                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3009, "");
                                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3009, null, null);
                                    }
                                }
                            }
                        }
                    }
                }

                foreach (var item in session.ListDTBillingTempChangePlan)
                {
                    if (item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE ||
                    item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE ||
                    item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON ||
                    item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE)
                    {
                        if (item.BillingAmt > 0)
                            countContractFeeMorethanZero += 1;
                    }
                }

                if (changePlanOrderContractFee > 0 &&
                    divideBillingContractFee == true &&
                    countContractFeeMorethanZero <= 1)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3010, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3010, null, null);
                    return res;
                }

                if (changePlanOrderContractFee > 0 &&
                    divideBillingContractFee == true &&
                    countContractFeeMorethanZero > 1)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3011, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3011, null, null);
                    return res;
                }
     
                foreach (var item in session.ListDTBillingTempChangePlan)
                {
                    if (item.Status != "Delete")
                    {
                        if (item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_CONTRACT_FEE ||
                        item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_STOP_FEE ||
                        item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_CON ||
                        item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_MAINTENANCE_FEE_ONE)
                        {
                            billingContractFee += item.BillingAmt;
                        }

                        if (item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        item.BillingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION)
                        {
                            billingCompleteInstallation += item.BillingAmt;
                        }

                        if (item.BillingType == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_INSTALLATION_FEE &&
                        item.BillingTiming == SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE)
                        {
                            billingStartService += item.BillingAmt;
                        }

                        if (item.BillingTiming == SECOM_AJIS.Common.Util.ConstantValue.ContractBillingType.C_CONTRACT_BILLING_TYPE_DEPOSIT_FEE)
                        {
                            billingDeposit += item.BillingAmt;
                        }
                    }
                }

                if (billingContractFee != changePlanOrderContractFee)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3012, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3012, null, null);
                    return res;
                }

                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    if (billingCompleteInstallation != changePlanCompleteInstallationFee)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3027, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3027, null, null);
                        return res;
                    }
                }

                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_AFTER_START)
                {
                    if (billingCompleteInstallation != changePlanCompleteInstallationFee)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3027, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3027, null, null);
                        return res;
                    }
                }

                if (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_BEF_START)
                {
                    if (billingStartService != changePlanStartInstallationFee)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3028, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3028, null, null);
                        return res;
                    }
                }

                if (billingDeposit != changePlanNormaldepositFee)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3014, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3014, null, null);
                    return res;
                }
                      
                if (contractDurationMonth != 0)
                    notPassContractDurationMonth = true;

                if (autoRenewMonth != 0)
                    notPassAutoRenewMonth = true;

                if (endContractDate != null)
                    notPassEndContractDate = true;

                if (notPassContractDurationMonth == true && notPassAutoRenewMonth == false)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3033, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3033, null, null);
                    return res;
                }

                if (notPassContractDurationMonth == true && notPassEndContractDate == true)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3034, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3034, null, null);
                    return res;
                }

                if (notPassContractDurationMonth == false && notPassEndContractDate == false)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3035, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3035, null, null);
                    return res;
                }

                if (approveNo1 == "" || approveNo1 == null)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3079, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3079, null, null);
                    return res;
                }

                //if (endContractDate <= DateTime.Now)
                //{
                //    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3080, "");
                //    return res;
                //}

                if (contractDurationMonth < 36 && (approveNo1 == "" || approveNo1 == null))
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3081, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3081, null, null);
                    return res;		 
                }

                if (autoRenewMonth < 12)
                {
                    res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3082, "");
                    res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3082, null, null);
                    return res;		 
                }

                ValidateBusinessForWarning_CTS051();

                //-	dsRentalContract
                //-	dtTbt_BillingTemp
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].NormalContractFee = changePlanNormalContractFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OrderContractFee = changePlanOrderContractFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].NormalInstallFee = changePlanNormalInstallationFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee = changePlanOrderInstallationFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_CompleteInstall = changePlanCompleteInstallationFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OrderInstallFee_StartService = changePlanStartInstallationFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].NormalAdditionalDepositFee = changePlanNormaldepositFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].OrderAdditionalDepositFee = changePlanOrderdepositFee;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].DepositFeeBillingTiming = doCTS051ValidateRegisterRequireField.BillingTimingType;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].NegotiationStaffEmpNo1 = doCTS051ValidateRegisterRequireField.NegotiationStaffEmpNo1;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].NegotiationStaffEmpNo2 = doCTS051ValidateRegisterRequireField.NegotiationStaffEmpNo2;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ApproveNo1 = doCTS051ValidateRegisterRequireField.ApproveNo1;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ApproveNo2 = doCTS051ValidateRegisterRequireField.ApproveNo2;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ApproveNo3 = doCTS051ValidateRegisterRequireField.ApproveNo3;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ApproveNo4 = doCTS051ValidateRegisterRequireField.ApproveNo4;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ApproveNo5 = doCTS051ValidateRegisterRequireField.ApproveNo5;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractDurationMonth = contractDurationMonth;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].AutoRenewMonth = autoRenewMonth;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ContractEndDate = endContractDate;
                session.DSRentalContract.dtTbt_RentalSecurityBasic[0].ExpectedOperationDate = doCTS051ValidateRegisterRequireField.ExpectedOperationDate;

            }
            catch (Exception)
            {
                throw;
            }

            return null;
        }

        public ActionResult ValidateBusinessForWarning_CTS051()
        {
            ObjectResultData res = new ObjectResultData();
            CTS051_ScreenParameter session;

            try
            {
                session = CTS051_GetImportData();
                if (session.ListDOChangePlanAndBillingTargetGrid.Count != 0)
                {
                    if (session.ListDOChangePlanAndBillingTargetGrid[0].ExpectOperationDate < DateTime.Now)
                    {
                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3015, "");
                        res.AddErrorMessage(MessageUtil.MODULE_CONTRACT, MessageUtil.MessageList.MSG3015, null, null);
                        return Json(res);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

            return Json(res);
        }

        public ActionResult ValidateRegister_CTS051(CTS051_DOValidateRegisterRequireFieldData doCTS051ValidateRegisterRequireField)
        {
            ObjectResultData res = new ObjectResultData();

            try
            {
                string additionError = "";
                List<string> additionControls = new List<string>();
                CTS051_ScreenParameter session = GetScreenObject<CTS051_ScreenParameter>();
                if ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode != ProductType.C_PROD_TYPE_MA)
                    && ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode != ProductType.C_PROD_TYPE_SG)
                    || (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode != ProductType.C_PROD_TYPE_BE)))
                {
                    if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanNormalInstallationFee))
                    {
                        if (additionError.Length > 0)
                        {
                            additionError += ", ";
                        }

                        additionError += "Normal installation fee after change";
                        additionControls.Add("ChangePlanNormalContractFee");
                        //res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0007
                        //    , new string[] { "Normal installation fee after change" }, null);
                    }

                    if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanNormalDepositFee))
                    {
                        if (additionError.Length > 0)
                        {
                            additionError += ", ";
                        }

                        additionError += "Normal additional billing deposit fee";
                        additionControls.Add("ChangePlanNormalDepositFee");
                        //res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0007
                        //    , new string[] { "Normal additional billing deposit fee" }, null);
                    }

                    if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanOrderInstallationFee))
                    {
                        if (additionError.Length > 0)
                        {
                            additionError += ", ";
                        }

                        additionError += "Order installation fee after change";
                        additionControls.Add("ChangePlanOrderInstallationFee");
                        //res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0007
                        //    , new string[] { "Order installation fee after change" }, null);
                    }

                    if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanOrderDepositFee))
                    {
                        if (additionError.Length > 0)
                        {
                            additionError += ", ";
                        }

                        additionError += "Order additional billing deposit fee";
                        additionControls.Add("ChangePlanOrderDepositFee");
                        //res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0007
                        //    , new string[] { "Order additional billing deposit fee" }, null);
                    }

                    if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanCompleteInstallationFee))
                    {
                        if (additionError.Length > 0)
                        {
                            additionError += ", ";
                        }

                        additionError += "Complete installation fee after change";
                        additionControls.Add("ChangePlanCompleteInstallationFee");
                        //res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0007
                        //    , new string[] { "Complete installation fee after change" }, null);
                    }

                    if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanStartInstallationFee))
                    {
                        if (additionError.Length > 0)
                        {
                            additionError += ", ";
                        }

                        additionError += "Start service installation fee after change";
                        additionControls.Add("ChangePlanStartInstallationFee");
                        //res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0007
                        //    , new string[] { "Start service installation fee after change" }, null);
                    }
                }

                // Validate Other

                if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanNormalContractFee))
                {
                    additionError += "Normal contract fee after change";
                    additionControls.Add("ChangePlanNormalContractFee");
                }

                if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.ChangePlanOrderContractFee))
                {
                    if (additionError.Length > 0)
                    {
                        additionError += ", ";
                    }

                    additionError += "Order contract fee after change";
                    additionControls.Add("ChangePlanOrderContractFee");
                }

                if (((session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_AL)
                    && ((session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_BEF_START) || (session.DSRentalContract.dtTbt_RentalContractBasic[0].ContractStatus == ContractStatus.C_CONTRACT_STATUS_AFTER_START)))
                    || (session.DSRentalContract.dtTbt_RentalContractBasic[0].ProductTypeCode == ProductType.C_PROD_TYPE_ONLINE))
                {
                    if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.BillingTimingType))
                    {
                        if (additionError.Length > 0)
                        {
                            additionError += ", ";
                        }

                        additionError += "Billing timing type";
                        additionControls.Add("BillingTimingType");
                    }
                }

                if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.NegotiationStaffEmpNo1))
                {
                    if (additionError.Length > 0)
                    {
                        additionError += ", ";
                    }

                    additionError += "Negotiation staff 1";
                    additionControls.Add("NegotiationStaffEmpNo1");
                }

                //if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.BillingContractFeeDetail))
                //{
                //    if (additionError.Length > 0)
                //    {
                //        additionError += ", ";
                //    }

                //    additionError += "Billing contract amount";
                //    additionControls.Add("ChangePlanStartInstallationFee");
                //}

                //if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.BillingDepositFee))
                //{
                //    if (additionError.Length > 0)
                //    {
                //        additionError += ", ";
                //    }

                //    additionError += "Billing deposit amount";
                //    additionControls.Add("ChangePlanStartInstallationFee");
                //}

                //if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.BillingCompleteInstallationFee))
                //{
                //    if (additionError.Length > 0)
                //    {
                //        additionError += ", ";
                //    }

                //    additionError += "Billing installation complete amount";
                //    additionControls.Add("ChangePlanStartInstallationFee");
                //}

                //if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.BillingStartInstallationFee))
                //{
                //    if (additionError.Length > 0)
                //    {
                //        additionError += ", ";
                //    }

                //    additionError += "Billing installation start service amount";
                //    additionControls.Add("ChangePlanStartInstallationFee");
                //}

                //if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.PayMethodCompleteFee))
                //{
                //    if (additionError.Length > 0)
                //    {
                //        additionError += ", ";
                //    }

                //    additionError += "Payment method complete installation";
                //    additionControls.Add("ChangePlanStartInstallationFee");
                //}

                //if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.PayMethodStartServiceFee))
                //{
                //    if (additionError.Length > 0)
                //    {
                //        additionError += ", ";
                //    }

                //    additionError += "Payment method start service";
                //    additionControls.Add("ChangePlanStartInstallationFee");
                //}

                //if (String.IsNullOrEmpty(doCTS051ValidateRegisterRequireField.PayMethodDepositFee))
                //{
                //    if (additionError.Length > 0)
                //    {
                //        additionError += ", ";
                //    }

                //    additionError += "Payment method deposit fee";
                //    additionControls.Add("ChangePlanStartInstallationFee");
                //}

                if (ModelState.IsValid == false)
                {
                    ValidatorUtil.BuildErrorMessage(res, this);
                    if (res.IsError)
                    {
                        if (additionError.Length > 0)
                        {
                            res.Message.Message.Replace(": ", ": " + additionError);
                            res.Message.Controls = res.Message.Controls.Concat(additionControls.ToArray()).ToArray();
                        }

                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = false;
                        return Json(res);
                    }
                }
                else
                {
                    if (additionError.Length > 0)
                    {
                        res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0007
                        , new string[] { additionError }, additionControls.ToArray());

                        res.MessageType = MessageModel.MESSAGE_TYPE.WARNING;
                        res.ResultData = false;
                        return Json(res);
                    }
                }
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }

        public ActionResult ValidateConfirm_CTS051(CTS051_DOValidateRegisterRequireFieldData doCTS051ValidateRegisterRequireField)
        {
            ObjectResultData res = new ObjectResultData();
            ObjectResultData resBusiness = new ObjectResultData();
            ICommonHandler commomHandler;

            try
            {
                commomHandler = ServiceContainer.GetService<ICommonHandler>() as ICommonHandler;

                //16.1.1
                if (commomHandler.IsSystemSuspending())
                {                    
                    res.ResultData = MessageUtil.GetMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0049, "");
                    res.AddErrorMessage(MessageUtil.MODULE_COMMON, MessageUtil.MessageList.MSG0049);
                }

                //16.2.2
                resBusiness = ValidateBusiness_CTS051(doCTS051ValidateRegisterRequireField);
                if (resBusiness != null)
                    return Json(resBusiness);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        } 

        #endregion

        #region Session

        private CTS051_ScreenParameter CTS051_GetImportData(string key = null)
        {
            try
            {
                return GetScreenObject<CTS051_ScreenParameter>(key);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CTS051_SetImportData(CTS051_ScreenParameter import, string key = null)
        {
            try
            {
                UpdateScreenObject(import, key);
            }
            catch (Exception)
            {
                throw;
            }

        }

        public ActionResult CTS051_ClearSession()
        {
            ObjectResultData res = new ObjectResultData();
            try
            {
                UpdateScreenObject(null);
            }
            catch (Exception ex)
            {
                res.AddErrorMessage(ex);
            }

            return Json(res);
        }
        
        #endregion
    }
}

//สร้างไว้เพราะตอนนี้ Billing Target Table ยังไม่สมบูรณ์นะครับก้อจะจำลองดาต้าไว้ก่อน
//namespace SECOM_AJIS.TemporaryBilling
//{
//    //public class BillingTempTable
//    //{
//    //    public List<dtBillingTempChangePlanData> GetBillingTempForEditing()
//    //    {
//    //        List<dtBillingTempChangePlanData> listBillingTemp = new List<dtBillingTempChangePlanData>();

//    //        dtBillingTempChangePlanData bt1 = new dtBillingTempChangePlanData();
//    //        bt1.ContractCode = "N0000000002";
//    //        bt1.OCC = "0001";
//    //        bt1.SequenceNo = 1;
//    //        bt1.BillingOCC = "001";
//    //        bt1.BillingClientCode = "0000000001";
//    //        bt1.BillingOfficeCode = "0001";
//    //        bt1.BillingTargetCode = "4567890-123";
//    //        bt1.BillingAmt = 2000;
//    //        bt1.PayMethod = "2";
//    //        bt1.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_CONTRACT_FEE;
//    //        bt1.UpdateBy = "1";
//    //        bt1.UpdateDate = DateTime.Now;
//    //        bt1.CreateBy = "1";
//    //        bt1.CreateDate = DateTime.Now;

//    //        dtBillingTempChangePlanData bt2 = new dtBillingTempChangePlanData();
//    //        bt2.ContractCode = "N0000000002";
//    //        bt2.OCC = "0001";
//    //        bt2.SequenceNo = 1;
//    //        bt2.BillingOCC = "001";
//    //        bt2.BillingClientCode = "0000000001";
//    //        bt2.BillingOfficeCode = "0001";
//    //        bt2.BillingTargetCode = "4567890-123";
//    //        bt2.BillingAmt = 3000;
//    //        bt2.PayMethod = "1";
//    //        bt2.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_INSTALLATION_FEE;
//    //        bt2.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_APPROVE_CONTRACT;
//    //        bt2.UpdateBy = "1";
//    //        bt2.UpdateDate = DateTime.Now;
//    //        bt2.CreateBy = "1";
//    //        bt2.CreateDate = DateTime.Now;

//    //        dtBillingTempChangePlanData bt3 = new dtBillingTempChangePlanData();
//    //        bt3.ContractCode = "N0000000002";
//    //        bt3.OCC = "0001";
//    //        bt3.SequenceNo = 1;
//    //        bt3.BillingOCC = "001";
//    //        bt3.BillingClientCode = "0000000001";
//    //        bt3.BillingOfficeCode = "0001";
//    //        bt3.BillingTargetCode = "4567890-123";
//    //        bt3.BillingAmt = 4000;
//    //        bt3.PayMethod = "2";
//    //        bt3.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_INSTALLATION_FEE;
//    //        bt3.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;
//    //        bt3.UpdateBy = "1";
//    //        bt3.UpdateDate = DateTime.Now;
//    //        bt3.CreateBy = "1";
//    //        bt3.CreateDate = DateTime.Now;

//    //        dtBillingTempChangePlanData bt4 = new dtBillingTempChangePlanData();
//    //        bt4.ContractCode = "N0000000002";
//    //        bt4.OCC = "0001";
//    //        bt4.SequenceNo = 1;
//    //        bt4.BillingOCC = "001";
//    //        bt4.BillingClientCode = "0000000001";
//    //        bt4.BillingOfficeCode = "0001";
//    //        bt4.BillingTargetCode = "4567890-123";
//    //        bt4.BillingAmt = 5000;
//    //        bt4.PayMethod = "3";
//    //        bt4.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_INSTALLATION_FEE;
//    //        bt4.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_START_SERVICE;
//    //        bt4.UpdateBy = "1";
//    //        bt4.UpdateDate = DateTime.Now;
//    //        bt4.CreateBy = "1";
//    //        bt4.CreateDate = DateTime.Now;

//    //        dtBillingTempChangePlanData bt8 = new dtBillingTempChangePlanData();
//    //        bt8.ContractCode = "N0000000002";
//    //        bt8.OCC = "0001";
//    //        bt8.SequenceNo = 1;
//    //        bt8.BillingOCC = "001";
//    //        bt8.BillingClientCode = "0000000001";
//    //        bt8.BillingOfficeCode = "0001";
//    //        bt8.BillingTargetCode = "4567890-123";
//    //        bt8.BillingAmt = 2000;
//    //        bt8.PayMethod = "2";
//    //        //bt8.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_START_FEE;

//    //        dtBillingTempChangePlanData bt9 = new dtBillingTempChangePlanData();
//    //        bt9.ContractCode = "N0000000002";
//    //        bt9.OCC = "0001";
//    //        bt9.SequenceNo = 1;
//    //        bt9.BillingOCC = "001";
//    //        bt9.BillingClientCode = "0000000001";
//    //        bt9.BillingOfficeCode = "0001";
//    //        bt9.BillingTargetCode = "4567890-123";
//    //        bt9.BillingAmt = 4000;
//    //        bt9.PayMethod = "2";
//    //        bt9.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_DEPOSIT_FEE;

//    //        //-----------------------------------------------

//    //        dtBillingTempChangePlanData bt5 = new dtBillingTempChangePlanData();
//    //        bt5.ContractCode = "N0000000002";
//    //        bt5.SequenceNo = 1;
//    //        bt5.OCC = "0001";
//    //        bt5.BillingOCC = "";
//    //        bt5.BillingClientCode = "0000000002";
//    //        bt5.BillingOfficeCode = "1000";
//    //        bt5.BillingTargetCode = "";
//    //        bt5.BillingAmt = 6000;
//    //        bt5.PayMethod = "3";
//    //        bt5.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_INSTALLATION_FEE;
//    //        bt5.BillingTiming = SECOM_AJIS.Common.Util.ConstantValue.BillingTiming.C_BILLING_TIMING_COMPLETE_INSTALLATION;

//    //        dtBillingTempChangePlanData bt6 = new dtBillingTempChangePlanData();
//    //        bt6.ContractCode = "N0000000002";
//    //        bt6.OCC = "0001";
//    //        bt6.SequenceNo = 1;
//    //        bt6.BillingOCC = "";
//    //        bt6.BillingClientCode = "0000000002";
//    //        bt6.BillingOfficeCode = "1000";
//    //        bt6.BillingTargetCode = "";
//    //        bt6.BillingAmt = 2300;
//    //        bt6.PayMethod = "3";
//    //        bt6.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_CONTRACT_FEE;

//    //        dtBillingTempChangePlanData bt7 = new dtBillingTempChangePlanData();
//    //        bt7.ContractCode = "N0000000002";
//    //        bt7.OCC = "0001";
//    //        bt7.SequenceNo = 1;
//    //        bt7.BillingOCC = "";
//    //        bt7.BillingClientCode = "0000000002";
//    //        bt7.BillingOfficeCode = "1000";
//    //        bt7.BillingTargetCode = "";
//    //        bt7.BillingAmt = 1500;
//    //        bt7.PayMethod = "3";
//    //        bt7.BillingType = SECOM_AJIS.Common.Util.ConstantValue.BillingType.C_BILLING_TYPE_DEPOSIT_FEE;

//    //        listBillingTemp.Add(bt1);
//    //        listBillingTemp.Add(bt2);
//    //        listBillingTemp.Add(bt3);
//    //        listBillingTemp.Add(bt4);
//    //        listBillingTemp.Add(bt5);
//    //        listBillingTemp.Add(bt6);
//    //        listBillingTemp.Add(bt7);
//    //        listBillingTemp.Add(bt8);
//    //        listBillingTemp.Add(bt9);

//    //        return listBillingTemp;
//    //    }

//    //    public string BillingOCC { get; set; }
//    //    public string BillingClientCode { get; set; }
//    //    public string BillingOfficeCode { get; set; }
//    //    public string BillingTargetCode { get; set; }
//    //    public string BillingTargetName { get; set; }
//    //    public string BillingAmt { get; set; }
//    //    public string BillingType { get; set; }
//    //    public string BillingTiming { get; set; }
//    //}

//    public class BillingTarget
//    {
//        public BillingTarget GetBillingTarget(string billingTargetCode)
//        {
//            BillingTarget listBillingTarget = new BillingTarget();
//            if (billingTargetCode == "0004567893-123")
//            {
//                BillingTarget b1 = new BillingTarget();
//                b1.BillingTargetCode = "0004567893-123";
//                b1.FullNameLC = "บริษัท ซีเอสไอ ประเทศไทย จำกัด";
//                b1.FullNameEN = "CSI THAILAND";
//                b1.BillingClientCode = "0000000004";
//                b1.BranchNameEN = "Silom Office";
//                b1.AddressEN = "Silom complex building floor 28";
//                b1.NameLC = "ซีเอสไอ เอเชีย";
//                b1.BranchNameLC = "สีลม ออฟฟิศ";
//                b1.AddressLC = "ชั้น 28 อาคารสีลมคอมเพล็ก ถนนสีลม เขตบางรัก กรุงเทพ";
//                b1.NationalityEN = "Thai";
//                b1.PhoneNo = "123456789";
//                b1.BusinessTypeNameEN = "";
//                b1.IDNo = "";
//                b1.BillingOffice = "CCC";

//                return b1;
//            }

//            if (billingTargetCode == "0004567894-123")
//            {
//                BillingTarget b1 = new BillingTarget();
//                b1.BillingTargetCode = "0004567894-123";
//                b1.FullNameLC = "CSI ASIA";
//                b1.FullNameEN = "CSI ASIA";
//                b1.BillingClientCode = "0000000001";
//                b1.BranchNameEN = "ASOK Office";
//                b1.AddressEN = "Silom complex building floor 28";
//                b1.NameLC = "ซีเอสไอ เอเชีย";
//                b1.BranchNameLC = "สีลม ออฟฟิศ";
//                b1.AddressLC = "ชั้น 28 อาคารสีลมคอมเพล็ก ถนนสีลม เขตบางรัก กรุงเทพ";
//                b1.NationalityEN = "Thai";
//                b1.PhoneNo = "123456789";
//                b1.BusinessTypeNameEN = "";
//                b1.IDNo = "";
//                b1.BillingOffice = "CCC";

//                return b1;
//            }

//            if (billingTargetCode == "0004567895-123")
//            {
//                BillingTarget b1 = new BillingTarget();
//                b1.BillingTargetCode = "0004567894-123";
//                b1.FullNameLC = "CSI ASIA";
//                b1.FullNameEN = "CSI ASIA";
//                b1.BillingClientCode = "0000000001";
//                b1.BranchNameEN = "ASOK Office";
//                b1.AddressEN = "Silom complex building floor 28";
//                b1.NameLC = "ซีเอสไอ เอเชีย";
//                b1.BranchNameLC = "สีลม ออฟฟิศ";
//                b1.AddressLC = "ชั้น 28 อาคารสีลมคอมเพล็ก ถนนสีลม เขตบางรัก กรุงเทพ";
//                b1.NationalityEN = "Thai";
//                b1.PhoneNo = "123456789";
//                b1.BusinessTypeNameEN = "";
//                b1.IDNo = "";
//                b1.BillingOffice = "CCC";

//                return b1;
//            }

//            return null;
//        }

//        public string BillingTargetCode { get; set; }
//        public string FullNameLC { get; set; }
//        public string FullNameEN { get; set; }
//        public string BillingClientCode { get; set; }
//        public string BranchNameEN { get; set; }
//        public string AddressEN { get; set; }
//        public string NameLC { get; set; }
//        public string BranchNameLC { get; set; }
//        public string AddressLC { get; set; }
//        public string NationalityEN { get; set; }
//        public string PhoneNo { get; set; }
//        public string BusinessTypeNameEN { get; set; }
//        public string IDNo { get; set; }
//        public string BillingOffice { get; set; }
//    }
//}